import React, { ReactNode } from 'react';
import DyteClient from '@dytesdk/web-core';
type Listener = () => void;
declare class DyteUpdates {
    private meeting;
    private l;
    constructor(meeting: DyteClient);
    clean(): void;
    addListener(listener: Listener): void;
    removeListener(listener: Listener): void;
    private onUpdate;
}
export declare const DyteContext: React.Context<{
    meeting: DyteClient | undefined;
    updates: DyteUpdates | undefined;
}>;
/**
 * Provider component which makes the DyteClient object
 * available to nested components
 * @component
 * @param value The DyteClient instance from `useDyteClient()`
 * @param fallback Any fallback UI you want to render until the instance initialises.
 */
export declare function DyteProvider({ value, children, fallback, }: {
    value: DyteClient | undefined;
    children: ReactNode;
    fallback?: ReactNode;
}): JSX.Element;
/**
 * Hook which returns the reference to the DyteClient object
 * @returns meeting instance from `useDyteClient()`
 */
export declare const useDyteMeeting: () => {
    meeting: DyteClient;
};
export {};
