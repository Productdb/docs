import { UIConfig } from '../../exports';
import { UIRoot, StyleProps } from '../../types/ui-config/root';
declare type UIElem = UIRoot['string'];
declare type KeyValuePair = {
  [key: string]: string;
};
export declare class UIElemEditor {
  private elem;
  private config;
  private keyString;
  constructor(elem: UIElem, config: UIConfig, keyString: string);
  /**
   * Adds an element to the chilren
   * @param el :Name of the element - `dyte-mic-toggle`
   * @param props :Optional props for the element `{variant: 'solid'}`
   */
  add(el: string, props?: KeyValuePair): this;
  /**
   * Removes an element from the chilren
   * @param el :Name of the element to remove - `dyte-mic-toggle`
   */
  remove(el: string): this;
  set style(s: StyleProps);
  setChildrenProps(childElem: string, props: KeyValuePair): void;
  getChildrenProps(childElem: string): KeyValuePair;
  replace(e: HTMLElement): void;
}
export declare class DyteUIBuilder {
  private config;
  constructor(config?: UIConfig);
  /**
   * Find an element anywhere in the Dyte hierarachy and returns an editor object
   * @param elem = 'dyte-participant-tile'
   * @param states = { activeSidebar: true, activeSettings: true, meeting: 'joined'}
   * @returns `UIElemEditor`
   */
  find(elem: string, states?: {
    [key: string]: string | boolean;
  }): UIElemEditor | undefined;
  build(): UIConfig;
}
export {};
