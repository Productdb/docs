import type { TextMessage } from '@dytesdk/web-core';
import { EventEmitter } from '../../stencil-public-runtime';
import { IconPack } from '../../lib/icons';
import { DyteI18n } from '../../lib/lang';
import { Meeting } from '../../types/dyte-client';
import { ChatChannel, Size } from '../../types/props';
export declare class DyteChatMessagesUiPaginated {
  private $paginatedListRef;
  host: HTMLDyteChatMessagesUiPaginatedElement;
  /** Meeting object */
  meeting: Meeting;
  /**
   * Selected channel
   */
  selectedChannel?: ChatChannel;
  /**
   * Selected channel id
   */
  selectedChannelId?: string;
  /** Size */
  size: Size;
  /** Icon pack */
  iconPack: IconPack;
  /** Language */
  t: DyteI18n;
  /** Event for editing a message */
  editMessageInit: EventEmitter<{
    payload: TextMessage;
    flags: {
      isReply?: boolean;
      isEdit?: boolean;
    };
  }>;
  children: Element;
  /** Whether to align chat bubbles to the left */
  leftAlign: boolean;
  private pageSize;
  private lastReadMessageIndex;
  componentDidLoad(): void;
  private hasChildren;
  connectedCallback(): void;
  disconnectedCallback(): void;
  meetingChanged(meeting: Meeting, oldMeeting?: Meeting): void;
  channelChanged(): void;
  private maybeMarkChannelAsRead;
  private getChatMessages;
  private createChatNodes;
  private disconnectMeeting;
  private createChatNode;
  private chatUpdateListener;
  render(): any;
}
