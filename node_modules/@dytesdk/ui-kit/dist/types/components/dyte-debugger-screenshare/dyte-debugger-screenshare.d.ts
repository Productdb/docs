import { EventEmitter } from '../../stencil-public-runtime';
import { States, Size, IconPack, DyteI18n } from '../../exports';
import { MediaPermission, Meeting } from '../../types/dyte-client';
import { MicMetadata } from '@dytesdk/web-core';
interface AudioTrackStats {
  lowVolume: boolean;
  clip: boolean;
  volume: number;
  timestamp: number;
  silence: boolean;
}
interface VideoTrackStats {
  isBlackFrame: boolean;
  isFrozenFrame: boolean;
  timestamp: number;
  videoScore: number;
}
declare type CameraMetadata = {
  label?: string;
  resolution?: number[];
};
export declare class DyteDebuggerAudio {
  private lowVolCount;
  private silenceCount;
  private frozenFramesCount;
  private blackFramesCount;
  /** Meeting object */
  meeting: Meeting;
  /** States object */
  states: States;
  /** Size */
  size: Size;
  /** Icon pack */
  iconPack: IconPack;
  /** Language */
  t: DyteI18n;
  /** Test Progress Event */
  testProgress: EventEmitter<number>;
  activeTab: 'Troubleshoot' | 'Report' | 'none';
  stage: number;
  mediaPermission: MediaPermission;
  screenshareEnabled: boolean;
  audioTrackMetadata: MicMetadata;
  videoTrackMetadata: CameraMetadata;
  screenshareTest: boolean;
  audioTrackStats: AudioTrackStats;
  videoTrackStats: VideoTrackStats;
  connectedCallback(): void;
  disconnectedCallback(): void;
  meetingChanged(meeting: Meeting): Promise<void>;
  private mediaPermissionUpdateListener;
  private screenShareUpdateListener;
  private audioTrackUpdateListener;
  private videoTrackUpdateListener;
  private toggleScreenshareTest;
  private setActiveTab;
  private changeStage;
  private updateProgress;
  private getDeviceInformationStatus;
  private getAudioAnalysisStatus;
  private getVideoAnalysisStatus;
  private formatLabel;
  private nullToStr;
  private normalizeVolume;
  private normalizeVideoScore;
  private detectLowVolume;
  private detectSilence;
  render(): any;
}
export {};
