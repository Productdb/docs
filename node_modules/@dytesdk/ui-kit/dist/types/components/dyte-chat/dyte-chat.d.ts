import { EventEmitter } from '../../stencil-public-runtime';
import { Meeting, Peer } from '../../types/dyte-client';
import { Chat, ChatChannel, Size } from '../../types/props';
import { IconPack } from '../../lib/icons';
import type { TextMessage } from '@dytesdk/web-core';
import { DyteI18n } from '../../lib/lang';
import { States, UIConfig } from '../../exports';
/**
 * Fully featured chat component with image & file upload, emoji picker and auto-scroll.
 */
export declare class DyteChat {
  private chatUpdateListener;
  private chatPermissionUpdateListener;
  host: HTMLDyteChatElement;
  /** Meeting object */
  meeting: Meeting;
  /** Config */
  config: UIConfig;
  /** Size */
  size: Size;
  /** Icon pack */
  iconPack: IconPack;
  /** Language */
  t: DyteI18n;
  /** disables private chat */
  disablePrivateChat: boolean;
  /** Can current user pin/unpin messages */
  canPinMessages: boolean;
  /**
   * @deprecated
   * Beta API, will change in future
   * List of target presets allowed as private chat recipient
   */
  privatePresetFilter: String[];
  unreadCountGroups: Record<string, number>;
  chatGroups: Record<string, Chat[]>;
  selectedGroup: string;
  now: Date;
  dropzoneActivated: boolean;
  showLatestMessageButton: boolean;
  canSend: boolean;
  canSendTextMessage: boolean;
  canSendFiles: boolean;
  canPrivateMessage: boolean;
  canSendPrivateTexts: boolean;
  canSendPrivateFiles: boolean;
  emojiPickerEnabled: boolean;
  chatRecipientId: string;
  participants: Peer[];
  selectedParticipant: Peer;
  channels: ChatChannel[];
  selectedChannelId: string;
  editingMessage: TextMessage | null;
  replyMessage: TextMessage | null;
  searchQuery: string;
  selectorState: 'desktop' | 'hide' | 'mobile';
  creatingChannel: boolean;
  showPinnedMessages: boolean;
  /** Emits updated state data */
  stateUpdate: EventEmitter<States>;
  private channelMap;
  private isChatViewType;
  private resizeObserver;
  private onDragOver;
  private onDragLeave;
  private onDrop;
  connectedCallback(): void;
  onEditMessageInit(event: CustomEvent<{
    payload: TextMessage;
    flags: {
      isReply?: boolean;
      isEdit?: boolean;
    };
  }>): void;
  private disconnectMeeting;
  disconnectedCallback(): void;
  meetingChanged(meeting: Meeting, oldMeeting?: Meeting): void;
  private onParticipantUpdate;
  private usePaginatedChat;
  chatGroupsChanged(chatGroups: Record<string, Chat[]>): void;
  private updateUnreadCountGroups;
  private initializeChatGroups;
  private addToChatGroup;
  private getRecipientPeerIds;
  private isPrivateChatSupported;
  private updateRecipients;
  private isTextMessagingAllowed;
  private isFileMessagingAllowed;
  channelSwitchListener(e: CustomEvent): void;
  private onChannelChanged;
  private createDMChannel;
  private cleanup;
  private onQuotedMessageDismiss;
  private onChannelCreateOrUpdate;
  private getMemberDisplayName;
  private onNewMessageHandler;
  private onEditMessageHandler;
  private onEditCancel;
  private onSearchHandler;
  private onSearchDismissed;
  private onChannelCreateClicked;
  private onPinMessage;
  private renderHeadlessComponents;
  private renderComposerUI;
  private renderFullChat;
  private getChannelItems;
  private getPrivateChatRecipients;
  private onTogglePinnedMessages;
  private renderPinnedMessagesHeader;
  render(): any;
}
