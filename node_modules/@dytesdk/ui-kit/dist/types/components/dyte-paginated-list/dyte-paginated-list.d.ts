import { VNode } from '../../stencil-public-runtime';
import { IconPack } from '../../lib/icons';
import { DyteI18n } from '../../lib/lang';
export interface DataNode {
  id: string;
  [key: string]: any;
}
export declare class DytePaginatedList {
  private intersectionObserver;
  private $paginatedList;
  private $topRef;
  private $bottomRef;
  /** Page Size */
  pageSize: number;
  /**
   * Number of pages allowed to be shown
   */
  pagesAllowed: number;
  /** Fetch the data */
  fetchData: (timestamp: number, size: number, reversed: boolean) => Promise<unknown[]>;
  /** Create nodes */
  createNodes: (data: unknown[]) => VNode[];
  /** Item id */
  selectedItemId?: string;
  /** auto scroll list to bottom */
  autoScroll: boolean;
  /** Icon pack */
  iconPack: IconPack;
  /** Language */
  t: DyteI18n;
  /** label to show when empty */
  emptyListLabel: string;
  isLoading: boolean;
  rerenderBoolean: boolean;
  /**
   * This gets disabled when the user scrolls up and the bottom node
   * is not visible anymore.
   */
  shouldRenderNewNodes: boolean;
  /**
   * This gets disabled when the user scrolls up and the bottom node
   * is not visible anymore.
   */
  hasNewNodesToRender: boolean;
  showEmptyListLabel: boolean;
  /**
   * This is a private variable not a state
   * since we want to debounce rerenders
   *
   * A list of pages where each page contains a number of Nodes
   * [
   *  [Node 1, Node 2, Node 3.... Node N],
   *  [Node 1, Node 2, Node 3.... Node N],
   * ]
   */
  private pagesToRender;
  /**
   * On a new node created
   */
  onNewNode(node: DataNode): Promise<void>;
  /**
   * On node deleted
   */
  onNodeDelete(key: string): Promise<void>;
  /**
   * On node updated
   */
  onNodeUpdate(key: string, newItem: DataNode): Promise<void>;
  onItemChanged(newItemId: string, oldItemId: string): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentDidLoad(): void;
  componentDidRender(): void;
  private currentTime;
  private observe;
  private loadFirstPage;
  private loadTop;
  private loadBottom;
  private addNodeToRender;
  /**
   * @param start
   * @param end
   * @param reversed Defines whether to add the page at the beginning or the end
   * @param onPageLoaded Callback for when all new nodes are rendered
   */
  private loadPage;
  private rerender;
  private removeLastPageIfNeeded;
  private onDownArrowClicked;
  render(): any;
}
