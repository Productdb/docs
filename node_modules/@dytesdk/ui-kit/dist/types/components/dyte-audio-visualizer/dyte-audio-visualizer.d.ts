import { Peer } from '../../types/dyte-client';
import { IconPack } from '../../lib/icons';
import { Size } from '../../types/props';
import { DyteI18n } from '../../lib/lang';
export declare type AudioVisualizerVariant = 'bars';
/**
 * An audio visualizer component which visualizes a participants audio.
 *
 * Commonly used inside `dyte-name-tag`.
 */
export declare class DyteAudioVisualizer {
  private visualizer;
  private hark;
  private audioUpdateListener;
  private screenShareUpdateListener;
  /** Variant */
  variant: AudioVisualizerVariant;
  /** Participant object */
  participant: Peer;
  /** Size */
  size: Size;
  /** Icon pack */
  iconPack: IconPack;
  /** Language */
  t: DyteI18n;
  /** Audio visualizer for screensharing, it will use screenShareTracks.audio instead of audioTrack */
  isScreenShare: boolean;
  audioEnabled: boolean;
  volume: number;
  connectedCallback(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  participantChanged(participant: Peer): void;
  /**
   * Determines the volume from a given MediaStream and updates the components state
   * @param stream A MediaStream with AudioTrack(s) added
   */
  private calcVolume;
  render(): any;
}
