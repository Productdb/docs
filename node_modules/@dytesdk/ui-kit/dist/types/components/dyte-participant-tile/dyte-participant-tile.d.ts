import { EventEmitter } from '../../stencil-public-runtime';
import { IconPack } from '../../lib/icons';
import { DyteI18n } from '../../lib/lang';
import { Meeting, Peer } from '../../types/dyte-client';
import { Size, States } from '../../types/props';
import { UIConfig } from '../../types/ui-config';
export declare type VideoState = Pick<Peer, 'videoEnabled' | 'videoTrack'>;
/**
 * A component which plays a participants video and allows for placement
 * of components like `dyte-name-tag`, `dyte-audio-visualizer` or any other component.
 */
export declare class DyteParticipantTile {
  private videoEl;
  private playTimeout;
  videoState: VideoState;
  isPinned: boolean;
  /** Position of name tag */
  nameTagPosition: 'bottom-left' | 'bottom-right' | 'bottom-center' | 'top-left' | 'top-right' | 'top-center';
  /** Whether tile is used for preview */
  isPreview: boolean;
  /** Participant object */
  participant: Peer;
  /** Meeting object */
  meeting: Meeting;
  /** States object */
  states: States;
  /** Config object */
  config: UIConfig;
  /** Variant */
  variant: 'solid' | 'gradient';
  /** Size */
  size: Size;
  /** Icon pack */
  iconPack: IconPack;
  /** Language */
  t: DyteI18n;
  /** Event triggered when tile is loaded */
  tileLoad: EventEmitter<{
    participant: Peer;
    videoElement: HTMLVideoElement;
  }>;
  /** Event triggered when tile is unloaded */
  tileUnload: EventEmitter<Peer>;
  private onVideoRef;
  connectedCallback(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  meetingChanged(meeting: Meeting): void;
  participantsChanged(participant: Peer): void;
  videoStateChanged(videoState: VideoState): void;
  private onVideoUpdate;
  private onPinned;
  private isSelf;
  private isMirrored;
  private onPause;
  private onPlaying;
  render(): any;
}
