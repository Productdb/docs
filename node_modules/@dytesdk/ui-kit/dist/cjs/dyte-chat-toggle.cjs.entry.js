'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const index$1 = require('./index-d63f2c88.js');
const store = require('./store-7f623fdb.js');
const flags = require('./flags-88945715.js');
const sidebar = require('./sidebar-0f0cece9.js');
require('./user-prefs-cefc791a.js');
require('./livestream-3ff039ea.js');

const dyteChatToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block}.unread-count{position:absolute;right:var(--dyte-space-3, 12px);box-sizing:border-box;padding:var(--dyte-space-0\\.5, 2px);-webkit-user-select:none;-moz-user-select:none;user-select:none;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));font-size:12px;color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));display:flex;height:var(--dyte-space-5, 20px);min-width:var(--dyte-space-5, 20px);align-items:center;justify-content:center;border-radius:9999px;z-index:1}.unread-count-dot{position:absolute;right:var(--dyte-space-3, 12px);z-index:10;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));border-radius:50%;display:flex;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);align-items:center;justify-content:center}:host([variant='horizontal']){display:flex;flex-direction:row-reverse;align-items:center}:host([variant='horizontal']) .unread-count{right:var(--dyte-space-4, 16px);top:auto}";

const DyteChatToggle = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.stateUpdate = index.createEvent(this, "dyteStateUpdate", 7);
    this.onChatUpdate = ({ action, message }) => {
      var _a;
      if (this.chatActive)
        return;
      if (action === 'add' && message.userId !== ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self.userId)) {
        this.hasNewMessages = true;
        this.unreadMessageCount += 1;
      }
    };
    this.toggleChat = () => {
      const states = this.states || store.state;
      this.chatActive = !((states === null || states === void 0 ? void 0 : states.activeSidebar) && (states === null || states === void 0 ? void 0 : states.sidebar) === 'chat');
      if (this.chatActive) {
        this.unreadMessageCount = 0;
        this.hasNewMessages = false;
      }
      store.state.activeSidebar = this.chatActive;
      store.state.activeMoreMenu = false;
      store.state.sidebar = this.chatActive ? 'chat' : undefined;
      store.state.activeAI = false;
      this.stateUpdate.emit({
        activeSidebar: this.chatActive,
        sidebar: this.chatActive ? 'chat' : undefined,
        activeMoreMenu: false,
        activeAI: false,
      });
    };
    this.updateCanView = () => {
      this.canViewChat = sidebar.canViewChat(this.meeting);
    };
    this.unreadMessageCount = 0;
    this.variant = 'button';
    this.meeting = undefined;
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.chatActive = false;
    this.canViewChat = false;
    this.hasNewMessages = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.statesChanged(this.states);
    this.removeStateChangeListener = store.onChange('sidebar', () => this.statesChanged());
  }
  disconnectedCallback() {
    var _a, _b, _c, _d, _e, _f;
    this.removeStateChangeListener && this.removeStateChangeListener();
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.chat) === null || _b === void 0 ? void 0 : _b.removeListener('chatUpdate', this.onChatUpdate);
    (_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.stage) === null || _d === void 0 ? void 0 : _d.removeListener('stageStatusUpdate', this.updateCanView);
    (_f = (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self) === null || _f === void 0 ? void 0 : _f.permissions.removeListener('chatUpdate', this.updateCanView);
  }
  meetingChanged(meeting) {
    var _a, _b, _c, _d, _e;
    if (meeting == null)
      return;
    if (flags.usePaginatedChat(meeting)) {
      (_a = meeting.chat) === null || _a === void 0 ? void 0 : _a.getMessages(new Date().getTime(), 1, true).then((res) => {
        var _a;
        if ((_a = res === null || res === void 0 ? void 0 : res.messages) === null || _a === void 0 ? void 0 : _a.length)
          this.hasNewMessages = true;
      });
    }
    this.unreadMessageCount = ((_b = meeting.chat) === null || _b === void 0 ? void 0 : _b.messages.length) || 0;
    (_c = meeting.chat) === null || _c === void 0 ? void 0 : _c.addListener('chatUpdate', this.onChatUpdate);
    this.canViewChat = sidebar.canViewChat(meeting);
    (_d = meeting === null || meeting === void 0 ? void 0 : meeting.stage) === null || _d === void 0 ? void 0 : _d.on('stageStatusUpdate', this.updateCanView);
    (_e = meeting === null || meeting === void 0 ? void 0 : meeting.self) === null || _e === void 0 ? void 0 : _e.permissions.on('chatUpdate', this.updateCanView);
  }
  statesChanged(s) {
    const states = s || store.state;
    if (states != null) {
      this.chatActive = states.activeSidebar === true && states.sidebar === 'chat';
    }
  }
  render() {
    if (!this.canViewChat)
      return;
    return (index.h(index.Host, { title: this.t('chat') }, flags.usePaginatedChat(this.meeting)
      ? this.hasNewMessages && index.h("div", { class: "unread-count-dot", part: "unread-count-dot" })
      : this.unreadMessageCount !== 0 &&
        !this.chatActive && (index.h("div", { class: "unread-count", part: "unread-count" }, index.h("span", null, this.unreadMessageCount <= 100 ? this.unreadMessageCount : '99+'))), index.h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, class: { active: this.chatActive }, onClick: this.toggleChat, icon: this.iconPack.chat, label: this.t('chat'), variant: this.variant })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "states": ["statesChanged"]
  }; }
};
DyteChatToggle.style = dyteChatToggleCss;

exports.dyte_chat_toggle = DyteChatToggle;
