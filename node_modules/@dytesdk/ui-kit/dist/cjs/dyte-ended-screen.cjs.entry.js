'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const index$1 = require('./index-d63f2c88.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const store = require('./store-7f623fdb.js');
require('./breakout-rooms-manager-87997e6a.js');
const defaultUiConfig = require('./default-ui-config-d5874568.js');
require('./livestream-3ff039ea.js');
require('./user-prefs-cefc791a.js');
require('./breakout-rooms-23529df9.js');
require('./flags-88945715.js');

const dyteEndedScreenCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{height:100%;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;display:flex;flex-direction:column;align-items:center;justify-content:center}.ctr{display:flex;flex-direction:column;align-items:center;gap:var(--dyte-space-8, 32px)}dyte-logo.loaded{height:var(--dyte-space-12, 48px)}.rejoin-button{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);padding-top:var(--dyte-space-6, 24px);padding-bottom:var(--dyte-space-6, 24px);padding-left:var(--dyte-space-16, 64px);padding-right:var(--dyte-space-16, 64px)}.rejoin-icon{margin-right:var(--dyte-space-2, 8px)}p{font-size:16px;border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));padding-left:var(--dyte-space-8, 32px);padding-right:var(--dyte-space-8, 32px);padding-top:var(--dyte-space-4, 16px);padding-bottom:var(--dyte-space-4, 16px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}p.breakout{font-size:20px;display:flex;flex-direction:column;align-items:center}p.breakout span{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-0, 0px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}span{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);font-size:14px}";

const DyteEndedScreen = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.config = defaultUiConfig.defaultConfig;
    this.size = undefined;
    this.icon = defaultIconPack.defaultIconPack;
    this.states = undefined;
    this.t = index$1.useLanguage();
    this.iconPack = defaultIconPack.defaultIconPack;
    this.message = '';
    this.meeting = undefined;
  }
  connectedCallback() {
    this.statesChanged(this.states);
    this.removeStateChangeListener = store.onChange('roomLeftState', () => this.statesChanged());
  }
  disconnectedCallback() {
    this.removeStateChangeListener && this.removeStateChangeListener();
  }
  getBreakoutRoomsMessage(states) {
    var _a;
    let message;
    if ((states === null || states === void 0 ? void 0 : states.roomLeftState) === 'connected-meeting') {
      if (((_a = store.state.activeBreakoutRoomsManager) === null || _a === void 0 ? void 0 : _a.destinationMeetingId) ===
        this.meeting.connectedMeetings.parentMeeting.id) {
        message = 'breakout_rooms.move_reason.switch_main_room';
      }
      else {
        message = 'breakout_rooms.move_reason.switch_room';
      }
    }
    return message;
  }
  statesChanged(s) {
    const states = s || store.state;
    if (states != null) {
      switch (states === null || states === void 0 ? void 0 : states.roomLeftState) {
        case 'left':
          this.message = 'ended.left';
          break;
        case 'kicked':
          this.message = 'ended.kicked';
          break;
        case 'disconnected':
          this.message = 'ended.disconnected';
          break;
        case 'rejected':
          this.message = 'ended.rejected';
          break;
        case 'connected-meeting':
          this.message = this.getBreakoutRoomsMessage(states);
          break;
        default:
          this.message = 'ended';
      }
    }
  }
  renderBreakoutRoomScreen() {
    return (index.h(index.Host, null, index.h("div", { class: "ctr", part: "container" }, index.h("dyte-icon", { icon: this.iconPack.breakout_rooms }), index.h("p", { part: "message", class: "breakout" }, this.t(this.message)))));
  }
  render() {
    const states = this.states || store.state;
    if (states.roomLeftState === 'connected-meeting') {
      return this.renderBreakoutRoomScreen();
    }
    return (index.h(index.Host, null, index.h("div", { class: "ctr", part: "container" }, index.h("dyte-logo", { meeting: this.meeting, config: this.config, part: "logo", t: this.t }), index.h("p", { part: "message" }, this.t(this.message)), (states === null || states === void 0 ? void 0 : states.roomLeftState) === 'disconnected' && (index.h("span", { part: "description" }, this.t('ended.network'))))));
  }
  static get watchers() { return {
    "states": ["statesChanged"]
  }; }
};
DyteEndedScreen.style = dyteEndedScreenCss;

exports.dyte_ended_screen = DyteEndedScreen;
