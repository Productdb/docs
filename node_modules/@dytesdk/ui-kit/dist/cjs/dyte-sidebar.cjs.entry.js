'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const index$1 = require('./index-d63f2c88.js');
const defaultUiConfig = require('./default-ui-config-d5874568.js');
const store = require('./store-7f623fdb.js');
const sidebar = require('./sidebar-0f0cece9.js');
const index$2 = require('./index-c0cb7142.js');
require('./user-prefs-cefc791a.js');
require('./livestream-3ff039ea.js');
require('./flags-88945715.js');

const dyteSidebarCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{height:100%;width:100%;max-width:var(--dyte-space-80, 320px);box-sizing:border-box;display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));border-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-border-opacity))}:host([view='sidebar']){right:var(--dyte-space-2, 8px);overflow:clip;border-radius:var(--dyte-border-radius-lg, 12px);--tw-shadow:0 25px 50px -12px rgb(0 0 0 / 0.25);--tw-shadow-colored:0 25px 50px -12px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);--tw-shadow-color:rgb(var(--dyte-colors-background-900, 26 26 26));--tw-shadow:var(--tw-shadow-colored)}:host([view='full-screen']){top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);max-width:100%}:host(.floating){position:absolute !important;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);left:auto;z-index:50}.pinned-state{position:absolute;right:var(--dyte-space-1, 4px);display:inline-flex;width:var(--dyte-space-2, 8px);justify-content:flex-end}";

const DyteSidebar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.stateUpdate = index.createEvent(this, "dyteStateUpdate", 7);
    this.getTabs = () => {
      if (!this.meeting.self.config) {
        return this.enabledSections;
      }
      return this.enabledSections.filter((section) => this.meeting.self.config.controlBar.elements[section.id]);
    };
    this.close = () => {
      this.stateUpdate.emit({ activeSidebar: false, sidebar: this.defaultSection });
      store.state.sidebar = this.currentTab;
      store.state.activeSidebar = false;
    };
    this.toggleFloating = () => {
      this.isFloating = !this.isFloating;
      store.state.sidebarFloating = this.isFloating;
    };
    this.enabledSections = [];
    this.defaultSection = 'chat';
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultUiConfig.defaultConfig;
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.size = undefined;
    this.view = 'sidebar';
    this.currentTab = this.defaultSection;
    this.isFloating = false;
    this.enablePinning = true;
  }
  connectedCallback() {
    this.viewChanged(this.view);
    this.statesChanged(this.states);
    this.meetingChanged(this.meeting);
    this.isFloating = (store.state === null || store.state === void 0 ? void 0 : store.state.sidebarFloating) || false;
  }
  disconnectedCallback() {
    var _a, _b;
    document.removeEventListener('keydown', this.keydownListener);
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener('stageStatusUpdate', this.onStageStatusUpdate);
    this.onStageStatusUpdate = null;
  }
  meetingChanged(meeting) {
    var _a, _b;
    this.updateEnabledSections(meeting);
    this.onStageStatusUpdate = (_status) => {
      this.updateEnabledSections(this.meeting);
    };
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.on('stageStatusUpdate', this.onStageStatusUpdate);
  }
  statesChanged(s) {
    const states = s || store.state;
    if (states === null || states === void 0 ? void 0 : states.sidebar) {
      this.currentTab = states.sidebar;
    }
  }
  viewChanged(view) {
    if (view === 'full-screen') {
      this.enablePinning = false;
      this.keydownListener = (e) => {
        if (e.key === 'Escape') {
          this.close();
        }
      };
      document.addEventListener('keydown', this.keydownListener);
    }
    else {
      this.enablePinning = true;
    }
  }
  viewSection(section) {
    this.currentTab = section;
    this.stateUpdate.emit({ activeSidebar: true, sidebar: this.currentTab });
    store.state.activeSidebar = true;
    store.state.sidebar = this.currentTab;
  }
  updateEnabledSections(meeting = this.meeting) {
    const list = [];
    if (sidebar.canViewChat(meeting)) {
      list.push({ id: 'chat', name: this.t('chat') });
    }
    if (sidebar.canViewPolls(meeting)) {
      list.push({ id: 'polls', name: this.t('polls') });
    }
    if (sidebar.canViewParticipants(meeting)) {
      list.push({ id: 'participants', name: this.t('participants') });
    }
    if (sidebar.canViewPlugins(meeting)) {
      list.push({ id: 'plugins', name: this.t('plugins') });
    }
    this.enabledSections = list;
  }
  render() {
    var _a;
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states || store.state,
      size: this.size,
      t: this.t,
      iconPack: this.iconPack,
    };
    // NOTE(ishita1805): This makes it easier to use the sidebar component in isolation.
    if (((_a = defaults.states) === null || _a === void 0 ? void 0 : _a.activeSidebar) === false || !this.currentTab) {
      return null;
    }
    return (index.h(index.Host, { class: this.enablePinning ? (this.isFloating ? 'floating' : '') : 'floating' }, index.h("dyte-sidebar-ui", { tabs: this.getTabs(), currentTab: this.currentTab, view: this.view, onTabChange: (e) => {
        this.viewSection(e.detail);
      }, onSidebarClose: this.close }, this.enablePinning && (index.h("div", { class: "pinned-state", slot: "pinned-state" }, index.h("dyte-button", { variant: "ghost", kind: "icon", onClick: this.toggleFloating, "aria-label": this.isFloating ? this.t('pin') : this.t('unpin') }, index.h("dyte-icon", { icon: this.isFloating ? this.iconPack.pin : this.iconPack.pin_off })))), defaults.states.sidebar === 'chat' && (index.h(index$2.Render, { element: "dyte-chat", defaults: defaults, props: { slot: 'chat' } })), defaults.states.sidebar === 'polls' && (index.h(index$2.Render, { element: "dyte-polls", defaults: defaults, props: { slot: 'polls' } })), defaults.states.sidebar === 'participants' && (index.h(index$2.Render, { element: "dyte-participants", defaults: defaults, props: { slot: 'participants' } })), defaults.states.sidebar === 'plugins' && (index.h(index$2.Render, { element: "dyte-plugins", defaults: defaults, props: { slot: 'plugins' } })))));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "states": ["statesChanged"],
    "view": ["viewChanged"]
  }; }
};
DyteSidebar.style = dyteSidebarCss;

exports.dyte_sidebar = DyteSidebar;
