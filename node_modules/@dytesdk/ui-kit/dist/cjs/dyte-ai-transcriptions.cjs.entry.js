'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const index$1 = require('./index-d63f2c88.js');
const ChatHead = require('./ChatHead-b7211148.js');
const scroll = require('./scroll-9e3bcb35.js');
const clone = require('./clone-01efc009.js');
require('./date-19f3f07a.js');
require('./string-29af7ef8.js');
require('./cloneDeep-48e6fb57.js');
require('./keysIn-c1d310a7.js');
require('./isObjectLike-890299f1.js');

const dyteAiTranscriptionsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.head{display:flex;align-items:center}.head .name{margin-right:var(--dyte-space-4, 16px);font-size:12px;font-weight:700}.head .time{font-size:12px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}*{box-sizing:border-box;border-width:0;border-style:solid}:host{width:100%;display:flex;flex-direction:column}.processing{display:flex;flex:1 1 0%;flex-direction:column;align-items:center;justify-content:center}.content{box-sizing:border-box;display:flex;flex-direction:column;padding:var(--dyte-space-3, 12px);flex:1 0 0px;overflow-y:scroll}.started-message{margin-top:var(--dyte-space-5, 20px);margin-bottom:var(--dyte-space-5, 20px);text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.search-bar{height:var(--dyte-space-14, 56px);width:100%;border-bottom-width:var(--dyte-border-width-sm, 1px);--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity));padding:var(--dyte-space-3, 12px)}input{height:100%;width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);font-size:14px;border-radius:var(--dyte-border-radius-sm, 4px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.caption-view{height:var(--dyte-space-12, 48px);width:100%;padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);border-bottom-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity));display:flex;align-items:center;justify-content:space-between;font-size:14px}.message .body{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);font-size:14px;word-break:break-word}.message{margin-bottom:var(--dyte-space-3, 12px)}.message:last-child{margin-bottom:var(--dyte-space-0, 0px)}";

const DyteAiTranscriptions = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.onTranscriptHandler = (data) => {
      this.transcriptions = this.transcriptionsReducer(this.transcriptions, data);
    };
    this.participantQuery = '';
    this.isProcessing = false;
    this.captionViewEnabled = false;
    this.t = index$1.useLanguage();
    this.meeting = undefined;
    this.transcriptions = [];
    this.initialTranscriptions = undefined;
  }
  // private transcriptionHandler(data: Transcript) {
  //   this.transcriptions = [...this.transcriptions, data];
  // }
  transcriptionsReducer(acc, t) {
    if (!acc.length || acc[acc.length - 1].peerId !== t.peerId) {
      return acc.concat(t);
    }
    const lastElement = acc.pop();
    lastElement.transcript += ' ' + t.transcript;
    return acc.concat(lastElement);
  }
  connectedCallback() {
    if (!this.meeting)
      return;
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    var _a, _b;
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.ai) === null || _b === void 0 ? void 0 : _b.off('transcript', this.onTranscriptHandler);
  }
  meetingChanged(meeting) {
    var _a, _b;
    this.transcriptions = clone.clone((_a = meeting === null || meeting === void 0 ? void 0 : meeting.ai) === null || _a === void 0 ? void 0 : _a.transcripts);
    this.transcriptions = this.transcriptions.reduce(this.transcriptionsReducer, []);
    (_b = meeting === null || meeting === void 0 ? void 0 : meeting.ai) === null || _b === void 0 ? void 0 : _b.on('transcript', this.onTranscriptHandler);
  }
  transcriptionsChanged() {
    setTimeout(() => {
      scroll.smoothScrollToBottom(this.contentContainer, false);
    }, 100);
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "search-bar" }, index.h("input", { type: "text", placeholder: "Search Participant", value: this.participantQuery, onInput: (e) => (this.participantQuery = e.target.value) })), this.isProcessing && (index.h("div", { class: "processing" }, index.h("p", null, "Processing audio...."))), !this.isProcessing && (index.h("div", { class: "content scrollbar", ref: (el) => (this.contentContainer = el) }, index.h("div", { class: "started-message" }, "Transcription started"), this.transcriptions
      .filter((t) => this.participantQuery
      ? t.name.toLowerCase().includes(this.participantQuery.toLowerCase())
      : true)
      .map((transcription) => (index.h("div", { class: "message" }, index.h(ChatHead.ChatHead, { name: transcription.name, time: new Date(transcription.date), now: new Date() }), index.h("div", { class: "body" }, transcription.transcript)))))), this.captionViewEnabled && index.h("dyte-ai-caption", null)));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "transcriptions": ["transcriptionsChanged"]
  }; }
};
DyteAiTranscriptions.style = dyteAiTranscriptionsCss;

exports.dyte_ai_transcriptions = DyteAiTranscriptions;
