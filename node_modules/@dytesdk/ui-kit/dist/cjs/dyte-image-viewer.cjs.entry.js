'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const index$1 = require('./index-d63f2c88.js');
const file = require('./file-aa9d86f1.js');
const string = require('./string-29af7ef8.js');

const dyteImageViewerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{width:1140px;max-width:100%;box-sizing:border-box;display:flex;flex-direction:column;padding:var(--dyte-space-6, 24px);padding-top:var(--dyte-space-5, 20px);overflow-y:auto;color:rgb(var(--dyte-colors-text-1000, 255 255 255));z-index:40;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}.displayName{font-weight:700}.image-ctr{margin-top:var(--dyte-space-2, 8px);box-sizing:border-box;display:flex;justify-content:center;overflow:hidden}.actions{display:flex;align-items:center;justify-content:flex-end;gap:var(--dyte-space-2, 8px)}img{box-sizing:border-box;display:block;max-height:100%;max-width:100%;-o-object-fit:contain;object-fit:contain}.header{display:flex;align-items:center;justify-content:space-between;padding-bottom:var(--dyte-space-4, 16px)}.shared-by-user{overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}:host([size='sm']) .header{flex-direction:column}:host([size='sm']) .header .actions{margin-top:var(--dyte-space-4, 16px)}";

const DyteImageViewer = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.close = index.createEvent(this, "close", 7);
    this.keypressListener = (e) => {
      if (e.key === 'Escape') {
        this.close.emit();
      }
    };
    this.handleOutsideClick = () => this.close.emit();
    this.image = undefined;
    this.size = undefined;
    this.t = index$1.useLanguage();
    this.iconPack = defaultIconPack.defaultIconPack;
  }
  connectedCallback() {
    document.addEventListener('keydown', this.keypressListener);
    document.addEventListener('click', this.handleOutsideClick);
  }
  disconnectedCallback() {
    document.removeEventListener('keydown', this.keypressListener);
    document.removeEventListener('click', this.handleOutsideClick);
  }
  render() {
    return (index.h(index.Host, { class: "scrollbar", onClick: (e) => e.stopPropagation() }, index.h("div", { class: "header" }, index.h("div", { class: "shared-by-user" }, this.t('chat.img.shared_by'), ' ', index.h("span", { class: "displayName" }, string.formatName(string.shorten(this.image.displayName)))), index.h("div", { class: "actions" }, index.h("dyte-button", { kind: "icon", variant: "secondary", onClick: () => this.close.emit(), iconPack: this.iconPack, t: this.t }, index.h("dyte-icon", { icon: this.iconPack.full_screen_minimize, iconPack: this.iconPack, t: this.t })), index.h("dyte-button", { onClick: () => file.downloadFile(this.image.link, { fallbackName: 'image' }), iconPack: this.iconPack, t: this.t }, index.h("dyte-icon", { icon: this.iconPack.download, slot: "start", iconPack: this.iconPack, t: this.t }), "Download"))), index.h("div", { class: "image-ctr" }, index.h("img", { src: this.image.link }))));
  }
};
DyteImageViewer.style = dyteImageViewerCss;

exports.dyte_image_viewer = DyteImageViewer;
