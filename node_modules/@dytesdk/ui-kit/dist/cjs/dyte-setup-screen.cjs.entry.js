'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const string = require('./string-29af7ef8.js');
const defaultUiConfig = require('./default-ui-config-d5874568.js');
const index$2 = require('./index-c0cb7142.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const index$1 = require('./index-d63f2c88.js');
const userPrefs = require('./user-prefs-cefc791a.js');
const store = require('./store-7f623fdb.js');

const dyteSetupScreenCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;padding:var(--dyte-space-4, 16px);height:100%;min-height:100%;width:100%;display:flex;place-items:center;justify-content:center;--dyte-controlbar-button-background-color:rgb(var(--dyte-colors-background-700, 44 44 44))}.container{width:100%;max-width:1080px;display:flex;align-items:center;justify-content:space-evenly}.metadata{width:100%;max-width:var(--dyte-space-80, 320px)}.label{display:flex;flex-direction:column;align-items:center}.label p{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-2, 8px);font-size:14px}.name{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-6, 24px);text-align:center;font-size:28px;font-weight:500;letter-spacing:-0.025em;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}input{margin-bottom:var(--dyte-space-6, 24px);display:block;height:var(--dyte-space-10, 40px);width:100%;max-width:var(--dyte-space-80, 320px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);color:rgb(var(--dyte-colors-text-1000, 255 255 255));box-sizing:border-box;font-size:16px;outline:2px solid transparent;outline-offset:2px;transition-property:color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}input::-moz-placeholder{color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}input::placeholder{color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}input{border:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}input:focus{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-border-opacity))}dyte-spinner{color:rgb(var(--dyte-colors-text-1000, 255 255 255));--icon-size:var(--dyte-space-8, 32px)}:host([size='sm']) .container,:host([size='md']) .container{height:100%;flex-direction:column;justify-content:space-evenly}dyte-camera-toggle{margin-left:var(--dyte-space-1\\.5, 6px)}dyte-participant-tile{height:auto;width:100%;max-width:var(--dyte-space-96, 384px)}";

const DyteSetupScreen = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.stateUpdate = index.createEvent(this, "dyteStateUpdate", 7);
    this.join = async () => {
      var _a, _b, _c;
      if (((_a = this.displayName) === null || _a === void 0 ? void 0 : _a.trim()) !== '' && !this.isJoining) {
        this.isJoining = true;
        (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self.setName(this.displayName);
        userPrefs.gracefulStorage.setItem('dyte-display-name', this.displayName);
        await ((_c = this.meeting) === null || _c === void 0 ? void 0 : _c.joinRoom());
      }
    };
    this.meeting = undefined;
    this.states = store.state;
    this.size = undefined;
    this.config = defaultUiConfig.defaultConfig;
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.displayName = undefined;
    this.isJoining = false;
    this.canEditName = true;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  componentDidLoad() {
    var _a;
    (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.focus();
  }
  meetingChanged(meeting) {
    var _a, _b;
    if (meeting != null) {
      this.canEditName = (_a = meeting.self.permissions.canEditDisplayName) !== null && _a !== void 0 ? _a : true;
      this.displayName = ((_b = meeting.self.name) === null || _b === void 0 ? void 0 : _b.trim()) || '';
      store.state.meeting = 'setup';
    }
  }
  render() {
    var _a, _b, _c, _d;
    const disabled = ((_a = this.displayName) === null || _a === void 0 ? void 0 : _a.trim()) === '';
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states || store.state,
      size: this.size,
      iconPack: this.iconPack,
      t: this.t,
    };
    return (index.h(index.Host, null, index.h("div", { class: "container" }, index.h(index$2.Render, { element: "dyte-participant-tile", defaults: defaults, props: { participant: (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self, size: 'md' }, childProps: { participant: (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self, size: 'md' }, deepProps: true }), index.h("div", { class: "metadata" }, ((_d = this.displayName) === null || _d === void 0 ? void 0 : _d.trim()) === '' ? (index.h("div", { class: "name" }, this.t('setup_screen.join_in_as'))) : (index.h("div", { class: "label" }, index.h("p", null, this.t('setup_screen.joining_as')), index.h("div", { class: "name" }, string.shorten(this.displayName, 20)))), this.canEditName && (index.h("input", { placeholder: this.t('setup_screen.your_name'), value: this.displayName, autoFocus: true, ref: (el) => {
        this.inputEl = el;
      }, onInput: (e) => {
        this.displayName = e.target.value;
      }, onKeyDown: (e) => {
        if (e.key === 'Enter') {
          this.join();
        }
      } })), index.h("dyte-button", { size: "lg", kind: "wide", onClick: this.join, disabled: disabled, iconPack: this.iconPack, t: this.t }, this.isJoining ? (index.h("dyte-spinner", { iconPack: this.iconPack, t: this.t })) : (this.t('join')))))));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
};
DyteSetupScreen.style = dyteSetupScreenCss;

exports.dyte_setup_screen = DyteSetupScreen;
