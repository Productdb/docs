'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const index$1 = require('./index-d63f2c88.js');
const fullScreen = require('./full-screen-65a0d897.js');
const store = require('./store-7f623fdb.js');
require('./user-prefs-cefc791a.js');

const dyteFullscreenToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DyteFullscreenToggle = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.stateUpdate = index.createEvent(this, "dyteStateUpdate", 7);
    this.onFullScreenchange = () => {
      this.fullScreenActive = fullScreen.isFullScreenEnabled();
    };
    this.toggleFullScreen = () => {
      let fullScreenElement = this.targetElement || document.querySelector('dyte-meeting');
      if (!fullScreenElement)
        return;
      if (!this.fullScreenActive) {
        fullScreen.requestFullScreen(fullScreenElement);
        this.fullScreenActive = true;
      }
      else {
        fullScreen.exitFullSreen();
        this.fullScreenActive = false;
      }
      this.stateUpdate.emit({ activeMoreMenu: false });
      store.state.activeMoreMenu = false;
    };
    this.states = undefined;
    this.targetElement = undefined;
    this.variant = 'button';
    this.size = undefined;
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.fullScreenActive = false;
    this.isFullScreenSupported = true;
  }
  connectedCallback() {
    this.isFullScreenSupported = fullScreen.isFullScreenSupported();
    this.onFullScreenchange();
    window.addEventListener('webkitfullscreenchange', this.onFullScreenchange);
    window.addEventListener('fullscreenchange', this.onFullScreenchange);
  }
  disconnectedCallback() {
    window.removeEventListener('webkitfullscreenchange', this.onFullScreenchange);
    window.removeEventListener('fullscreenchange', this.onFullScreenchange);
  }
  render() {
    if (!this.isFullScreenSupported) {
      return null;
    }
    return (index.h(index.Host, { title: this.t('full_screen') }, index.h("dyte-controlbar-button", { size: this.size, iconPack: this.iconPack, t: this.t, onClick: this.toggleFullScreen, icon: this.fullScreenActive
        ? this.iconPack.full_screen_minimize
        : this.iconPack.full_screen_maximize, label: this.fullScreenActive ? this.t('full_screen.exit') : this.t('full_screen'), variant: this.variant })));
  }
};
DyteFullscreenToggle.style = dyteFullscreenToggleCss;

exports.dyte_fullscreen_toggle = DyteFullscreenToggle;
