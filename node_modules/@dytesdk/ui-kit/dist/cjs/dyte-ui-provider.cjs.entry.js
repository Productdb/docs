'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
require('./store-7f623fdb.js');
require('./breakout-rooms-manager-87997e6a.js');
const config = require('./config-ba1005b1.js');
const defaultUiConfig = require('./default-ui-config-d5874568.js');
const size = require('./size-d5e6fe50.js');
const index$1 = require('./index-d63f2c88.js');
require('./livestream-3ff039ea.js');
require('./user-prefs-cefc791a.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
require('./breakout-rooms-23529df9.js');
require('./flags-88945715.js');
require('./keysIn-c1d310a7.js');
require('./isObjectLike-890299f1.js');

const DyteUiProvider = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.meeting = undefined;
    this.size = undefined;
    this.config = defaultUiConfig.defaultConfig;
    this.t = index$1.useLanguage();
    this.iconPackUrl = undefined;
    this.loadConfigFromPreset = true;
    this.applyDesignSystem = true;
    this.joinRoom = true;
    this.isReady = false;
    this.iconPack = defaultIconPack.defaultIconPack;
  }
  async iconPackUrlChanged(url) {
    this.iconPack = await size.getIconPack(url);
  }
  async meetingChanged(meeting) {
    var _a;
    if (!meeting)
      return;
    if (!meeting.self.roomJoined && this.joinRoom) {
      this.isReady = false;
      await meeting.joinRoom();
      this.isReady = true;
    }
    if (this.loadConfigFromPreset && meeting.self.config != null) {
      const theme = meeting.self.config;
      const { config: config$1 } = config.generateConfig(theme, meeting);
      if (this.config === defaultUiConfig.defaultConfig) {
        // only override the config if the object is same as defaultConfig
        // which means it's a different object passed via prop
        this.config = Object.assign(Object.assign(Object.assign({}, defaultUiConfig.defaultConfig), config$1), { designTokens: Object.assign(Object.assign({}, defaultUiConfig.defaultConfig.designTokens), config$1.designTokens) });
      }
    }
    if (this.applyDesignSystem &&
      ((_a = this.config) === null || _a === void 0 ? void 0 : _a.designTokens) != null &&
      typeof document !== 'undefined') {
      config.provideDyteDesignSystem(document.documentElement, this.config.designTokens);
    }
    Array.from(this.hostEl.children)
      .filter((element) => element.tagName.startsWith('DYTE-'))
      .forEach((element) => {
      element['meeting'] = meeting;
      element['config'] = this.config;
      element['size'] = this.size;
      element['iconPack'] = this.iconPack;
      element['t'] = this.t;
    });
  }
  connectedCallback() {
    this.resizeObserver = new ResizeObserver(() => this.handleResize());
    this.resizeObserver.observe(this.hostEl);
    this.meetingChanged(this.meeting);
    this.iconPackUrlChanged(this.iconPackUrl);
  }
  handleResize() {
    this.size = size.getSize(this.hostEl.clientWidth);
  }
  render() {
    if (!this.isReady)
      return null;
    return index.h("slot", null);
  }
  get hostEl() { return index.getElement(this); }
  static get watchers() { return {
    "iconPackUrl": ["iconPackUrlChanged"],
    "meeting": ["meetingChanged"]
  }; }
};

exports.dyte_ui_provider = DyteUiProvider;
