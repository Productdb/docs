'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const string = require('./string-29af7ef8.js');
const index$1 = require('./index-d63f2c88.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');

const dyteNameTagCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:inline-flex;-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center;padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-1\\.5, 6px);padding-right:var(--dyte-space-1\\.5, 6px);font-size:14px;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}span.name{overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}::slotted(dyte-audio-visualizer[slot='start']){margin-right:var(--dyte-space-1\\.5, 6px)}::slotted(dyte-audio-visualizer[slot='end']){margin-left:var(--dyte-space-1\\.5, 6px)}:host([size='sm']){font-size:12px;--tw-bg-opacity:0.6}:host([variant='text']){background-color:transparent;padding:var(--dyte-space-0, 0px)}";

const DyteNameTag = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.participant = undefined;
    this.meeting = undefined;
    this.size = undefined;
    this.maxLength = 20;
    this.isScreenShare = false;
    this.variant = 'default';
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.length = 13;
  }
  sizeChanged(size) {
    this.length = size === 'sm' ? 8 : 13;
  }
  formatNameTag(name, isSelf) {
    return !this.isScreenShare
      ? isSelf
        ? `${string.shorten(name, this.length - 3)} (${this.t('you')})`
        : string.shorten(name, this.length)
      : isSelf
        ? `${this.t('screen')} - ${string.shorten(name, this.length - 3)} (${this.t('you')})`
        : `${this.t('screen')} - ${string.shorten(name, this.length)}`;
  }
  render() {
    var _a, _b, _c;
    const name = string.formatName(((_a = this.participant) === null || _a === void 0 ? void 0 : _a.name) || '');
    const isSelf = ((_b = this.participant) === null || _b === void 0 ? void 0 : _b.id) === ((_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self.id);
    return (index.h(index.Host, { title: name }, index.h("slot", { name: "start" }), index.h("span", { class: "name" }, this.formatNameTag(name, isSelf)), index.h("slot", { name: "end" })));
  }
  static get watchers() { return {
    "size": ["sizeChanged"]
  }; }
};
DyteNameTag.style = dyteNameTagCss;

exports.dyte_name_tag = DyteNameTag;
