'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const index$1 = require('./index-d63f2c88.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const store = require('./store-7f623fdb.js');
require('./user-prefs-cefc791a.js');

const dyteMuteAllConfirmationCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block;-webkit-user-select:none;-moz-user-select:none;user-select:none}.leave-modal{position:relative;display:flex;flex-direction:column;border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));padding:var(--dyte-space-4, 16px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.leave-modal .header h2{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px)}.leave-modal .content{font-size:14px}.leave-message p{margin-top:var(--dyte-space-3, 12px);margin-bottom:var(--dyte-space-3, 12px)}.leave-meeting{display:flex;flex-direction:row;justify-content:space-between;gap:var(--dyte-space-2, 8px)}.leave-meeting dyte-button{flex:1 1 0%}.end-meeting{margin-top:var(--dyte-space-2, 8px)}.message{margin-bottom:var(--dyte-space-4, 16px)}label{display:flex;align-items:center}input[type='checkbox']{margin-right:var(--dyte-space-2, 8px);accent-color:rgb(var(--dyte-colors-brand-500, 33 96 253))}";

const DyteMuteAllConfirmation = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.stateUpdate = index.createEvent(this, "dyteStateUpdate", 7);
    this.onClose = () => {
      this.stateUpdate.emit({ activeMuteAllConfirmation: false });
      store.state.activeMuteAllConfirmation = false;
    };
    this.onMuteAll = () => {
      var _a;
      (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.participants.disableAllAudio(this.allowUnmute);
      this.onClose();
    };
    this.meeting = undefined;
    this.states = undefined;
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.allowUnmute = true;
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "leave-modal" }, index.h("div", { class: "header" }, index.h("h2", { class: "title" }, this.t('mute_all.header'))), index.h("p", { class: "message" }, this.t('mute_all.description')), index.h("div", { class: "content" }, index.h("div", { class: "leave-meeting" }, index.h("dyte-button", { variant: "secondary", title: this.t('close'), onClick: this.onClose, iconPack: this.iconPack, t: this.t }, this.t('cancel')), index.h("dyte-button", { variant: "danger", title: this.t('mute_all'), onClick: this.onMuteAll, iconPack: this.iconPack, t: this.t }, this.t('mute_all')))))));
  }
};
DyteMuteAllConfirmation.style = dyteMuteAllConfirmationCss;

exports.dyte_mute_all_confirmation = DyteMuteAllConfirmation;
