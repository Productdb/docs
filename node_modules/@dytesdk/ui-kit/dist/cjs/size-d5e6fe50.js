'use strict';

const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');

const getIconPack = async (url) => {
  // check for both null/undefined
  if (url == null) {
    return defaultIconPack.defaultIconPack;
  }
  try {
    const res = await fetch(url);
    if (!res.ok) {
      return defaultIconPack.defaultIconPack;
    }
    // merge defaultIconPack with the received iconPack so as to
    // fill the missing icons with default ones
    return Object.assign({}, defaultIconPack.defaultIconPack, await res.json());
  }
  catch (_) {
    return defaultIconPack.defaultIconPack;
  }
};

const sm = 640;
const md = 768;
const lg = 1080;
const xl = 2160;
const breakpoints = {
	sm: sm,
	md: md,
	lg: lg,
	xl: xl
};

/**
 * Get the screen breakpoint from a given width
 * @param width The width of the container
 * @returns The screen breakpoint value
 */
const getSize = (width) => {
  if (width >= breakpoints.lg)
    return 'lg';
  else if (width >= breakpoints.md)
    return 'md';
  else
    return 'sm';
};

exports.getIconPack = getIconPack;
exports.getSize = getSize;
