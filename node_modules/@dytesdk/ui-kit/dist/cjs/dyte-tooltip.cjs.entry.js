'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const floatingUi_dom_esm = require('./floating-ui.dom.esm-171ae816.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const index$1 = require('./index-d63f2c88.js');

const dyteTooltipCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{--background-color:var(--dyte-tooltip-background-color, rgb(var(--dyte-colors-background-600, 60 60 60)));--color:var(--dyte-tooltip-color, rgb(var(--dyte-colors-text-1000, 255 255 255)));display:inline-flex}#trigger{display:block;width:100%;flex:1 1 0%}.tooltip{max-width:var(--dyte-space-64, 256px);position:fixed;z-index:20;display:none;width:-moz-max-content;width:max-content;padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);border-radius:var(--dyte-border-radius-sm, 4px);--tw-shadow:0 1px 2px 0 rgb(0 0 0 / 0.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);font-size:12px}.tooltip,#arrow{position:absolute;background-color:var(--background-color);color:var(--color)}#arrow{position:absolute;height:var(--dyte-space-2, 8px);width:var(--dyte-space-2, 8px);transform:rotate(45deg)}:host([variant='primary']){--background-color:rgb(var(--dyte-colors-brand-500, 33 96 253));--color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}:host([kind='block']){display:block}";

const DyteMenu = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.dyteOpenChange = index.createEvent(this, "dyteOpenChange", 7);
    this.showMenu = () => {
      if (this.disabled)
        return;
      this.isInFocus = true;
      setTimeout(() => {
        if (this.isInFocus) {
          this.tooltipEl.style.display = 'block';
          this.update();
          this.dyteOpenChange.emit(true);
          if (this.size === 'sm') {
            setTimeout(() => {
              if (this.isInFocus) {
                this.hideMenu();
              }
            }, 1000);
          }
        }
      }, this.delay);
    };
    this.hideMenu = () => {
      if (this.open || this.disabled)
        return;
      this.isInFocus = false;
      this.tooltipEl.style.display = 'none';
      this.dyteOpenChange.emit(false);
    };
    this.label = '';
    this.variant = 'secondary';
    this.disabled = false;
    this.open = false;
    this.kind = 'inline';
    this.size = undefined;
    this.placement = 'top';
    this.delay = 0;
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.isInFocus = false;
  }
  componentDidLoad() {
    this.triggerEl.addEventListener('focusin', this.showMenu);
    this.triggerEl.addEventListener('mouseenter', this.showMenu);
    this.triggerEl.addEventListener('focusout', this.hideMenu);
    this.triggerEl.addEventListener('mouseleave', this.hideMenu);
    index.writeTask(() => {
      this.openChanged(this.open);
    });
  }
  disconnectedCallback() {
    if (!this.triggerEl)
      return;
    this.triggerEl.removeEventListener('focusin', this.showMenu);
    this.triggerEl.removeEventListener('mouseenter', this.showMenu);
    this.triggerEl.removeEventListener('focusout', this.hideMenu);
    this.triggerEl.removeEventListener('mouseleave', this.hideMenu);
    this.triggerEl = undefined;
  }
  openChanged(open) {
    if (open) {
      this.showMenu();
    }
    else {
      this.hideMenu();
    }
  }
  update() {
    floatingUi_dom_esm.computePosition(this.triggerEl, this.tooltipEl, {
      placement: this.placement,
      middleware: [floatingUi_dom_esm.offset(8), floatingUi_dom_esm.flip(), floatingUi_dom_esm.shift({ padding: 5 }), floatingUi_dom_esm.arrow({ element: this.arrowEl })],
    }).then(({ x, y, placement, middlewareData }) => {
      Object.assign(this.tooltipEl.style, {
        left: `${x}px`,
        top: `${y}px`,
      });
      const { x: arrowX, y: arrowY } = middlewareData.arrow;
      const staticSide = {
        top: 'bottom',
        right: 'left',
        bottom: 'top',
        left: 'right',
      }[placement.split('-')[0]];
      Object.assign(this.arrowEl.style, {
        left: arrowX != null ? `${arrowX}px` : '',
        top: arrowY != null ? `${arrowY}px` : '',
        right: '',
        bottom: '',
        [staticSide]: '-4px',
      });
    });
  }
  render() {
    return (index.h(index.Host, null, index.h("span", { part: "trigger", id: "trigger", ref: (el) => (this.triggerEl = el) }, index.h("slot", null)), index.h("div", { part: "tooltip", class: "tooltip", id: "tooltip", role: "tooltip", ref: (el) => (this.tooltipEl = el) }, index.h("div", { id: "arrow", ref: (el) => (this.arrowEl = el), part: "arrow" }), this.label, index.h("slot", { name: "tooltip" }))));
  }
  static get watchers() { return {
    "open": ["openChanged"]
  }; }
};
DyteMenu.style = dyteTooltipCss;

exports.dyte_tooltip = DyteMenu;
