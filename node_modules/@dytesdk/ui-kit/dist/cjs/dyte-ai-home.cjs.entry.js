'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const ChatHead = require('./ChatHead-b7211148.js');
const scroll = require('./scroll-9e3bcb35.js');
require('./date-19f3f07a.js');
require('./string-29af7ef8.js');

const dyteAiHomeCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.head{display:flex;align-items:center}.head .name{margin-right:var(--dyte-space-4, 16px);font-size:12px;font-weight:700}.head .time{font-size:12px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}*{box-sizing:border-box;border-width:0;border-style:solid}:host{display:flex;flex-direction:column}.public-message{text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));margin-top:var(--dyte-space-8, 32px);margin-bottom:var(--dyte-space-8, 32px);margin-left:var(--dyte-space-10, 40px);margin-right:var(--dyte-space-10, 40px)}.content{box-sizing:border-box;display:flex;flex-direction:column;padding:var(--dyte-space-3, 12px);flex:1 0 0px;overflow-y:scroll;}.subtitle{margin-top:var(--dyte-space-1, 4px);font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.hint-message{display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;flex:1 1 0%;font-size:14px;line-height:1.5;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}i{font-weight:500;font-style:italic;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.actions{padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);display:flex;align-items:center;justify-content:space-between;font-size:12px}.actions div{display:flex;align-items:center;gap:var(--dyte-space-2, 8px)}.actions button{display:inline-flex;cursor:pointer;border-radius:var(--dyte-border-radius-md, 8px);padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.5);color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)))}.prompt{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.prompt input{height:var(--dyte-space-12, 48px);width:100%;resize:none;background-color:transparent;padding:var(--dyte-space-4, 16px);font-family:var(--dyte-font-family, sans-serif);color:rgb(var(--dyte-colors-text-1000, 255 255 255));outline:2px solid transparent;outline-offset:2px}.message .body{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);white-space:pre-wrap;font-size:14px}.message .loader{display:flex;padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px);font-size:12px}.message{margin-bottom:var(--dyte-space-3, 12px)}.message:last-child{margin-bottom:var(--dyte-space-0, 0px)}.prompt-text{margin-top:var(--dyte-space-2, 8px);margin-left:var(--dyte-space-1, 4px);border-left-width:var(--dyte-border-width-sm, 1px);border-left-color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);font-size:12px;color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}";

const DyteAiHome = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.handleSubmit = (e) => {
      e.preventDefault();
      e.stopPropagation();
      this.messages = [
        ...this.messages,
        {
          action: 'Prompt',
          participantName: this.meeting.self.name,
          createdAt: new Date(),
          prompt: this.prompt,
          loading: true,
        },
      ];
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'default', message: this.prompt });
      this.prompt = '';
    };
    this.handleSummarise = () => {
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'summarization' });
    };
    this.handleAgenda = () => {
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'agenda generation' });
    };
    this.handleMoM = () => {
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'action items generation' });
    };
    this.prompt = '';
    this.messages = [];
    this.meeting = undefined;
    this.initialMessages = undefined;
  }
  // private handleChatGPTReply(data: AIMessage) {
  //   const existingMessage = this.messages.find((message) =>
  //     data.action === 'default'
  //       ? message.id === data.id
  //       : message.id === data.id || message.action === this.mapMessageAction(data.action)
  //   );
  //
  //   if (
  //     existingMessage &&
  //     (existingMessage.loading || existingMessage.action !== this.mapMessageAction('default'))
  //   ) {
  //     this.messages = [
  //       ...this.messages.map((message) =>
  //         message.id === data.id || message.action === this.mapMessageAction(data.action)
  //           ? { ...data, action: this.mapMessageAction(data.action) }
  //           : message
  //       ),
  //     ];
  //   } else {
  //     this.messages = [...this.messages, { ...data, action: this.mapMessageAction(data.action) }];
  //   }
  // }
  connectedCallback() {
    if (this.initialMessages) {
      this.messages = this.initialMessages.map((message) => (Object.assign(Object.assign({}, message), { action: this.mapMessageAction(message.action) })));
    }
    // this.middlewares?.speech?.on('chatGPTReply', (data) => this.handleChatGPTReply(data));
  }
  disconnectedCallback() {
    // this.middlewares?.speech?.off('chatGPTReply', (data) => this.handleChatGPTReply(data));
  }
  messagesUpdated() {
    // NOTE: I don't know why initially contentContainer ref is not set, That's
    // why this setTimeout. We can figure a better approach for this
    setTimeout(() => {
      scroll.smoothScrollToBottom(this.contentContainer, false);
    }, 100);
  }
  mapMessageAction(action) {
    switch (action) {
      case 'default':
        return 'Prompt';
      case 'summarization':
        return 'Summary';
      case 'agenda generation':
        return 'Agenda';
      case 'action items generation':
        return 'Action items';
    }
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "content scrollbar", ref: (el) => (this.contentContainer = el) }, index.h("p", { class: "public-message" }, "This conversation will be visible to everyone on the call."), !this.messages.length && (index.h("div", { class: "hint-message" }, index.h("p", null, "Ask ", index.h("i", null, "\"Hey AI, summarise this call\""), index.h("br", null), " or ", index.h("br", null), "Type ", index.h("i", null, "\"Hey AI, what is today's agenda?\"")))), this.messages.length > 0 && (index.h("div", { class: "" }, this.messages.map((message) => (index.h("div", { class: "message" }, index.h(ChatHead.ChatHead, { name: message.action, time: new Date(message.createdAt), now: new Date() }), index.h("p", { class: "subtitle" }, "Triggered by ", message.participantName), message.prompt && index.h("div", { class: "prompt-text" }, message.prompt), message.loading ? (index.h("div", { class: "loader" }, index.h("dyte-spinner", { size: "sm" }), "\u00A0\u00A0Generating...")) : (index.h("div", { class: "body" }, message.response)))))))), index.h("div", { class: "actions" }, index.h("span", null, "Quick actions:"), index.h("div", null, index.h("button", { onClick: this.handleSummarise }, "Summarise"), index.h("button", { onClick: this.handleAgenda }, "Agenda"), index.h("button", { onClick: this.handleMoM }, "MoM"))), index.h("form", { class: "prompt", onSubmit: this.handleSubmit }, index.h("input", { value: this.prompt, onInput: (e) => {
        this.prompt = e.target.value;
      }, placeholder: "Type your prompt..." }))));
  }
  static get watchers() { return {
    "messages": ["messagesUpdated"]
  }; }
};
DyteAiHome.style = dyteAiHomeCss;

exports.dyte_ai_home = DyteAiHome;
