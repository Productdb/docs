'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-f5ba2db8.js');
const defaultUiConfig = require('./default-ui-config-d5874568.js');
const grid = require('./grid-5774c6e4.js');
const defaultIconPack = require('./default-icon-pack-ddb6b86f.js');
const index$1 = require('./index-d63f2c88.js');
const index$2 = require('./index-c0cb7142.js');

const dyteSpotlightGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%}main{flex:1 1 0%}.grid-width-sm{width:25%}.grid-width-md{width:50%}.grid-width-lg{width:66.666667%}:host([size='sm']),:host([size='md']){flex-direction:column}:host([size='md']) aside{max-height:var(--dyte-space-96, 384px);width:100%;max-width:100%}:host([size='md']) .grid-width-sm{height:25%}:host([size='md']) .grid-width-md{height:50%}:host([size='md']) .grid-width-lg{height:66.666667%}:host([size='sm']) aside{max-height:var(--dyte-space-96, 384px);width:100%;max-width:100%}:host([size='sm']) .grid-width-sm,:host([size='sm']) .grid-width-md,:host([size='sm']) .grid-width-lg{height:50%}:host([size='xl']) .grid-width-sm,:host([size='xl']) .grid-width-md,:host([size='xl']) .grid-width-lg{width:400px}:host([layout='column']){flex-direction:column}:host([layout='column']) main{flex:4}:host([layout='column']) aside{flex:2;max-width:100%;width:100%}";

const DyteSpotlightGrid = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.getAdaptiveSize = (length) => {
      if (this.size === 'sm') {
        return 'sm';
      }
      if (length > 3) {
        return 'sm';
      }
      else {
        if (this.size === 'md') {
          return 'sm';
        }
        return 'md';
      }
    };
    this.layout = 'row';
    this.participants = [];
    this.pinnedParticipants = [];
    this.aspectRatio = '16:9';
    this.gap = 8;
    this.size = undefined;
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultUiConfig.defaultConfig;
    this.iconPack = defaultIconPack.defaultIconPack;
    this.t = index$1.useLanguage();
    this.gridSize = grid.defaultGridSize;
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states,
      size: this.size,
      iconPack: this.iconPack,
      t: this.t,
    };
    const nonPinnedParticipants = this.participants.filter((p) => this.pinnedParticipants.some((pt) => pt.id != p.id));
    return (index.h(index.Host, null, index.h("main", { part: "main" }, index.h(index$2.Render, { element: "dyte-simple-grid", defaults: defaults, props: {
        part: 'main-grid',
        participants: this.pinnedParticipants,
        aspectRatio: this.aspectRatio,
        gap: this.gap,
        size: this.getAdaptiveSize(this.pinnedParticipants.length),
      } })), nonPinnedParticipants.length > 0 && (index.h("aside", { part: "aside", class: this.gridSize.spotlight ? `grid-width-${this.gridSize.spotlight}` : 'grid-width-md' }, index.h(index$2.Render, { element: "dyte-simple-grid", defaults: defaults, props: {
        part: 'aside-grid',
        participants: nonPinnedParticipants,
        aspectRatio: this.aspectRatio,
        gap: this.gap,
        size: this.getAdaptiveSize(nonPinnedParticipants.length),
      } })))));
  }
  get host() { return index.getElement(this); }
};
DyteSpotlightGrid.style = dyteSpotlightGridCss;

exports.dyte_spotlight_grid = DyteSpotlightGrid;
