import { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';
import './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { M as MAX_TEXT_LENGTH } from './chat.js';
import { a as gracefulStorage } from './user-prefs.js';
import { d as defineCustomElement$b } from './dyte-button2.js';
import { d as defineCustomElement$a } from './dyte-draft-attachment-view2.js';
import { d as defineCustomElement$9 } from './dyte-emoji-picker2.js';
import { d as defineCustomElement$8 } from './dyte-emoji-picker-button2.js';
import { d as defineCustomElement$7 } from './dyte-file-picker-button2.js';
import { d as defineCustomElement$6 } from './dyte-icon2.js';
import { d as defineCustomElement$5 } from './dyte-markdown-view2.js';
import { d as defineCustomElement$4 } from './dyte-spinner2.js';
import { d as defineCustomElement$3 } from './dyte-text-composer-view2.js';
import { d as defineCustomElement$2 } from './dyte-text-message-view2.js';
import { d as defineCustomElement$1 } from './dyte-tooltip2.js';

const dyteChatComposerViewCss = ":host {\n  display: flex;\n  flex-direction: column;\n  font-family: var(--dyte-font-family, sans-serif);\n  font-size: 14px;\n  position: relative;\n}\n\n.quoted-message-container {\n  margin-bottom: var(--dyte-space-2, 8px);\n  display: flex;\n  justify-content: space-between;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n  border-radius: var(--dyte-border-radius-md, 8px);\n  border: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n}\n\n.quoted-message-container .quoted-message {\n  flex: 1 1 0%;\n  padding: var(--dyte-space-2, 8px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  max-height: var(--dyte-space-24, 96px);\n  overflow-y: auto;\n  word-break: break-all;\n}\n\n.quoted-message-container .quoted-message blockquote {\n  display: none;\n}\n\n.quoted-message-container dyte-icon.dismiss {\n  margin-left: auto;\n  height: var(--dyte-space-5, 20px);\n  width: var(--dyte-space-5, 20px);\n  padding: var(--dyte-space-2, 8px);\n  border-radius: var(--dyte-border-radius-md, 8px);\n  color: rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52));\n}\n\n.quoted-message-container dyte-icon.dismiss:hover {\n  cursor: pointer;\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\n.quoted-message-container dyte-icon.dismiss {\n  transition-property: color, background-color, border-color, fill, stroke, -webkit-text-decoration-color;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, -webkit-text-decoration-color;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.composer-container {\n  position: relative;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));\n  border-radius: var(--dyte-border-radius-md, 8px);\n  overflow: hidden;\n  border: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n}\n\n.composer-container > .composers {\n    min-height: 60px;\n  }\n\n@container chatcontainer (height < 360px) {\n    .composer-container > .composers {\n      min-height: 30px;\n    }\n}\n\n.chat-buttons {\n  padding: var(--dyte-space-3, 12px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  --tw-bg-opacity: 1;\n  background-color: rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255));\n}\n\n.chat-buttons .right {\n  z-index: 10;\n}\n\n.chat-buttons .right .edit-buttons {\n  display: flex;\n  gap: var(--dyte-space-2, 8px);\n}\n\n.chat-buttons > div {\n  display: flex;\n  align-items: center;\n}\n\ndyte-emoji-picker {\n  z-index: 20;\n  position: absolute;\n  top: calc(var(--dyte-space-72, 288px) * -1);\n  border-top: var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60));\n  animation: 0.3s slide-up ease;\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(100%);\n  }\n  to {\n    transform: translateY(0%);\n  }\n}\n";

const DyteChatComposerView = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onNewMessage = createEvent(this, "newMessage", 7);
    this.onEditMessage = createEvent(this, "editMessage", 7);
    this.onEditCancel = createEvent(this, "editCancel", 7);
    this.onQuotedMessageDismiss = createEvent(this, "quotedMessageDismiss", 7);
    this.textMessage = '';
    this.sendFile = () => {
      if (!this.canSendFiles) {
        return;
      }
      if (this.fileToUpload.type === 'image') {
        this.onNewMessage.emit({
          type: 'image',
          image: this.fileToUpload.file,
        });
      }
      else {
        this.onNewMessage.emit({ type: 'file', file: this.fileToUpload.file });
      }
      this.fileToUpload = null;
    };
    this.handleSendMessage = () => {
      if (!this.canSendTextMessage) {
        return;
      }
      if (this.fileToUpload !== null) {
        this.sendFile();
        return;
      }
      const message = this.textMessage;
      if (message.length > 0) {
        if (this.quotedMessage.length !== 0) {
          this.onNewMessage.emit({
            type: 'text',
            message,
          });
        }
        else {
          this.onNewMessage.emit({ type: 'text', message });
        }
        this.cleanup();
      }
    };
    this.handleEditMessage = () => {
      this.onEditMessage.emit(this.textMessage);
      this.cleanup();
    };
    this.handleEditCancel = () => {
      this.onEditCancel.emit();
      this.cleanup();
    };
    this.onTextChangeHandler = (event) => {
      this.textMessage = event.detail;
      gracefulStorage.setItem(this.storageKey, event.detail);
    };
    this.onKeyDownHandler = (event) => {
      if (event.key === 'Enter' && event.shiftKey) {
        return;
      }
      if (event.key === 'Enter') {
        event.preventDefault();
        if (this.isEditing) {
          this.handleEditMessage();
        }
        else {
          this.handleSendMessage();
        }
      }
    };
    this.onFileUploadHandler = (type, file) => {
      this.fileToUpload = { type, file };
    };
    this.onQuotedMessageDismissHandler = () => {
      this.onQuotedMessageDismiss.emit();
    };
    this.cleanup = () => {
      this.textMessage = '';
      this.fileToUpload = null;
      gracefulStorage.setItem(this.storageKey, '');
      this.$textComposer.setText('', true);
      this.isEmojiPickerOpen = false;
    };
    this.canSendTextMessage = true;
    this.canSendFiles = true;
    this.message = '';
    this.quotedMessage = '';
    this.storageKey = 'dyte-text-message';
    this.inputTextPlaceholder = 'Enter your message';
    this.isEditing = false;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.disableEmojiPicker = false;
    this.fileToUpload = null;
    this.isEmojiPickerOpen = false;
  }
  connectedCallback() {
    this.textMessage = this.message || gracefulStorage.getItem(this.storageKey) || '';
  }
  componentWillUpdate() {
    this.textMessage = this.message || gracefulStorage.getItem(this.storageKey) || '';
  }
  componentDidLoad() {
    if (this.message) {
      writeTask(() => this.$textComposer.setText(this.message, true));
    }
  }
  render() {
    const uiProps = { iconPack: this.iconPack, t: this.t };
    return (h(Host, null, this.canSendTextMessage && this.isEmojiPickerOpen && (h("dyte-emoji-picker", Object.assign({ part: "emoji-picker", onPickerClose: () => {
        this.isEmojiPickerOpen = false;
      }, onDyteEmojiClicked: (e) => {
        this.textMessage += e.detail;
        this.$textComposer.setText(this.textMessage, true);
      } }, uiProps))), h("slot", { name: "chat-addon" }), this.quotedMessage && this.quotedMessage.length !== 0 && (h("div", { class: "quoted-message-container", part: "quoted-message-container" }, h("div", { class: "quoted-message scrollbar" }, h("dyte-text-message-view", { text: this.quotedMessage, isMarkdown: true })), h("div", null, h("dyte-icon", Object.assign({ "aria-label": this.t('dismiss'), class: "dismiss", icon: this.iconPack.dismiss, onClick: this.onQuotedMessageDismissHandler }, uiProps))))), h("div", { class: "composer-container" }, h("div", { class: "composers" }, this.fileToUpload && (h("dyte-draft-attachment-view", { attachment: this.fileToUpload, onDeleteAttachment: () => (this.fileToUpload = null) })), !this.fileToUpload && (h("dyte-text-composer-view", { value: this.textMessage, placeholder: this.inputTextPlaceholder, onTextChange: this.onTextChangeHandler, keyDownHandler: this.onKeyDownHandler, maxLength: MAX_TEXT_LENGTH, ref: (el) => (this.$textComposer = el) }))), h("div", { class: "chat-buttons", part: "chat-buttons" }, h("div", { class: "left", part: "chat-buttons-left" }, !this.fileToUpload && !this.isEditing && (h("div", null, this.canSendFiles && [
      h("dyte-file-picker-button", { onFileChange: (event) => this.onFileUploadHandler('file', event.detail) }),
      h("dyte-file-picker-button", { filter: "image/*", label: this.t('chat.send_img'), icon: "image", onFileChange: (event) => this.onFileUploadHandler('image', event.detail) }),
    ], this.canSendTextMessage && !this.disableEmojiPicker && (h("dyte-emoji-picker-button", { isActive: this.isEmojiPickerOpen, onClick: () => {
        this.isEmojiPickerOpen = !this.isEmojiPickerOpen;
      } })), h("slot", { name: "chat-buttons" })))), h("div", { class: "right", part: "chat-buttons-right" }, !this.isEditing && (h("dyte-tooltip", Object.assign({ variant: "primary", label: this.t('chat.send_msg'), delay: 2000 }, uiProps), h("dyte-button", Object.assign({ kind: "icon", onClick: () => this.handleSendMessage(), title: this.t('chat.send_msg') }, uiProps), h("dyte-icon", { icon: this.iconPack.send })))), this.isEditing && (h("div", { class: "edit-buttons" }, h("dyte-tooltip", Object.assign({ variant: "secondary", label: this.t('cancel'), delay: 2000 }, uiProps), h("dyte-button", Object.assign({ kind: "icon", variant: "secondary", onClick: () => this.handleEditCancel(), title: this.t('cancel') }, uiProps), h("dyte-icon", { icon: this.iconPack.dismiss }))), h("dyte-tooltip", Object.assign({ variant: "primary", label: this.t('chat.update_msg'), delay: 2000 }, uiProps), h("dyte-button", Object.assign({ kind: "icon", onClick: () => this.handleEditMessage(), title: this.t('chat.send_msg') }, uiProps), h("dyte-icon", { icon: this.iconPack.checkmark }))))))))));
  }
  static get style() { return dyteChatComposerViewCss; }
}, [1, "dyte-chat-composer-view", {
    "canSendTextMessage": [4, "can-send-text-message"],
    "canSendFiles": [4, "can-send-files"],
    "message": [1],
    "quotedMessage": [1, "quoted-message"],
    "storageKey": [1, "storage-key"],
    "inputTextPlaceholder": [1, "input-text-placeholder"],
    "isEditing": [4, "is-editing"],
    "iconPack": [16],
    "t": [16],
    "disableEmojiPicker": [4, "disable-emoji-picker"],
    "fileToUpload": [32],
    "isEmojiPickerOpen": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-chat-composer-view", "dyte-button", "dyte-draft-attachment-view", "dyte-emoji-picker", "dyte-emoji-picker-button", "dyte-file-picker-button", "dyte-icon", "dyte-markdown-view", "dyte-spinner", "dyte-text-composer-view", "dyte-text-message-view", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-chat-composer-view":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteChatComposerView);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "dyte-draft-attachment-view":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "dyte-emoji-picker":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "dyte-emoji-picker-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "dyte-file-picker-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "dyte-markdown-view":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-text-composer-view":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-text-message-view":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteChatComposerView as D, defineCustomElement as d };
