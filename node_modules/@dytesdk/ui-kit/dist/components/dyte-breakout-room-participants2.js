import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { p as participantIdentifier, g as getAllConnectedParticipants } from './breakout-rooms.js';
import { f as formatName, s as shorten } from './string.js';
import { d as defineCustomElement$4 } from './dyte-avatar2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';
import { d as defineCustomElement$1 } from './dyte-tooltip2.js';

const dyteBreakoutRoomParticipantsCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{display:flex;height:100%;flex-direction:column;font-size:14px}:host input[type='checkbox']{margin:var(--dyte-space-0, 0px);cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;border-radius:var(--dyte-border-radius-sm, 4px);position:relative;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);border-width:var(--dyte-border-width-sm, 1px);border-style:solid;border-color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}:host input[type='checkbox']:checked{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-border-opacity));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}:host input[type='checkbox']:checked::before{position:absolute;top:1px;left:1px;height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px);background-color:rgb(var(--dyte-colors-text-1000, 255 255 255));content:'';-webkit-clip-path:polygon(5% 60%, 35% 93%, 100% 19%, 86% 4%, 36% 62%, 19% 44%);clip-path:polygon(5% 60%, 35% 93%, 100% 19%, 86% 4%, 36% 62%, 19% 44%)}*{box-sizing:border-box}.participants{margin-top:var(--dyte-space-2, 8px);padding:var(--dyte-space-0, 0px)}.ctr{box-sizing:border-box;padding-top:var(--dyte-space-0, 0px);padding-bottom:var(--dyte-space-0, 0px);overflow-y:auto;flex-grow:1;flex-basis:0}.empty-message{margin-top:var(--dyte-space-10, 40px);margin-bottom:var(--dyte-space-10, 40px);text-align:center;font-size:14px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.empty-room{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:var(--dyte-space-2, 8px);height:100%;text-align:center;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.empty-room dyte-icon{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px)}.empty-room p{font-size:16px;font-weight:500;margin:var(--dyte-space-0, 0px)}.empty-room span{font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.search-wrapper{margin-bottom:var(--dyte-space-1, 4px);display:flex;align-items:center;gap:var(--dyte-space-2, 8px)}.search{position:sticky;box-sizing:border-box;display:flex;align-items:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0, 0px);height:var(--dyte-space-8, 32px)}.search .search-icon{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.search input{box-sizing:border-box;width:100%;padding-right:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:inherit;color:rgb(var(--dyte-colors-text-1000, 255 255 255));outline:2px solid transparent;outline-offset:2px;border-radius:var(--dyte-border-radius-sm, 4px);font-size:14px}.search input::-moz-placeholder{color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.search input::placeholder{color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}.header{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-1\\.5, 6px);height:var(--dyte-space-9, 36px);padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-0\\.5, 2px);border-bottom-width:var(--dyte-border-width-sm, 1px);border-top-width:var(--dyte-border-width-none, 0);border-right-width:var(--dyte-border-width-none, 0);border-left-width:var(--dyte-border-width-none, 0);border-style:solid;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity));font-size:12px;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));display:flex;align-items:center;justify-content:space-between}.title-wrapper{display:flex;align-items:center;gap:var(--dyte-space-2, 8px)}.participant-count{display:flex;align-items:center;font-size:14px}.participant-count dyte-icon{margin-right:var(--dyte-space-0\\.5, 2px);width:var(--dyte-space-3, 12px)}.participant-item{display:flex;align-items:center;justify-content:space-between;margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);border-radius:var(--dyte-border-radius-sm, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);cursor:pointer}.participant-item input.hide-checkbox{display:none}.participant-item input:checked{display:inline-block}.dragging input{display:none}.participant-item:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.participant-item:hover input{display:inline-block}.peer-ui-container{position:relative;display:flex;align-items:center;gap:var(--dyte-space-2, 8px);height:var(--dyte-space-10, 40px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px);color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.peer-ui-container dyte-avatar{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px);font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.peer-ui-container .name{font-size:14px;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}";

const DyteBreakoutRoomParticipants = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onSelectedParticipantsUpdate = createEvent(this, "selectedParticipantsUpdate", 7);
    this.onAllToggled = createEvent(this, "allParticipantsToggleUpdate", 7);
    this.onParticipantsDragging = createEvent(this, "participantsDragging", 7);
    this.onSearchInput = (e) => {
      this.search = e.target.value;
    };
    this.onDragStart = (participant) => {
      this.isDragging = true;
      this.onParticipantsDragging.emit(true);
      this.updateSelectedParticipants(participant, true);
    };
    this.onDragEnd = (participant) => {
      this.isDragging = false;
      this.onParticipantsDragging.emit(false);
      this.updateSelectedParticipants(participant, false);
    };
    this.onClick = (participant) => {
      const selected = this.selectedParticipantIds.includes(participantIdentifier(participant));
      this.updateSelectedParticipants(participant, !selected);
    };
    this.onToggleAll = (checked) => {
      const selectedParticipants = checked ? this.participantsToShow.map(participantIdentifier) : [];
      this.onAllToggled.emit(selectedParticipants);
    };
    this.meeting = undefined;
    this.participantIds = [];
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.search = '';
    this.participantsToShow = [];
    this.selectedParticipantIds = [];
    this.isDragging = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.searchChanged(this.search);
  }
  disconnectedCallback() {
    if (this.meeting == null)
      return;
  }
  updateSelectedParticipants(participant, selected) {
    const id = participantIdentifier(participant);
    let selectedParticipants = [];
    if (selected && !this.selectedParticipantIds.includes(id)) {
      selectedParticipants = [...this.selectedParticipantIds, id];
    }
    else {
      selectedParticipants = [...this.selectedParticipantIds.filter((x) => x !== id)];
    }
    this.onSelectedParticipantsUpdate.emit(selectedParticipants);
  }
  meetingChanged(meeting) {
    if (meeting == null)
      return;
    this.getParticipants(this.search);
  }
  participantsChanged() {
    this.getParticipants(this.search);
  }
  searchChanged(search) {
    this.getParticipants(search);
  }
  getParticipants(search) {
    const allParticipants = getAllConnectedParticipants(this.meeting);
    this.participantsToShow = allParticipants.filter((participant) => {
      var _a;
      return (this.participantIds.includes(participantIdentifier(participant)) &&
        ((_a = participant.displayName) !== null && _a !== void 0 ? _a : '').toLowerCase().includes(search.toLowerCase()));
    });
  }
  renderPeer(participant) {
    const name = formatName(participant.displayName || '');
    return (h("div", { class: "peer-ui-container" }, h("dyte-avatar", { participant: {
        name: participant.displayName,
        picture: participant.displayPictureUrl,
      }, size: "sm" }), h("p", { class: "name", title: name }, shorten(name, 16), this.meeting.self.userId === participant.id && ` (${this.t('you')})`)));
  }
  render() {
    return (h(Host, null, h("div", { class: "search-wrapper" }, h("div", { class: "search", part: "search" }, h("dyte-icon", { icon: this.iconPack.search, part: "search-icon", iconPack: this.iconPack, t: this.t, class: "search-icon" }), h("input", { type: "search", autocomplete: "off", placeholder: "Search", onInput: this.onSearchInput, part: "search-input" })), h("slot", { name: "shuffle-button" })), h("div", { class: "header" }, h("div", { class: "title-wrapper" }, h("span", null, this.t('breakout_rooms.main_room')), h("span", { class: "participant-count" }, "(", h("dyte-icon", { icon: this.iconPack.people, iconPack: this.iconPack, t: this.t }), this.participantsToShow.length, ")")), this.selectedParticipantIds.length !== 0 && (h("dyte-tooltip", { label: this.t('breakout_rooms.select_all'), iconPack: this.iconPack, t: this.t }, h("input", { type: "checkbox", checked: this.selectedParticipantIds.length === this.participantsToShow.length, onChange: (e) => this.onToggleAll(!!e.target.checked) })))), h("div", { class: "ctr scrollbar", part: "container" }, this.participantsToShow.length > 0 && (h("ul", { class: "participants", part: "participants" }, this.participantsToShow.map((participant) => (h("li", { class: { 'participant-item': true, dragging: this.isDragging }, onClick: () => this.onClick(participant), onDragStart: () => this.onDragStart(participant), onDragEnd: () => this.onDragEnd(participant), draggable: this.selectedParticipantIds.length === 0, role: "listitem", key: participant.id }, this.renderPeer(participant), !this.isDragging && (h("input", { type: "checkbox", class: {
        'hide-checkbox': this.selectedParticipantIds.length === 0,
      }, checked: this.selectedParticipantIds.includes(participantIdentifier(participant)) }))))))), this.participantsToShow.length === 0 && this.search.length > 0 && (h("div", { class: "empty-message" }, this.t('participants.errors.empty_results'))), this.participantsToShow.length === 0 && this.search.length === 0 && (h("div", { class: "empty-room" }, h("dyte-icon", { icon: this.iconPack.people_checked, part: "search-icon", iconPack: this.iconPack, t: this.t, class: "search-icon" }), h("p", null, this.t('breakout_rooms.all_assigned')), h("span", null, this.t('breakout_rooms.empty_main_room')))))));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "participantIds": ["participantsChanged"],
    "search": ["searchChanged"]
  }; }
  static get style() { return dyteBreakoutRoomParticipantsCss; }
}, [1, "dyte-breakout-room-participants", {
    "meeting": [16],
    "participantIds": [16],
    "iconPack": [16],
    "t": [16],
    "selectedParticipantIds": [16],
    "search": [32],
    "participantsToShow": [32],
    "isDragging": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-breakout-room-participants", "dyte-avatar", "dyte-icon", "dyte-spinner", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-breakout-room-participants":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteBreakoutRoomParticipants);
      }
      break;
    case "dyte-avatar":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteBreakoutRoomParticipants as D, defineCustomElement as d };
