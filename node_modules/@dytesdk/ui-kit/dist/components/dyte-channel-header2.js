import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { d as defineCustomElement$7 } from './dyte-avatar2.js';
import { d as defineCustomElement$6 } from './dyte-button2.js';
import { d as defineCustomElement$5 } from './dyte-channel-details2.js';
import { d as defineCustomElement$4 } from './dyte-dialog2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';
import { d as defineCustomElement$1 } from './dyte-tooltip2.js';

const dyteChannelHeaderCss = "header{box-sizing:border-box;height:var(--dyte-space-16, 64px);width:100%;padding:var(--dyte-space-4, 16px);display:flex;justify-content:space-between;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));border-left-width:var(--dyte-border-width-none, 0);border-right-width:var(--dyte-border-width-none, 0);border-bottom-width:var(--dyte-border-width-sm, 1px);border-top-width:var(--dyte-border-width-none, 0);border-style:solid;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-border-opacity))}header.searching{justify-content:flex-end}header.searching .channel-details{display:none}header .channel-details{display:flex;flex-grow:1;flex-direction:column;justify-content:center;height:var(--dyte-space-9, 36px);width:var(--dyte-space-1, 4px)}header .channel-details .name{font-weight:500}header .channel-details .members{margin-top:var(--dyte-space-0\\.5, 2px);overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}header .channel-tools{display:flex;flex-shrink:0;justify-content:flex-end;gap:var(--dyte-space-1, 4px);min-width:var(--dyte-space-24, 96px)}header .channel-tools dyte-tooltip{height:var(--dyte-space-8, 32px);width:var(--dyte-space-10, 40px);display:flex}header .search-input{height:var(--dyte-space-8, 32px);width:var(--dyte-space-48, 192px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}header .name{font-size:16px}header .br-primary-btn{background-color:transparent}header .br-primary-btn:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}@media (orientation: landscape) and (min-width: 400px){header.searching .channel-details{display:flex}}.back-btn{margin-right:var(--dyte-space-3, 12px)}";

const DyteChannelHeader = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.search = createEvent(this, "search", 7);
    this.searchDismissed = createEvent(this, "searchDismissed", 7);
    this.back = createEvent(this, "back", 7);
    this.meeting = undefined;
    this.channel = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.showChannelDetailsDialog = false;
    this.showSearchBar = false;
    this.members = [];
    this.showBackButton = false;
  }
  onChannelChanged() {
    if (this.$searchInput)
      this.$searchInput.value = '';
    this.showSearchBar = false;
    if (!this.channel.isDirectMessage) {
      this.meeting.chat.getChannelMembers(this.channel.id).then((members) => {
        this.members = members;
      });
    }
  }
  connectedCallback() {
    this.onChannelChanged();
  }
  renderChannelDetails() {
    return (h("dyte-dialog", { open: true, onDyteDialogClose: () => {
        this.showChannelDetailsDialog = false;
      }, iconPack: this.iconPack, t: this.t }, h("dyte-channel-details", { members: this.members, channel: this.channel })));
  }
  render() {
    if (!this.channel) {
      return null;
    }
    return (h(Host, null, this.showChannelDetailsDialog && this.renderChannelDetails(), h("header", { class: {
        searching: this.showSearchBar,
      } }, this.showBackButton && (h("dyte-button", { kind: "icon", variant: "secondary", class: "back-btn", onClick: () => {
        this.back.emit();
      } }, h("dyte-icon", { icon: this.iconPack.chevron_left }))), h("div", { class: "channel-details" }, h("span", { class: "name" }, this.channel.displayName), !this.channel.isDirectMessage && (h("span", { class: "members" }, this.members.map((member) => member.name).join(', ')))), h("div", { class: "channel-tools" }, !this.channel.isDirectMessage && (h("dyte-tooltip", { label: this.t('chat.channel_members'), iconPack: this.iconPack, t: this.t, variant: "primary" }, h("dyte-button", { iconPack: this.iconPack, t: this.t, kind: "button", variant: "secondary", size: "md", onClick: () => {
        this.showChannelDetailsDialog = !this.showChannelDetailsDialog;
      }, class: "br-primary-btn" }, h("dyte-icon", { icon: this.iconPack.people, iconPack: this.iconPack, t: this.t }))))))));
  }
  static get watchers() { return {
    "channel": ["onChannelChanged"]
  }; }
  static get style() { return dyteChannelHeaderCss; }
}, [0, "dyte-channel-header", {
    "meeting": [16],
    "channel": [16],
    "iconPack": [16],
    "t": [16],
    "showBackButton": [4, "show-back-button"],
    "showChannelDetailsDialog": [32],
    "showSearchBar": [32],
    "members": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-channel-header", "dyte-avatar", "dyte-button", "dyte-channel-details", "dyte-dialog", "dyte-icon", "dyte-spinner", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-channel-header":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteChannelHeader);
      }
      break;
    case "dyte-avatar":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "dyte-channel-details":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "dyte-dialog":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteChannelHeader as D, defineCustomElement as d };
