import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';

const dyteClockCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);display:inline-flex;align-items:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255));font-variant-numeric:tabular-nums}:host([size='sm']){margin-left:var(--dyte-space-1, 4px);margin-right:var(--dyte-space-1, 4px);font-size:12px}dyte-icon{margin-right:var(--dyte-space-1, 4px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px)}:host([size='sm']) dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}";

const addZero = (n) => Math.trunc(n).toString().padStart(2, '0');
const DyteClock$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.disconnectMeeting = () => {
      var _a, _b;
      this.timeout && clearTimeout(this.timeout);
      typeof this.request === 'number' && cancelAnimationFrame(this.request);
      (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.removeListener('meetingStartTimeUpdate', this.startedTimeUpdateListener);
    };
    this.startedTimeUpdateListener = () => {
      var _a, _b, _c;
      this.startedTime = (_c = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.meetingStartedTimestamp) === null || _c === void 0 ? void 0 : _c.toISOString();
    };
    this.meeting = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.startedTime = undefined;
    this.timeDiff = undefined;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    this.disconnectMeeting();
  }
  meetingChanged(meeting) {
    var _a, _b, _c;
    this.disconnectMeeting();
    if (meeting != null) {
      this.startedTime = (_b = (_a = meeting.meta) === null || _a === void 0 ? void 0 : _a.meetingStartedTimestamp) === null || _b === void 0 ? void 0 : _b.toISOString();
      (_c = meeting.meta) === null || _c === void 0 ? void 0 : _c.addListener('meetingStartTimeUpdate', this.startedTimeUpdateListener);
    }
  }
  startedTimeChanged(startedTime) {
    if (startedTime !== undefined) {
      const animate = () => {
        this.timeDiff = (Date.now() - new Date(this.startedTime).getTime()) / 1000;
        this.timeout = setTimeout(() => {
          if (this.request != null) {
            this.request = requestAnimationFrame(animate);
          }
        }, 500);
      };
      this.request = requestAnimationFrame(animate);
    }
  }
  getFormattedTime() {
    if (this.timeDiff == null) {
      return null;
    }
    const diff = this.timeDiff;
    let time = '';
    if (diff >= 3600) {
      time = `${addZero(diff / 3600)}:`;
    }
    time += `${addZero((diff % 3600) / 60)}:${addZero(diff % 60)}`;
    return time;
  }
  render() {
    return (h(Host, { tabIndex: 0, role: "timer", "aria-live": "off" }, this.startedTime !== undefined && [
      h("dyte-icon", { icon: this.iconPack.clock, "aria-hidden": true, tabIndex: -1, part: "icon", iconPack: this.iconPack, t: this.t }),
      h("span", { part: "text" }, this.getFormattedTime()),
    ]));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "startedTime": ["startedTimeChanged"]
  }; }
  static get style() { return dyteClockCss; }
}, [1, "dyte-clock", {
    "meeting": [16],
    "iconPack": [16],
    "t": [16],
    "startedTime": [32],
    "timeDiff": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-clock", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-clock":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteClock$1);
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteClock = DyteClock$1;
const defineCustomElement = defineCustomElement$1;

export { DyteClock, defineCustomElement };
