import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { u as useLanguage } from './index2.js';
import './store.js';
import './breakout-rooms-manager.js';
import { d as defaultConfig } from './default-ui-config.js';
import './livestream.js';
import './user-prefs.js';

const dyteLogoCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;flex-direction:column;align-items:center;justify-content:center;color:rgb(var(--dyte-colors-text-1000, 255 255 255));height:100%;width:auto}svg,img{height:100%;width:auto}.brand-color{--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity))}";

const DyteLogo = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.logoUrl = undefined;
    this.config = defaultConfig;
    this.meeting = undefined;
    this.t = useLanguage();
  }
  connectedCallback() {
    this.configChanged(this.config);
    this.meetingChanged(this.meeting);
  }
  configChanged(config) {
    var _a;
    if (config != null) {
      const configLogo = (_a = config === null || config === void 0 ? void 0 : config.designTokens) === null || _a === void 0 ? void 0 : _a.logo;
      // NOTE(callmetarush): Only update logo if not passed via prop
      if (configLogo != null && this.logoUrl == null) {
        this.logoUrl = configLogo;
      }
    }
  }
  meetingChanged(meeting) {
    var _a, _b, _c, _d;
    if (meeting != null) {
      const meetingLogo = (_d = (_c = (_b = (_a = meeting.self) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.header) === null || _c === void 0 ? void 0 : _c.elements) === null || _d === void 0 ? void 0 : _d.logo;
      if (meetingLogo != null && this.logoUrl == null) {
        this.logoUrl = meetingLogo;
      }
    }
  }
  render() {
    if (!this.logoUrl || this.logoUrl === '') {
      return null;
    }
    const logo = this.logoUrl;
    const text = this.t('logo');
    return (h(Host, { class: "loaded" }, h("img", { src: logo, alt: text })));
  }
  static get watchers() { return {
    "config": ["configChanged"],
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dyteLogoCss; }
}, [1, "dyte-logo", {
    "logoUrl": [1025, "logo-url"],
    "config": [16],
    "meeting": [16],
    "t": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-logo"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-logo":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteLogo);
      }
      break;
  } });
}

export { DyteLogo as D, defineCustomElement as d };
