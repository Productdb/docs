import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultConfig } from './default-ui-config.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { f as formatName, s as shorten } from './string.js';
import { d as defineCustomElement$4 } from './dyte-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spotlight-indicator2.js';
import { d as defineCustomElement$1 } from './dyte-tooltip2.js';

const dyteTabBarCss = ".scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{box-sizing:border-box;display:flex;height:100%;width:var(--dyte-space-16, 64px);flex-direction:column;gap:var(--dyte-space-2, 8px);overflow-y:auto;font-family:var(--dyte-font-family, sans-serif)}dyte-button{z-index:10}.col{display:flex;flex-direction:column;align-items:center}.tab{display:flex;height:var(--dyte-space-16, 64px);width:var(--dyte-space-16, 64px);align-items:center;justify-content:center;margin-bottom:var(--dyte-space-2, 8px);font-size:12px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity))}.tab.active{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity))}.tab img{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px);border-radius:var(--dyte-border-radius-sm, 4px)}.tab .name{margin-top:var(--dyte-space-0\\.5, 2px)}:host([size='sm']){flex-direction:column;margin-top:var(--dyte-space-4, 16px);height:var(--dyte-space-16, 64px);width:100%;flex-direction:row;gap:var(--dyte-space-2, 8px);overflow-x:auto}:host([size='sm']) .tab{margin:var(--dyte-space-0, 0px);text-overflow:clip;min-width:100px;height:40px}:host([size='sm']) .tab .col{display:flex;flex-direction:row;align-items:center;gap:var(--dyte-space-2, 8px)}:host([size='sm']) .tab .col img,:host([size='sm']) .tab .col dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}:host([size='sm']) .tab .col .name{gap:var(--dyte-space-1, 4px)}:host([layout='column']){flex-direction:column}:host([layout='column']) .aside{flex:2;max-width:100%;width:100%}@media (orientation: portrait){:host([size='sm']){margin-top:var(--dyte-space-2, 8px);height:var(--dyte-space-16, 64px);width:100%;flex-direction:row;transition:all 0.3s linear}:host([size='md']){height:var(--dyte-space-24, 96px);width:100%;flex-direction:row;transition:all 0.3s linear}:host .tab{margin:var(--dyte-space-0, 0px)}}@media (orientation: landscape){:host([size='sm']){margin-right:var(--dyte-space-4, 16px);height:100%;width:var(--dyte-space-14, 56px);flex-direction:row;gap:var(--dyte-space-2, 8px);overflow-y:auto;overflow-x:hidden;transition:all 0.3s linear}:host([size='md']){margin-right:var(--dyte-space-4, 16px);height:100%;width:var(--dyte-space-14, 56px);flex-direction:row;gap:var(--dyte-space-2, 8px);overflow-y:auto;overflow-x:hidden;transition:all 0.3s linear}:host .tab{margin:var(--dyte-space-0, 0px)}:host([size='sm']) .tab{margin:var(--dyte-space-0, 0px);width:100%;text-overflow:clip;min-width:0px;min-height:40px}:host([size='sm']) .tab .col{display:flex;flex-direction:column;align-items:center;gap:var(--dyte-space-2, 8px);font-size:10px}:host([size='sm']) .tab .col img,:host([size='sm']) .tab .col dyte-icon{height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px)}:host([size='sm']) .tab .col .name{gap:var(--dyte-space-1, 4px)}}";

const DyteTabBar = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.tabChange = createEvent(this, "tabChange", 7);
    this.size = undefined;
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultConfig;
    this.layout = 'row';
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.activeTab = undefined;
    this.tabs = [];
  }
  render() {
    return (h(Host, null, h("dyte-spotlight-indicator", { meeting: this.meeting, iconPack: this.iconPack, t: this.t, size: this.size }), this.tabs.map((tab) => {
      var _a, _b, _c, _d, _e;
      let isActive = false;
      if (((_a = this.activeTab) === null || _a === void 0 ? void 0 : _a.type) === 'plugin' &&
        tab.plugin &&
        ((_b = this.activeTab) === null || _b === void 0 ? void 0 : _b.plugin.id) === tab.plugin.id)
        isActive = true;
      else if (((_c = this.activeTab) === null || _c === void 0 ? void 0 : _c.type) === 'screenshare' &&
        tab.participant &&
        ((_d = this.activeTab) === null || _d === void 0 ? void 0 : _d.participant.id) === tab.participant.id)
        isActive = true;
      if (tab.type === 'screenshare') {
        const participant = tab.participant;
        const name = formatName(participant.name);
        return (h("dyte-button", { title: `${name}'s Screen Share`, key: tab.participant.id, kind: "icon", iconPack: this.iconPack, t: this.t, variant: isActive ? 'primary' : 'secondary', class: {
            tab: true,
            active: isActive,
          }, onClick: () => this.tabChange.emit(tab) }, h("div", { class: "center col" }, h("dyte-icon", { icon: this.iconPack.share_screen_person, iconPack: this.iconPack, t: this.t }), h("span", { class: "name" }, participant.id === ((_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self.id) ? this.t('you') : shorten(name, 6)))));
      }
      else if (tab.type === 'plugin') {
        const plugin = tab.plugin;
        return (h("dyte-button", { title: plugin.name, key: plugin.id, kind: "icon", iconPack: this.iconPack, t: this.t, variant: isActive ? 'primary' : 'secondary', class: {
            tab: true,
            active: isActive,
          }, onClick: () => this.tabChange.emit(tab) }, h("div", { class: "center col" }, h("img", { src: plugin.picture }), h("span", { class: "name" }, shorten(plugin.name, 6)))));
      }
    })));
  }
  static get style() { return dyteTabBarCss; }
}, [1, "dyte-tab-bar", {
    "size": [513],
    "meeting": [16],
    "states": [16],
    "config": [16],
    "layout": [513],
    "iconPack": [16],
    "t": [16],
    "activeTab": [16],
    "tabs": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-tab-bar", "dyte-button", "dyte-icon", "dyte-spotlight-indicator", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-tab-bar":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteTabBar);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spotlight-indicator":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteTabBar as D, defineCustomElement as d };
