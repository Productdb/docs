import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { C as ChatHead } from './ChatHead.js';
import { a as sanitizeLink } from './string.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { g as getExtension, a as getFileSize, d as downloadFile } from './file.js';
import { u as useLanguage } from './index2.js';
import { d as defineCustomElement$2 } from './dyte-button2.js';
import { d as defineCustomElement$1 } from './dyte-icon2.js';

const DyteFileMessage = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.message = undefined;
    this.now = new Date();
    this.isContinued = false;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.showBubble = false;
  }
  render() {
    const link = sanitizeLink(this.message.link);
    return (h(Host, null, !this.isContinued && (h(ChatHead, { name: this.message.displayName, time: this.message.time, now: this.now })), h("div", { class: {
        body: true,
        bubble: this.showBubble,
      }, part: "body" }, h("div", { class: "file" }, h("div", { class: "file-data" }, h("div", { class: "name" }, this.message.name), h("div", { class: "file-data-split" }, h("div", { class: "ext" }, getExtension(this.message.name)), h("span", { class: "divider" }), h("div", { class: "size" }, getFileSize(this.message.size)))), h("dyte-button", { variant: "secondary", kind: "icon", iconPack: this.iconPack, t: this.t, onClick: () => downloadFile(link, { name: this.message.name, fallbackName: 'file' }), part: "button" }, h("dyte-icon", { icon: this.iconPack.download, iconPack: this.iconPack, t: this.t }))))));
  }
}, [0, "dyte-file-message", {
    "message": [16],
    "now": [16],
    "isContinued": [516, "is-continued"],
    "iconPack": [16],
    "t": [16],
    "showBubble": [4, "show-bubble"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-file-message", "dyte-button", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-file-message":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteFileMessage);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteFileMessage as D, defineCustomElement as d };
