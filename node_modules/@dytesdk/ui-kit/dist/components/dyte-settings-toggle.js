import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { s as state } from './store.js';
import { d as defineCustomElement$4 } from './dyte-controlbar-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';

const dyteSettingsToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DyteSettingsToggle$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.variant = 'button';
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  toggleSettings() {
    var _a;
    this.stateUpdate.emit({
      activeSettings: !((_a = this.states) === null || _a === void 0 ? void 0 : _a.activeSettings),
      activeMoreMenu: false,
    });
    state.activeSettings = !state.activeSettings;
    state.activeMoreMenu = false;
  }
  render() {
    const text = this.t('settings');
    return (h(Host, { title: text }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, onClick: () => this.toggleSettings(), icon: this.iconPack.settings, label: text, variant: this.variant })));
  }
  static get style() { return dyteSettingsToggleCss; }
}, [1, "dyte-settings-toggle", {
    "variant": [513],
    "states": [16],
    "size": [513],
    "iconPack": [16],
    "t": [16]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-settings-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-settings-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteSettingsToggle$1);
      }
      break;
    case "dyte-controlbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteSettingsToggle = DyteSettingsToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteSettingsToggle, defineCustomElement };
