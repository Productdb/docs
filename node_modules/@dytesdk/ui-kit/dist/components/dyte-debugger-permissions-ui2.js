import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { p as permissionPrompts } from './troubleshooter.js';
import { d as defineCustomElement$2 } from './dyte-button2.js';
import { d as defineCustomElement$1 } from './dyte-icon2.js';

const dyteDebuggerPermissionsUiCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.dyte-select{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.dyte-select:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dyte-select{display:block;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:var(--dyte-space-3, 12px);font-size:16px;--icon-size:var(--dyte-select-chevron-size, var(--dyte-space-6, 24px));--icon-right-position:var(--dyte-select-chevron-right-position, var(--dyte-space-2, 8px));background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\");background-position:right var(--icon-right-position) center;background-repeat:no-repeat;background-size:var(--icon-size) var(--icon-size);padding-right:calc(var(--icon-right-position) * 5)}:host{display:flex;flex-direction:column;align-items:flex-start;justify-content:flex-start;width:100%}h3{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);font-size:14px}.info{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:14px}.info dyte-icon{margin-right:var(--dyte-space-2, 8px)}.text{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);font-size:14px;font-weight:100 !important;line-height:1.5;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.title{display:flex;width:-moz-fit-content;width:fit-content;flex-direction:row;align-items:center;justify-content:center;font-size:16px;font-weight:700;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.title dyte-icon{margin-right:var(--dyte-space-2, 8px)}.device-indicator{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);display:flex;flex-direction:column}.sub-title{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);font-size:14px;font-weight:600;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));letter-spacing:0.5px}.recommendation{margin-bottom:var(--dyte-space-1, 4px);display:flex;flex-direction:row;align-items:flex-start;justify-content:flex-start;font-size:12px;line-height:1.5;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.recommendation div{margin-right:var(--dyte-space-2, 8px)}.device{margin-bottom:var(--dyte-space-2, 8px);display:flex;flex-direction:row;font-size:14px}.device .label{width:var(--dyte-space-32, 128px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.device .seperator{margin-right:var(--dyte-space-2, 8px);color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.ACCEPTED{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}.NOT_REQUESTED{color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.NOT_REQUESTED dyte-icon{--tw-text-opacity:1;color:rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity))}.DENIED,.SYSTEM_DENIED,.COULD_NOT_START{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}video{margin-top:var(--dyte-space-2, 8px);height:var(--dyte-space-36, 144px);width:auto;border-radius:var(--dyte-border-radius-md, 8px)}dyte-button{margin-top:var(--dyte-space-2, 8px)}";

const DyteDebuggerAudio = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.meeting = undefined;
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.issueKey = 0;
    this.permission = undefined;
    this.devices = {};
    this.mediaType = undefined;
  }
  connectedCallback() {
    this.permissionUpdate(this.meeting, this.mediaType);
  }
  disconnectedCallback() {
    const { self } = this.meeting;
    self === null || self === void 0 ? void 0 : self.removeListener('mediaPermissionUpdate', this.updatePermission);
  }
  permissionUpdate(meeting, mediaType) {
    var _a, _b;
    if (!meeting || !mediaType)
      return;
    const { self, troubleshoot } = meeting;
    this.permission = (_b = (_a = troubleshoot[mediaType]) === null || _a === void 0 ? void 0 : _a.mediaPermission) !== null && _b !== void 0 ? _b : 'NOT_REQUESTED';
    this.getDevices();
    self === null || self === void 0 ? void 0 : self.addListener('mediaPermissionUpdate', this.updatePermission.bind(this));
    self === null || self === void 0 ? void 0 : self.addListener('deviceUpdate', this.deviceUpdateListener.bind(this));
  }
  updatePermission({ kind, message }) {
    if (kind !== this.mediaType)
      return;
    this.permission = message;
  }
  // TODO: later change this to events and consume the functions in audio/video troubleshooter components
  async allowPermission() {
    var _a, _b;
    if (this.mediaType === 'audio') {
      const troubleshooter = (_a = this.meeting.troubleshoot) === null || _a === void 0 ? void 0 : _a.audio;
      await (troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.startTrackAnalysis(true));
      troubleshooter.stopTrackAnalysis();
    }
    if (this.mediaType === 'video') {
      const troubleshooter = (_b = this.meeting.troubleshoot) === null || _b === void 0 ? void 0 : _b.video;
      await troubleshooter.startPreview();
      troubleshooter.stopPreview();
    }
  }
  deviceUpdateListener({ device, preview }) {
    if (preview)
      return;
    if (device.kind === 'audioinput')
      this.devices = Object.assign(Object.assign({}, this.devices), { Microphone: device });
    if (device.kind === 'audiooutput')
      this.devices = Object.assign(Object.assign({}, this.devices), { Speaker: device });
    if (device.kind === 'videoinput')
      this.devices = Object.assign(Object.assign({}, this.devices), { Camera: device });
  }
  getDevices() {
    var _a, _b;
    const currentDevices = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.getCurrentDevices();
    const Microphone = currentDevices === null || currentDevices === void 0 ? void 0 : currentDevices.audio;
    const Speaker = currentDevices === null || currentDevices === void 0 ? void 0 : currentDevices.speaker;
    const Camera = currentDevices === null || currentDevices === void 0 ? void 0 : currentDevices.video;
    if (Microphone)
      this.devices = Object.assign(Object.assign({}, this.devices), { Microphone });
    if (Speaker)
      this.devices = Object.assign(Object.assign({}, this.devices), { Speaker });
    if (Camera)
      this.devices = Object.assign(Object.assign({}, this.devices), { Camera });
  }
  render() {
    var _a;
    const permission = (_a = permissionPrompts[this.mediaType]) === null || _a === void 0 ? void 0 : _a[this.permission];
    // const devices = this.getDevices();
    const { browserName, osName, isMobile } = this.meeting.self.device;
    const steps = permission.steps({ browserName, osName, media: this.mediaType });
    const image = permission.image({ browserName, isMobile, osName });
    const devices = this.mediaType === 'audio'
      ? ['Microphone', 'Speaker']
      : this.mediaType === 'video'
        ? ['Camera']
        : [];
    return (h(Host, null, h("h3", null, "Device Permissions"), h("div", { class: `info ${this.permission}` }, h("dyte-icon", { size: "sm", icon: this.iconPack[permission.icon] }), permission.info), h("div", { class: "text" }, permission.text), this.permission === 'ACCEPTED' && devices.length > 0 && (h("div", { class: "device-indicator" }, devices.map((device) => {
      var _a;
      return (h("div", { class: "device" }, h("div", { class: "label" }, "Active ", device), h("div", { class: "seperator" }, ":"), h("div", { class: "device-name" }, (_a = this.devices[device]) === null || _a === void 0 ? void 0 : _a.label)));
    }), h("div", { class: "text" }, this.t('You can change the active devices from settings.')))), steps.length > 0 && h("div", { class: "sub-title" }, this.t('How to fix this:')), steps === null || steps === void 0 ? void 0 :
      steps.map((step) => (h("div", { class: "recommendation" }, h("div", null, "\u2022"), this.t(step)))), image !== '' && (h("video", { src: `https://cdn.dyte.in/assets/permissions/${image}`, autoPlay: true, muted: true, loop: true })), this.mediaType !== 'screenshare' && this.permission === 'NOT_REQUESTED' && (h("dyte-button", { onClick: () => this.allowPermission() }, "Allow Device Permission"))));
  }
  static get watchers() { return {
    "meeting": ["permissionUpdate"],
    "mediaType": ["permissionUpdate"]
  }; }
  static get style() { return dyteDebuggerPermissionsUiCss; }
}, [1, "dyte-debugger-permissions-ui", {
    "meeting": [16],
    "states": [16],
    "size": [513],
    "iconPack": [16],
    "t": [16],
    "mediaType": [1, "media-type"],
    "issueKey": [32],
    "permission": [32],
    "devices": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-debugger-permissions-ui", "dyte-button", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-debugger-permissions-ui":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteDebuggerAudio);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteDebuggerAudio as D, defineCustomElement as d };
