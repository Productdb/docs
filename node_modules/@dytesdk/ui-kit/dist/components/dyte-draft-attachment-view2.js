import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { d as defineCustomElement$3 } from './dyte-button2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';
import { d as defineCustomElement$1 } from './dyte-tooltip2.js';

const dyteDraftAttachmentViewCss = ":host{display:flex;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));border-top-left-radius:var(--dyte-border-radius-md, 8px);border-top-right-radius:var(--dyte-border-radius-md, 8px)}.preview-overlay{position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);background-color:inherit}.preview{position:absolute;top:var(--dyte-space-4, 16px);left:var(--dyte-space-4, 16px);max-width:-moz-fit-content;max-width:fit-content;max-height:var(--dyte-space-20, 80px)}.preview:hover dyte-tooltip{display:block}.preview dyte-tooltip{position:absolute;top:calc(var(--dyte-space-1, 4px) * -1);left:calc(var(--dyte-space-1, 4px) * -1);display:none;margin-left:calc(var(--dyte-space-1, 4px) * -1);margin-top:calc(var(--dyte-space-1, 4px) * -1)}.preview dyte-button{display:flex;height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);align-items:center;justify-content:center;border-radius:9999px;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));border:1px solid rgb(var(--dyte-colors-text-1000, 255 255 255))}.preview dyte-icon{height:var(--dyte-space-3, 12px);width:var(--dyte-space-3, 12px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.preview-image{height:var(--dyte-space-16, 64px);width:var(--dyte-space-16, 64px);-o-object-fit:cover;object-fit:cover;max-height:100%;max-width:100%;overflow:clip;border-radius:var(--dyte-border-radius-md, 8px)}.preview-file{padding-left:var(--dyte-space-3, 12px);padding-right:var(--dyte-space-3, 12px);padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));overflow:hidden;text-overflow:ellipsis;white-space:nowrap;border-radius:var(--dyte-border-radius-md, 8px);max-width:200px}";

const DyteDraftAttachmentView = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onDeleteAttachment = createEvent(this, "deleteAttachment", 7);
    this.fileReader = new FileReader();
    this.generatePreview = () => {
      if (this.attachment.type === 'image') {
        this.fileReader.readAsDataURL(this.attachment.file);
      }
      else if (this.attachment.type === 'file') {
        this.filePreview = this.attachment.file.name;
      }
    };
    this.onDeleteClickHandler = () => {
      this.filePreview = null;
      this.onDeleteAttachment.emit();
    };
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.attachment = null;
    this.filePreview = null;
  }
  onAttachmentChange() {
    this.generatePreview();
  }
  connectedCallback() {
    this.fileReader.onload = (e) => {
      if (typeof e.target.result === 'string') {
        this.filePreview = e.target.result;
      }
    };
    // this.fileReader.onloadstart = () => {};
    // this.fileReader.onloadend = () => {};
  }
  componentWillLoad() {
    this.onAttachmentChange();
  }
  render() {
    return (h(Host, null, h("div", { class: "preview-overlay" }, h("div", { class: "preview" }, h("dyte-tooltip", { label: this.t('chat.cancel_upload') }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: this.onDeleteClickHandler }, h("dyte-icon", { icon: this.iconPack.dismiss }))), this.attachment.type === 'image' ? (h("img", { class: "preview-image", src: this.filePreview })) : (h("div", { class: "preview-file" }, h("span", null, this.filePreview)))))));
  }
  static get watchers() { return {
    "attachment": ["onAttachmentChange"]
  }; }
  static get style() { return dyteDraftAttachmentViewCss; }
}, [1, "dyte-draft-attachment-view", {
    "iconPack": [16],
    "t": [16],
    "attachment": [16],
    "filePreview": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-draft-attachment-view", "dyte-button", "dyte-icon", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-draft-attachment-view":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteDraftAttachmentView);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteDraftAttachmentView as D, defineCustomElement as d };
