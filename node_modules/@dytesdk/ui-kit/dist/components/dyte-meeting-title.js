import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { d as defineCustomElement$2 } from './dyte-tooltip2.js';

const dyteMeetingTitleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-left:var(--dyte-space-3, 12px);margin-right:var(--dyte-space-3, 12px);-webkit-user-select:none;-moz-user-select:none;user-select:none;font-size:16px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.title{text-align:center;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}:host([size='sm']){font-size:12px}";

const DyteMeetingTitle$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.meeting = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  render() {
    var _a;
    const title = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta.meetingTitle;
    if (title == null)
      return null;
    return (h(Host, { tabIndex: 0, role: "banner", "aria-label": title }, h("dyte-tooltip", { label: title, part: "tooltip", iconPack: this.iconPack, t: this.t }, h("div", { class: "title", part: "title" }, title))));
  }
  static get style() { return dyteMeetingTitleCss; }
}, [1, "dyte-meeting-title", {
    "meeting": [16],
    "iconPack": [16],
    "t": [16]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-meeting-title", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-meeting-title":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteMeetingTitle$1);
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteMeetingTitle = DyteMeetingTitle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteMeetingTitle, defineCustomElement };
