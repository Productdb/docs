import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';

const dyteTextComposerViewCss = ".chat-input {\n\n  position: relative;\n\n  z-index: 10;\n\n  box-sizing: border-box;\n\n  display: flex;\n\n  flex-direction: column;\n\n  border-top-left-radius: var(--dyte-border-radius-md, 8px);\n\n  border-top-right-radius: var(--dyte-border-radius-md, 8px)\n}\n\n  .chat-input textarea {\n\n  --tw-bg-opacity: 1;\n\n  background-color: rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity));\n\n  box-sizing: border-box;\n\n  padding: var(--dyte-space-3, 12px);\n\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255))\n}\n\n  .chat-input textarea::-moz-placeholder {\n\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255))\n}\n\n  .chat-input textarea::placeholder {\n\n  color: rgb(var(--dyte-colors-text-1000, 255 255 255))\n}\n\n  .chat-input textarea {\n\n  font-family: var(--dyte-font-family, sans-serif);\n\n  outline: 2px solid transparent;\n\n  outline-offset: 2px;\n\n  resize: none;\n\n  overflow-y: auto;\n\n  border-width: var(--dyte-border-width-none, 0);\n\n  border-style: none;\n\n  min-height: 60px;\n\n  font-size: 14px\n}\n\n@container chatcontainer (height < 360px) {\n  textarea {\n\n    height: 30px !important;\n\n    min-height: 30px !important\n  }\n}\n";

const DyteTextComposerView = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onTextChange = createEvent(this, "textChange", 7);
    this.onInputHandler = () => {
      const text = this.$textArea.value.trim();
      this.maybeResize(text);
      this.onTextChange.emit(text);
    };
    this.maybeResize = (text) => {
      const newLines = [...text.matchAll(/\n/g)].length;
      this.$textArea.style.height = `${Math.min(200, 60 + 20 * newLines)}px`;
    };
    this.disabled = false;
    this.placeholder = undefined;
    this.value = undefined;
    this.maxLength = undefined;
    this.keyDownHandler = () => { };
  }
  componentDidLoad() {
    if (this.maxLength) {
      this.$textArea.maxLength = this.maxLength;
    }
    const text = this.$textArea.value.trim();
    if (text !== '') {
      this.maybeResize(text);
    }
  }
  /** Sets value of the text input */
  async setText(text, focus = false) {
    this.$textArea.value = text;
    this.maybeResize(text);
    if (focus) {
      this.$textArea.focus();
    }
    this.onTextChange.emit(text);
  }
  render() {
    return (h("div", { class: "chat-input", part: "chat-input-container" }, h("textarea", { ref: (el) => (this.$textArea = el), placeholder: this.placeholder, disabled: this.disabled, onInput: this.onInputHandler, onKeyDown: this.keyDownHandler, part: "chat-input", value: this.value })));
  }
  static get style() { return dyteTextComposerViewCss; }
}, [1, "dyte-text-composer-view", {
    "disabled": [4],
    "placeholder": [1],
    "value": [1],
    "maxLength": [2, "max-length"],
    "keyDownHandler": [16],
    "setText": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-text-composer-view"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-text-composer-view":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteTextComposerView);
      }
      break;
  } });
}

export { DyteTextComposerView as D, defineCustomElement as d };
