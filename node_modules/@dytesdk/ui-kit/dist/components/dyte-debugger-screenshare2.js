import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { s as state } from './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { d as defineCustomElement$5 } from './dyte-button2.js';
import { d as defineCustomElement$4 } from './dyte-debugger-issues-ui2.js';
import { d as defineCustomElement$3 } from './dyte-debugger-permissions-ui2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';
import { d as defineCustomElement$1 } from './dyte-information-tooltip2.js';

const dyteDebuggerScreenshareCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;height:100%;width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}h3{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:600}.status{margin-left:var(--dyte-space-2, 8px);display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:12px}.status dyte-icon{margin-right:var(--dyte-space-2, 8px)}.stage-indicator{margin-bottom:var(--dyte-space-1, 4px);display:flex;flex-direction:row;align-items:center;font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.scroll{overflow:auto;border-radius:var(--dyte-border-radius-none, 0)}.warning,.NOT_REQUESTED{--tw-text-opacity:1 !important;color:rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity)) !important;opacity:0.8}.success,.ACCEPTED{--tw-text-opacity:1 !important;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity)) !important;opacity:0.8}.COULD_NOT_START,.error,.DENIED,.SYSTEM_DENIED{--tw-text-opacity:1 !important;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity)) !important;opacity:0.8}h3{margin:var(--dyte-space-0, 0px);font-size:14px;font-weight:600}.status-text{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);font-size:14px;font-weight:100 !important}.status-text dyte-icon{margin-right:var(--dyte-space-2, 8px)}.tooltip-text{display:flex;flex-direction:column;font-size:12px}.tooltip-text span{margin-left:var(--dyte-space-1, 4px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88)) !important}.tooltip-text div{margin-top:var(--dyte-space-1, 4px)}.tooltip-text div:nth-child(1){margin:var(--dyte-space-0, 0px)}.row{display:flex;width:100%;flex-direction:row;align-items:center;justify-content:flex-start}.row dyte-switch{margin-left:var(--dyte-space-8, 32px)}.row dyte-icon{margin-left:var(--dyte-space-2, 8px)}.row dyte-button{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);margin-left:var(--dyte-space-2, 8px)}.row .label{width:var(--dyte-space-28, 112px) !important;min-width:var(--dyte-space-28, 112px)}.row .text{margin-top:var(--dyte-space-1, 4px);margin-left:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-0, 0px)}.align-start{align-items:flex-start !important}.col{display:flex;width:100%;flex-direction:column;align-items:flex-start;justify-content:flex-start}.label{margin-top:var(--dyte-space-1, 4px);display:flex;flex-direction:row;justify-content:space-between;font-size:14px;font-weight:100 !important;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.info{margin-bottom:var(--dyte-space-2, 8px);display:flex;flex-direction:row;font-size:14px;font-weight:100 !important;--tw-text-opacity:1;color:rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity));opacity:0.7}.info dyte-icon{margin-right:var(--dyte-space-2, 8px)}.text{margin-bottom:var(--dyte-space-2, 8px);font-size:14px;font-weight:100 !important;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));opacity:0.7}.title{margin-bottom:var(--dyte-space-2, 8px);display:flex;flex-direction:row;align-items:center;font-size:14px;font-weight:600;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.sub-title{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-2, 8px);display:flex;flex-direction:row;align-items:center;font-size:14px;font-weight:600;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.stage-manager{margin-top:var(--dyte-space-4, 16px);display:flex;width:100%;flex-direction:row-reverse;align-items:center;justify-content:space-between;align-self:flex-end;font-size:14px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-600, 13 81 253) / var(--tw-text-opacity))}.stage-button{display:flex;cursor:pointer;flex-direction:row;align-items:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}.stage-button dyte-icon{padding:var(--dyte-space-0, 0px)}.disabled{cursor:not-allowed;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52)) !important}#header{margin-top:var(--dyte-space-2, 8px);display:flex;align-items:center;justify-content:space-evenly;border-bottom:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}#header dyte-button{border-bottom:var(--dyte-border-width-md, 2px) solid transparent;border-radius:var(--dyte-border-radius-none, 0)}#header dyte-button:hover{background-color:transparent}#header dyte-button.active{border-color:rgb(var(--dyte-colors-brand-400, 53 110 253))}.tab-body{position:relative;display:flex;height:100%;flex-direction:column;justify-content:space-between;overflow-y:auto;padding:var(--dyte-space-4, 16px)}";

const DyteDebuggerAudio = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.testProgress = createEvent(this, "testProgress", 7);
    this.lowVolCount = 0;
    this.silenceCount = 0;
    this.frozenFramesCount = 0;
    this.blackFramesCount = 0;
    this.meeting = undefined;
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.activeTab = 'Report';
    this.stage = 0;
    this.mediaPermission = 'NOT_REQUESTED';
    this.screenshareEnabled = false;
    this.audioTrackMetadata = {};
    this.videoTrackMetadata = {};
    this.screenshareTest = false;
    this.audioTrackStats = {
      lowVolume: false,
      clip: false,
      silence: false,
      volume: 0,
      timestamp: 0,
    };
    this.videoTrackStats = {
      isBlackFrame: false,
      isFrozenFrame: false,
      timestamp: 0,
      videoScore: 0,
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.updateProgress();
  }
  disconnectedCallback() {
    var _a, _b;
    const { self, troubleshoot } = this.meeting;
    this.screenshareTest && this.toggleScreenshareTest();
    self === null || self === void 0 ? void 0 : self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    self.removeListener('screenShareUpdate', this.screenShareUpdateListener);
    (_a = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.screenshare) === null || _a === void 0 ? void 0 : _a.removeListener('audioTrackStats', this.audioTrackUpdateListener);
    (_b = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.screenshare) === null || _b === void 0 ? void 0 : _b.removeListener('videoTrackStats', this.videoTrackUpdateListener);
  }
  async meetingChanged(meeting) {
    var _a, _b, _c;
    if (!meeting)
      return;
    const { self, troubleshoot } = meeting;
    self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener.bind(this));
    self.addListener('screenShareUpdate', this.screenShareUpdateListener.bind(this));
    (_a = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.screenshare) === null || _a === void 0 ? void 0 : _a.on('audioTrackStats', this.audioTrackUpdateListener.bind(this));
    (_b = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.screenshare) === null || _b === void 0 ? void 0 : _b.on('videoTrackStats', this.videoTrackUpdateListener.bind(this));
    const permission = (_c = self === null || self === void 0 ? void 0 : self.mediaPermissions) === null || _c === void 0 ? void 0 : _c.screenshare;
    this.mediaPermissionUpdateListener({ kind: 'screenshare', message: permission });
    const screenShareEnabled = self === null || self === void 0 ? void 0 : self.screenShareEnabled;
    this.screenShareUpdateListener({ screenShareEnabled });
  }
  mediaPermissionUpdateListener({ kind, message }) {
    if (kind !== 'screenshare')
      return;
    this.mediaPermission = message;
    if (this.mediaPermission !== 'ACCEPTED') {
      this.stage = 0;
      this.updateProgress();
    }
  }
  screenShareUpdateListener({ screenShareEnabled }) {
    this.screenshareEnabled = screenShareEnabled;
    if (!this.screenshareEnabled && this.screenshareTest)
      this.toggleScreenshareTest();
  }
  audioTrackUpdateListener(stats) {
    this.audioTrackStats = Object.assign(Object.assign({}, stats), { volume: this.normalizeVolume(stats === null || stats === void 0 ? void 0 : stats.volume) });
  }
  videoTrackUpdateListener(stats) {
    this.videoTrackStats = Object.assign(Object.assign({}, stats), { videoScore: this.normalizeVideoScore(stats === null || stats === void 0 ? void 0 : stats.videoScore) });
  }
  async toggleScreenshareTest() {
    var _a, _b, _c;
    this.screenshareTest = !this.screenshareTest;
    const troubleshooter = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.troubleshoot.screenshare;
    if (this.screenshareTest && this.screenshareEnabled) {
      this.audioTrackMetadata = (_b = troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.getAudioTrackMetaData()) !== null && _b !== void 0 ? _b : {};
      this.videoTrackMetadata = (_c = troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.getVideoTrackMetaData()) !== null && _c !== void 0 ? _c : {};
      await troubleshooter.startAudioTrackAnalysis();
      await troubleshooter.startVideoTrackAnalysis();
    }
    else {
      troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.stopAudioTrackAnalysis();
      troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.stopVideoTrackAnalysis();
    }
  }
  setActiveTab(state) {
    this.activeTab = state;
    this.updateProgress();
  }
  changeStage(stage) {
    if (this.mediaPermission !== 'ACCEPTED')
      return;
    stage = Math.max(0, stage);
    stage = Math.min(1, stage);
    this.stage = stage;
    this.updateProgress();
    if (this.screenshareTest)
      this.toggleScreenshareTest();
  }
  updateProgress() {
    if (this.activeTab === 'Troubleshoot') {
      this.testProgress.emit(((this.stage + 1) * 100) / 2);
    }
    else
      this.testProgress.emit(0);
  }
  getDeviceInformationStatus() {
    let message = 'All systems are functional.';
    let icon = 'checkmark';
    let style = 'success';
    if (this.audioTrackMetadata) {
      const { channelCount: count, channelInterpretation: mode, channelType: type, outputs, } = this.audioTrackMetadata;
      if (mode === 'discrete' && outputs > count) {
        message = 'Audio quality might be degraded.';
        icon = 'warning';
        style = 'warning';
      }
      else if ((type === 'STEREO' && outputs === 1) ||
        (type === 'QUAD' && outputs === 1) ||
        (type === 'QUAD' && outputs === 2)) {
        message = 'Audio quality might be degraded.';
        icon = 'warning';
        style = 'warning';
      }
      if ((type === 'MONO' && count < 1) ||
        (type === 'STEREO' && count < 2) ||
        (type === 'QUAD' && count < 4)) {
        message = 'Looks like your device is not functioning properly.';
        icon = 'warning';
        style = 'error';
      }
    }
    return (h("div", { class: `row status-text ${style}` }, h("dyte-icon", { size: "sm", icon: this.iconPack[icon] }), this.t(message)));
  }
  getAudioAnalysisStatus() {
    var _a;
    let message = 'All systems are functional.';
    let icon = 'checkmark';
    let style = 'success';
    if (!((_a = this.audioTrackMetadata) === null || _a === void 0 ? void 0 : _a.label))
      return (h("div", { class: `row status-text warning` }, h("dyte-icon", { size: "sm", icon: this.iconPack.warning }), this.t('Not Available')));
    if (this.detectLowVolume()) {
      message = 'Low volume detected.';
      icon = 'warning';
      style = 'warning';
    }
    if (this.audioTrackStats.clip) {
      message = 'Your audio may be noisy.';
      icon = 'warning';
      style = 'error';
    }
    if (this.detectSilence()) {
      message = 'Silence detected.';
      icon = 'warning';
      style = 'error';
    }
    return (h("div", { class: `row status-text ${style}` }, h("dyte-icon", { size: "sm", icon: this.iconPack[icon] }), this.t(message)));
  }
  getVideoAnalysisStatus() {
    var _a, _b;
    let message = 'All systems are functional.';
    let icon = 'checkmark';
    let style = 'success';
    if ((_a = this.videoTrackStats) === null || _a === void 0 ? void 0 : _a.isBlackFrame) {
      this.blackFramesCount++;
    }
    else {
      this.blackFramesCount = 0;
    }
    if ((_b = this.videoTrackStats) === null || _b === void 0 ? void 0 : _b.isFrozenFrame) {
      this.frozenFramesCount++;
    }
    else {
      this.frozenFramesCount = 0;
    }
    if (this.frozenFramesCount > 4) {
      message = 'Looks like the video is frozen.';
      icon = 'warning';
      style = 'error';
    }
    if (this.blackFramesCount > 4) {
      message = 'Video is not being processed by the camera.';
      icon = 'warning';
      style = 'error';
    }
    return (h("div", { class: `row status-text ${style}` }, h("dyte-icon", { size: "sm", icon: this.iconPack[icon] }), this.t(message)));
  }
  formatLabel(camelCaseLabel) {
    const result = camelCaseLabel.replace(/([A-Z])/g, ' $1');
    return result.charAt(0).toUpperCase() + result.slice(1);
  }
  nullToStr(val) {
    if (!val)
      return 'Not Available';
    return val;
  }
  normalizeVolume(val = 0) {
    let max = 0.3;
    const min = 0.001;
    if (val > max)
      max = val;
    return Math.max(5, Math.round((val * 100) / (max - min)));
  }
  normalizeVideoScore(val = 0) {
    let max = 1;
    const min = 0;
    if (val > max)
      max = val;
    return Math.max(5, Math.round((val * 10) / (max - min)));
  }
  detectLowVolume() {
    var _a;
    if ((_a = this.audioTrackStats) === null || _a === void 0 ? void 0 : _a.lowVolume) {
      this.lowVolCount++;
    }
    else {
      this.lowVolCount = 0;
    }
    return this.lowVolCount > 10;
  }
  detectSilence() {
    var _a;
    if ((_a = this.audioTrackStats) === null || _a === void 0 ? void 0 : _a.silence) {
      this.silenceCount++;
    }
    else {
      this.silenceCount = 0;
    }
    return this.silenceCount > 5;
  }
  render() {
    var _a, _b;
    const defaults = {
      meeting: this.meeting,
      states: this.states || state,
      iconPack: this.iconPack,
      t: this.t,
      size: this.size,
    };
    return (h(Host, null, h("div", { id: "header" }, ['Report', 'Troubleshoot'].map((section) => (h("dyte-button", { key: section, variant: "ghost", class: { active: this.activeTab === section }, onClick: () => this.setActiveTab(section), iconPack: this.iconPack, t: this.t }, this.t(section))))), this.activeTab === 'Troubleshoot' && (h("div", { class: "tab-body" }, h("div", null, h("div", { class: "stage-indicator" }, "Step ", this.stage + 1, "/2"), this.stage === 0 && (h("dyte-debugger-permissions-ui", Object.assign({}, defaults, { mediaType: "screenshare" }))), this.stage === 1 &&
      (this.screenshareEnabled ? (h("div", { class: "col" }, h("div", { class: "text" }, "Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots."), h("dyte-button", { onClick: () => this.toggleScreenshareTest() }, this.screenshareTest ? 'Stop' : 'Start', " Screenshare Tests"), this.screenshareTest && (h("div", null, h("div", { class: "sub-title" }, "Device Information", h("dyte-information-tooltip", null, h("div", { slot: "tootlip-text", class: "tooltip-text" }, Object.keys(this.audioTrackMetadata).map((key) => {
        if (key === 'label')
          return;
        return (h("div", null, "Audio ", this.formatLabel(key), ":", ' ', h("span", null, this.audioTrackMetadata[key])));
      }), Object.keys(this.videoTrackMetadata).map((key) => {
        if (key === 'label')
          return;
        return (h("div", null, "Video ", this.formatLabel(key), ":", ' ', h("span", null, JSON.stringify(this.videoTrackMetadata[key]))));
      })))), h("div", { class: "row align-start" }, h("div", { class: "label" }, h("span", null, "Audio Label"), ":"), h("div", { class: "text" }, this.nullToStr((_a = this.audioTrackMetadata) === null || _a === void 0 ? void 0 : _a.label))), h("div", { class: "row align-start" }, h("div", { class: "label" }, h("span", null, "Video Label"), ":"), h("div", { class: "text" }, this.nullToStr((_b = this.videoTrackMetadata) === null || _b === void 0 ? void 0 : _b.label))), this.getDeviceInformationStatus(), h("div", { class: "sub-title" }, "Device Analysis"), h("div", { class: "row " }, h("div", { class: "label" }, h("span", null, "Audio Analysis"), " :"), this.getAudioAnalysisStatus()), h("div", { class: "row" }, h("div", { class: "label" }, h("span", null, "Video Analysis"), " :"), this.getVideoAnalysisStatus()))))) : (h("div", { class: "col" }, h("div", { class: "info" }, h("dyte-icon", { size: "sm", icon: this.iconPack.warning }), "You are not sharing your screen."), h("div", { class: "text" }, "In order for us to test your screenshare, you need to be sharing your screen. You can enable screenshare from the control bar."))))), h("div", { class: "stage-manager" }, this.stage < 1 && (h("div", { class: { 'stage-button': true, disabled: this.mediaPermission !== 'ACCEPTED' }, onClick: () => this.changeStage(this.stage + 1) }, "Next", h("dyte-icon", { size: "sm", icon: this.iconPack.chevron_right }))), this.stage > 0 && (h("div", { class: { 'stage-button': true, disabled: this.mediaPermission !== 'ACCEPTED' }, onClick: () => this.changeStage(this.stage - 1) }, h("dyte-icon", { size: "sm", icon: this.iconPack.chevron_left }), "Prev"))))), this.activeTab === 'Report' && (h("div", { class: "tab-body" }, h("dyte-debugger-issues-ui", Object.assign({}, defaults, { mediaType: "screenshare" }))))));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dyteDebuggerScreenshareCss; }
}, [1, "dyte-debugger-screenshare", {
    "meeting": [16],
    "states": [16],
    "size": [513],
    "iconPack": [16],
    "t": [16],
    "activeTab": [32],
    "stage": [32],
    "mediaPermission": [32],
    "screenshareEnabled": [32],
    "audioTrackMetadata": [32],
    "videoTrackMetadata": [32],
    "screenshareTest": [32],
    "audioTrackStats": [32],
    "videoTrackStats": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-debugger-screenshare", "dyte-button", "dyte-debugger-issues-ui", "dyte-debugger-permissions-ui", "dyte-icon", "dyte-information-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-debugger-screenshare":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteDebuggerAudio);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "dyte-debugger-issues-ui":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-debugger-permissions-ui":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-information-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteDebuggerAudio as D, defineCustomElement as d };
