import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { d as defineCustomElement$3 } from './dyte-button2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';
import { d as defineCustomElement$1 } from './dyte-tooltip2.js';

const dyteFilePickerButtonCss = ":host{}";

const DyteFilePickerButton = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onFileChange = createEvent(this, "fileChange", 7);
    this.uploadFile = () => {
      const input = document.createElement('input');
      input.type = 'file';
      if (this.filter) {
        input.accept = this.filter;
      }
      input.onchange = (e) => {
        const { validity, files: [file], } = e.target;
        if (validity.valid) {
          this.onFileChange.emit(file);
        }
      };
      input.click();
    };
    this.filter = undefined;
    this.label = undefined;
    this.icon = 'attach';
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  render() {
    const uiProps = { iconPack: this.iconPack, t: this.t };
    const label = this.label || this.t('chat.send_file');
    const icon = this.iconPack[this.icon];
    return (h("dyte-tooltip", Object.assign({ label: label }, uiProps), h("dyte-button", { variant: "ghost", kind: "icon", onClick: () => this.uploadFile(), title: label, iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: icon }))));
  }
  static get style() { return dyteFilePickerButtonCss; }
}, [1, "dyte-file-picker-button", {
    "filter": [1],
    "label": [1],
    "icon": [1],
    "iconPack": [16],
    "t": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-file-picker-button", "dyte-button", "dyte-icon", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-file-picker-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteFilePickerButton);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteFilePickerButton as D, defineCustomElement as d };
