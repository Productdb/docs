import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultConfig } from './default-ui-config.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { R as Render } from './index3.js';
import { s as state } from './store.js';
import { d as defineCustomElement$5 } from './dyte-button2.js';
import { d as defineCustomElement$4 } from './dyte-dialog2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-join-stage2.js';
import { d as defineCustomElement$1 } from './dyte-overlay-modal2.js';

const dyteDialogManagerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DyteDialogManager = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.updateStoreState = (state$1, value) => {
      state[state$1] = value;
      this.stateUpdate.emit({ [state$1]: value });
    };
    this.cancelJoinStage = async () => {
      var _a, _b, _c;
      if (((_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.status) === 'ACCEPTED_TO_JOIN_STAGE') {
        await ((_c = (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.stage) === null || _c === void 0 ? void 0 : _c.leave());
      }
      this.updateStoreState('activeJoinStage', false);
    };
    this.joinStage = async () => {
      await this.meeting.stage.join();
      /** NOTE(ishita1805): We close the modal once the status has changed */
    };
    this.stageStatusUpdateListener = (status) => {
      var _a;
      if (!((_a = this.states) === null || _a === void 0 ? void 0 : _a.activeJoinStage) && !state.activeJoinStage)
        return;
      if (status === 'ON_STAGE')
        this.updateStoreState('activeJoinStage', false);
    };
    this.meeting = undefined;
    this.config = defaultConfig;
    this.states = state;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.meeting.stage) === null || _a === void 0 ? void 0 : _a.removeListener('stageStatusUpdate', this.stageStatusUpdateListener);
  }
  meetingChanged(meeting) {
    if (meeting == undefined)
      return;
    const { stage } = meeting;
    stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStatusUpdateListener);
  }
  render() {
    var _a, _b, _c, _d;
    const defaults = {
      meeting: this.meeting,
      states: this.states || state,
      config: this.config,
      size: this.size,
      iconPack: this.iconPack,
      t: this.t,
    };
    const states = this.states || state;
    if ((states === null || states === void 0 ? void 0 : states.image) != null) {
      const image = states.image;
      const onImageClose = () => {
        this.stateUpdate.emit({ image: null });
        state.image = null;
      };
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: onImageClose, hideCloseButton: true, iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-image-viewer", defaults: defaults, props: { image, onClose: onImageClose } }))));
    }
    else if ((states === null || states === void 0 ? void 0 : states.activeSettings) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeSettings', false), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-settings", defaults: defaults }))));
    }
    else if ((states === null || states === void 0 ? void 0 : states.activeDebugger) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeDebugger', false), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-debugger", defaults: defaults }))));
    }
    else if ((states === null || states === void 0 ? void 0 : states.activeLeaveConfirmation) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeLeaveConfirmation', false), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-leave-meeting", defaults: defaults }))));
    }
    else if (((_a = states === null || states === void 0 ? void 0 : states.activePermissionsMessage) === null || _a === void 0 ? void 0 : _a.enabled) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activePermissionsMessage', { enabled: false }), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-permissions-message", defaults: defaults }))));
    }
    else if ((states === null || states === void 0 ? void 0 : states.activeRemoteAccessManager) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeRemoteAccessManager', false), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-remote-access-manager", defaults: defaults }))));
    }
    else if (((_b = states === null || states === void 0 ? void 0 : states.activeBreakoutRoomsManager) === null || _b === void 0 ? void 0 : _b.active) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeBreakoutRoomsManager', {
          active: false,
          data: undefined,
        }), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-breakout-rooms-manager", defaults: defaults, props: { mode: this.meeting.connectedMeetings.isActive ? 'view' : 'create' } }))));
    }
    else if (((_c = states === null || states === void 0 ? void 0 : states.activeConfirmationModal) === null || _c === void 0 ? void 0 : _c.active) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeConfirmationModal', false), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-confirmation-modal", defaults: defaults }))));
    }
    else if (((_d = states === null || states === void 0 ? void 0 : states.activeOverlayModal) === null || _d === void 0 ? void 0 : _d.active) === true) {
      return (h(Host, null, h("dyte-overlay-modal", { meeting: this.meeting, states: this.states, iconPack: this.iconPack, t: this.t })));
    }
    else if (states === null || states === void 0 ? void 0 : states.activeBroadcastMessageModal) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => this.updateStoreState('activeBroadcastMessageModal', false), iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-broadcast-message-modal", defaults: defaults }))));
    }
    else if ((states === null || states === void 0 ? void 0 : states.activeJoinStage) === true) {
      const dataState = {
        title: this.t('stage.join_title'),
        label: {
          accept: this.t('stage.join_confirm'),
          reject: this.t('stage.join_cancel'),
        },
        description: this.t('stage.join_summary'),
      };
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: this.cancelJoinStage, iconPack: this.iconPack, t: this.t }, h("dyte-join-stage", Object.assign({ dataConfig: dataState, onDyteJoinStage: this.joinStage, onDyteLeaveStage: this.cancelJoinStage }, defaults)))));
    }
    else if ((states === null || states === void 0 ? void 0 : states.activeMuteAllConfirmation) === true) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => {
          this.updateStoreState('activeMuteAllConfirmation', false);
        }, iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-mute-all-confirmation", defaults: defaults }))));
    }
    else if (states === null || states === void 0 ? void 0 : states.activeChannelCreator) {
      return (h(Host, null, h("dyte-dialog", { open: true, onDyteDialogClose: () => {
          this.updateStoreState('activeChannelCreator', false);
        }, iconPack: this.iconPack, t: this.t }, h(Render, { element: "dyte-channel-creator", defaults: defaults }))));
    }
    return null;
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dyteDialogManagerCss; }
}, [1, "dyte-dialog-manager", {
    "meeting": [16],
    "config": [16],
    "states": [16],
    "size": [513],
    "iconPack": [16],
    "t": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-dialog-manager", "dyte-button", "dyte-dialog", "dyte-icon", "dyte-join-stage", "dyte-overlay-modal"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-dialog-manager":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteDialogManager);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "dyte-dialog":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-join-stage":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-overlay-modal":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteDialogManager as D, defineCustomElement as d };
