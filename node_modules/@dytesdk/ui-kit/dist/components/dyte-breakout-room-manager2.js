import { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';
import { u as useLanguage } from './index2.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { g as getAllConnectedParticipants, p as participantIdentifier } from './breakout-rooms.js';
import { f as formatName, s as shorten } from './string.js';
import { d as defineCustomElement$5 } from './dyte-avatar2.js';
import { d as defineCustomElement$4 } from './dyte-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';
import { d as defineCustomElement$1 } from './dyte-tooltip2.js';

const dyteBreakoutRoomManagerCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));border-radius:var(--dyte-border-radius-sm, 4px)}@keyframes bg-glow{25%{background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}50%{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}75%{background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.2)}}.glowing-card{animation:bg-glow 0.8s}.selector-mode,.assign-mode{display:flex;flex-direction:column;align-items:center;padding:var(--dyte-space-2, 8px);cursor:pointer}.selector:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.show-on-hover{display:none}.header{width:100%;display:flex;align-items:center}.header dyte-icon{margin-left:var(--dyte-space-2, 8px);height:var(--dyte-space-5, 20px);cursor:pointer}.header .danger{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}.header .hide{display:none}.header .rooms-container{display:flex;flex-grow:1;flex-direction:row;align-items:center;justify-content:flex-end}.header input{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));padding:var(--dyte-space-1, 4px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));max-width:var(--dyte-space-36, 144px);font-size:14px;font-weight:500;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;outline:2px solid transparent;outline-offset:2px;border-bottom-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-border-opacity))}.header input:disabled{overflow-x:visible;border-radius:var(--dyte-border-radius-none, 0);border-width:var(--dyte-border-width-none, 0);border-style:none;background-color:transparent}.header input:invalid{border-bottom-width:var(--dyte-border-width-sm, 1px);border-style:dashed;--tw-border-opacity:1;border-bottom-color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-border-opacity))}.header input.editing-enabled{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}.header .participant-count{display:flex;align-items:center;font-size:14px;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.header .participant-count dyte-icon{margin:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0\\.5, 2px);width:var(--dyte-space-3, 12px)}.header .assign-button{height:var(--dyte-space-6, 24px);--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity));-webkit-text-decoration-line:underline;text-decoration-line:underline}.header .assign-button:hover{--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.participant-list{display:grid;flex-grow:1;grid-template-columns:repeat(2, minmax(0, 1fr));gap:var(--dyte-space-2, 8px);margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);width:100%;border-radius:var(--dyte-border-radius-sm, 4px)}.participant-list::-webkit-scrollbar{width:var(--dyte-space-1\\.5, 6px)}.participant-list::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.participant-list::-webkit-scrollbar-track{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.participant-item{display:flex;align-items:center;justify-content:space-between;margin-right:var(--dyte-space-2, 8px);height:-moz-fit-content;height:fit-content;padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}.participant-item:hover{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}.selector-mode:hover .show-on-hover{display:flex}.message-container{margin:var(--dyte-space-0, 0px);display:flex;width:100%;padding-top:var(--dyte-space-2, 8px);padding-bottom:var(--dyte-space-2, 8px)}.message-container p{margin-top:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-0, 0px);height:var(--dyte-space-20, 80px);display:flex;width:100%;align-items:center;justify-content:center;border-radius:var(--dyte-border-radius-sm, 4px);font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));border-style:dashed;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity))}.message-container p:hover{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-border-opacity));background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.25)}.message-container .drop-zone-active{--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-border-opacity));background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / 0.25)}dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}.show-on-hover{margin-left:var(--dyte-space-4, 16px);height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px);display:none}:host(:hover) .show-on-hover{display:flex}.peer-ui-container{position:relative;display:flex;align-items:center;gap:var(--dyte-space-2, 8px);height:var(--dyte-space-10, 40px);cursor:pointer;border-radius:var(--dyte-border-radius-sm, 4px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.peer-ui-container dyte-avatar{height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px);font-size:14px;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.peer-ui-container .name{font-size:14px;overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}";

const ROOM_TITLE_MIN_CHARS = 3;
const DyteBreakoutRoomManager = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onParticipantsAdd = createEvent(this, "participantsAdd", 7);
    this.onParticipantDelete = createEvent(this, "participantDelete", 7);
    this.onRoomJoin = createEvent(this, "roomJoin", 7);
    this.deleteRoom = createEvent(this, "delete", 7);
    this.updateRoom = createEvent(this, "update", 7);
    this.reset = () => {
      this.editingTitleRoomId = null;
      this.newTitle = null;
    };
    this.onEditClick = () => {
      if (this.editingTitleRoomId) {
        if (this.newTitle.length < ROOM_TITLE_MIN_CHARS)
          return;
        this.roomTitle = this.newTitle;
        this.updateRoom.emit({
          title: this.newTitle,
          id: this.editingTitleRoomId,
        });
        this.glowCard();
        this.reset();
      }
      else {
        this.editingTitleRoomId = this.room.id;
        writeTask(() => {
          this.inputTextEl.focus();
          this.inputTextEl.select();
        });
      }
    };
    this.onDrop = (e) => {
      if (e.currentTarget instanceof HTMLParagraphElement) {
        e.currentTarget.classList.remove('drop-zone-active');
        this.onAssign();
      }
    };
    this.onDragOver = (e) => {
      if (e.currentTarget instanceof HTMLParagraphElement) {
        e.currentTarget.classList.add('drop-zone-active');
        e.preventDefault();
      }
    };
    this.meeting = undefined;
    this.assigningParticipants = undefined;
    this.mode = undefined;
    this.states = undefined;
    this.allowDelete = true;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.isDragMode = false;
    this.room = undefined;
    this.defaultExpanded = false;
    this.editingTitleRoomId = null;
    this.newTitle = null;
    this.showExpandedCard = false;
    this.glowingCard = false;
  }
  connectedCallback() {
    var _a;
    this.allParticipants = getAllConnectedParticipants(this.meeting);
    this.permissions = this.meeting.self.permissions.connectedMeetings;
    this.showExpandedCard = this.defaultExpanded;
    this.roomTitle = this.room.isParent ? this.t('breakout_rooms.main_room') : (_a = this.room) === null || _a === void 0 ? void 0 : _a.title;
    this.canEditMeetingTitle =
      this.permissions.canAlterConnectedMeetings &&
        !this.room.isParent &&
        !this.meeting.connectedMeetings.isActive; // TODO: remove this once socket supports update meetings
  }
  onDragLeave(e) {
    if (e.currentTarget instanceof HTMLParagraphElement) {
      e.currentTarget.classList.remove('drop-zone-active');
    }
  }
  getAssignmentHint() {
    if (this.assigningParticipants && this.isDragMode) {
      return this.t('breakout_rooms.drag_drop_participants');
    }
    if (this.assigningParticipants) {
      return this.t('breakout_rooms.click_drop_participants');
    }
    if (this.room.participants.length === 0) {
      return this.t('breakout_rooms.none_assigned');
    }
  }
  toggleCardDisplay() {
    this.showExpandedCard = !this.showExpandedCard;
  }
  glowCard() {
    this.glowingCard = true;
    setTimeout(() => {
      this.glowingCard = false;
    }, 2000);
  }
  onAssign() {
    this.onParticipantsAdd.emit();
    this.glowCard();
  }
  onJoin() {
    this.onRoomJoin.emit();
  }
  onTitleChanged(e) {
    if (e.key === 'Enter') {
      this.newTitle = e.target.value;
      this.onEditClick();
    }
  }
  renderPeer(participant) {
    const { displayPictureUrl: picture } = this.allParticipants.find((p) => participantIdentifier(p) === participantIdentifier(participant));
    const name = formatName(participant.displayName || '');
    return (h("div", { class: "peer-ui-container" }, h("dyte-avatar", { participant: { name, picture }, size: "sm" }), h("p", { class: "name", title: name }, shorten(name, 16), this.meeting.self.userId === participant.id && ` (${this.t('you')})`)));
  }
  renderExpandedCardMaybe() {
    if (!this.showExpandedCard)
      return;
    if (this.room.isParent)
      return;
    if (!this.getAssignmentHint())
      return;
    if (!this.permissions.canAlterConnectedMeetings)
      return;
    return (h("div", { class: "message-container" }, h("p", { class: { 'compact-height': this.room.participants.length !== 0 }, onClick: () => this.onAssign(), onDragOver: this.onDragOver, onDragLeave: this.onDragLeave, onDrop: this.onDrop }, this.getAssignmentHint())));
  }
  renderParticipantsMaybe() {
    if (!this.showExpandedCard)
      return;
    if (this.room.isParent)
      return;
    if (this.room.participants.length === 0)
      return;
    return (h("div", { class: "participant-list", onClick: () => {
        this.onAssign();
      } }, this.room.participants.map((participant) => (h("div", { class: "participant-item", role: "listitem", key: participant.id }, this.renderPeer(participant), this.permissions.canAlterConnectedMeetings && (h("dyte-icon", { class: "show-on-hover", icon: this.iconPack.dismiss, iconPack: this.iconPack, t: this.t, onClick: () => {
        this.onParticipantDelete.emit(participant);
      } })))))));
  }
  render() {
    var _a, _b, _c;
    return (h(Host, null, h("div", { class: {
        'assign-mode': this.assigningParticipants,
        'selector-mode': !this.assigningParticipants,
        'glowing-card': this.glowingCard,
      } }, h("div", { class: "header" }, h("input", { ref: (el) => (this.inputTextEl = el), placeholder: this.t('breakout_rooms.room_name'), disabled: !(this.editingTitleRoomId === this.room.id), value: this.roomTitle, minlength: ROOM_TITLE_MIN_CHARS, onChange: (e) => {
        this.newTitle = e.target.value;
      }, onKeyPress: (e) => this.onTitleChanged(e), class: { 'editing-enabled': this.editingTitleRoomId === this.room.id }, style: { width: `${this.roomTitle.length + 1}ch` } }), this.editingTitleRoomId !== this.room.id && (h("span", { class: "participant-count" }, "(", h("dyte-icon", { icon: this.iconPack.people, iconPack: this.iconPack, t: this.t }), (_c = (_b = (_a = this.room) === null || _a === void 0 ? void 0 : _a.participants) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : '0', ")")), this.canEditMeetingTitle && (h("dyte-tooltip", { label: this.editingTitleRoomId === this.room.id
        ? this.t('breakout_rooms.save_room_name')
        : this.t('breakout_rooms.edit_room_name'), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.editingTitleRoomId === this.room.id
        ? this.iconPack.checkmark
        : this.iconPack.edit, iconPack: this.iconPack, t: this.t, class: "show-on-hover", onClick: this.onEditClick }))), h("div", { class: "rooms-container" }, this.permissions.canAlterConnectedMeetings &&
      !this.room.isParent &&
      this.allowDelete && (h("dyte-tooltip", { label: this.t('breakout_rooms.delete'), class: "danger", iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.delete, class: "show-on-hover", iconPack: this.iconPack, t: this.t, onClick: () => {
        this.deleteRoom.emit();
      } }))), this.assigningParticipants &&
      this.permissions.canAlterConnectedMeetings &&
      !this.room.isParent && (h("dyte-button", { iconPack: this.iconPack, t: this.t, kind: "button", variant: "ghost", class: "assign-button", size: "md", onClick: () => this.onAssign() }, this.t('breakout_rooms.assign'))), this.mode === 'edit' &&
      !this.assigningParticipants &&
      this.permissions.canSwitchConnectedMeetings && (h("dyte-button", { iconPack: this.iconPack, t: this.t, kind: "button", variant: "ghost", class: "assign-button", size: "md", disabled: this.room.id === this.meeting.meta.roomName, onClick: () => this.onJoin() }, this.room.id === this.meeting.meta.roomName
      ? this.t('joined')
      : this.t('join'))), !this.room.isParent && (h("dyte-icon", { icon: this.showExpandedCard ? this.iconPack.chevron_up : this.iconPack.chevron_down, iconPack: this.iconPack, t: this.t, onClick: () => this.toggleCardDisplay() })))), this.renderExpandedCardMaybe(), this.renderParticipantsMaybe())));
  }
  static get style() { return dyteBreakoutRoomManagerCss; }
}, [1, "dyte-breakout-room-manager", {
    "meeting": [16],
    "assigningParticipants": [4, "assigning-participants"],
    "mode": [1],
    "states": [16],
    "allowDelete": [4, "allow-delete"],
    "iconPack": [16],
    "t": [16],
    "isDragMode": [4, "is-drag-mode"],
    "room": [16],
    "defaultExpanded": [4, "default-expanded"],
    "editingTitleRoomId": [32],
    "newTitle": [32],
    "showExpandedCard": [32],
    "glowingCard": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-breakout-room-manager", "dyte-avatar", "dyte-button", "dyte-icon", "dyte-spinner", "dyte-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-breakout-room-manager":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteBreakoutRoomManager);
      }
      break;
    case "dyte-avatar":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteBreakoutRoomManager as D, defineCustomElement as d };
