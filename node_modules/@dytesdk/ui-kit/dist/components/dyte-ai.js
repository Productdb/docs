import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { R as Render } from './index3.js';
import { d as defaultConfig } from './default-ui-config.js';
import { s as state } from './store.js';
import { d as defineCustomElement$3 } from './dyte-button2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';

const dyteAiCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;box-sizing:border-box;display:flex;width:100%;max-width:var(--dyte-space-80, 320px);flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));overflow:hidden}.close{position:absolute;top:var(--dyte-space-3, 12px);left:var(--dyte-space-3, 12px)}.title{margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-2, 8px);-webkit-user-select:none;-moz-user-select:none;user-select:none;padding:var(--dyte-space-0, 0px);text-align:center;font-size:16px;font-weight:400}#mobile-header{margin-top:var(--dyte-space-2, 8px);display:flex;align-items:center;justify-content:space-evenly;border-bottom:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}#mobile-header dyte-button{border-bottom:var(--dyte-border-width-md, 2px) solid transparent;position:relative;border-radius:var(--dyte-border-radius-none, 0)}#mobile-header dyte-button:hover{background-color:transparent}#mobile-header dyte-button.active{border-color:rgb(var(--dyte-colors-brand-400, 53 110 253))}#mobile-header dyte-button .dot{font-size:48px;position:absolute;top:-26px;right:calc(var(--dyte-space-1, 4px) * -1);--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-text-opacity))}dyte-ai-home,dyte-ai-transcriptions,dyte-ai-chat{flex:1}:host([view='sidebar']){margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}:host([view='full-screen']){position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);z-index:50;max-width:100%;border:none}";

const DyteAi$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.close = () => {
      this.stateUpdate.emit({ activeAI: false });
      state.activeAI = false;
    };
    this.transcriptionHandler = () => {
      if (this.tab !== 'transcriptions') {
        this.newTranscriptionAvailable = true;
      }
    };
    this.defaultSection = 'home';
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.size = undefined;
    this.view = 'sidebar';
    this.tab = this.defaultSection;
    this.newTranscriptionAvailable = false;
    this.newAiMessageAvailable = false;
  }
  connectedCallback() {
    var _a, _b;
    this.viewChanged(this.view);
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.on('transcript', this.transcriptionHandler);
  }
  disconnectedCallback() {
    var _a, _b;
    this.keydownListener && document.removeEventListener('keydown', this.keydownListener);
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.off('transcript', this.transcriptionHandler);
  }
  viewChanged(view) {
    if (view === 'full-screen') {
      this.keydownListener = (e) => {
        if (e.key === 'Escape') {
          this.close();
        }
      };
      document.addEventListener('keydown', this.keydownListener);
    }
  }
  tabChanged(tab) {
    if (tab === 'transcriptions' && this.newTranscriptionAvailable) {
      this.newTranscriptionAvailable = false;
    }
    if (tab === 'home' && this.newAiMessageAvailable) {
      this.newAiMessageAvailable = false;
    }
  }
  viewSection(section) {
    this.tab = section;
    state.activeSidebar = true;
  }
  // private aiMessageHandler = () => {
  //   if (this.tab !== 'home') {
  //     this.newAiMessageAvailable = true;
  //   }
  // };
  render() {
    var _a, _b, _c;
    if (!((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions).transcriptionEnabled ||
      !((_c = this.states) === null || _c === void 0 ? void 0 : _c.activeAI)) {
      return null;
    }
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states || state,
      size: this.size,
      t: this.t,
      iconPack: this.iconPack,
    };
    // const aiClient = this.middlewares.speech;
    return (h(Host, null, h("h3", { class: "title" }, this.t('ai')), h("div", { id: "mobile-header" }, h("dyte-button", { variant: "ghost", class: { active: this.tab === 'home' }, onClick: () => this.viewSection('home'), iconPack: this.iconPack, t: this.t }, this.t('ai.home'), this.newAiMessageAvailable && h("span", { class: "dot" }, ".")), h("dyte-button", { variant: "ghost", class: { active: this.tab === 'transcriptions' }, onClick: () => this.viewSection('transcriptions'), iconPack: this.iconPack, t: this.t }, this.t('ai.transcriptions'), this.newTranscriptionAvailable && h("span", { class: "dot" }, "."))), h("dyte-button", { variant: "ghost", kind: "icon", class: "close", onClick: this.close, "aria-label": this.t('close'), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.dismiss, iconPack: this.iconPack, t: this.t })), this.tab === 'home' && (h(Render, { element: "dyte-ai-home", defaults: defaults, props: {
        // aiClient: aiClient,
        // initialMessages: aiClient.aiMesssages,
        meeting: this.meeting,
      } })), this.tab === 'transcriptions' && (h(Render, { element: "dyte-ai-transcriptions", defaults: defaults })), this.tab === 'personal' && h(Render, { element: "dyte-ai-chat", defaults: defaults })));
  }
  static get watchers() { return {
    "view": ["viewChanged"],
    "tab": ["tabChanged"]
  }; }
  static get style() { return dyteAiCss; }
}, [1, "dyte-ai", {
    "defaultSection": [1, "default-section"],
    "meeting": [16],
    "states": [16],
    "config": [16],
    "iconPack": [16],
    "t": [16],
    "size": [513],
    "view": [513],
    "tab": [32],
    "newTranscriptionAvailable": [32],
    "newAiMessageAvailable": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-ai", "dyte-button", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-ai":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteAi$1);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteAi = DyteAi$1;
const defineCustomElement = defineCustomElement$1;

export { DyteAi, defineCustomElement };
