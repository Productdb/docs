import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { a as isLiveStreamViewer } from './livestream.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';

const dyteParticipantCountCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{margin-left:var(--dyte-space-2, 8px);margin-right:var(--dyte-space-2, 8px);display:inline-flex;height:var(--dyte-space-10, 40px);-webkit-user-select:none;-moz-user-select:none;user-select:none;align-items:center}:host([size='sm']){margin-left:var(--dyte-space-1, 4px);margin-right:var(--dyte-space-1, 4px);font-size:12px}dyte-icon{margin-right:var(--dyte-space-1, 4px);height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px)}:host([size='sm']) dyte-icon{height:var(--dyte-space-4, 16px);width:var(--dyte-space-4, 16px)}";

const DyteParticipantCount$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.disconnectMeeting = (meeting) => {
      if (meeting != null && this.countListener != null) {
        meeting.participants.joined.removeListener('participantJoined', this.countListener);
        meeting.participants.joined.removeListener('participantLeft', this.countListener);
        (meeting === null || meeting === void 0 ? void 0 : meeting.stage) &&
          this.stageUpdateListener &&
          meeting.stage.removeListener('stageStatusUpdate', this.stageUpdateListener);
        meeting.self.removeListener('roomJoined', this.countListener);
      }
    };
    this.meeting = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.size = undefined;
    this.participantCount = 0;
    this.isViewer = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    this.disconnectMeeting(this.meeting);
  }
  meetingChanged(meeting, oldMeeting) {
    this.disconnectMeeting(oldMeeting);
    if (meeting != null) {
      this.countListener = () => {
        this.participantCount =
          meeting.participants.joined.size + (meeting.self.roomJoined ? 1 : 0);
      };
      this.countListener();
      this.isViewer = isLiveStreamViewer(this.meeting);
      meeting.participants.joined.addListener('participantJoined', this.countListener);
      meeting.participants.joined.addListener('participantLeft', this.countListener);
      if (meeting === null || meeting === void 0 ? void 0 : meeting.stage) {
        this.stageUpdateListener = () => {
          this.isViewer = isLiveStreamViewer(this.meeting);
        };
        meeting === null || meeting === void 0 ? void 0 : meeting.stage.addListener('stageStatusUpdate', this.stageUpdateListener);
      }
      meeting.self.addListener('roomJoined', this.countListener);
    }
  }
  render() {
    if (this.isViewer)
      return null;
    return (h(Host, { tabIndex: 0, role: "log", "aria-label": `${this.participantCount} ${this.t('participants')}` }, h("dyte-icon", { icon: this.iconPack.people, tabIndex: -1, "aria-hidden": true, part: "icon", iconPack: this.iconPack, t: this.t }), this.participantCount));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dyteParticipantCountCss; }
}, [1, "dyte-participant-count", {
    "meeting": [16],
    "iconPack": [16],
    "t": [16],
    "size": [513],
    "participantCount": [32],
    "isViewer": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-participant-count", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-participant-count":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteParticipantCount$1);
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteParticipantCount = DyteParticipantCount$1;
const defineCustomElement = defineCustomElement$1;

export { DyteParticipantCount, defineCustomElement };
