import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';

const dyteNetworkIndicatorCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block;height:var(--dyte-space-7, 28px);width:var(--dyte-space-7, 28px)}dyte-icon{position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);z-index:10;height:100%;width:100%;--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}dyte-icon.good{--tw-text-opacity:1;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity))}dyte-icon.poor{--tw-text-opacity:1;color:rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity))}dyte-icon.poorest{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}:host([size='md']){height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}:host([size='sm']){height:var(--dyte-space-5, 20px);width:var(--dyte-space-5, 20px)}.bg-signal{position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);z-index:0;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}";

const DyteNetworkIndicator$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onMediaScoreUpdate = ({ kind, isScreenshare, score }) => {
      if (kind === 'video' || (this.isScreenShare && isScreenshare)) {
        this.score = score;
      }
    };
    this.participant = undefined;
    this.meeting = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.isScreenShare = false;
    this.score = 10;
  }
  connectedCallback() {
    this.participantChanged(this.participant);
  }
  participantChanged(participant) {
    if (!participant)
      return;
    participant.addListener('mediaScoreUpdate', this.onMediaScoreUpdate);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.participant) === null || _a === void 0 ? void 0 : _a.removeListener('mediaScoreUpdate', this.onMediaScoreUpdate);
  }
  render() {
    if (this.meeting && this.meeting.self.userId === this.participant.userId) {
      return null;
    }
    let signal_strength = Math.round(this.score / 2);
    let signal_status = 'good';
    // make sure signal strength is within bounds [1,3]
    // do not show if it is good
    if (signal_strength > 3) {
      return null;
    }
    else if (signal_strength < 1) {
      signal_strength = 1;
    }
    switch (signal_strength) {
      case 3:
      case 2:
        signal_status = 'poor';
        break;
      case 1:
        signal_status = 'poorest';
    }
    return (h(Host, null, h("dyte-icon", { icon: this.iconPack[`signal_${signal_strength}`], class: signal_status }), h("dyte-icon", { icon: this.iconPack.signal_5, class: "bg-signal" })));
  }
  static get watchers() { return {
    "participant": ["participantChanged"]
  }; }
  static get style() { return dyteNetworkIndicatorCss; }
}, [1, "dyte-network-indicator", {
    "participant": [16],
    "meeting": [16],
    "iconPack": [16],
    "t": [16],
    "isScreenShare": [4, "is-screen-share"],
    "score": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-network-indicator", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-network-indicator":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteNetworkIndicator$1);
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteNetworkIndicator = DyteNetworkIndicator$1;
const defineCustomElement = defineCustomElement$1;

export { DyteNetworkIndicator, defineCustomElement };
