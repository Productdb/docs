import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { h as hasOnlyEmojis } from './string.js';
import { C as ChatHead } from './ChatHead.js';
import { T as TextMessageView } from './TextMessage.js';

const DyteTextMessage = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.message = undefined;
    this.now = new Date();
    this.isContinued = false;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.showBubble = false;
  }
  render() {
    return (h(Host, null, !this.isContinued && (h(ChatHead, { name: this.message.displayName, time: this.message.time, now: this.now })), h("div", { class: {
        body: true,
        bubble: this.showBubble,
      }, part: "body" }, h("div", { class: { text: true, emoji: hasOnlyEmojis(this.message.message) } }, h(TextMessageView, { message: this.message.message })))));
  }
}, [0, "dyte-text-message", {
    "message": [16],
    "now": [16],
    "isContinued": [516, "is-continued"],
    "iconPack": [16],
    "t": [16],
    "showBubble": [4, "show-bubble"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-text-message"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-text-message":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteTextMessage);
      }
      break;
  } });
}

export { DyteTextMessage as D, defineCustomElement as d };
