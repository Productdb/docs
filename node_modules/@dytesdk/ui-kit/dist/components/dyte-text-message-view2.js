import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { h as hasOnlyEmojis } from './string.js';
import { d as defineCustomElement$1 } from './dyte-markdown-view2.js';

const dyteTextMessageViewCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.text{display:block;overflow-wrap:break-word;line-height:1.375}.text.emoji{font-size:24px}";

const DyteTextMessageView = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.text = undefined;
    this.isMarkdown = false;
  }
  render() {
    return (h("p", { class: { text: true, emoji: hasOnlyEmojis(this.text) } }, this.isMarkdown ? h("dyte-markdown-view", { text: this.text }) : this.text));
  }
  static get style() { return dyteTextMessageViewCss; }
}, [0, "dyte-text-message-view", {
    "text": [1],
    "isMarkdown": [4, "is-markdown"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-text-message-view", "dyte-markdown-view"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-text-message-view":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteTextMessageView);
      }
      break;
    case "dyte-markdown-view":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteTextMessageView as D, defineCustomElement as d };
