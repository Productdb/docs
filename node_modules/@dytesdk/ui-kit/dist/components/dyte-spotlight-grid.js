import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defaultConfig } from './default-ui-config.js';
import { d as defaultGridSize } from './grid.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { R as Render } from './index3.js';

const dyteSpotlightGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%}main{flex:1 1 0%}.grid-width-sm{width:25%}.grid-width-md{width:50%}.grid-width-lg{width:66.666667%}:host([size='sm']),:host([size='md']){flex-direction:column}:host([size='md']) aside{max-height:var(--dyte-space-96, 384px);width:100%;max-width:100%}:host([size='md']) .grid-width-sm{height:25%}:host([size='md']) .grid-width-md{height:50%}:host([size='md']) .grid-width-lg{height:66.666667%}:host([size='sm']) aside{max-height:var(--dyte-space-96, 384px);width:100%;max-width:100%}:host([size='sm']) .grid-width-sm,:host([size='sm']) .grid-width-md,:host([size='sm']) .grid-width-lg{height:50%}:host([size='xl']) .grid-width-sm,:host([size='xl']) .grid-width-md,:host([size='xl']) .grid-width-lg{width:400px}:host([layout='column']){flex-direction:column}:host([layout='column']) main{flex:4}:host([layout='column']) aside{flex:2;max-width:100%;width:100%}";

const DyteSpotlightGrid$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.getAdaptiveSize = (length) => {
      if (this.size === 'sm') {
        return 'sm';
      }
      if (length > 3) {
        return 'sm';
      }
      else {
        if (this.size === 'md') {
          return 'sm';
        }
        return 'md';
      }
    };
    this.layout = 'row';
    this.participants = [];
    this.pinnedParticipants = [];
    this.aspectRatio = '16:9';
    this.gap = 8;
    this.size = undefined;
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.gridSize = defaultGridSize;
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states,
      size: this.size,
      iconPack: this.iconPack,
      t: this.t,
    };
    const nonPinnedParticipants = this.participants.filter((p) => this.pinnedParticipants.some((pt) => pt.id != p.id));
    return (h(Host, null, h("main", { part: "main" }, h(Render, { element: "dyte-simple-grid", defaults: defaults, props: {
        part: 'main-grid',
        participants: this.pinnedParticipants,
        aspectRatio: this.aspectRatio,
        gap: this.gap,
        size: this.getAdaptiveSize(this.pinnedParticipants.length),
      } })), nonPinnedParticipants.length > 0 && (h("aside", { part: "aside", class: this.gridSize.spotlight ? `grid-width-${this.gridSize.spotlight}` : 'grid-width-md' }, h(Render, { element: "dyte-simple-grid", defaults: defaults, props: {
        part: 'aside-grid',
        participants: nonPinnedParticipants,
        aspectRatio: this.aspectRatio,
        gap: this.gap,
        size: this.getAdaptiveSize(nonPinnedParticipants.length),
      } })))));
  }
  get host() { return this; }
  static get style() { return dyteSpotlightGridCss; }
}, [1, "dyte-spotlight-grid", {
    "layout": [513],
    "participants": [16],
    "pinnedParticipants": [16],
    "aspectRatio": [1, "aspect-ratio"],
    "gap": [2],
    "size": [513],
    "meeting": [16],
    "states": [16],
    "config": [16],
    "iconPack": [16],
    "t": [16],
    "gridSize": [16]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-spotlight-grid"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-spotlight-grid":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteSpotlightGrid$1);
      }
      break;
  } });
}

const DyteSpotlightGrid = DyteSpotlightGrid$1;
const defineCustomElement = defineCustomElement$1;

export { DyteSpotlightGrid, defineCustomElement };
