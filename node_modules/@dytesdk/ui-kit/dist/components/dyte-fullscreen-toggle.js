import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { i as isFullScreenEnabled, r as requestFullScreen, e as exitFullSreen, a as isFullScreenSupported } from './full-screen.js';
import { s as state } from './store.js';
import { d as defineCustomElement$4 } from './dyte-controlbar-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';

const dyteFullscreenToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DyteFullscreenToggle$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.onFullScreenchange = () => {
      this.fullScreenActive = isFullScreenEnabled();
    };
    this.toggleFullScreen = () => {
      let fullScreenElement = this.targetElement || document.querySelector('dyte-meeting');
      if (!fullScreenElement)
        return;
      if (!this.fullScreenActive) {
        requestFullScreen(fullScreenElement);
        this.fullScreenActive = true;
      }
      else {
        exitFullSreen();
        this.fullScreenActive = false;
      }
      this.stateUpdate.emit({ activeMoreMenu: false });
      state.activeMoreMenu = false;
    };
    this.states = undefined;
    this.targetElement = undefined;
    this.variant = 'button';
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.fullScreenActive = false;
    this.isFullScreenSupported = true;
  }
  connectedCallback() {
    this.isFullScreenSupported = isFullScreenSupported();
    this.onFullScreenchange();
    window.addEventListener('webkitfullscreenchange', this.onFullScreenchange);
    window.addEventListener('fullscreenchange', this.onFullScreenchange);
  }
  disconnectedCallback() {
    window.removeEventListener('webkitfullscreenchange', this.onFullScreenchange);
    window.removeEventListener('fullscreenchange', this.onFullScreenchange);
  }
  render() {
    if (!this.isFullScreenSupported) {
      return null;
    }
    return (h(Host, { title: this.t('full_screen') }, h("dyte-controlbar-button", { size: this.size, iconPack: this.iconPack, t: this.t, onClick: this.toggleFullScreen, icon: this.fullScreenActive
        ? this.iconPack.full_screen_minimize
        : this.iconPack.full_screen_maximize, label: this.fullScreenActive ? this.t('full_screen.exit') : this.t('full_screen'), variant: this.variant })));
  }
  static get style() { return dyteFullscreenToggleCss; }
}, [1, "dyte-fullscreen-toggle", {
    "states": [16],
    "targetElement": [16],
    "variant": [513],
    "size": [513],
    "iconPack": [16],
    "t": [16],
    "fullScreenActive": [32],
    "isFullScreenSupported": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-fullscreen-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-fullscreen-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteFullscreenToggle$1);
      }
      break;
    case "dyte-controlbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteFullscreenToggle = DyteFullscreenToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteFullscreenToggle, defineCustomElement };
