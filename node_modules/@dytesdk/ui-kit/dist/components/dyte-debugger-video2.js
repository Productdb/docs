import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { s as state } from './store.js';
import './breakout-rooms-manager.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { d as defineCustomElement$5 } from './dyte-button2.js';
import { d as defineCustomElement$4 } from './dyte-debugger-issues-ui2.js';
import { d as defineCustomElement$3 } from './dyte-debugger-permissions-ui2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';
import { d as defineCustomElement$1 } from './dyte-information-tooltip2.js';

const dyteDebuggerVideoCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;height:100%;width:100%;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}h3{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:600}.status{margin-left:var(--dyte-space-2, 8px);display:flex;flex-direction:row;align-items:center;justify-content:center;font-size:12px}.status dyte-icon{margin-right:var(--dyte-space-2, 8px)}.stage-indicator{margin-bottom:var(--dyte-space-1, 4px);display:flex;flex-direction:row;align-items:center;font-size:12px;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}.scroll{overflow:auto;border-radius:var(--dyte-border-radius-none, 0)}.warning,.NOT_REQUESTED{--tw-text-opacity:1 !important;color:rgba(var(--dyte-colors-warning, 255 205 7) / var(--tw-text-opacity)) !important;opacity:0.8}.success,.ACCEPTED{--tw-text-opacity:1 !important;color:rgba(var(--dyte-colors-success, 98 165 4) / var(--tw-text-opacity)) !important;opacity:0.8}.COULD_NOT_START,.error,.DENIED,.SYSTEM_DENIED{--tw-text-opacity:1 !important;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity)) !important;opacity:0.8}.row{display:flex;flex-direction:row;align-items:center;justify-content:flex-start}h3{margin:var(--dyte-space-0, 0px);font-size:14px;font-weight:600}.status-text{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);font-size:14px;font-weight:100 !important}.status-text dyte-icon{margin-right:var(--dyte-space-2, 8px)}.tooltip-text{display:flex;flex-direction:column;font-size:12px}.tooltip-text span{margin-left:var(--dyte-space-1, 4px);color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88)) !important}.tooltip-text div{margin-top:var(--dyte-space-1, 4px)}.tooltip-text div:nth-child(1){margin:var(--dyte-space-0, 0px)}.row{display:flex;flex-direction:row;align-items:center;justify-content:center}.row dyte-switch{margin-left:var(--dyte-space-8, 32px)}.row dyte-button{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);margin-left:var(--dyte-space-2, 8px)}.row .label{width:var(--dyte-space-40, 160px)}.row .text{margin-top:var(--dyte-space-1, 4px);margin-left:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-0, 0px)}.col{display:flex;width:100%;flex-direction:column;align-items:flex-start;justify-content:flex-start}.label{margin-top:var(--dyte-space-1, 4px);display:flex;flex-direction:row;justify-content:space-between;font-size:14px;font-weight:100 !important;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.text{margin-bottom:var(--dyte-space-2, 8px);font-size:14px;font-weight:100 !important;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64));opacity:0.7}.title{margin-bottom:var(--dyte-space-2, 8px);display:flex;flex-direction:row;align-items:center;font-size:14px;font-weight:600;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.sub-title{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-2, 8px);display:flex;flex-direction:row;align-items:center;font-size:14px;font-weight:600;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.stage-manager{position:sticky;bottom:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-4, 16px);display:flex;width:100%;flex-direction:row-reverse;align-items:center;justify-content:space-between;font-size:14px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-600, 13 81 253) / var(--tw-text-opacity))}.stage-button{display:flex;cursor:pointer;flex-direction:row;align-items:center;border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));padding-top:var(--dyte-space-1, 4px);padding-bottom:var(--dyte-space-1, 4px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px)}.stage-button dyte-icon{padding:var(--dyte-space-0, 0px)}.disabled{cursor:not-allowed;color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52)) !important}.video-container{position:relative;width:-moz-fit-content;width:fit-content}.no-video-preview{position:absolute;top:50%;left:50%;z-index:50;display:flex;height:var(--dyte-space-12, 48px);width:var(--dyte-space-12, 48px);align-items:center;justify-content:center;border-radius:50%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));translate:-50% -50%}.video-preview{margin-top:var(--dyte-space-1, 4px);aspect-ratio:16 / 9;height:var(--dyte-space-28, 112px);border-radius:var(--dyte-border-radius-md, 8px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}video{transform:scaleX(-1)}#header{margin-top:var(--dyte-space-2, 8px);display:flex;align-items:center;justify-content:space-evenly;border-bottom:var(--dyte-border-width-sm, 1px) solid rgb(var(--dyte-colors-background-600, 60 60 60))}#header dyte-button{border-bottom:var(--dyte-border-width-md, 2px) solid transparent;border-radius:var(--dyte-border-radius-none, 0)}#header dyte-button:hover{background-color:transparent}#header dyte-button.active{border-color:rgb(var(--dyte-colors-brand-400, 53 110 253))}.tab-body{display:flex;height:100%;flex-direction:column;justify-content:space-between;overflow-y:auto;padding:var(--dyte-space-4, 16px)}";

const DyteDebuggerAudio = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.testProgress = createEvent(this, "testProgress", 7);
    this.blackFramesCount = 0;
    this.meeting = undefined;
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.activeTab = 'Report';
    this.stage = 0;
    this.mediaPermission = 'NOT_REQUESTED';
    this.videoPreview = false;
    this.videoMetadata = {};
    this.videoTrackStats = {
      isBlackFrame: false,
      isFrozenFrame: false,
      timestamp: 0,
      videoScore: 0,
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.updateProgress();
  }
  disconnectedCallback() {
    var _a;
    const { self, troubleshoot } = this.meeting;
    this.videoPreview && this.toggleVideoTest();
    self === null || self === void 0 ? void 0 : self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    (_a = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.video) === null || _a === void 0 ? void 0 : _a.removeListener('videoTrackStats', this.videoTrackUpdateListener);
  }
  async meetingChanged(meeting) {
    var _a, _b;
    if (!meeting)
      return;
    const { self, troubleshoot } = meeting;
    if (self === null || self === void 0 ? void 0 : self.videoTrack) {
      await this.getTrackInfo();
    }
    self === null || self === void 0 ? void 0 : self.on('deviceUpdate', this.deviceUpdateListner.bind(this));
    self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener.bind(this));
    const permission = (_a = self === null || self === void 0 ? void 0 : self.mediaPermissions) === null || _a === void 0 ? void 0 : _a.video;
    this.mediaPermissionUpdateListener({ kind: 'video', message: permission });
    (_b = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.video) === null || _b === void 0 ? void 0 : _b.on('videoTrackStats', this.videoTrackUpdateListener.bind(this));
  }
  mediaPermissionUpdateListener({ kind, message }) {
    if (kind !== 'video')
      return;
    this.mediaPermission = message;
    if (this.mediaPermission !== 'ACCEPTED') {
      this.stage = 0;
      this.updateProgress();
      if (this.videoPreview)
        this.toggleVideoTest();
    }
  }
  deviceUpdateListner({ device, preview }) {
    if (preview)
      return;
    if ((device === null || device === void 0 ? void 0 : device.kind) !== 'videoinput')
      return;
    this.getTrackInfo();
  }
  videoTrackUpdateListener(data) {
    this.videoTrackStats = Object.assign(Object.assign({}, data), { videoScore: this.normalizeVideoScore(data === null || data === void 0 ? void 0 : data.videoScore) });
  }
  setActiveTab(state) {
    this.activeTab = state;
    this.updateProgress();
  }
  async toggleVideoTest() {
    var _a, _b;
    this.videoPreview = !this.videoPreview;
    const troubleshooter = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.troubleshoot) === null || _b === void 0 ? void 0 : _b.video;
    if (this.videoPreview) {
      const track = await (troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.startPreview());
      const stream = new MediaStream();
      if (!track)
        return;
      stream.addTrack(track);
      setTimeout(() => {
        this.videoEl.srcObject = stream;
      }, 500);
      this.getTrackInfo();
      await (troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.startTrackAnalysis());
    }
    else {
      troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.stopPreview();
      troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.stopTrackAnalysis();
      this.videoEl.srcObject = undefined;
    }
  }
  getTrackInfo() {
    var _a, _b;
    this.videoMetadata = (_b = (_a = this.meeting.troubleshoot) === null || _a === void 0 ? void 0 : _a.video) === null || _b === void 0 ? void 0 : _b.getTrackMetadata();
  }
  getAnalysisStatus() {
    var _a, _b;
    let message = 'All systems are functional.';
    let icon = 'checkmark';
    let style = 'success';
    if ((_a = this.videoTrackStats) === null || _a === void 0 ? void 0 : _a.isBlackFrame) {
      this.blackFramesCount++;
    }
    else {
      this.blackFramesCount = 0;
    }
    if ((_b = this.videoTrackStats) === null || _b === void 0 ? void 0 : _b.isFrozenFrame) {
      message = 'Looks like the video is frozen.';
      icon = 'warning';
      style = 'error';
    }
    if (this.blackFramesCount > 10) {
      message = 'Video is not being processed by the camera.';
      icon = 'warning';
      style = 'error';
    }
    return (h("div", { class: `row status-text ${style}` }, h("dyte-icon", { size: "sm", icon: this.iconPack[icon] }), this.t(message)));
  }
  changeStage(stage) {
    if (this.mediaPermission !== 'ACCEPTED')
      return;
    stage = Math.max(0, stage);
    stage = Math.min(1, stage);
    this.stage = stage;
    this.updateProgress();
    if (this.videoPreview)
      this.toggleVideoTest();
  }
  updateProgress() {
    if (this.activeTab === 'Troubleshoot') {
      this.testProgress.emit(((this.stage + 1) * 100) / 2);
    }
    else
      this.testProgress.emit(0);
  }
  formatLabel(camelCaseLabel) {
    const result = camelCaseLabel.replace(/([A-Z])/g, ' $1');
    return result.charAt(0).toUpperCase() + result.slice(1);
  }
  boolToStr(val) {
    if (val)
      return 'Yes';
    return 'No';
  }
  normalizeVideoScore(val = 0) {
    let max = 1;
    const min = 0;
    if (val > max)
      max = val;
    return Math.max(5, Math.round((val * 10) / (max - min)));
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      states: this.states || state,
      iconPack: this.iconPack,
      t: this.t,
      size: this.size,
    };
    return (h(Host, null, h("div", { id: "header" }, ['Report', 'Troubleshoot'].map((section) => (h("dyte-button", { key: section, variant: "ghost", class: { active: this.activeTab === section }, onClick: () => this.setActiveTab(section), iconPack: this.iconPack, t: this.t }, this.t(section))))), this.activeTab === 'Troubleshoot' && (h("div", { class: "tab-body" }, h("div", null, h("div", { class: "stage-indicator" }, "Step ", this.stage + 1, "/2"), this.stage === 0 && (h("dyte-debugger-permissions-ui", Object.assign({}, defaults, { mediaType: "video" }))), this.stage === 1 && (h("div", null, h("div", { class: "title" }, "Camera Test"), h("div", { class: "text" }, this.t('Upon starting the Camera Test, a video preview will be enabled for you.')), h("dyte-button", { size: "md", onClick: () => this.toggleVideoTest() }, this.videoPreview ? 'Stop' : 'Start', " Camera Test"), this.videoPreview && this.videoMetadata && (h("div", { class: "col" }, h("div", { class: "sub-title" }, "Device Information", h("dyte-information-tooltip", { iconPack: this.iconPack }, h("div", { slot: "tootlip-text", class: "tooltip-text" }, Object.keys(this.videoMetadata).map((key) => (h("div", null, this.formatLabel(key), ":", h("span", null, JSON.stringify(this.videoMetadata[key])))))))), h("div", { class: "row" }, h("div", { class: "label" }, h("span", null, this.t('Device Label')), ":"), h("div", { class: "text" }, this.t(this.videoMetadata.label))), h("div", { class: "sub-title" }, "Video & Device Analysis", h("dyte-information-tooltip", { iconPack: this.iconPack }, h("div", { slot: "tootlip-text", class: "tooltip-text" }, h("div", null, "Video Score:", h("span", null, this.videoTrackStats.videoScore, "/10")), h("div", null, "Black Frame Detected:", h("span", null, this.boolToStr(this.videoTrackStats.isBlackFrame))), h("div", null, "Frozen Frame Detected:", h("span", null, this.boolToStr(this.videoTrackStats.isFrozenFrame))), h("div", null, "Time:", h("span", null, new Date(this.videoTrackStats.timestamp).toLocaleTimeString()))))), h("div", { class: "video-container" }, !this.videoPreview && (h("div", { class: "no-video-preview" }, h("dyte-icon", { icon: this.iconPack.video_off, size: "md" }))), h("video", { ref: (el) => (this.videoEl = el), autoPlay: true, playsInline: true, muted: true, class: "video-preview" })), this.getAnalysisStatus()))))), h("div", { class: "stage-manager" }, this.stage > 0 && (h("div", { class: { 'stage-button': true, disabled: this.mediaPermission !== 'ACCEPTED' }, onClick: () => this.changeStage(this.stage - 1) }, h("dyte-icon", { size: "sm", icon: this.iconPack.chevron_left }), "Prev")), this.stage < 1 && (h("div", { class: { 'stage-button': true, disabled: this.mediaPermission !== 'ACCEPTED' }, onClick: () => this.changeStage(this.stage + 1) }, "Next", h("dyte-icon", { size: "sm", icon: this.iconPack.chevron_right })))))), this.activeTab === 'Report' && (h("div", { class: "tab-body" }, h("dyte-debugger-issues-ui", Object.assign({}, defaults, { mediaType: "video" }))))));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dyteDebuggerVideoCss; }
}, [1, "dyte-debugger-video", {
    "meeting": [16],
    "states": [16],
    "size": [513],
    "iconPack": [16],
    "t": [16],
    "activeTab": [32],
    "stage": [32],
    "mediaPermission": [32],
    "videoPreview": [32],
    "videoMetadata": [32],
    "videoTrackStats": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-debugger-video", "dyte-button", "dyte-debugger-issues-ui", "dyte-debugger-permissions-ui", "dyte-icon", "dyte-information-tooltip"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-debugger-video":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteDebuggerAudio);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "dyte-debugger-issues-ui":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-debugger-permissions-ui":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-information-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteDebuggerAudio as D, defineCustomElement as d };
