import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { C as ChatHead } from './ChatHead.js';
import { a as sanitizeLink } from './string.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { d as downloadFile } from './file.js';
import { u as useLanguage } from './index2.js';
import { s as state } from './store.js';
import { d as defineCustomElement$3 } from './dyte-button2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';
import { d as defineCustomElement$1 } from './dyte-spinner2.js';

const dyteImageMessageCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.image-spinner{cursor:wait}.image-errored{cursor:not-allowed}";

const DyteImageMessage = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.message = undefined;
    this.now = new Date();
    this.isContinued = false;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.showBubble = false;
    this.status = 'loading';
  }
  render() {
    return (h(Host, null, !this.isContinued && (h(ChatHead, { name: this.message.displayName, time: this.message.time, now: this.now })), h("div", { class: {
        body: true,
        bubble: this.showBubble,
      }, part: "body" }, h("div", { class: { image: true, loaded: this.status === 'loaded' } }, h("img", { src: sanitizeLink(this.message.link), onLoad: () => {
        this.status = 'loaded';
      }, onError: () => {
        this.status = 'errored';
      }, onClick: () => {
        if (this.status === 'loaded') {
          this.stateUpdate.emit({ image: this.message });
          state.image = this.message;
        }
      } }), this.status === 'loading' && (h("div", { class: "image-spinner", title: this.t('chat.img.loading'), "aria-label": this.t('chat.img.loading') }, h("dyte-spinner", { iconPack: this.iconPack, t: this.t }))), this.status === 'errored' && (h("div", { class: "image-errored", title: this.t('chat.error.img_not_found'), "aria-label": this.t('chat.error.img_not_found') }, h("dyte-icon", { icon: this.iconPack.image_off, iconPack: this.iconPack, t: this.t }))), this.status === 'loaded' && (h("div", { class: "actions" }, h("dyte-button", { class: "action", variant: "secondary", kind: "icon", onClick: () => {
        this.stateUpdate.emit({ image: this.message });
        state.image = this.message;
      }, iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.full_screen_maximize })), h("dyte-button", { class: "action", variant: "secondary", kind: "icon", onClick: () => downloadFile(this.message.link, { fallbackName: 'image' }), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.download, iconPack: this.iconPack, t: this.t }))))))));
  }
  static get style() { return dyteImageMessageCss; }
}, [0, "dyte-image-message", {
    "message": [16],
    "now": [16],
    "isContinued": [516, "is-continued"],
    "iconPack": [16],
    "t": [16],
    "showBubble": [4, "show-bubble"],
    "status": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-image-message", "dyte-button", "dyte-icon", "dyte-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-image-message":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteImageMessage);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteImageMessage as D, defineCustomElement as d };
