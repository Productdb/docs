import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { c as computePosition, o as offset, f as flip, s as shift } from './floating-ui.dom.esm.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';

const dyteMenuCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:inline-block;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}#menu-list{position:absolute;z-index:20;display:none}";

const DyteMenu = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.clickedThis = false;
    this.handleOutsideClick = () => {
      // handles clicking on other menu triggers
      if (!this.clickedThis) {
        // if other trigger is clicked, hide this menu-list
        this.menuListEl.style.display = 'none';
      }
      // reset the value
      this.clickedThis = false;
    };
    this.size = undefined;
    this.placement = 'bottom-end';
    this.offset = 10;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  componentDidLoad() {
    document.addEventListener('click', this.handleOutsideClick);
    this.update();
  }
  disconnectedCallback() {
    document.removeEventListener('click', this.handleOutsideClick);
  }
  update() {
    computePosition(this.triggerEl, this.menuListEl, {
      placement: this.placement,
      middleware: [offset(this.offset), flip(), shift({ padding: 5 })],
    }).then(({ x, y }) => {
      Object.assign(this.menuListEl.style, {
        left: `${x}px`,
        top: `${y}px`,
      });
    });
  }
  render() {
    return (h(Host, null, h("span", { id: "trigger", ref: (el) => (this.triggerEl = el), onClick: () => {
        this.clickedThis = true;
        if (this.menuListEl.style.display !== 'block') {
          this.menuListEl.style.display = 'block';
          this.update();
        }
        else {
          this.menuListEl.style.display = 'none';
        }
      } }, h("slot", { name: "trigger" })), h("span", { part: "menu-list", id: "menu-list", ref: (el) => (this.menuListEl = el) }, h("slot", null))));
  }
  static get style() { return dyteMenuCss; }
}, [1, "dyte-menu", {
    "size": [513],
    "placement": [1],
    "offset": [2],
    "iconPack": [16],
    "t": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-menu"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-menu":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteMenu);
      }
      break;
  } });
}

export { DyteMenu as D, defineCustomElement as d };
