import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defaultConfig } from './default-ui-config.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { R as Render } from './index3.js';
import { u as useGrid } from './grid.js';
import { i as index } from './ResizeObserver.es.js';
import { g as getInitials } from './string.js';

const dyteSimpleGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block;height:100%;width:100%}";

const DyteSimpleGrid$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.setHostDimensions = () => {
      const { clientWidth: width, clientHeight: height } = this.host;
      this.dimensions = { width, height };
    };
    this.onParticipantTileLoad = (event) => {
      var _a, _b, _c;
      if (!this.meeting)
        return;
      const { participant, videoElement } = event.detail;
      if (!participant || !videoElement)
        return;
      (_a = this.meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.addSource(participant.id, videoElement, participant.videoEnabled, false, (_b = participant.name) !== null && _b !== void 0 ? _b : getInitials(participant.name));
      if (participant.videoEnabled) {
        (_c = this.meeting.participants.pip) === null || _c === void 0 ? void 0 : _c.enableSource(participant.id);
      }
    };
    this.onParticipantTileUnload = (event) => {
      var _a;
      if (!this.meeting)
        return;
      const participant = event.detail;
      (_a = this.meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.removeSource(participant.id);
    };
    this.participants = [];
    this.aspectRatio = '16:9';
    this.gap = 8;
    this.size = undefined;
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.dimensions = { width: 0, height: 0 };
  }
  connectedCallback() {
    this.resizeObserver = new index(this.setHostDimensions);
    this.resizeObserver.observe(this.host);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states,
      size: this.size,
      iconPack: this.iconPack,
      t: this.t,
    };
    const { width, height, getPosition } = useGrid({
      dimensions: this.dimensions,
      count: this.participants.length,
      aspectRatio: this.aspectRatio,
      gap: this.gap,
    });
    return (h(Host, null, this.participants.map((participant, index) => {
      const { top, left } = getPosition(index);
      return (h(Render, { element: "dyte-participant-tile", defaults: defaults, props: {
          participant,
          style: {
            position: 'absolute',
            top: `${top}px`,
            left: `${left}px`,
            width: `${width}px`,
            height: `${height}px`,
          },
          key: participant.id,
          'data-participant': participant.id,
          onTileLoad: this.onParticipantTileLoad,
          onTileUnload: this.onParticipantTileUnload,
        }, childProps: { participant }, deepProps: true }));
    }), h("slot", null)));
  }
  get host() { return this; }
  static get style() { return dyteSimpleGridCss; }
}, [1, "dyte-simple-grid", {
    "participants": [16],
    "aspectRatio": [1, "aspect-ratio"],
    "gap": [2],
    "size": [513],
    "meeting": [16],
    "states": [16],
    "config": [16],
    "iconPack": [16],
    "t": [16],
    "dimensions": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-simple-grid"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-simple-grid":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteSimpleGrid$1);
      }
      break;
  } });
}

const DyteSimpleGrid = DyteSimpleGrid$1;
const defineCustomElement = defineCustomElement$1;

export { DyteSimpleGrid, defineCustomElement };
