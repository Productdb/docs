import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { M as MAX_TEXT_LENGTH, j as extractReplyBlock, s as stripOutReplyBlock, k as parseRichText } from './chat.js';

const dyteMarkdownViewCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{overflow-wrap:break-word}a{color:currentColor}.block-quote,blockquote{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-3, 12px);--tw-border-spacing-x:1px;--tw-border-spacing-y:1px;border-spacing:var(--tw-border-spacing-x) var(--tw-border-spacing-y);border-top-width:var(--dyte-border-width-none, 0);border-bottom-width:var(--dyte-border-width-none, 0);border-left-width:var(--dyte-border-width-md, 2px);border-right-width:var(--dyte-border-width-none, 0);border-style:solid;padding:var(--dyte-space-0\\.5, 2px);padding-left:var(--dyte-space-2, 8px);border-radius:var(--dyte-border-radius-sm, 4px);border-top-left-radius:var(--dyte-border-radius-none, 0);border-bottom-left-radius:var(--dyte-border-radius-none, 0)}";

const DyteMarkdownView = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.restoreEmpty = (content, tag, renderCallback) => {
      return content.trim().length === 0 ? `${tag}${content}${tag}` : renderCallback(content);
    };
    this.renderLink = (content) => {
      return (h("a", { class: "link", href: content, target: "_blank", rel: "noopener noreferrer" }, content));
    };
    this.renderBold = (content) => {
      if (typeof content === 'string') {
        return this.restoreEmpty(content, '*', (c) => h("b", null, c));
      }
      return h("b", null, this.renderTokens(content));
    };
    this.renderItalic = (content) => {
      if (typeof content === 'string') {
        return this.restoreEmpty(content, '_', (c) => h("i", null, c));
      }
      return h("i", null, this.renderTokens(content));
    };
    this.renderStrikethrough = (content) => {
      if (typeof content === 'string') {
        return this.restoreEmpty(content, '~', (c) => h("s", null, c));
      }
      return h("b", null, this.renderTokens(content));
    };
    this.renderPlainText = (content) => {
      if (typeof content === 'string') {
        return content;
      }
      return h("p", null, this.renderTokens(content));
    };
    this.renderTokens = (tokens) => {
      return tokens.map((token) => {
        switch (token.type) {
          case 'a':
            if (typeof token.content === 'string') {
              return this.renderLink(token.content);
            }
          case 'b':
            return this.renderBold(token.content);
          case 'i':
            return this.renderItalic(token.content);
          case 's':
            return this.renderStrikethrough(token.content);
          case 'q':
            return h("span", { class: "block-quote" });
          case 'plain_text':
          default:
            return this.renderPlainText(token.content);
        }
      });
    };
    this.text = undefined;
    this.maxLength = MAX_TEXT_LENGTH;
  }
  render() {
    const slicedMessage = this.text.slice(0, this.maxLength);
    const withReply = extractReplyBlock(slicedMessage, true);
    const withoutReply = stripOutReplyBlock(slicedMessage);
    return (h("p", null, withReply.length !== 0 && (h("blockquote", null, withReply.split('\n').map((line) => {
      const tokens = parseRichText(line);
      return h("p", null, this.renderTokens(tokens));
    }))), withoutReply.split('\n').map((line) => {
      const tokens = parseRichText(line);
      return h("p", null, this.renderTokens(tokens));
    })));
  }
  static get style() { return dyteMarkdownViewCss; }
}, [1, "dyte-markdown-view", {
    "text": [1],
    "maxLength": [2, "max-length"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-markdown-view"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-markdown-view":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteMarkdownView);
      }
      break;
  } });
}

export { DyteMarkdownView as D, defineCustomElement as d };
