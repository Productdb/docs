import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import './store.js';
import './breakout-rooms-manager.js';
import { d as defaultConfig } from './default-ui-config.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { R as Render } from './index3.js';

const dyteHeaderCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:var(--dyte-space-12, 48px);align-items:center;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));padding-left:var(--dyte-space-4, 16px);padding-right:var(--dyte-space-4, 16px)}@media only screen and (max-device-height: 480px) and (orientation: landscape){:host{display:none !important}}@media only screen and (max-height: 480px) and (orientation: landscape){:host{display:none !important}}";

const DyteHeader$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.variant = 'solid';
    this.disableRender = false;
    this.meeting = undefined;
    this.config = defaultConfig;
    this.states = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.size = undefined;
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      config: this.config,
      states: this.states,
      t: this.t,
      iconPack: this.iconPack,
      size: this.size,
    };
    return (h(Host, null, !this.disableRender && h(Render, { element: "dyte-header", defaults: defaults, onlyChildren: true }), h("slot", null)));
  }
  static get style() { return dyteHeaderCss; }
}, [1, "dyte-header", {
    "variant": [513],
    "disableRender": [4, "disable-render"],
    "meeting": [16],
    "config": [16],
    "states": [16],
    "iconPack": [16],
    "t": [16],
    "size": [513]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-header"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-header":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteHeader$1);
      }
      break;
  } });
}

const DyteHeader = DyteHeader$1;
const defineCustomElement = defineCustomElement$1;

export { DyteHeader, defineCustomElement };
