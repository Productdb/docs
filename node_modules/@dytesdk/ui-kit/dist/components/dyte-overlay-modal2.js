import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { u as useLanguage } from './index2.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { s as state } from './store.js';
import { d as defineCustomElement$1 } from './dyte-icon2.js';

const dyteOverlayModalCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / 0.6);position:fixed;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);z-index:50}dyte-icon{height:var(--dyte-space-20, 80px)}h2{margin:var(--dyte-space-2, 8px);font-weight:500}p{margin:var(--dyte-space-0, 0px);font-size:16px}";

const DyteOverlayModal = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.meeting = undefined;
    this.states = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  connectedCallback() {
    if (this.states.activeOverlayModal.timeout) {
      setTimeout(() => {
        this.stateUpdate.emit({ activeOverlayModal: { active: false } });
        state.activeOverlayModal = { active: false };
      }, this.states.activeOverlayModal.timeout);
    }
  }
  componentDidLoad() { }
  disconnectedCallback() { }
  render() {
    return (h(Host, null, h("dyte-icon", { icon: this.states.activeOverlayModal.icon, iconPack: this.iconPack, t: this.t }), h("h2", null, this.states.activeOverlayModal.title), h("p", null, this.states.activeOverlayModal.description)));
  }
  static get style() { return dyteOverlayModalCss; }
}, [1, "dyte-overlay-modal", {
    "meeting": [16],
    "states": [16],
    "iconPack": [16],
    "t": [16]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-overlay-modal", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-overlay-modal":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteOverlayModal);
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteOverlayModal as D, defineCustomElement as d };
