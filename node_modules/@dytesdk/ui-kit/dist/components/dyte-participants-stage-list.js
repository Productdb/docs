import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { s as state } from './store.js';
import './breakout-rooms-manager.js';
import { d as defaultConfig } from './default-ui-config.js';
import './livestream.js';
import './user-prefs.js';
import { R as Render } from './index3.js';

const dyteParticipantsStageListCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:flex;width:100%;flex-direction:column;font-size:14px}.participants-container{margin-bottom:var(--dyte-space-4, 16px);width:100%}h3,.heading-count{margin:var(--dyte-space-0, 0px);display:flex;align-items:center;justify-content:center;padding:var(--dyte-space-0, 0px);font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));text-align:center}.heading-count{font-size:14px}.participants{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.empty-message{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);text-align:center;font-size:12px;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}dyte-participant{width:100%}";

const DyteParticipants = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.updateStageList = () => {
      var _a, _b, _c;
      if (((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta.viewType) === 'LIVESTREAM') {
        this.showStageList = ((_c = (_b = this.meeting) === null || _b === void 0 ? void 0 : _b.stage) === null || _c === void 0 ? void 0 : _c.status) === 'ON_STAGE';
      }
      else
        this.showStageList = true;
      this.getParticipants(this.search);
    };
    this.meeting = undefined;
    this.config = defaultConfig;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.view = 'sidebar';
    this.t = useLanguage();
    this.search = '';
    this.participants = [];
    this.showStageList = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.searchChanged(this.search);
  }
  disconnectedCallback() {
    const { participants, stage } = this.meeting;
    if (this.meeting == null)
      return;
    this.participantJoinedListener &&
      this.meeting.participants.joined.removeListener('participantJoined', this.participantJoinedListener);
    this.participantLeftListener &&
      this.meeting.participants.joined.removeListener('participantLeft', this.participantLeftListener);
    participants.joined.removeListener('stageStatusUpdate', this.updateStageList);
    stage === null || stage === void 0 ? void 0 : stage.removeListener('stageStatusUpdate', this.updateStageList);
  }
  meetingChanged(meeting) {
    if (meeting == null)
      return;
    this.participantJoinedListener = (participant) => {
      if (participant.stageStatus !== 'ON_STAGE')
        return;
      // Do not append if participant name or id does not match search query
      const lowerCaseSearch = this.search.toLowerCase();
      if (!participant.name.toLowerCase().includes(lowerCaseSearch) ||
        !participant.id.toLowerCase().includes(lowerCaseSearch))
        return;
      this.participants = [
        ...this.participants.filter((p) => p.id !== participant.id),
        participant,
      ];
    };
    this.participantLeftListener = (participant) => {
      this.participants = this.participants.filter((p) => p.id !== participant.id);
    };
    meeting.participants.joined.addListener('participantJoined', this.participantJoinedListener);
    meeting.participants.joined.addListener('participantLeft', this.participantLeftListener);
    this.updateStageList();
    meeting === null || meeting === void 0 ? void 0 : meeting.participants.joined.on('stageStatusUpdate', this.updateStageList);
    meeting === null || meeting === void 0 ? void 0 : meeting.stage.on('stageStatusUpdate', this.updateStageList);
  }
  searchChanged(search) {
    this.getParticipants(search);
  }
  getParticipants(search = this.search) {
    let list = this.meeting.stage.status === 'ON_STAGE' ? [this.meeting.self] : [];
    list = [
      ...list,
      ...this.meeting.participants.joined.toArray().filter((p) => p.stageStatus === 'ON_STAGE'),
    ];
    if (search === '')
      this.participants = list;
    else {
      this.participants = list.filter((p) => { var _a; return ((_a = p.name) !== null && _a !== void 0 ? _a : p.id).toLowerCase().includes(search.toLowerCase()); });
    }
  }
  render() {
    if (!this.showStageList)
      return;
    const defaults = {
      meeting: this.meeting,
      view: this.view,
      t: this.t,
      config: this.config,
      states: state,
      size: this.size,
      iconPack: this.iconPack,
    };
    return (h(Host, null, h("div", { class: "participants-container" }, h("div", { class: "heading-count", part: "heading-count" }, this.t('participants'), " (", this.participants.length, ")"), h("ul", { class: "participants", part: "participants" }, this.participants.map((participant) => (h(Render, { element: "dyte-participant", defaults: defaults, props: { role: 'listitem', participant, key: participant.id }, childProps: Object.assign(Object.assign({}, defaults), { participant, size: this.size }), deepProps: true }))), this.participants.length === 0 && (h("div", { class: "empty-message", part: "empty-message" }, this.search.length > 0 ? this.t('search.could_not_find') : this.t('search.empty')))))));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "search": ["searchChanged"]
  }; }
  static get style() { return dyteParticipantsStageListCss; }
}, [1, "dyte-participants-stage-list", {
    "meeting": [16],
    "config": [16],
    "size": [513],
    "iconPack": [16],
    "view": [1],
    "t": [16],
    "search": [1],
    "participants": [32],
    "showStageList": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-participants-stage-list"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-participants-stage-list":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteParticipants);
      }
      break;
  } });
}

const DyteParticipantsStageList = DyteParticipants;
const defineCustomElement = defineCustomElement$1;

export { DyteParticipantsStageList, defineCustomElement };
