import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { d as defineCustomElement$4 } from './dyte-controlbar-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';

const dyteRecordingToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DyteRecordingToggle$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.dyteAPIError = createEvent(this, "dyteAPIError", 7);
    this.toggleRecording = async () => {
      var _a, _b, _c;
      if (this.isLoading() || this.disabled)
        return;
      switch (this.recordingState) {
        case 'IDLE':
          try {
            await ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.recording.start());
            return;
          }
          catch (_d) {
            this.dyteAPIError.emit({
              trace: this.t('recording.start'),
              message: this.t('recording.error.start'),
            });
          }
          return;
        case 'RECORDING':
          try {
            await ((_b = this.meeting) === null || _b === void 0 ? void 0 : _b.recording.stop());
            return;
          }
          catch (_e) {
            this.dyteAPIError.emit({
              trace: this.t('recording.stop'),
              message: this.t('recording.error.stop'),
            });
          }
          return;
        case 'PAUSED':
          try {
            await ((_c = this.meeting) === null || _c === void 0 ? void 0 : _c.recording.resume());
            return;
          }
          catch (_f) {
            this.dyteAPIError.emit({
              trace: this.t('recording.resume'),
              message: this.t('recording.error.resume'),
            });
          }
          return;
        case 'STARTING':
        case 'STOPPING':
        default:
          return;
      }
    };
    this.isLoading = () => {
      return (this.meeting == null ||
        this.recordingState === 'STARTING' ||
        this.recordingState === 'STOPPING');
    };
    this.variant = 'button';
    this.meeting = undefined;
    this.t = useLanguage();
    this.iconPack = defaultIconPack;
    this.size = undefined;
    this.disabled = false;
    this.recordingState = undefined;
    this.canRecord = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    var _a;
    this.recordingStateUpdateListener &&
      ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.recording.removeListener('recordingUpdate', this.recordingStateUpdateListener));
  }
  meetingChanged(meeting) {
    if (meeting != null) {
      this.recordingState = meeting.recording.recordingState;
      this.canRecord = meeting.self.permissions.canRecord === true;
      this.recordingStateUpdateListener = (recordingState) => {
        this.recordingState = recordingState;
      };
      meeting.recording.addListener('recordingUpdate', this.recordingStateUpdateListener);
    }
  }
  getLabel() {
    switch (this.recordingState) {
      case 'IDLE':
        return this.t('recording.idle');
      case 'RECORDING':
        return this.t('recording.stop');
      case 'STARTING':
        return this.t('recording.starting');
      case 'STOPPING':
        return this.t('recording.stopping');
      case 'PAUSED':
        return this.t('recording.resume');
      default:
        return this.t('recording.loading');
    }
  }
  getIcon() {
    switch (this.recordingState) {
      case 'IDLE':
        return this.iconPack.recording;
      case 'RECORDING':
        return this.iconPack.stop_recording;
      case 'STARTING':
      case 'STOPPING':
      default:
        return this.iconPack.recording;
    }
  }
  render() {
    if (!this.canRecord)
      return;
    return (h(Host, { title: this.t(this.recordingState === 'RECORDING' ? 'recording.stop' : 'recording.idle') }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, onClick: this.toggleRecording, icon: this.getIcon(), isLoading: this.isLoading(), label: this.t(this.getLabel()), variant: this.variant, disabled: this.disabled })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dyteRecordingToggleCss; }
}, [1, "dyte-recording-toggle", {
    "variant": [513],
    "meeting": [16],
    "t": [16],
    "iconPack": [16],
    "size": [513],
    "disabled": [4],
    "recordingState": [32],
    "canRecord": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-recording-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-recording-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteRecordingToggle$1);
      }
      break;
    case "dyte-controlbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteRecordingToggle = DyteRecordingToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteRecordingToggle, defineCustomElement };
