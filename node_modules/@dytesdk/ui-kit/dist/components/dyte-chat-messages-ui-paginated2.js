import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { d as defineCustomElement$c } from './dyte-avatar2.js';
import { d as defineCustomElement$b } from './dyte-button2.js';
import { d as defineCustomElement$a } from './dyte-chat-message2.js';
import { d as defineCustomElement$9 } from './dyte-file-message2.js';
import { d as defineCustomElement$8 } from './dyte-icon2.js';
import { d as defineCustomElement$7 } from './dyte-image-message2.js';
import { d as defineCustomElement$6 } from './dyte-menu2.js';
import { d as defineCustomElement$5 } from './dyte-menu-item2.js';
import { d as defineCustomElement$4 } from './dyte-menu-list2.js';
import { d as defineCustomElement$3 } from './dyte-paginated-list2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';
import { d as defineCustomElement$1 } from './dyte-text-message2.js';

const dyteChatMessagesUiPaginatedCss = ":host{display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));flex:1 0 0px}";

const DyteChatMessagesUiPaginated = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.editMessageInit = createEvent(this, "editMessageInit", 7);
    this.pageSize = 25;
    this.lastReadMessageIndex = -1;
    this.hasChildren = (message, isContinued) => {
      if (!this.children)
        return null;
      const node = this.children.cloneNode(true);
      node['message'] = message;
      node['isContinued'] = isContinued;
      return h("div", { ref: (el) => el.appendChild(node) });
    };
    this.maybeMarkChannelAsRead = (messages) => {
      if (!this.selectedChannelId)
        return;
      if (messages.length === 0)
        return;
      if (this.lastReadMessageIndex !== -1)
        return;
      const latestMsg = messages.at(0).time > messages.at(-1).time ? messages.at(0) : messages.at(-1);
      if (!latestMsg.channelIndex)
        return;
      this.lastReadMessageIndex = parseInt(latestMsg.channelIndex, 10);
      this.meeting.chat.markLastReadMessage(this.selectedChannelId, latestMsg);
    };
    this.getChatMessages = async (timestamp, size, reversed) => {
      const { messages } = await this.meeting.chat.getMessages(timestamp, size, reversed, undefined, this.selectedChannelId);
      this.maybeMarkChannelAsRead(messages);
      return messages;
    };
    this.createChatNodes = (data) => {
      /**
       * NOTE(callmetarush): When between pages the message's isContinued
       * will fail in current implementation
       */
      return data.map((message, idx) => {
        var _a;
        const isContinued = message.userId === ((_a = data[idx - 1]) === null || _a === void 0 ? void 0 : _a.userId);
        return this.createChatNode(message, isContinued);
      });
    };
    this.disconnectMeeting = (meeting) => {
      var _a;
      (_a = meeting === null || meeting === void 0 ? void 0 : meeting.chat) === null || _a === void 0 ? void 0 : _a.removeListener('chatUpdate', this.chatUpdateListener);
    };
    this.createChatNode = (message, isContinued) => {
      var _a, _b, _c;
      const isSelf = this.meeting.self.userId === message.userId;
      const chatMessagePermissions = (_a = this.meeting.self.permissions) === null || _a === void 0 ? void 0 : _a.chatMessage;
      const canEdit = chatMessagePermissions === undefined
        ? isSelf
        : chatMessagePermissions.canEdit === 'ALL' ||
          (chatMessagePermissions.canEdit === 'SELF' && isSelf);
      const canDelete = chatMessagePermissions === undefined
        ? isSelf
        : chatMessagePermissions.canDelete === 'ALL' ||
          (chatMessagePermissions.canDelete === 'SELF' && isSelf);
      return (h("dyte-chat-message", { leftAlign: this.leftAlign, message: message, isContinued: isContinued, isUnread: false, size: this.size, iconPack: this.iconPack, key: message.id, isSelf: isSelf, alignRight: isSelf && this.meeting.meta.viewType === 'CHAT', disableControls: this.meeting.meta.viewType !== 'CHAT', senderDisplayPicture: (_b = this.meeting.participants.all.toArray().find((member) => member.userId === message.userId)) === null || _b === void 0 ? void 0 : _b.picture, hideAvatar: (isSelf && this.meeting.meta.viewType === 'CHAT') || ((_c = this.selectedChannel) === null || _c === void 0 ? void 0 : _c.isDirectMessage), canEdit: canEdit && message.type === 'text', canDelete: canDelete, canReply: message.type === 'text', onEdit: () => {
          if (message.type !== 'text')
            return;
          this.editMessageInit.emit({ payload: message, flags: { isEdit: true } });
        }, onReply: () => {
          if (message.type !== 'text')
            return;
          this.editMessageInit.emit({
            payload: message,
            flags: { isReply: true },
          });
        }, onDelete: async () => {
          var _a;
          await this.meeting.chat.deleteMessage(message.id, (_a = this.selectedChannel) === null || _a === void 0 ? void 0 : _a.id).catch(() => {
            // log failure
          });
        } }, this.hasChildren(message, isContinued)));
    };
    this.chatUpdateListener = (data) => {
      if (this.selectedChannelId && data.message.channelId !== this.selectedChannelId)
        return;
      if (data.action === 'add') {
        this.$paginatedListRef.onNewNode(data.message);
        this.lastReadMessageIndex = -1;
        this.maybeMarkChannelAsRead([data.message]);
      }
      else if (data.action === 'delete') {
        this.$paginatedListRef.onNodeDelete(data.message.id);
      }
      else if (data.action === 'edit') {
        this.$paginatedListRef.onNodeUpdate(data.message.id, data.message);
      }
    };
    this.meeting = undefined;
    this.selectedChannel = undefined;
    this.selectedChannelId = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.children = undefined;
    this.leftAlign = false;
  }
  componentDidLoad() {
    const slotted = this.host.shadowRoot.querySelector('slot');
    if (!slotted)
      return;
    this.children = slotted.assignedElements()[0];
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    this.disconnectMeeting(this.meeting);
  }
  meetingChanged(meeting, oldMeeting) {
    var _a;
    if (oldMeeting != undefined)
      this.disconnectMeeting(oldMeeting);
    if (meeting && !meeting.chat)
      return;
    if (meeting != null) {
      (_a = meeting.chat) === null || _a === void 0 ? void 0 : _a.addListener('chatUpdate', this.chatUpdateListener);
    }
  }
  channelChanged() {
    this.lastReadMessageIndex = -1;
  }
  render() {
    return (h(Host, null, h("dyte-paginated-list", { ref: (el) => (this.$paginatedListRef = el), pageSize: this.pageSize, pagesAllowed: 3, fetchData: this.getChatMessages, createNodes: this.createChatNodes, selectedItemId: this.selectedChannelId, emptyListLabel: this.t('chat.empty_channel') }, h("slot", null))));
  }
  get host() { return this; }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "selectedChannelId": ["channelChanged"]
  }; }
  static get style() { return dyteChatMessagesUiPaginatedCss; }
}, [1, "dyte-chat-messages-ui-paginated", {
    "meeting": [16],
    "selectedChannel": [16],
    "selectedChannelId": [1, "selected-channel-id"],
    "size": [513],
    "iconPack": [16],
    "t": [16],
    "leftAlign": [4, "left-align"],
    "children": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-chat-messages-ui-paginated", "dyte-avatar", "dyte-button", "dyte-chat-message", "dyte-file-message", "dyte-icon", "dyte-image-message", "dyte-menu", "dyte-menu-item", "dyte-menu-list", "dyte-paginated-list", "dyte-spinner", "dyte-text-message"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-chat-messages-ui-paginated":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteChatMessagesUiPaginated);
      }
      break;
    case "dyte-avatar":
      if (!customElements.get(tagName)) {
        defineCustomElement$c();
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "dyte-chat-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "dyte-file-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "dyte-image-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "dyte-menu":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "dyte-menu-item":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "dyte-menu-list":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-paginated-list":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "dyte-text-message":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DyteChatMessagesUiPaginated as D, defineCustomElement as d };
