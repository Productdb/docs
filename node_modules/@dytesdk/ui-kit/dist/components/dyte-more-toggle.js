import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { s as state } from './store.js';
import { d as defineCustomElement$4 } from './dyte-controlbar-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';

const dyteMoreToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;flex-direction:column;overflow:visible}.more-menu{position:absolute;right:calc(var(--dyte-space-24, 96px) * -1);bottom:var(--dyte-space-16, 64px);z-index:50;margin-bottom:var(--dyte-space-3, 12px);box-sizing:border-box;max-height:60vh;width:var(--dyte-space-64, 256px);overflow:auto;border-radius:var(--dyte-border-radius-md, 8px);border-width:var(--dyte-border-width-sm, 1px);border-style:solid;--tw-border-opacity:1;border-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-border-opacity));--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));outline:2px solid transparent;outline-offset:2px}:host([size='sm']) .more-menu{bottom:var(--dyte-space-10, 40px)}.more-menu::-webkit-scrollbar{height:var(--dyte-space-0, 0px);width:var(--dyte-space-1\\.5, 6px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-900, 26 26 26) / var(--tw-bg-opacity))}.more-menu::-webkit-scrollbar-thumb{border-radius:var(--dyte-border-radius-sm, 4px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-600, 60 60 60) / var(--tw-bg-opacity))}";

const DyteMoreToggle$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.handleKeyDown = ({ key }) => {
      if (key === 'Escape' && this.states.activeMoreMenu) {
        this.stateUpdate.emit({ activeMoreMenu: false });
        state.activeMoreMenu = !state.activeMoreMenu;
      }
    };
    this.handleOnClick = (e) => {
      if (!e.composedPath().includes(this.host) && this.states.activeMoreMenu) {
        this.stateUpdate.emit({ activeMoreMenu: false });
        state.activeMoreMenu = !state.activeMoreMenu;
      }
    };
    this.toggleMoreMenu = () => {
      this.stateUpdate.emit({ activeMoreMenu: !state.activeMoreMenu });
      state.activeMoreMenu = !state.activeMoreMenu;
    };
    this.states = state;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
  }
  connectedCallback() {
    /** A11y */
    window.addEventListener('keydown', this.handleKeyDown);
    window.addEventListener('click', this.handleOnClick);
    // };
  }
  disconnectedCallback() {
    window.removeEventListener('keydown', this.handleKeyDown);
    window.removeEventListener('click', this.handleOnClick);
  }
  render() {
    const text = this.t('more');
    return (h(Host, { title: text }, this.states.activeMoreMenu && (h("div", { class: "more-menu" }, h("slot", { name: "more-elements" }))), h("dyte-controlbar-button", { size: this.size, iconPack: this.iconPack, t: this.t, onClick: (e) => {
        e.stopPropagation();
        this.toggleMoreMenu();
      }, icon: this.iconPack.horizontal_dots, label: text, part: "controlbar-button" }), h("slot", { name: "expanded" })));
  }
  get host() { return this; }
  static get style() { return dyteMoreToggleCss; }
}, [1, "dyte-more-toggle", {
    "states": [16],
    "size": [513],
    "iconPack": [16],
    "t": [16]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-more-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-more-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteMoreToggle$1);
      }
      break;
    case "dyte-controlbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteMoreToggle = DyteMoreToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteMoreToggle, defineCustomElement };
