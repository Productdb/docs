import { d as defaultConfig } from './default-ui-config.js';
import { e as eq, b as baseAssignValue, i as isArrayLike, g as getPrototype, c as copyObject, k as keysIn, a as isBuffer, d as isTypedArray, f as isArray, h as copyArray, j as cloneBuffer, l as cloneTypedArray, m as isArguments, n as isFunction, o as initCloneObject, S as Stack, p as defineProperty, q as isIndex } from './keysIn.js';
import { i as isObjectLike, b as baseGetTag, a as isObject } from './isObjectLike.js';
import { i as isBreakoutRoomsEnabled } from './flags.js';
import { i as isLiveStreamHost } from './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';

const spacingScale = [
	0,
	0.5,
	1,
	1.5,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	12,
	14,
	16,
	20,
	24,
	28,
	32,
	36,
	40,
	44,
	48,
	52,
	56,
	60,
	64,
	72,
	80,
	96
];

const THEMES = {
  darkest: {
    background: {
      1000: '#080808',
      900: '#1A1A1A',
      800: '#1E1E1E',
      700: '#2C2C2C',
      600: '#393939',
    },
    text: '#FFFFFF',
  },
  dark: {
    background: {
      1000: '#252525',
      900: '#2F2F2F',
      800: '#323232',
      700: '#3E3E3E',
      600: '#4A4A4A',
    },
    text: '#F5F5F5',
    'video-bg': '#1C1C1C',
  },
  light: {
    background: {
      1000: '#FFFFFF',
      900: '#F5F5F5',
      800: '#EBEBEB',
      700: '#E0E0E0',
      600: '#D6D6D6',
    },
    text: '#111111',
    'text-on-brand': '#ffffff',
    'video-bg': '#DADADA',
  },
};

const BORDER_WIDTHS = {
  none: {
    none: 0,
    sm: 0,
    md: 0,
    lg: 0,
  },
  thin: {
    none: 0,
    sm: 1,
    md: 2,
    lg: 4,
  },
  fat: {
    none: 0,
    sm: 2,
    md: 4,
    lg: 8,
  },
};
const BORDER_RADII = {
  sharp: {
    none: 0,
    sm: 0,
    md: 0,
    lg: 0,
  },
  rounded: {
    none: 0,
    sm: 4,
    md: 8,
    lg: 12,
  },
  'extra-rounded': {
    none: 0,
    sm: 8,
    md: 16,
    lg: 24,
  },
  circular: {
    none: 9999,
    sm: 9999,
    md: 9999,
    lg: 9999,
  },
};

const BRAND_SHADE_REDUCER = [-2, -1, 0, 1, 2];
function hexToRGB(h) {
  h = h.trim();
  let r = '0', g = '0', b = '0';
  if (h.length == 4) {
    r = '0x' + h[1] + h[1];
    g = '0x' + h[2] + h[2];
    b = '0x' + h[3] + h[3];
  }
  else if (h.length > 6) {
    r = '0x' + h[1] + h[2];
    g = '0x' + h[3] + h[4];
    b = '0x' + h[5] + h[6];
  }
  return [+r, +g, +b];
}
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   {number}  h       The hue
 * @param   {number}  s       The saturation
 * @param   {number}  l       The lightness
 * @returns {Array}           The RGB representation
 */
const hslToRgb = (h, s, l) => {
  let r, g, b;
  if (s == 0) {
    r = g = b = l; // achromatic
  }
  else {
    const hue2rgb = (p, q, t) => {
      if (t < 0)
        t += 1;
      if (t > 1)
        t -= 1;
      if (t < 1 / 6)
        return p + (q - p) * 6 * t;
      if (t < 1 / 2)
        return q;
      if (t < 2 / 3)
        return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    };
    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    const p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
};
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   {number}  r       The red color value
 * @param   {number}  g       The green color value
 * @param   {number}  b       The blue color value
 * @returns {Array}           The HSL representation
 */
const rgbToHsl = (r, g, b) => {
  (r /= 255), (g /= 255), (b /= 255);
  const max = Math.max(r, g, b), min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;
  if (max == min) {
    h = s = 0; // achromatic
  }
  else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return [h, s, l];
};
const rgbToHex = (r, g, b) => {
  const hex = (n) => n.toString(16).padStart(2, '0');
  return `#${hex(r)}${hex(g)}${hex(b)}`;
};
/**
 * Generate shades from a single base hex color code.
 *
 * `weight` is contained in the set [0, 1].
 *
 * @param   {string} baseHexCode The base hex code to use to generate the other shades
 * @param   {number} weight The weight applied when calculating each shade.
 * @param   {number[]} reducer The reducer array which tells how to calculate the shades
 * @returns {string[]} The generated hex shades
 */
const generateShades = (baseHexCode, reducer = BRAND_SHADE_REDUCER, weight = 0.4) => {
  const shades = [];
  const [r, g, b] = hexToRGB(baseHexCode);
  const [h, s, l] = rgbToHsl(r, g, b);
  const lightness = Math.round(l * 100);
  if (lightness > 70) {
    // increase quotient for light base shade
    weight = 0.8;
  }
  else if (lightness > 60) {
    weight = 0.9;
  }
  else if (lightness < 10) {
    // reduce quorient for dark base shade
    weight = 0.075;
  }
  else if (lightness < 42) {
    weight = 0.3;
  }
  const basePosition = reducer.findIndex((val) => val === 0);
  if (basePosition === -1) {
    throw new Error('Invalid reducer provided, it must contain atleast one zero');
  }
  const lightShades = 5 - basePosition;
  const darkShades = basePosition + 1;
  const lightShadeIncrement = (100 - lightness) / lightShades;
  const darkShadeIncrement = lightness / darkShades;
  for (const val of reducer) {
    let shadeLightness;
    if (val < 0) {
      shadeLightness = lightness + val * darkShadeIncrement * weight;
    }
    else if (val > 0) {
      shadeLightness = lightness + val * lightShadeIncrement * weight;
    }
    else {
      shadeLightness = lightness;
    }
    const [r, g, b] = hslToRgb(h, s, shadeLightness / 100);
    shades.push(rgbToHex(r, g, b));
  }
  return shades;
};
const isValidHexColor = (color) => {
  return typeof color === 'string' && color.length === 7 && color.startsWith('#');
};
const getBrandColors = (shade) => {
  const [s300, s400, s500, s600, s700] = generateShades(shade, BRAND_SHADE_REDUCER);
  return { 300: s300, 400: s400, 500: s500, 600: s600, 700: s700 };
};
/**
 * Generates new background colors which are compatible with older preset color values
 * @param shade The hex color code
 * @returns Background color tokens
 */
const getBackgroundColorsOld = (shade) => {
  const [s1000, s900, s800, s700, s600] = generateShades(shade, BRAND_SHADE_REDUCER);
  return { 1000: s1000, 900: s900, 800: s800, 700: s700, 600: s600 };
};

const DEFAULT_CSS_TOKEN_PREFIX = '--dyte-';
function getToken(token, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) {
  return tokenPrefix + token;
}
const provideGoogleFont = (fontFamily) => {
  const weights = [400, 500, 700];
  const links = [];
  if (document.querySelector('link[data-dyte-font]') == null) {
    /**
     * Adds the following preconnect link tags for faster google font loading
     * <link rel="preconnect" href="https://fonts.googleapis.com">
     * <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
     */
    const p1 = document.createElement('link');
    p1.rel = 'preconnect';
    p1.setAttribute('data-dyte-font', 'true');
    p1.href = 'https://fonts.googleapis.com';
    const p2 = p1.cloneNode(true);
    p2.href = 'https://fonts.gstatic.com';
    p2.crossOrigin = '';
    links.push(p1, p2);
  }
  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.setAttribute('data-dyte-font', fontFamily);
  link.href = encodeURI(`https://fonts.googleapis.com/css2?family=${fontFamily}:wght@${weights.join(';')}&display=swap`);
  links.push(link);
  document.head.append(...links);
};
const provideSpacing = (el, spacingBase, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  spacingScale.forEach((space) => {
    el.style.setProperty(getToken(`space-${space}`, tokenPrefix), `${space * spacingBase}px`);
  });
};
const provideBorderWidth = (el, borderWidth, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  if (borderWidth in BORDER_WIDTHS) {
    const widths = BORDER_WIDTHS[borderWidth];
    Object.keys(widths).forEach((type) => {
      el.style.setProperty(getToken(`border-width-${type}`, tokenPrefix), `${widths[type]}px`);
    });
  }
};
const provideBorderRadius = (el, borderRadius, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  if (borderRadius in BORDER_RADII) {
    const radii = BORDER_RADII[borderRadius];
    Object.keys(radii).forEach((type) => {
      el.style.setProperty(getToken(`border-radius-${type}`, tokenPrefix), `${radii[type]}px`);
    });
  }
};
const provideColors = (el, colors, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX) => {
  Object.keys(colors).forEach((color) => {
    const colorValue = colors[color];
    if (typeof colorValue === 'string') {
      if (color === 'text' || color === 'text-on-brand') {
        const rgb = hexToRGB(colorValue).join(' ');
        el.style.setProperty(getToken(`colors-${color}-1000`, tokenPrefix), `${rgb}`);
        el.style.setProperty(getToken(`colors-${color}-900`, tokenPrefix), `${rgb} / 0.88`);
        el.style.setProperty(getToken(`colors-${color}-800`, tokenPrefix), `${rgb} / 0.76`);
        el.style.setProperty(getToken(`colors-${color}-700`, tokenPrefix), `${rgb} / 0.64`);
        el.style.setProperty(getToken(`colors-${color}-600`, tokenPrefix), `${rgb} / 0.52`);
      }
      else {
        const rgb = hexToRGB(colorValue).join(' ');
        el.style.setProperty(getToken(`colors-${color}`, tokenPrefix), rgb);
      }
    }
    else if (typeof colorValue === 'object') {
      Object.keys(colorValue).forEach((shade) => {
        const shadeValue = colorValue[shade];
        const rgb = hexToRGB(shadeValue).join(' ');
        el.style.setProperty(getToken(`colors-${color}-${shade}`, tokenPrefix), rgb);
      });
    }
  });
};
/**
 * Provides the design system new tokens to consume values from for styling the Dyte UI Kit's UI.
 * @param el The element/node you want to _provide_ Dyte's design system.
 * @param tokens The design tokens you want to updated.
 */
const provideDyteDesignSystem = (el, { spacingBase, borderRadius, borderWidth, colors, fontFamily, googleFont, theme, tokenPrefix = DEFAULT_CSS_TOKEN_PREFIX, }) => {
  if (typeof el !== 'object') {
    throw new Error('[dyte-ui-kit] (provideDyteDesignSystem): Passed element is not a valid HTML Element');
  }
  if (typeof googleFont === 'string') {
    provideGoogleFont(googleFont);
    el.style.setProperty(getToken('font-family', tokenPrefix), googleFont);
  }
  if (typeof fontFamily === 'string') {
    el.style.setProperty(getToken('font-family', tokenPrefix), fontFamily);
  }
  if (typeof spacingBase === 'number') {
    provideSpacing(el, spacingBase, tokenPrefix);
  }
  if (typeof borderWidth === 'string') {
    provideBorderWidth(el, borderWidth, tokenPrefix);
  }
  if (typeof borderRadius === 'string') {
    provideBorderRadius(el, borderRadius, tokenPrefix);
  }
  if (typeof theme === 'string') {
    const colors = THEMES[theme];
    if (colors != null)
      provideColors(el, colors, tokenPrefix);
  }
  if (typeof colors === 'object') {
    provideColors(el, colors, tokenPrefix);
  }
};

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

/**
 * Extend the default UI Config with your own
 * @param config Your extended UI Config
 * @returns New extended UI Config object
 */
const extendConfig = (config, baseConfig = defaultConfig) => {
  let newConfig = Object.assign({}, baseConfig);
  merge(newConfig, config);
  return newConfig;
};
/**
 * Generates a config with older theme value.
 * @param oldConfig Theme object
 * @param toExtend UI Config object to extend the generated config
 * @param options Options for toggling components
 * @returns
 */
const generateConfig = (oldConfig, meeting, toExtend = {}, options = { grid_pagination: true, settings_toggle: true }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  const data = { showSetupScreen: true };
  let logo;
  let meetingElements = ['dyte-stage'];
  let headerChildren = {}, controlBarChildren = {};
  const showSettingsToggle = (options === null || options === void 0 ? void 0 : options.settings_toggle) !== false;
  const showGridPagination = (options === null || options === void 0 ? void 0 : options.grid_pagination) !== false;
  if ((_a = oldConfig.controlBar) === null || _a === void 0 ? void 0 : _a.isEnabled) {
    meetingElements.push('dyte-controlbar');
    const { elements } = oldConfig.controlBar;
    const leftElements = [
      ...(elements.fullscreen ? ['dyte-fullscreen-toggle'] : []),
      ...(showSettingsToggle ? ['dyte-settings-toggle'] : []),
    ];
    const rightElements = [];
    const moreElements = [];
    if (meeting.troubleshoot !== undefined) {
      moreElements.push('dyte-debugger-toggle');
    }
    if (((_b = meeting.participants.pip) === null || _b === void 0 ? void 0 : _b.isSupported()) &&
      ((_d = (_c = meeting.self) === null || _c === void 0 ? void 0 : _c.config) === null || _d === void 0 ? void 0 : _d.pipMode) &&
      ((_e = meeting.self.config) === null || _e === void 0 ? void 0 : _e.viewType) !== 'LIVESTREAM') {
      moreElements.push('dyte-pip-toggle');
    }
    if (meeting === null || meeting === void 0 ? void 0 : meeting.self.permissions.canDisableParticipantAudio) {
      moreElements.push('dyte-mute-all-button');
    }
    if (isBreakoutRoomsEnabled(meeting)) {
      moreElements.push('dyte-breakout-rooms-toggle');
    }
    if ((_f = meeting.self) === null || _f === void 0 ? void 0 : _f.permissions.canRecord) {
      moreElements.push('dyte-recording-toggle');
    }
    if ((_g = meeting.self.permissions.transcriptionEnabled) !== null && _g !== void 0 ? _g : false) {
      moreElements.push('dyte-caption-toggle');
    }
    if (isLiveStreamHost(meeting)) {
      leftElements.push('dyte-livestream-toggle');
    }
    if (elements.screenshare) {
      leftElements.push('dyte-screen-share-toggle');
    }
    if (elements.chat) {
      rightElements.push('dyte-chat-toggle');
    }
    if (elements.polls) {
      rightElements.push('dyte-polls-toggle');
    }
    if (elements.participants) {
      rightElements.push('dyte-participants-toggle');
    }
    if (elements.plugins) {
      rightElements.push('dyte-plugins-toggle');
    }
    rightElements.push('dyte-ai-toggle');
    // NOTE(ishita1805): No condition as permission check happens within component
    const centerElements = [
      'dyte-mic-toggle',
      'dyte-camera-toggle',
      'dyte-stage-toggle',
      'dyte-leave-button',
    ];
    if (moreElements.length > 0)
      centerElements.push('dyte-more-toggle');
    const allSideElements = leftElements.concat(rightElements).concat(moreElements);
    let hasMobileDrawer = false;
    if (allSideElements.length > 0) {
      hasMobileDrawer = true;
    }
    controlBarChildren = {
      'dyte-controlbar': {
        states: ['activeMoreMenu'],
        children: ['div#controlbar-left', 'div#controlbar-center', 'div#controlbar-right'],
      },
      'div#controlbar-left': leftElements,
      'div#controlbar-center': centerElements,
      'div#controlbar-right': rightElements,
      'dyte-more-toggle': {
        states: ['activeMoreMenu'],
        children: [],
      },
      'dyte-more-toggle.activeMoreMenu': moreElements.map((el) => [
        el,
        { variant: 'horizontal', slot: 'more-elements' },
      ]),
      'dyte-controlbar.sm': ['div#controlbar-mobile'],
      'dyte-controlbar.md': ['div#controlbar-mobile'],
      'dyte-more-toggle.activeMoreMenu.md': allSideElements.map((el) => [
        el,
        { variant: 'horizontal', slot: 'more-elements' },
      ]),
      'dyte-more-toggle.activeMoreMenu.sm': allSideElements.map((el) => [
        el,
        { variant: 'horizontal', slot: 'more-elements' },
      ]),
      'div#controlbar-mobile': [
        'dyte-mic-toggle',
        'dyte-camera-toggle',
        'dyte-stage-toggle',
        ...[hasMobileDrawer && 'dyte-more-toggle'],
        'dyte-leave-button',
      ],
    };
  }
  if ((_h = oldConfig.header) === null || _h === void 0 ? void 0 : _h.isEnabled) {
    meetingElements.unshift('dyte-header');
    const { elements } = oldConfig.header;
    let leftElements = ['dyte-recording-indicator', 'dyte-livestream-indicator'], centerElements = [], rightElements = [];
    if (showGridPagination) {
      rightElements.push('dyte-grid-pagination');
    }
    if (elements.title) {
      centerElements.push('dyte-meeting-title');
    }
    if (typeof elements.logo === 'string' && elements.logo.length > 0) {
      logo = elements.logo;
      leftElements.unshift('dyte-logo');
    }
    if (elements.participantCount) {
      rightElements.push('dyte-participant-count', 'dyte-viewer-count');
    }
    if (elements.timer) {
      rightElements.push('dyte-clock');
    }
    headerChildren = {
      'dyte-header': ['div#header-left', 'div#header-center', 'div#header-right'],
      'dyte-header.sm': { remove: ['div#header-center'] },
      'div#header-left': leftElements,
      'div#header-center': centerElements,
      'div#header-right': rightElements,
      'div#header-left.sm': {
        remove: ['dyte-logo'],
        prepend: ['dyte-meeting-title'],
      },
    };
  }
  meetingElements.push('dyte-participants-audio', 'dyte-dialog-manager');
  let designTokens = {
    logo,
  };
  if (oldConfig.isV2 === true) {
    designTokens = oldConfig.designTokens;
    if (isValidHexColor((_k = (_j = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _j === void 0 ? void 0 : _j.colors) === null || _k === void 0 ? void 0 : _k.textOnBrand)) {
      designTokens.colors['text-on-brand'] = (_m = (_l = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _l === void 0 ? void 0 : _l.colors) === null || _m === void 0 ? void 0 : _m.textOnBrand;
    }
    if (isValidHexColor((_p = (_o = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _o === void 0 ? void 0 : _o.colors) === null || _p === void 0 ? void 0 : _p.videoBg)) {
      designTokens.colors['video-bg'] = (_r = (_q = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _q === void 0 ? void 0 : _q.colors) === null || _r === void 0 ? void 0 : _r.videoBg;
    }
  }
  else if (oldConfig.colors != null) {
    designTokens['colors'] = {};
    if (isValidHexColor(oldConfig.colors.primary)) {
      designTokens['colors']['brand'] = getBrandColors(oldConfig.colors.primary);
    }
    else if (typeof oldConfig.colors.primary === 'object') {
      designTokens['colors']['brand'] = oldConfig.colors.primary;
    }
    if (isValidHexColor(oldConfig.colors.secondary)) {
      designTokens['colors']['background'] = getBackgroundColorsOld(oldConfig.colors.secondary);
    }
    else if (typeof oldConfig.colors.secondary === 'object') {
      designTokens['colors']['background'] = oldConfig.colors.secondary;
    }
    if (isValidHexColor(oldConfig.colors.text)) {
      designTokens['colors']['text'] = oldConfig.colors.text;
    }
    if (isValidHexColor(oldConfig.colors.textPrimary)) {
      designTokens['colors']['text-on-brand'] = oldConfig.colors.textPrimary;
    }
    if (isValidHexColor(oldConfig.colors.videoBackground)) {
      designTokens['colors']['video-bg'] = oldConfig.colors.videoBackground;
    }
  }
  let config = {
    designTokens,
    styles: {
      'dyte-header': {
        display: 'grid',
        height: '48px',
        gridTemplateColumns: 'repeat(3, 1fr)',
        gridTemplateRows: '1fr',
        alignItems: 'center',
      },
      'dyte-header.sm': {
        display: 'grid',
        gridArea: 'header',
        gridTemplateColumns: 'repeat(2, 1fr)',
        gridTemplateRows: '1fr',
        alignItems: 'center',
      },
      'div#header-left': {
        display: 'flex',
        alignItems: 'center',
        height: '48px',
        wordBreak: 'break-all',
      },
      'dyte-logo': {
        height: '26px',
      },
      'div#header-center': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        wordBreak: 'break-all',
      },
      'div#header-right': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'flex-end',
      },
      'dyte-stage': {
        display: 'flex',
        flex: '1',
      },
      'dyte-grid': {
        flex: '1',
        height: 'auto',
      },
      'dyte-controlbar': {
        display: 'grid',
        gridTemplateColumns: 'repeat(3,1fr)',
        gridTemplateRows: '1fr',
        alignItems: 'center',
        padding: '8px',
      },
      'dyte-controlbar.sm': {
        display: 'flex',
        position: 'relative',
        backgroundColor: 'var(--dyte-colors-background-1000, #000)',
      },
      'dyte-controlbar.md': {
        display: 'flex',
        position: 'relative',
        backgroundColor: 'var(--dyte-colors-background-1000, #000)',
      },
      'div#controlbar-left': {
        display: 'flex',
        alignItems: 'center',
      },
      'div#controlbar-center': {
        display: 'flex',
        alignItems: 'center',
        position: 'relative',
        overflow: 'visible',
        justifyContent: 'center',
      },
      'div#controlbar-mobile': {
        display: 'flex',
        flex: '1',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: '10000',
      },
      'div#controlbar-right': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'flex-end',
      },
      'dyte-settings': {
        width: '720px',
        height: '480px',
      },
      'dyte-debugger': {
        width: '720px',
        height: '480px',
      },
      'div#setupcontrols-media': {
        position: 'absolute',
        bottom: '8px',
        right: '8px',
        display: 'flex',
      },
      'div#setupcontrols-settings': {
        position: 'absolute',
        top: '8px',
        right: '8px',
      },
      'dyte-meeting-title.sm': {
        marginLeft: '0',
      },
      'dyte-clock': {
        marginRight: '0',
      },
    },
    root: Object.assign(Object.assign(Object.assign({ 'dyte-meeting': {
        // if using key value pair, provide the key in `state`
        // else provide array of states in `states`
        state: 'meeting',
        states: ['activeSidebar', 'activeAI'],
      }, 'dyte-meeting[meeting=idle]': ['dyte-idle-screen'], 'dyte-meeting[meeting=waiting]': ['dyte-waiting-screen'], 'dyte-meeting[meeting=setup]': ['dyte-setup-screen', 'dyte-dialog-manager'], 'dyte-meeting[meeting=joined]': meetingElements, 'dyte-meeting[meeting=joined].activeSidebar.sm': {
        add: [['dyte-sidebar', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=joined].activeSidebar.md': {
        add: [['dyte-sidebar', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=joined].activeAI.sm': {
        add: [['dyte-ai', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=joined].activeAI.md': {
        add: [['dyte-ai', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=ended]': ['dyte-ended-screen'] }, headerChildren), controlBarChildren), { 'dyte-stage': {
        states: ['activeSidebar', 'activeAI'],
        children: ['dyte-grid', 'dyte-notifications', 'dyte-transcripts'],
      }, 'dyte-stage.activeSidebar': {
        add: [['dyte-sidebar', { view: 'sidebar' }]],
      }, 
      // hide sidebar for smaller screens
      'dyte-stage.activeSidebar.sm': { remove: ['dyte-sidebar'] }, 'dyte-stage.activeAI': {
        add: [['dyte-ai', { view: 'sidebar' }]],
      }, 
      // hide sidebar for smaller screens
      'dyte-stage.activeAI.sm': { remove: ['dyte-ai'] }, 'dyte-grid': {
        states: ['activeScreenShare', 'activePlugin', 'activeSpotlight'],
        state: 'viewType',
        children: ['dyte-simple-grid'],
      }, 'dyte-grid[viewType=AUDIO_ROOM]': ['dyte-audio-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activePlugin': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activeScreenshare': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activeScreenShare.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activePlugin.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activePlugin.activeScreenShare.activeSpotlight': [
        'dyte-mixed-grid',
      ], 'dyte-grid.activeSpotlight': ['dyte-spotlight-grid'], 'dyte-grid.activeScreenShare': ['dyte-mixed-grid'], 'dyte-grid.activePlugin': ['dyte-mixed-grid'], 'dyte-grid.activeScreenShare.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid.activePlugin.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid.activePlugin.activeScreenShare.activeSpotlight': ['dyte-mixed-grid'], 'dyte-mixed-grid': {
        states: ['activeSpotlight'],
        state: 'viewType',
        children: ['dyte-simple-grid'],
      }, 'dyte-mixed-grid[viewType=AUDIO_ROOM]': ['dyte-audio-grid'], 'dyte-mixed-grid.activeSpotlight': ['dyte-spotlight-grid'], 'dyte-participant-tile': {
        state: 'meeting',
        children: ['dyte-name-tag', 'dyte-avatar', 'dyte-network-indicator'],
      }, 'dyte-participant-setup': ['dyte-avatar', 'div#setupcontrols-media'], 'dyte-participant-tile[meeting=setup]': [
        'dyte-avatar',
        'div#setupcontrols-media',
        ...(showSettingsToggle ? ['div#setupcontrols-settings'] : []),
      ], 'div#setupcontrols-media': [
        ['dyte-mic-toggle', { size: 'sm' }],
        ['dyte-camera-toggle', { size: 'sm' }],
      ], 'div#setupcontrols-settings': [
        ['dyte-settings-toggle', { size: 'sm' }],
        ['dyte-debugger-toggle', { size: 'sm' }],
      ], 'dyte-screenshare-view': ['dyte-name-tag', 'dyte-network-indicator'], 'dyte-name-tag': [['dyte-audio-visualizer', { slot: 'start' }]] }),
    config: {
      notification_sounds: {
        participant_left: false,
      },
      participant_joined_sound_notification_limit: 3,
      participant_chat_message_sound_notification_limit: 10,
      videoFit: 'cover',
    },
  };
  config = extendConfig(toExtend, config);
  data.showSetupScreen = (_t = (_s = oldConfig.setupScreen) === null || _s === void 0 ? void 0 : _s.isEnabled) !== null && _t !== void 0 ? _t : true;
  return { config, data };
};

const getIconPack = async (url) => {
  // check for both null/undefined
  if (url == null) {
    return defaultIconPack;
  }
  try {
    const res = await fetch(url);
    if (!res.ok) {
      return defaultIconPack;
    }
    // merge defaultIconPack with the received iconPack so as to
    // fill the missing icons with default ones
    return Object.assign({}, defaultIconPack, await res.json());
  }
  catch (_) {
    return defaultIconPack;
  }
};

const sm = 640;
const md = 768;
const lg = 1080;
const xl = 2160;
const breakpoints = {
	sm: sm,
	md: md,
	lg: lg,
	xl: xl
};

/**
 * Get the screen breakpoint from a given width
 * @param width The width of the container
 * @returns The screen breakpoint value
 */
const getSize = (width) => {
  if (width >= breakpoints.lg)
    return 'lg';
  else if (width >= breakpoints.md)
    return 'md';
  else
    return 'sm';
};

export { getIconPack as a, getSize as b, extendConfig as e, generateConfig as g, merge as m, provideDyteDesignSystem as p };
