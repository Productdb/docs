import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import { i as isLiveStreamHost } from './livestream.js';
import { s as state } from './store.js';
import { d as defineCustomElement$4 } from './dyte-controlbar-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';

const dyteLivestreamToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DyteLivestreamToggle$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.dyteAPIError = createEvent(this, "dyteAPIError", 7);
    this.livestreamStateListener = (state$1) => {
      this.livestreamState = state$1;
      if (state$1 === 'LIVESTREAMING' || state$1 === 'IDLE') {
        this.stateUpdate.emit({ activeMoreMenu: false });
        state.activeMoreMenu = false;
      }
    };
    this.isLoading = () => {
      return (this.meeting == null ||
        this.livestreamState === 'STARTING' ||
        this.livestreamState === 'STOPPING');
    };
    this.variant = 'button';
    this.meeting = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.livestreamState = 'IDLE';
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectedCallback() {
    this.clearListeners();
  }
  meetingChanged(meeting) {
    var _a, _b;
    if (meeting == null)
      return;
    this.livestreamState = (_a = this.meeting.livestream) === null || _a === void 0 ? void 0 : _a.state;
    (_b = this.meeting.livestream) === null || _b === void 0 ? void 0 : _b.on('livestreamUpdate', this.livestreamStateListener);
  }
  async toggleLivestream() {
    var _a, _b;
    if (this.livestreamState === 'LIVESTREAMING') {
      try {
        await ((_a = this.meeting.livestream) === null || _a === void 0 ? void 0 : _a.stop());
      }
      catch (_c) {
        this.dyteAPIError.emit({
          trace: this.t('livestream.stop'),
          message: this.t('livestream.error.stop'),
        });
      }
    }
    else {
      try {
        await ((_b = this.meeting.livestream) === null || _b === void 0 ? void 0 : _b.start());
      }
      catch (_d) {
        this.dyteAPIError.emit({
          trace: this.t('livestream.start'),
          message: this.t('livestream.error.start'),
        });
      }
    }
  }
  clearListeners() {
    var _a;
    (_a = this.meeting.livestream) === null || _a === void 0 ? void 0 : _a.removeListener('livestreamUpdate', this.livestreamStateListener);
  }
  getLivestreamLabel() {
    switch (this.livestreamState) {
      case 'IDLE':
        return this.t('livestream.go_live');
      case 'LIVESTREAMING':
        return this.t('livestream.end_live');
      case 'STARTING':
        return this.t('livestream.starting');
      case 'STOPPING':
        return this.t('livestream.stopping');
      default:
        return this.t('livestream.error');
    }
  }
  getLivestreamIcon() {
    switch (this.livestreamState) {
      case 'IDLE':
        return this.iconPack.start_livestream;
      case 'LIVESTREAMING':
        return this.iconPack.stop_livestream;
      case 'STARTING':
      case 'STOPPING':
      default:
        return this.iconPack.stop_livestream;
    }
  }
  render() {
    if (!isLiveStreamHost(this.meeting))
      return;
    return (h(Host, null, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, isLoading: this.isLoading(), class: { 'active-livestream': this.livestreamState === 'LIVESTREAMING' }, onClick: () => this.toggleLivestream(), icon: this.getLivestreamIcon(), disabled: this.isLoading(), label: this.t(this.getLivestreamLabel()), variant: this.variant })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dyteLivestreamToggleCss; }
}, [1, "dyte-livestream-toggle", {
    "variant": [513],
    "meeting": [16],
    "size": [513],
    "iconPack": [16],
    "t": [16],
    "livestreamState": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-livestream-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-livestream-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteLivestreamToggle$1);
      }
      break;
    case "dyte-controlbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteLivestreamToggle = DyteLivestreamToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DyteLivestreamToggle, defineCustomElement };
