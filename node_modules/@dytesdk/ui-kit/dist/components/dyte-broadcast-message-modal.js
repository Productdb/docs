import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defaultIconPack } from './default-icon-pack.js';
import { s as state } from './store.js';
import { u as useLanguage } from './index2.js';
import { d as defineCustomElement$3 } from './dyte-button2.js';
import { d as defineCustomElement$2 } from './dyte-icon2.js';

const dyteBroadcastMessageModalCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;flex-direction:column;overflow:hidden;border-radius:var(--dyte-border-radius-md, 8px);padding:var(--dyte-space-4, 16px);width:100%;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255));width:400px;max-width:80%}.content-col{display:flex;width:100%;flex-direction:column}h2{margin:var(--dyte-space-0, 0px);margin-bottom:var(--dyte-space-2, 8px)}.content-row{display:flex;width:100%;flex-direction:row}.content-row dyte-button{margin-top:var(--dyte-space-4, 16px);width:100%}textarea{margin-top:var(--dyte-space-3, 12px);resize:none;border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;font-family:var(--dyte-font-family, sans-serif);outline:2px solid transparent;outline-offset:2px;height:var(--dyte-space-16, 64px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));padding:var(--dyte-space-2, 8px);color:rgb(var(--dyte-colors-text-800, 255 255 255 / 0.76))}textarea::-moz-placeholder{color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}textarea::placeholder{color:rgb(var(--dyte-colors-text-600, 255 255 255 / 0.52))}select{border-radius:var(--dyte-border-radius-sm, 4px);border-width:var(--dyte-border-width-none, 0);border-style:none;padding-top:var(--dyte-space-3, 12px);padding-bottom:var(--dyte-space-3, 12px);padding-left:var(--dyte-space-2, 8px);padding-right:var(--dyte-space-2, 8px);outline:2px solid transparent;outline-offset:2px;border-right-width:var(--dyte-border-width-md, 2px);border-style:solid;border-color:transparent;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-700, 44 44 44) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-1000, 255 255 255))}p{margin:var(--dyte-space-0, 0px);margin-top:var(--dyte-space-2, 8px);width:100%;text-align:center;font-size:14px;--tw-text-opacity:1;color:rgba(var(--dyte-colors-brand-300, 73 124 253) / var(--tw-text-opacity));display:flex;flex-direction:row;align-items:center;justify-content:center}p dyte-icon{margin-left:var(--dyte-space-1, 4px);height:var(--dyte-space-5, 20px)}";

const DyteBroadcastMessageModal$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.meeting = undefined;
    this.states = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.messagePayload = {
      to: 'Everyone',
      message: '',
    };
    this.successMessage = false;
  }
  close() {
    var _a;
    (_a = this.stateUpdate) === null || _a === void 0 ? void 0 : _a.emit({ activeBroadcastMessageModal: false });
    state.activeBroadcastMessageModal = false;
  }
  sendMessage() {
    // TODO:(ishita1805) Send this.messagePayload to webcore.
    this.successMessage = true;
    setTimeout(() => {
      this.close();
    }, 2000);
  }
  render() {
    return (h(Host, null, h("div", { class: "content-col" }, h("h2", null, "Broadcast message to"), h("select", { onChange: (e) => {
        this.messagePayload = Object.assign(Object.assign({}, this.messagePayload), { to: e.target.value });
      } }, h("option", null, "Everyone"), h("option", null, "List of rooms")), h("textarea", { placeholder: "Type message here...", onInput: (e) => {
        this.messagePayload = Object.assign(Object.assign({}, this.messagePayload), { message: e.target.value });
      } }), this.successMessage ? (h("p", null, "Message sent to ", this.messagePayload.to, h("dyte-icon", { icon: this.iconPack.checkmark, iconPack: this.iconPack, t: this.t }))) : (h("div", { class: "content-row" }, h("dyte-button", { onClick: () => this.close(), variant: "secondary", iconPack: this.iconPack, t: this.t }, "Cancel"), "\u2002", h("dyte-button", { variant: "primary", onClick: () => this.sendMessage(), iconPack: this.iconPack, t: this.t }, "Send"))))));
  }
  static get style() { return dyteBroadcastMessageModalCss; }
}, [1, "dyte-broadcast-message-modal", {
    "meeting": [16],
    "states": [16],
    "iconPack": [16],
    "t": [16],
    "messagePayload": [32],
    "successMessage": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-broadcast-message-modal", "dyte-button", "dyte-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-broadcast-message-modal":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DyteBroadcastMessageModal$1);
      }
      break;
    case "dyte-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DyteBroadcastMessageModal = DyteBroadcastMessageModal$1;
const defineCustomElement = defineCustomElement$1;

export { DyteBroadcastMessageModal, defineCustomElement };
