export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';
export { o as onStateStoreChange, s as statesStore } from './store.js';
export { B as BreakoutRoomsManager } from './breakout-rooms-manager.js';
import { g as generateConfig } from './size.js';
export { e as extendConfig, g as generateConfig, p as provideDyteDesignSystem } from './size.js';
import { c as cloneDeep } from './clone.js';
import { d as defaultConfig } from './default-ui-config.js';
export { d as defaultConfig } from './default-ui-config.js';
export { d as defaultIconPack } from './default-icon-pack.js';
export { d as defaultLanguage, u as useLanguage } from './index2.js';
export { D as DyteNotificationsAudio } from './dyte-notifications2.js';
export { g as generateChatGroupKey, a as getChatGroups, c as getParticipantUserId, b as getUnreadChatCounts } from './chat.js';
export { DyteAi, defineCustomElement as defineCustomElementDyteAi } from './dyte-ai.js';
export { DyteAiChat, defineCustomElement as defineCustomElementDyteAiChat } from './dyte-ai-chat.js';
export { DyteAiHome, defineCustomElement as defineCustomElementDyteAiHome } from './dyte-ai-home.js';
export { DyteAiToggle, defineCustomElement as defineCustomElementDyteAiToggle } from './dyte-ai-toggle.js';
export { DyteAiTranscriptions, defineCustomElement as defineCustomElementDyteAiTranscriptions } from './dyte-ai-transcriptions.js';
export { DyteAudioGrid, defineCustomElement as defineCustomElementDyteAudioGrid } from './dyte-audio-grid.js';
export { DyteAudioTile, defineCustomElement as defineCustomElementDyteAudioTile } from './dyte-audio-tile.js';
export { DyteAudioVisualizer, defineCustomElement as defineCustomElementDyteAudioVisualizer } from './dyte-audio-visualizer.js';
export { DyteAvatar, defineCustomElement as defineCustomElementDyteAvatar } from './dyte-avatar.js';
export { DyteBreakoutRoomManager, defineCustomElement as defineCustomElementDyteBreakoutRoomManager } from './dyte-breakout-room-manager.js';
export { DyteBreakoutRoomParticipants, defineCustomElement as defineCustomElementDyteBreakoutRoomParticipants } from './dyte-breakout-room-participants.js';
export { DyteBreakoutRoomsManager, defineCustomElement as defineCustomElementDyteBreakoutRoomsManager } from './dyte-breakout-rooms-manager.js';
export { DyteBreakoutRoomsToggle, defineCustomElement as defineCustomElementDyteBreakoutRoomsToggle } from './dyte-breakout-rooms-toggle.js';
export { DyteBroadcastMessageModal, defineCustomElement as defineCustomElementDyteBroadcastMessageModal } from './dyte-broadcast-message-modal.js';
export { DyteButton, defineCustomElement as defineCustomElementDyteButton } from './dyte-button.js';
export { DyteCameraToggle, defineCustomElement as defineCustomElementDyteCameraToggle } from './dyte-camera-toggle.js';
export { DyteCaptionToggle, defineCustomElement as defineCustomElementDyteCaptionToggle } from './dyte-caption-toggle.js';
export { DyteChannelCreator, defineCustomElement as defineCustomElementDyteChannelCreator } from './dyte-channel-creator.js';
export { DyteChannelDetails, defineCustomElement as defineCustomElementDyteChannelDetails } from './dyte-channel-details.js';
export { DyteChannelHeader, defineCustomElement as defineCustomElementDyteChannelHeader } from './dyte-channel-header.js';
export { DyteChannelSelectorUi, defineCustomElement as defineCustomElementDyteChannelSelectorUi } from './dyte-channel-selector-ui.js';
export { DyteChannelSelectorView, defineCustomElement as defineCustomElementDyteChannelSelectorView } from './dyte-channel-selector-view.js';
export { DyteChat, defineCustomElement as defineCustomElementDyteChat } from './dyte-chat.js';
export { DyteChatComposerUi, defineCustomElement as defineCustomElementDyteChatComposerUi } from './dyte-chat-composer-ui.js';
export { DyteChatComposerView, defineCustomElement as defineCustomElementDyteChatComposerView } from './dyte-chat-composer-view.js';
export { DyteChatMessage, defineCustomElement as defineCustomElementDyteChatMessage } from './dyte-chat-message.js';
export { DyteChatMessagesUi, defineCustomElement as defineCustomElementDyteChatMessagesUi } from './dyte-chat-messages-ui.js';
export { DyteChatMessagesUiPaginated, defineCustomElement as defineCustomElementDyteChatMessagesUiPaginated } from './dyte-chat-messages-ui-paginated.js';
export { DyteChatSearchResults, defineCustomElement as defineCustomElementDyteChatSearchResults } from './dyte-chat-search-results.js';
export { DyteChatSelectorUi, defineCustomElement as defineCustomElementDyteChatSelectorUi } from './dyte-chat-selector-ui.js';
export { DyteChatToggle, defineCustomElement as defineCustomElementDyteChatToggle } from './dyte-chat-toggle.js';
export { DyteClock, defineCustomElement as defineCustomElementDyteClock } from './dyte-clock.js';
export { DyteConfirmationModal, defineCustomElement as defineCustomElementDyteConfirmationModal } from './dyte-confirmation-modal.js';
export { DyteControlbar, defineCustomElement as defineCustomElementDyteControlbar } from './dyte-controlbar.js';
export { DyteControlbarButton, defineCustomElement as defineCustomElementDyteControlbarButton } from './dyte-controlbar-button.js';
export { DyteCounter, defineCustomElement as defineCustomElementDyteCounter } from './dyte-counter.js';
export { DyteDebugger, defineCustomElement as defineCustomElementDyteDebugger } from './dyte-debugger.js';
export { DyteDebuggerAudio, defineCustomElement as defineCustomElementDyteDebuggerAudio } from './dyte-debugger-audio.js';
export { DyteDebuggerIssuesUi, defineCustomElement as defineCustomElementDyteDebuggerIssuesUi } from './dyte-debugger-issues-ui.js';
export { DyteDebuggerNetwork, defineCustomElement as defineCustomElementDyteDebuggerNetwork } from './dyte-debugger-network.js';
export { DyteDebuggerPermissionsUi, defineCustomElement as defineCustomElementDyteDebuggerPermissionsUi } from './dyte-debugger-permissions-ui.js';
export { DyteDebuggerScreenshare, defineCustomElement as defineCustomElementDyteDebuggerScreenshare } from './dyte-debugger-screenshare.js';
export { DyteDebuggerToggle, defineCustomElement as defineCustomElementDyteDebuggerToggle } from './dyte-debugger-toggle.js';
export { DyteDebuggerVideo, defineCustomElement as defineCustomElementDyteDebuggerVideo } from './dyte-debugger-video.js';
export { DyteDialog, defineCustomElement as defineCustomElementDyteDialog } from './dyte-dialog.js';
export { DyteDialogManager, defineCustomElement as defineCustomElementDyteDialogManager } from './dyte-dialog-manager.js';
export { DyteDraftAttachmentView, defineCustomElement as defineCustomElementDyteDraftAttachmentView } from './dyte-draft-attachment-view.js';
export { DyteEmojiPicker, defineCustomElement as defineCustomElementDyteEmojiPicker } from './dyte-emoji-picker.js';
export { DyteEmojiPickerButton, defineCustomElement as defineCustomElementDyteEmojiPickerButton } from './dyte-emoji-picker-button.js';
export { DyteEndedScreen, defineCustomElement as defineCustomElementDyteEndedScreen } from './dyte-ended-screen.js';
export { DyteFileDropzone, defineCustomElement as defineCustomElementDyteFileDropzone } from './dyte-file-dropzone.js';
export { DyteFileMessage, defineCustomElement as defineCustomElementDyteFileMessage } from './dyte-file-message.js';
export { DyteFileMessageView, defineCustomElement as defineCustomElementDyteFileMessageView } from './dyte-file-message-view.js';
export { DyteFilePickerButton, defineCustomElement as defineCustomElementDyteFilePickerButton } from './dyte-file-picker-button.js';
export { DyteFullscreenToggle, defineCustomElement as defineCustomElementDyteFullscreenToggle } from './dyte-fullscreen-toggle.js';
export { DyteGrid, defineCustomElement as defineCustomElementDyteGrid } from './dyte-grid.js';
export { DyteGridPagination, defineCustomElement as defineCustomElementDyteGridPagination } from './dyte-grid-pagination.js';
export { DyteHeader, defineCustomElement as defineCustomElementDyteHeader } from './dyte-header.js';
export { DyteIcon, defineCustomElement as defineCustomElementDyteIcon } from './dyte-icon.js';
export { DyteIdleScreen, defineCustomElement as defineCustomElementDyteIdleScreen } from './dyte-idle-screen.js';
export { DyteImageMessage, defineCustomElement as defineCustomElementDyteImageMessage } from './dyte-image-message.js';
export { DyteImageMessageView, defineCustomElement as defineCustomElementDyteImageMessageView } from './dyte-image-message-view.js';
export { DyteImageViewer, defineCustomElement as defineCustomElementDyteImageViewer } from './dyte-image-viewer.js';
export { DyteInformationTooltip, defineCustomElement as defineCustomElementDyteInformationTooltip } from './dyte-information-tooltip.js';
export { DyteJoinStage, defineCustomElement as defineCustomElementDyteJoinStage } from './dyte-join-stage.js';
export { DyteLeaveButton, defineCustomElement as defineCustomElementDyteLeaveButton } from './dyte-leave-button.js';
export { DyteLeaveMeeting, defineCustomElement as defineCustomElementDyteLeaveMeeting } from './dyte-leave-meeting.js';
export { DyteLivestreamIndicator, defineCustomElement as defineCustomElementDyteLivestreamIndicator } from './dyte-livestream-indicator.js';
export { DyteLivestreamPlayer, defineCustomElement as defineCustomElementDyteLivestreamPlayer } from './dyte-livestream-player.js';
export { DyteLivestreamToggle, defineCustomElement as defineCustomElementDyteLivestreamToggle } from './dyte-livestream-toggle.js';
export { DyteLogo, defineCustomElement as defineCustomElementDyteLogo } from './dyte-logo.js';
export { DyteMarkdownView, defineCustomElement as defineCustomElementDyteMarkdownView } from './dyte-markdown-view.js';
export { DyteMeeting, defineCustomElement as defineCustomElementDyteMeeting } from './dyte-meeting.js';
export { DyteMeetingTitle, defineCustomElement as defineCustomElementDyteMeetingTitle } from './dyte-meeting-title.js';
export { DyteMenu, defineCustomElement as defineCustomElementDyteMenu } from './dyte-menu.js';
export { DyteMenuItem, defineCustomElement as defineCustomElementDyteMenuItem } from './dyte-menu-item.js';
export { DyteMenuList, defineCustomElement as defineCustomElementDyteMenuList } from './dyte-menu-list.js';
export { DyteMessageListView, defineCustomElement as defineCustomElementDyteMessageListView } from './dyte-message-list-view.js';
export { DyteMessageView, defineCustomElement as defineCustomElementDyteMessageView } from './dyte-message-view.js';
export { DyteMicToggle, defineCustomElement as defineCustomElementDyteMicToggle } from './dyte-mic-toggle.js';
export { DyteMixedGrid, defineCustomElement as defineCustomElementDyteMixedGrid } from './dyte-mixed-grid.js';
export { DyteMoreToggle, defineCustomElement as defineCustomElementDyteMoreToggle } from './dyte-more-toggle.js';
export { DyteMuteAllButton, defineCustomElement as defineCustomElementDyteMuteAllButton } from './dyte-mute-all-button.js';
export { DyteMuteAllConfirmation, defineCustomElement as defineCustomElementDyteMuteAllConfirmation } from './dyte-mute-all-confirmation.js';
export { DyteNameTag, defineCustomElement as defineCustomElementDyteNameTag } from './dyte-name-tag.js';
export { DyteNetworkIndicator, defineCustomElement as defineCustomElementDyteNetworkIndicator } from './dyte-network-indicator.js';
export { DyteNotification, defineCustomElement as defineCustomElementDyteNotification } from './dyte-notification.js';
export { DyteNotifications, defineCustomElement as defineCustomElementDyteNotifications } from './dyte-notifications.js';
export { DyteOverlayModal, defineCustomElement as defineCustomElementDyteOverlayModal } from './dyte-overlay-modal.js';
export { DytePaginatedList, defineCustomElement as defineCustomElementDytePaginatedList } from './dyte-paginated-list.js';
export { DyteParticipant, defineCustomElement as defineCustomElementDyteParticipant } from './dyte-participant.js';
export { DyteParticipantCount, defineCustomElement as defineCustomElementDyteParticipantCount } from './dyte-participant-count.js';
export { DyteParticipantSetup, defineCustomElement as defineCustomElementDyteParticipantSetup } from './dyte-participant-setup.js';
export { DyteParticipantTile, defineCustomElement as defineCustomElementDyteParticipantTile } from './dyte-participant-tile.js';
export { DyteParticipants, defineCustomElement as defineCustomElementDyteParticipants } from './dyte-participants.js';
export { DyteParticipantsAudio, defineCustomElement as defineCustomElementDyteParticipantsAudio } from './dyte-participants-audio.js';
export { DyteParticipantsStageList, defineCustomElement as defineCustomElementDyteParticipantsStageList } from './dyte-participants-stage-list.js';
export { DyteParticipantsStageQueue, defineCustomElement as defineCustomElementDyteParticipantsStageQueue } from './dyte-participants-stage-queue.js';
export { DyteParticipantsToggle, defineCustomElement as defineCustomElementDyteParticipantsToggle } from './dyte-participants-toggle.js';
export { DyteParticipantsViewerList, defineCustomElement as defineCustomElementDyteParticipantsViewerList } from './dyte-participants-viewer-list.js';
export { DyteParticipantsWaitingList, defineCustomElement as defineCustomElementDyteParticipantsWaitingList } from './dyte-participants-waiting-list.js';
export { DytePermissionsMessage, defineCustomElement as defineCustomElementDytePermissionsMessage } from './dyte-permissions-message.js';
export { DytePipToggle, defineCustomElement as defineCustomElementDytePipToggle } from './dyte-pip-toggle.js';
export { DytePluginMain, defineCustomElement as defineCustomElementDytePluginMain } from './dyte-plugin-main.js';
export { DytePlugins, defineCustomElement as defineCustomElementDytePlugins } from './dyte-plugins.js';
export { DytePluginsToggle, defineCustomElement as defineCustomElementDytePluginsToggle } from './dyte-plugins-toggle.js';
export { DytePoll, defineCustomElement as defineCustomElementDytePoll } from './dyte-poll.js';
export { DytePollForm, defineCustomElement as defineCustomElementDytePollForm } from './dyte-poll-form.js';
export { DytePolls, defineCustomElement as defineCustomElementDytePolls } from './dyte-polls.js';
export { DytePollsToggle, defineCustomElement as defineCustomElementDytePollsToggle } from './dyte-polls-toggle.js';
export { DyteRecordingIndicator, defineCustomElement as defineCustomElementDyteRecordingIndicator } from './dyte-recording-indicator.js';
export { DyteRecordingToggle, defineCustomElement as defineCustomElementDyteRecordingToggle } from './dyte-recording-toggle.js';
export { DyteRemoteAccessManager, defineCustomElement as defineCustomElementDyteRemoteAccessManager } from './dyte-remote-access-manager.js';
export { DyteScreenShareToggle, defineCustomElement as defineCustomElementDyteScreenShareToggle } from './dyte-screen-share-toggle.js';
export { DyteScreenshareView, defineCustomElement as defineCustomElementDyteScreenshareView } from './dyte-screenshare-view.js';
export { DyteSettings, defineCustomElement as defineCustomElementDyteSettings } from './dyte-settings.js';
export { DyteSettingsAudio, defineCustomElement as defineCustomElementDyteSettingsAudio } from './dyte-settings-audio.js';
export { DyteSettingsToggle, defineCustomElement as defineCustomElementDyteSettingsToggle } from './dyte-settings-toggle.js';
export { DyteSettingsVideo, defineCustomElement as defineCustomElementDyteSettingsVideo } from './dyte-settings-video.js';
export { DyteSetupScreen, defineCustomElement as defineCustomElementDyteSetupScreen } from './dyte-setup-screen.js';
export { DyteSidebar, defineCustomElement as defineCustomElementDyteSidebar } from './dyte-sidebar.js';
export { DyteSidebarUi, defineCustomElement as defineCustomElementDyteSidebarUi } from './dyte-sidebar-ui.js';
export { DyteSimpleGrid, defineCustomElement as defineCustomElementDyteSimpleGrid } from './dyte-simple-grid.js';
export { DyteSpinner, defineCustomElement as defineCustomElementDyteSpinner } from './dyte-spinner.js';
export { DyteSpotlightGrid, defineCustomElement as defineCustomElementDyteSpotlightGrid } from './dyte-spotlight-grid.js';
export { DyteSpotlightIndicator, defineCustomElement as defineCustomElementDyteSpotlightIndicator } from './dyte-spotlight-indicator.js';
export { DyteStage, defineCustomElement as defineCustomElementDyteStage } from './dyte-stage.js';
export { DyteStageToggle, defineCustomElement as defineCustomElementDyteStageToggle } from './dyte-stage-toggle.js';
export { DyteSwitch, defineCustomElement as defineCustomElementDyteSwitch } from './dyte-switch.js';
export { DyteTabBar, defineCustomElement as defineCustomElementDyteTabBar } from './dyte-tab-bar.js';
export { DyteTextComposerView, defineCustomElement as defineCustomElementDyteTextComposerView } from './dyte-text-composer-view.js';
export { DyteTextField, defineCustomElement as defineCustomElementDyteTextField } from './dyte-text-field.js';
export { DyteTextMessage, defineCustomElement as defineCustomElementDyteTextMessage } from './dyte-text-message.js';
export { DyteTextMessageView, defineCustomElement as defineCustomElementDyteTextMessageView } from './dyte-text-message-view.js';
export { DyteTooltip, defineCustomElement as defineCustomElementDyteTooltip } from './dyte-tooltip.js';
export { DyteTranscript, defineCustomElement as defineCustomElementDyteTranscript } from './dyte-transcript.js';
export { DyteTranscripts, defineCustomElement as defineCustomElementDyteTranscripts } from './dyte-transcripts.js';
export { DyteUiProvider, defineCustomElement as defineCustomElementDyteUiProvider } from './dyte-ui-provider.js';
export { DyteViewerCount, defineCustomElement as defineCustomElementDyteViewerCount } from './dyte-viewer-count.js';
export { DyteWaitingScreen, defineCustomElement as defineCustomElementDyteWaitingScreen } from './dyte-waiting-screen.js';
export { DyteWebinarStageToggle, defineCustomElement as defineCustomElementDyteWebinarStageToggle } from './dyte-webinar-stage-toggle.js';

/**
 * Send notification which will be displayed in the `<dyte-notifications />` component.
 * @param notification Notification object
 * @param playSound Sound type, if sound type is sent plays that sound with the notification.
 * @returns Return value of emitting the event
 */
const sendNotification = (notification, playSound = undefined) => {
  if (typeof document === 'undefined')
    return false;
  const event = new CustomEvent('dyteNotification', {
    detail: Object.assign(Object.assign({}, notification), { playSound }),
    composed: true,
  });
  return document.dispatchEvent(event);
};

/* eslint-disable no-console */
/*
    Elements can be of two types
    'dyte-mic-toggle' or ['dyte-mic-toggle', {prop: 1}]
    Custom findByName function to check for both
*/
function getFinder(query) {
  return (value) => {
    if (Array.isArray(value)) {
      return value[0] === query;
    }
    return value === query;
  };
}
/*
    Elements can be of two types
    'dyte-mic-toggle' or ['dyte-mic-toggle', {prop: 1}]
    Custom filterByName function to check for both
*/
function getFilter(query) {
  return (value) => {
    if (Array.isArray(value)) {
      return value[0] !== query;
    }
    return value !== query;
  };
}
/*
    transform JSX Component Name -> web component format
    eg. DyteMicToggle -> dyte-mic-toggle
*/
function convertComponentName(jsxName) {
  return jsxName.replace(/([a-z])([A-Z])/g, (g) => `${g[0]}-${g[1]}`.toLowerCase());
}
class UIElemEditor {
  constructor(elem, config, keyString) {
    this.elem = elem;
    this.config = config;
    this.keyString = keyString;
  }
  /**
   * Adds an element to the chilren
   * @param el :Name of the element - `dyte-mic-toggle`
   * @param props :Optional props for the element `{variant: 'solid'}`
   */
  add(el, props = {}) {
    var _a;
    el = convertComponentName(el);
    let composedElem = el;
    if (Object.keys(props).length > 0) {
      composedElem = [el, props];
    }
    if (Array.isArray(this.elem)) {
      this.elem.push(composedElem);
    }
    else if ('children' in this.elem && Array.isArray(this.elem.children)) {
      this.elem.children = [...this.elem.children, composedElem];
    }
    else if ('remove' in this.elem &&
      Array.isArray(this.elem.remove) &&
      this.elem.remove.find(getFinder(el))) {
      this.elem.remove = this.elem.remove.filter(getFilter(el));
    }
    else {
      if (!('add' in this.elem)) {
        this.elem.add = [];
      }
      (_a = this.elem.add) === null || _a === void 0 ? void 0 : _a.push(composedElem);
    }
    return this;
  }
  /**
   * Removes an element from the chilren
   * @param el :Name of the element to remove - `dyte-mic-toggle`
   */
  remove(el) {
    var _a;
    el = convertComponentName(el);
    if (Array.isArray(this.elem)) {
      const idx = this.elem.findIndex(getFinder(el));
      if (idx > -1) {
        this.elem.splice(idx, 1);
      }
    }
    else if ('children' in this.elem && Array.isArray(this.elem.children)) {
      this.elem.children = this.elem.children.filter(getFilter(el));
    }
    else if ('add' in this.elem &&
      Array.isArray(this.elem.add) &&
      this.elem.add.find((e) => e === el)) {
      this.elem.add = this.elem.add.filter(getFilter(el));
    }
    else {
      if (!('remove' in this.elem)) {
        this.elem.remove = [];
      }
      (_a = this.elem.remove) === null || _a === void 0 ? void 0 : _a.push(el);
    }
    return this;
  }
  set style(s) {
    console.log(s);
    // TODO: Not Implemented
  }
  setChildrenProps(childElem, props) {
    console.log(this.keyString, childElem, props);
    // TODO: Not Implemented
  }
  getChildrenProps(childElem) {
    console.log(this.keyString, childElem);
    // TODO: Not Implemented
    return {};
  }
  replace(e) {
    console.log(this.config, e);
    // TODO: Not Implemented
  }
}
/* eslint-enable no-console */
class DyteUIBuilder {
  constructor(config) {
    this.config = cloneDeep(config || defaultConfig);
  }
  /**
   * Find an element anywhere in the Dyte hierarachy and returns an editor object
   * @param elem = 'dyte-participant-tile'
   * @param states = { activeSidebar: true, activeSettings: true, meeting: 'joined'}
   * @returns `UIElemEditor`
   */
  find(elem, states = {}) {
    elem = convertComponentName(elem);
    // eg. [activeSidebar, activeSettings]
    const booleanStates = [];
    // eg. [[meeting,joined]]
    const nonBooleanStates = [];
    Object.keys(states || {}).forEach((key) => {
      if (typeof states[key] === 'boolean') {
        booleanStates.push(key);
      }
      else {
        nonBooleanStates.push([key, states[key]]);
      }
    });
    booleanStates.sort();
    const root = this.config.root;
    if (root === undefined)
      return;
    let keyString = elem;
    let booleanStateString = '';
    if (booleanStates.length > 0) {
      // eg. '.activeSettings.activeSidebar'
      booleanStateString = `.${booleanStates.join('.')}`;
      // eg. 'dyte-participant-tile.activeSettings.activeSidebar'
      keyString = `${elem}${booleanStateString}`;
      // An element will only re-render when a state described in its `states` key changes
      // If the element has no states defined, ie. just array of children
      // convert to a complex element type
      if (Array.isArray(root[elem])) {
        root[elem] = {
          states: [],
          children: root[elem],
        };
      }
      if (root[elem].states === undefined) {
        root[elem].states = [];
      }
      // Add each boolean state if it is not there already
      booleanStates.forEach((e) => {
        var _a, _b;
        if (((_a = root[elem].states) === null || _a === void 0 ? void 0 : _a.indexOf(e)) === -1) {
          (_b = root[elem].states) === null || _b === void 0 ? void 0 : _b.push(e);
        }
      });
    }
    if (nonBooleanStates.length > 0) {
      nonBooleanStates.forEach((k) => {
        // eg. '[meeting=joined]'
        const v = `[${k[0]}=${k[1]}]`;
        // eg. 'dyte-participant-tile[meeting=joined].activeSettings.activeSidebar'
        keyString = `${elem}${v}${booleanStateString}`;
        // An element will only re-render when a state described in its `states` key changes
        // If the element has no states defined, ie. just array of children
        // convert to a complex element type
        if (Array.isArray(root[elem])) {
          root[elem] = {
            state: k[0],
            children: root[elem],
          };
        }
      });
    }
    let target = root[keyString];
    if (target === undefined) {
      root[keyString] = {};
      target = root[keyString];
    }
    return new UIElemEditor(target, this.config, keyString);
  }
  build() {
    return this.config;
  }
}

/**
 * Register addons to the meeting
 * @param addons The list of addons to register
 * @param meeting The meeting object
 * @param config The current UIConfig
 * @returns The updated UIConfig
 */
function registerAddons(addons, meeting, config) {
  if (!config) {
    const generated = generateConfig(meeting.self.config, meeting);
    config = generated.config;
  }
  addons.map((addon) => {
    config = addon.register(config, meeting, (c) => new DyteUIBuilder(c));
  });
  return config;
}

export { DyteUIBuilder, registerAddons, sendNotification };
