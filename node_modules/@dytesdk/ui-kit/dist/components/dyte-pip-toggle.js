import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { s as state } from './store.js';
import './breakout-rooms-manager.js';
import { d as defaultConfig } from './default-ui-config.js';
import './livestream.js';
import { d as defaultIconPack } from './default-icon-pack.js';
import { u as useLanguage } from './index2.js';
import './user-prefs.js';
import { d as defineCustomElement$4 } from './dyte-controlbar-button2.js';
import { d as defineCustomElement$3 } from './dyte-icon2.js';
import { d as defineCustomElement$2 } from './dyte-spinner2.js';

const dytePipToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DytePipToggle$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.variant = 'button';
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.size = undefined;
    this.t = useLanguage();
    this.pipSupported = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  meetingChanged(meeting) {
    var _a, _b, _c;
    if (meeting === null)
      return;
    // Check if PiP is supported and enabled
    this.pipSupported =
      ((_a = meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.isSupported()) &&
        ((_b = meeting.self.config) === null || _b === void 0 ? void 0 : _b.pipMode) &&
        ((_c = meeting.self.config) === null || _c === void 0 ? void 0 : _c.viewType) !== 'LIVESTREAM';
  }
  togglePip() {
    if (!this.meeting.participants.pip)
      return;
    // Not active, activate
    if (this.meeting.participants.pip.isActive) {
      this.meeting.participants.pip.disable();
    }
    else {
      this.meeting.participants.pip.enable();
    }
    this.stateUpdate.emit({ activeMoreMenu: false });
    state.activeMoreMenu = false;
  }
  render() {
    if (!this.pipSupported)
      return;
    const pipEnabled = this.meeting.participants.pip.isActive;
    return (h(Host, { tabIndex: 0, role: "log", "aria-label": `Picture-in-Picture mode` }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, onClick: () => this.togglePip(), icon: pipEnabled ? this.iconPack.pip_on : this.iconPack.pip_off, label: pipEnabled ? this.t('pip_off') : this.t('pip_on'), variant: this.variant })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
  static get style() { return dytePipToggleCss; }
}, [1, "dyte-pip-toggle", {
    "variant": [513],
    "meeting": [16],
    "states": [16],
    "config": [16],
    "iconPack": [16],
    "size": [513],
    "t": [16],
    "pipSupported": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dyte-pip-toggle", "dyte-controlbar-button", "dyte-icon", "dyte-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "dyte-pip-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DytePipToggle$1);
      }
      break;
    case "dyte-controlbar-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "dyte-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "dyte-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DytePipToggle = DytePipToggle$1;
const defineCustomElement = defineCustomElement$1;

export { DytePipToggle, defineCustomElement };
