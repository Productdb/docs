import { Host, h, writeTask, } from '@stencil/core';
import { defaultIconPack } from '../../lib/icons';
import { useLanguage } from '../../lib/lang';
import { RemoteUpdateType } from '../../types/dyte-client';
import { exitFullSreen, isFullScreenEnabled, isFullScreenSupported, requestFullScreen, } from '../../utils/full-screen';
import storeState from '../../lib/store';
/**
 * A component which plays a participant's screenshared video.
 *
 * It also allows for placement of other components similar to `dyte-participant-tile`.
 *
 * This component will not render anything if the participant hasn't start screensharing.
 */
export class DyteScreenshareView {
  constructor() {
    this.fullScreenListener = () => {
      this.isFullScreen = isFullScreenEnabled();
    };
    this.participantScreenshareUpdate = (p) => {
      if (p.id !== this.participant.id)
        return;
      this.screenShareListener(p);
    };
    this.onRemoteUpdate = ({ payload, type }) => {
      var _a, _b;
      let remoteControlInfo = '';
      if (type === RemoteUpdateType.INCOMING_REQUEST_ACCEPTED) {
        const remotePeer = this.meeting.participants.joined.get(payload.request.remotePeerId);
        remoteControlInfo = `${remotePeer.name} is controlling your screen.`;
      }
      if (type === RemoteUpdateType.OUTGOING_REQUEST_ACCEPTED) {
        const hostPeer = this.meeting.participants.joined.get(payload.request.hostPeerId);
        remoteControlInfo = `You are controlling ${hostPeer.name}'s screen.`;
      }
      if (type === RemoteUpdateType.INCOMING_REQUEST_ENDED ||
        type === RemoteUpdateType.OUTGOING_REQUEST_ENDED) {
        remoteControlInfo = '';
      }
      if (type === RemoteUpdateType.REQUEST_RECEIVED && !Boolean((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.remote) === null || _b === void 0 ? void 0 : _b.active)) {
        this.stateUpdate.emit({ activeRemoteAccessManager: true });
        storeState.activeRemoteAccessManager = true;
      }
      this.remoteControlInfo = remoteControlInfo;
    };
    this.onMouseEvent = (event) => {
      var _a, _b;
      if (this.shouldSkipEventTrigger()) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.remote) === null || _b === void 0 ? void 0 : _b.mouseEvent(event, this.videoEl);
    };
    this.onKeyDown = (event) => {
      var _a, _b;
      if (this.shouldSkipEventTrigger()) {
        return;
      }
      (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.remote) === null || _b === void 0 ? void 0 : _b.keyboardEvent(event);
    };
    this.toggleFullScreen = () => {
      if (!this.isFullScreen) {
        requestFullScreen(this.host);
        this.isFullScreen = true;
      }
      else {
        exitFullSreen();
        this.isFullScreen = false;
      }
    };
    this.hideFullScreenButton = false;
    this.nameTagPosition = 'bottom-left';
    this.participant = undefined;
    this.meeting = undefined;
    this.variant = 'solid';
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.videoExpanded = false;
    this.screenShareEnabled = false;
    this.isFullScreen = false;
    this.remoteControlInfo = undefined;
  }
  connectedCallback() {
    window === null || window === void 0 ? void 0 : window.addEventListener('fullscreenchange', this.fullScreenListener);
    window === null || window === void 0 ? void 0 : window.addEventListener('webkitfullscreenchange', this.fullScreenListener);
  }
  componentDidLoad() {
    this.participantChanged(this.participant);
  }
  disconnectedCallback() {
    var _a, _b;
    const { self } = this.meeting;
    if (this.participant.id === self.id && this.screenShareListener)
      this.participant.removeListener('screenShareUpdate', this.screenShareListener);
    else
      this.meeting.participants.joined.removeListener('screenShareUpdate', this.participantScreenshareUpdate);
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.remote) === null || _b === void 0 ? void 0 : _b.removeListener('remoteUpdate', this.onRemoteUpdate);
    window === null || window === void 0 ? void 0 : window.removeEventListener('fullscreenchange', this.fullScreenListener);
    window === null || window === void 0 ? void 0 : window.removeEventListener('webkitfullscreenchange', this.fullScreenListener);
  }
  participantChanged(participant) {
    var _a, _b, _c, _d, _e;
    if (participant != null) {
      const { self } = this.meeting;
      this.screenShareListener = ({ screenShareEnabled, screenShareTracks }) => {
        const enabled = screenShareEnabled && screenShareTracks.video != null;
        writeTask(() => {
          this.screenShareEnabled = enabled;
        });
        if (enabled) {
          const stream = new MediaStream();
          stream.addTrack(screenShareTracks.video);
          if (this.videoEl != null) {
            this.videoEl.srcObject = stream;
            this.videoEl.play();
          }
        }
        else if (this.videoEl != null) {
          this.videoEl.srcObject = undefined;
        }
      };
      this.screenShareListener(participant);
      if (Boolean((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.remote) === null || _b === void 0 ? void 0 : _b.active) &&
        [this.meeting.remote.active.hostPeerId, this.meeting.remote.active.remotePeerId].includes(participant === null || participant === void 0 ? void 0 : participant.id)) {
        this.onRemoteUpdate({
          payload: { request: this.meeting.remote.active },
          type: ((_c = this.meeting.remote.active) === null || _c === void 0 ? void 0 : _c.hostPeerId) === this.meeting.self.id
            ? 'INCOMING_REQUEST_ACCEPTED'
            : 'OUTGOING_REQUEST_ACCEPTED',
        });
      }
      if (participant.id === self.id)
        participant.addListener('screenShareUpdate', this.screenShareListener);
      else
        this.meeting.participants.joined.addListener('screenShareUpdate', this.participantScreenshareUpdate);
      (_e = (_d = this.meeting) === null || _d === void 0 ? void 0 : _d.remote) === null || _e === void 0 ? void 0 : _e.addListener('remoteUpdate', this.onRemoteUpdate);
    }
  }
  shouldSkipEventTrigger() {
    var _a, _b, _c;
    if (this.meeting == null || this.participant == null)
      return true;
    return (!Boolean((_a = this.meeting.remote) === null || _a === void 0 ? void 0 : _a.active) ||
      // It is you, who is moving over your own shared screen
      !Boolean(this.meeting.participants.joined.get((_b = this.meeting.remote) === null || _b === void 0 ? void 0 : _b.active.hostPeerId)) ||
      // Skip nonactive screenshare events, Redundant check
      ((_c = this.meeting.remote) === null || _c === void 0 ? void 0 : _c.active.hostPeerId) != this.participant.id);
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const isSelf = ((_a = this.participant) === null || _a === void 0 ? void 0 : _a.id) === ((_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self.id);
    const text = this.isFullScreen ? this.t('full_screen.exit') : this.t('full_screen');
    const icon = this.isFullScreen
      ? this.iconPack.full_screen_minimize
      : this.iconPack.full_screen_maximize;
    return (h(Host, { class: { isSelf } }, Boolean(((_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.remote) === null || _d === void 0 ? void 0 : _d.active) && this.remoteControlInfo) && (h("div", { id: "remote-control-self", key: "remote-control-self" }, h("p", { class: "remote-control-message" }, this.remoteControlInfo), h("dyte-button", { onClick: () => { var _a; return (_a = this.meeting.remote) === null || _a === void 0 ? void 0 : _a.endControl(); }, iconPack: this.iconPack, t: this.t }, ((_f = (_e = this.meeting.remote) === null || _e === void 0 ? void 0 : _e.active) === null || _f === void 0 ? void 0 : _f.hostPeerId) === this.meeting.self.id
      ? 'Revoke access'
      : 'Stop'))), h("div", { key: "video-container", id: "video-container", class: { expand: this.videoExpanded }, contentEditable: Boolean((_g = this.meeting.remote) === null || _g === void 0 ? void 0 : _g.active), onKeyDown: this.onKeyDown }, h("video", { ref: (el) => (this.videoEl = el), class: {
        visible: this.screenShareEnabled,
        'fit-in-container': this.participant.supportsRemoteControl,
      }, playsInline: true, onPlay: () => {
        this.play.emit({
          screenshareParticipant: this.participant,
          participant: this.meeting.self,
        });
      }, autoPlay: true, muted: true, id: `screen-share-video-${this.participant.id}`, onMouseMove: this.onMouseEvent, onClick: this.onMouseEvent, onContextMenu: this.onMouseEvent })), h("div", { id: "controls", key: "controls" }, !this.hideFullScreenButton && !isSelf && isFullScreenSupported() && (h("dyte-tooltip", { label: text, iconPack: this.iconPack, t: this.t }, h("dyte-button", { id: "full-screen-btn", kind: "icon", onClick: this.toggleFullScreen, title: text, iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: icon, "aria-hidden": true, tabIndex: -1, iconPack: this.iconPack, t: this.t })))), ((_h = this.participant) === null || _h === void 0 ? void 0 : _h.supportsRemoteControl) === true && (h("dyte-menu", { id: "menu", key: "menu", iconPack: this.iconPack, t: this.t }, h("dyte-button", { variant: "secondary", kind: "icon", slot: "trigger", iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.more_vertical, iconPack: this.iconPack, t: this.t })), h("dyte-menu-list", { iconPack: this.iconPack, t: this.t }, !isSelf && (h("dyte-menu-item", { style: {
        cursor: this.participant.supportsRemoteControl ? 'pointer' : 'not-allowed',
      }, iconPack: this.iconPack, t: this.t, onClick: () => {
        var _a, _b;
        if ((_a = this.participant) === null || _a === void 0 ? void 0 : _a.supportsRemoteControl) {
          (_b = this.meeting.remote) === null || _b === void 0 ? void 0 : _b.requestControl(this.participant.id);
        }
      } }, "Request remote control")), isSelf && (h("dyte-menu-item", { iconPack: this.iconPack, t: this.t, onClick: () => this.stateUpdate.emit({ activeRemoteAccessManager: true }) }, "Manage remote control requests")))))), isSelf && (h("div", { id: "self-message", key: "self-message" }, h("h3", null, this.t('screenshare.shared')), h("div", { class: "actions" }, this.meeting != null && (h("dyte-button", { variant: "danger", onClick: () => {
        this.meeting.self.disableScreenShare();
      }, iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.share_screen_stop, slot: "start", iconPack: this.iconPack, t: this.t }), this.t('screenshare.stop'))), h("dyte-button", { variant: "secondary", id: "expand-btn", iconPack: this.iconPack, t: this.t, onClick: () => {
        this.videoExpanded = !this.videoExpanded;
      } }, h("dyte-icon", { icon: this.videoExpanded
        ? this.iconPack.full_screen_minimize
        : this.iconPack.full_screen_maximize, slot: "start", iconPack: this.iconPack, t: this.t }), this.videoExpanded
      ? this.t('screenshare.min_preview')
      : this.t('screenshare.max_preview'))))), h("slot", null)));
  }
  static get is() { return "dyte-screenshare-view"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dyte-screenshare-view.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dyte-screenshare-view.css"]
    };
  }
  static get properties() {
    return {
      "hideFullScreenButton": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hide full screen button"
        },
        "attribute": "hide-full-screen-button",
        "reflect": false,
        "defaultValue": "false"
      },
      "nameTagPosition": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "| 'bottom-left'\n    | 'bottom-right'\n    | 'bottom-center'\n    | 'top-left'\n    | 'top-right'\n    | 'top-center'",
          "resolved": "\"bottom-center\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"top-left\" | \"top-right\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Position of name tag"
        },
        "attribute": "name-tag-position",
        "reflect": true,
        "defaultValue": "'bottom-left'"
      },
      "participant": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Peer",
          "resolved": "({ readonly id: string; readonly name: string; readonly picture: string; readonly customParticipantId: string; readonly clientSpecificId: string; readonly waitlistStatus: \"rejected\" | \"accepted\" | \"waiting\" | \"none\"; readonly role: any; readonly userId: string; readonly organizationId: string; readonly supportsRemoteControl: boolean; readonly device: DeviceConfig; readonly stageStatus: StageStatus; readonly presetName: string; readonly roomState: leaveRoomState | \"joined\" | \"init\" | \"waitlisted\"; readonly permissions: DytePermissionsPresetV1$1 | DytePermissionsPreset$1; readonly suggestedTheme: DyteThemePresetV1$1 | DyteThemePreset$1; readonly config: DyteThemePresetV1$1 | DyteThemePreset$1; readonly roomJoined: boolean; readonly setName: (name: string) => void; readonly setupTracks: (options?: { video?: boolean; audio?: boolean; forceReset?: boolean; }) => Promise<void>; readonly destructMediaHandler: () => Promise<void>; readonly removeDocumentEventListeners: () => Promise<void>; readonly enableAudio: () => Promise<void>; readonly enableVideo: () => Promise<void>; readonly updateVideoConstraints: (resolution: VideoQualityConstraints) => Promise<void>; readonly enableScreenShare: () => Promise<void>; readonly updateScreenshareConstraints: (resolution: VideoQualityConstraints) => Promise<void>; readonly disableAudio: () => Promise<void>; readonly disableVideo: () => Promise<void>; readonly disableScreenShare: () => Promise<void>; readonly getAllDevices: () => MediaDeviceInfo[] | Promise<MediaDeviceInfo[]>; readonly setIsPinned: (isPinned: boolean, emitEvent?: boolean) => void; readonly isPinned: boolean; readonly webinarStageStatus: WebinarStageStatus; readonly pin: () => Promise<unknown>; readonly unpin: () => Promise<unknown>; readonly setDevice: (device: MediaDeviceInfo) => Promise<void>; readonly cleanUpTracks: () => void; readonly requestToJoinStage: () => Promise<void>; readonly withdrawRequestToJoinStage: () => Promise<void>; readonly leaveStage: () => Promise<void>; readonly joinStage: () => Promise<void>; readonly setWebinarStageStatus: (webinarStageStatus: WebinarStageStatus) => void; readonly disablePreview: () => Promise<DyteSelf$1>; readonly init: (options?: { video?: boolean; audio?: boolean; constraints?: MediaConstraints; }) => Promise<void>; readonly audioTrack: MediaStreamTrack; readonly rawAudioTrack: MediaStreamTrack; readonly mediaPermissions: { audio?: MediaPermission$1; video?: MediaPermission$1; screenshare?: MediaPermission$1; } | { audio?: \"NOT_REQUESTED\" | \"ACCEPTED\" | \"DENIED\" | \"SYSTEM_DENIED\" | \"COULD_NOT_START\" | \"CANCELED\"; video?: \"NOT_REQUESTED\" | \"ACCEPTED\" | \"DENIED\" | \"SYSTEM_DENIED\" | \"COULD_NOT_START\" | \"CANCELED\"; screenshare?: \"NOT_REQUESTED\" | \"ACCEPTED\" | \"DENIED\" | \"SYSTEM_DENIED\" | \"COULD_NOT_START\" | \"CANCELED\"; }; readonly addAudioMiddleware: (audioMiddleware: AudioMiddleware) => Promise<{ success: boolean; message: string; }>; readonly removeAudioMiddleware: (audioMiddleware: AudioMiddleware) => Promise<{ success: boolean; message: string; }>; readonly videoTrack: MediaStreamTrack; readonly rawVideoTrack: MediaStreamTrack; readonly addVideoMiddleware: (videoMiddleware: VideoMiddleware) => Promise<{ success: boolean; message: string; }>; readonly removeVideoMiddleware: (videoMiddleware: VideoMiddleware) => Promise<{ success: boolean; message: string; }>; readonly screenShareTracks: { audio: MediaStreamTrack; video: MediaStreamTrack; } | { audio?: MediaStreamTrack; video?: MediaStreamTrack; }; readonly audioEnabled: boolean; readonly videoEnabled: boolean; readonly screenShareEnabled: boolean; readonly getCurrentDevices: () => { audio: MediaDeviceInfo; video: MediaDeviceInfo; speaker: MediaDeviceInfo; }; readonly getAudioDevices: () => Promise<MediaDeviceInfo[]>; readonly getVideoDevices: () => Promise<MediaDeviceInfo[]>; readonly getSpeakerDevices: () => Promise<MediaDeviceInfo[]>; readonly getDeviceById: (deviceId: string, kind: \"audio\" | \"video\" | \"speaker\") => MediaDeviceInfo | Promise<MediaDeviceInfo>; readonly emit: <E extends keyof SelfEvents>(event: E, ...args: Parameters<SelfEvents[E]>) => boolean; readonly on: <E extends keyof SelfEvents>(event: E, callback: SelfEvents[E]) => DyteSelf$1; readonly addListener: <E extends keyof SelfEvents>(event: E, callback: SelfEvents[E]) => DyteSelf$1; readonly off: <T extends keyof SelfEvents>(event: T, callback: SelfEvents[T]) => DyteSelf$1; readonly once: <T extends keyof SelfEvents>(event: T, callback: SelfEvents[T]) => DyteSelf$1; readonly prependListener: <T extends keyof SelfEvents>(event: T, callback: SelfEvents[T]) => DyteSelf$1; readonly prependOnceListener: <T extends keyof SelfEvents>(event: T, callback: SelfEvents[T]) => DyteSelf$1; readonly removeListener: <T extends keyof SelfEvents>(event: T, callback: SelfEvents[T]) => DyteSelf$1; readonly removeAllListeners: <T extends keyof SelfEvents>(event?: T) => DyteSelf$1; readonly listeners: <T extends keyof SelfEvents>(event: T) => Function[]; readonly listenerCount: <T extends keyof SelfEvents>(event: T) => number; readonly setMaxListeners: (n: number) => DyteSelf$1; readonly getMaxListeners: () => number; readonly rawListeners: (eventName: string | symbol) => Function[]; readonly eventNames: () => (string | symbol)[]; }) | ({ readonly id: string; readonly userId: string; readonly name: string; readonly picture: string; readonly isHost: boolean; readonly customParticipantId?: string; readonly clientSpecificId: string; readonly flags: { [key: string]: string | boolean; }; readonly device: DeviceConfig; readonly videoTrack: MediaStreamTrack; readonly audioTrack: MediaStreamTrack; readonly screenShareTracks: { audio: MediaStreamTrack; video: MediaStreamTrack; }; readonly videoEnabled: boolean; readonly audioEnabled: boolean; readonly screenShareEnabled: boolean; readonly producers: ProducerState$1[]; readonly supportsRemoteControl: boolean; readonly presetName?: string; readonly webinarStageStatus: StageStatus | WebinarStageStatus; readonly stageStatus: StageStatus | WebinarStageStatus; readonly setVideoEnabled: (videoEnabled: boolean, emitEvent?: boolean) => void; readonly setAudioEnabled: (audioEnabled: boolean, emitEvent?: boolean) => void; readonly setScreenShareEnabled: (screenShareEnabled: boolean, emitEvent?: boolean) => void; readonly pin: () => Promise<unknown>; readonly unpin: () => Promise<unknown>; readonly setIsPinned: (isPinned: boolean, emitEvent?: boolean) => void; readonly disableAudio: () => Promise<void>; readonly kick: () => Promise<void>; readonly disableVideo: () => Promise<void>; readonly acceptJoinStageRequest: () => Promise<void>; readonly rejectRequestToJoinStage: () => Promise<void>; readonly removeFromStage: () => Promise<void>; readonly setStageStatus: (webinarStageStatus: StageStatus | WebinarStageStatus) => void; readonly setWebinarStageStatus: (webinarStageStatus: WebinarStageStatus) => void; readonly isPinned: boolean; readonly emit: <E extends keyof ParticipantEvents>(event: E, ...args: Parameters<ParticipantEvents[E]>) => boolean; readonly on: <E extends keyof ParticipantEvents>(event: E, callback: ParticipantEvents[E]) => DyteParticipant$1; readonly addListener: <E extends keyof ParticipantEvents>(event: E, callback: ParticipantEvents[E]) => DyteParticipant$1; readonly off: <T extends keyof ParticipantEvents>(event: T, callback: ParticipantEvents[T]) => DyteParticipant$1; readonly once: <T extends keyof ParticipantEvents>(event: T, callback: ParticipantEvents[T]) => DyteParticipant$1; readonly prependListener: <T extends keyof ParticipantEvents>(event: T, callback: ParticipantEvents[T]) => DyteParticipant$1; readonly prependOnceListener: <T extends keyof ParticipantEvents>(event: T, callback: ParticipantEvents[T]) => DyteParticipant$1; readonly removeListener: <T extends keyof ParticipantEvents>(event: T, callback: ParticipantEvents[T]) => DyteParticipant$1; readonly removeAllListeners: <T extends keyof ParticipantEvents>(event?: T) => DyteParticipant$1; readonly listeners: <T extends keyof ParticipantEvents>(event: T) => Function[]; readonly listenerCount: <T extends keyof ParticipantEvents>(event: T) => number; readonly setMaxListeners: (n: number) => DyteParticipant$1; readonly getMaxListeners: () => number; readonly rawListeners: (eventName: string | symbol) => Function[]; readonly eventNames: () => (string | symbol)[]; })",
          "references": {
            "Peer": {
              "location": "import",
              "path": "../../types/dyte-client"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Participant object"
        }
      },
      "meeting": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Meeting",
          "resolved": "DyteClient",
          "references": {
            "Meeting": {
              "location": "import",
              "path": "../../types/dyte-client"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Meeting object"
        }
      },
      "variant": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'solid' | 'gradient'",
          "resolved": "\"gradient\" | \"solid\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Variant"
        },
        "attribute": "variant",
        "reflect": true,
        "defaultValue": "'solid'"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "Size",
          "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\"",
          "references": {
            "Size": {
              "location": "import",
              "path": "../../types/props"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size"
        },
        "attribute": "size",
        "reflect": true
      },
      "iconPack": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "IconPack",
          "resolved": "{ people: string; people_checked: string; chat: string; poll: string; participants: string; rocket: string; call_end: string; share: string; mic_on: string; mic_off: string; video_on: string; video_off: string; share_screen_start: string; share_screen_stop: string; share_screen_person: string; clock: string; dismiss: string; send: string; search: string; more_vertical: string; chevron_down: string; chevron_up: string; chevron_left: string; chevron_right: string; settings: string; wifi: string; speaker: string; speaker_off: string; download: string; full_screen_maximize: string; full_screen_minimize: string; copy: string; attach: string; image: string; emoji_multiple: string; image_off: string; disconnected: string; wand: string; recording: string; subtract: string; stop_recording: string; warning: string; pin: string; pin_off: string; spinner: string; breakout_rooms: string; add: string; shuffle: string; edit: string; delete: string; back: string; save: string; web: string; checkmark: string; spotlight: string; join_stage: string; leave_stage: string; pip_off: string; pip_on: string; signal_1: string; signal_2: string; signal_3: string; signal_4: string; signal_5: string; start_livestream: string; stop_livestream: string; viewers: string; debug: string; info: string; devices: string; horizontal_dots: string; ai_sparkle: string; meeting_ai: string; create_channel: string; create_channel_illustration: string; captionsOn: string; captionsOff: string; }",
          "references": {
            "IconPack": {
              "location": "import",
              "path": "../../lib/icons"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon pack"
        },
        "defaultValue": "defaultIconPack"
      },
      "t": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DyteI18n",
          "resolved": "(key: \"pin\" | \"unpin\" | \"kick\" | \"ended\" | \"disconnected\" | (string & {}) | \"about_call\" | \"screen\" | \"camera\" | \"leave\" | \"dismiss\" | \"logo\" | \"page\" | \"more\" | \"page.prev\" | \"page.next\" | \"layout\" | \"layout.auto\" | \"settings\" | \"file\" | \"image\" | \"connection\" | \"leave_confirmation\" | \"cancel\" | \"yes\" | \"you\" | \"to\" | \"mute\" | \"pinned\" | \"pip_on\" | \"pip_off\" | \"viewers\" | \"join\" | \"joined\" | \"create\" | \"close\" | \"ask\" | \"type\" | \"activate\" | \"mic_off\" | \"disable_mic\" | \"mic_on\" | \"enable_mic\" | \"audio\" | \"test\" | \"mute_all\" | \"mute_all.description\" | \"mute_all.header\" | \"mute_all.allow_unmute\" | \"video_off\" | \"disable_video\" | \"video_on\" | \"enable_video\" | \"video\" | \"offline\" | \"offline.description\" | \"disconnected.description\" | \"participants\" | \"participants.errors.empty_results\" | \"participants.empty_list\" | \"participants.turn_off_video\" | \"polls\" | \"polls.by\" | \"polls.question\" | \"polls.question.placeholder\" | \"polls.answers\" | \"polls.option\" | \"polls.option.placeholder\" | \"polls.results.anon\" | \"polls.results.hide\" | \"polls.create\" | \"polls.cancel\" | \"polls.errors.question_required\" | \"polls.errors.empty_option\" | \"screenshare\" | \"screenshare.min_preview\" | \"screenshare.max_preview\" | \"screenshare.shared\" | \"screenshare.start\" | \"screenshare.stop\" | \"screenshare.error.unknown\" | \"screenshare.error.max_count\" | \"plugins\" | \"perm_denied\" | \"perm_denied.audio\" | \"perm_denied.video\" | \"perm_denied.screenshare\" | \"perm_denied.audio.chrome.message\" | \"perm_denied.video.chrome.message\" | \"perm_denied.screenshare.chrome.message\" | \"perm_denied.audio.safari.message\" | \"perm_denied.video.safari.message\" | \"perm_denied.screenshare.safari.message\" | \"perm_denied.audio.edge.message\" | \"perm_denied.video.edge.message\" | \"perm_denied.screenshare.edge.message\" | \"perm_denied.audio.firefox.message\" | \"perm_denied.video.firefox.message\" | \"perm_denied.screenshare.firefox.message\" | \"perm_denied.audio.others.message\" | \"perm_denied.video.others.message\" | \"perm_denied.screenshare.others.message\" | \"perm_sys_denied\" | \"perm_sys_denied.audio\" | \"perm_sys_denied.video\" | \"perm_sys_denied.screenshare\" | \"perm_sys_denied.audio.macos.message\" | \"perm_sys_denied.video.macos.message\" | \"perm_sys_denied.screenshare.macos.message\" | \"perm_sys_denied.audio.ios.message\" | \"perm_sys_denied.video.ios.message\" | \"perm_sys_denied.screenshare.ios.message\" | \"perm_sys_denied.audio.windows.message\" | \"perm_sys_denied.video.windows.message\" | \"perm_sys_denied.screenshare.windows.message\" | \"perm_sys_denied.audio.android.message\" | \"perm_sys_denied.video.android.message\" | \"perm_sys_denied.screenshare.android.message\" | \"perm_sys_denied.audio.others.message\" | \"perm_sys_denied.video.others.message\" | \"perm_sys_denied.screenshare.others.message\" | \"perm_could_not_start\" | \"perm_could_not_start.audio\" | \"perm_could_not_start.video\" | \"perm_could_not_start.screenshare\" | \"perm_could_not_start.audio.message\" | \"perm_could_not_start.video.message\" | \"perm_could_not_start.screenshare.message\" | \"full_screen\" | \"full_screen.exit\" | \"waitlist.header_title\" | \"waitlist.body_text\" | \"waitlist.deny_request\" | \"waitlist.accept_request\" | \"waitlist.accept_all\" | \"stage_request.header_title\" | \"stage_request.deny_request\" | \"stage_request.accept_request\" | \"stage_request.accept_all\" | \"stage_request.deny_all\" | \"stage_request.approval_pending\" | \"stage_request.denied\" | \"stage_request.request\" | \"stage_request.requested\" | \"stage_request.cancel_request\" | \"stage_request.leave_stage\" | \"stage_request.request_tip\" | \"stage_request.leave_tip\" | \"stage_request.pending_tip\" | \"stage_request.denied_tip\" | \"stage.empty_host\" | \"stage.empty_host_summary\" | \"stage.empty_viewer\" | \"stage.remove_from_stage\" | \"stage.invited_notification\" | \"stage.add_to_stage\" | \"stage.join_title\" | \"stage.join_summary\" | \"stage.join_cancel\" | \"stage.join_confirm\" | \"setup_screen.join_in_as\" | \"setup_screen.joining_as\" | \"setup_screen.your_name\" | \"stage.reconnecting\" | \"recording.label\" | \"recording.indicator\" | \"recording.started\" | \"recording.stopped\" | \"recording.paused\" | \"recording.error.start\" | \"recording.error.stop\" | \"recording.error.resume\" | \"recording.start\" | \"recording.stop\" | \"recording.resume\" | \"recording.starting\" | \"recording.stopping\" | \"recording.loading\" | \"recording.idle\" | \"audio_playback\" | \"audio_playback.title\" | \"audio_playback.description\" | \"breakout_rooms\" | \"breakout_rooms.room_config_header\" | \"breakout_rooms.join_breakout_header\" | \"breakout_rooms.empty\" | \"breakout_rooms.delete\" | \"breakout_rooms.switch\" | \"breakout_rooms.main_room\" | \"breakout_rooms.shuffle_participants\" | \"breakout_rooms.deselect\" | \"breakout_rooms.selected\" | \"breakout_rooms.num_of_rooms\" | \"breakout_rooms.approx\" | \"breakout_rooms.participants_per_room\" | \"breakout_rooms.division_text\" | \"breakout_rooms.start_breakout\" | \"breakout_rooms.close_breakout\" | \"breakout_rooms.update_breakout\" | \"breakout_rooms.discard_changes\" | \"breakout_rooms.room\" | \"breakout_rooms.rooms\" | \"breakout_rooms.room_name\" | \"breakout_rooms.edit_room_name\" | \"breakout_rooms.save_room_name\" | \"breakout_rooms.add_room\" | \"breakout_rooms.add_room_brief\" | \"breakout_rooms.select_all\" | \"breakout_rooms.unassign_all\" | \"breakout_rooms.assign\" | \"breakout_rooms.assign_participants\" | \"breakout_rooms.none_assigned\" | \"breakout_rooms.drag_drop_participants\" | \"breakout_rooms.click_drop_participants\" | \"breakout_rooms.status.assign_multiple\" | \"breakout_rooms.status.select_room\" | \"breakout_rooms.ephemeral_status.participants_assigned\" | \"breakout_rooms.ephemeral_status.participants_assigned_randomly\" | \"breakout_rooms.ephemeral_status.changes_discarded\" | \"breakout_rooms.confirm_modal.start_breakout.header\" | \"breakout_rooms.confirm_modal.start_breakout.content\" | \"breakout_rooms.confirm_modal.start_breakout.cancelText\" | \"breakout_rooms.confirm_modal.start_breakout.ctaText\" | \"breakout_rooms.confirm_modal.close_breakout.header\" | \"breakout_rooms.confirm_modal.close_breakout.content\" | \"breakout_rooms.confirm_modal.close_breakout.ctaText\" | \"breakout_rooms.move_reason.started_msg\" | \"breakout_rooms.move_reason.started_desc\" | \"breakout_rooms.move_reason.closed_msg\" | \"breakout_rooms.move_reason.closed_desc\" | \"breakout_rooms.move_reason.switch_room\" | \"breakout_rooms.move_reason.switch_main_room\" | \"breakout_rooms.all_assigned\" | \"breakout_rooms.empty_main_room\" | \"breakout_rooms.leave_confirmation\" | \"breakout_rooms.leave_confirmation.main_room_btn\" | \"ai\" | \"ai.meeting_ai\" | \"ai.home\" | \"ai.transcriptions\" | \"ai.personal\" | \"ai.caption_view\" | \"ai.chat.tooltip\" | \"ai.chat.summerise\" | \"ai.chat.agenda\" | \"search\" | \"search.could_not_find\" | \"search.empty\" | \"end\" | \"end.all\" | \"ended.rejected\" | \"ended.left\" | \"ended.kicked\" | \"ended.disconnected\" | \"ended.network\" | \"network\" | \"network.reconnecting\" | \"network.delay\" | \"network.delay_extended\" | \"network.restored\" | \"network.lost\" | \"network.lost_extended\" | \"network.disconnected\" | \"network.leaving\" | \"livestream\" | \"livestream.indicator\" | \"livestream.skip\" | \"livestream.idle\" | \"livestream.starting\" | \"livestream.stopping\" | \"livestream.error.not_supported\" | \"livestream.error.not_found\" | \"livestream.error.unknown\" | \"livestream.error.sync\" | \"livestream.error.start\" | \"livestream.error.stop\" | \"livestream.go_live\" | \"livestream.end_live\" | \"livestream.error\" | \"cta.help\" | \"cta.continue\" | \"cta.reload\" | \"cta.confirmation\" | \"remote_access.empty\" | \"remote_access.requests\" | \"remote_access.allow\" | \"remote_access.grant\" | \"remote_access.indicator\" | \"chat\" | \"chat.new\" | \"chat.new_channel\" | \"chat.channel_name\" | \"chat.member_name\" | \"chat.add_members\" | \"chat.delete_msg\" | \"chat.edit_msg\" | \"chat.send_msg\" | \"chat.send_attachment\" | \"chat.send_img\" | \"chat.send_file\" | \"chat.send_emoji\" | \"chat.update_msg\" | \"chat.channel_members\" | \"chat.img.loading\" | \"chat.error.img_not_found\" | \"chat.error.empty_results\" | \"chat.img.shared_by\" | \"chat.reply\" | \"chat.message_placeholder\" | \"chat.click_to_send\" | \"chat.search_msgs\" | \"chat.search_conversations\" | \"chat.start_conversation\" | \"chat.empty_search\" | \"chat.empty_channel\" | \"chat.cancel_upload\" | \"chat.view_chats\" | \"chat.everyone\" | \"chat.pinned_msgs\" | \"chat.toggle_pinned_msgs\" | \"date.today\" | \"date.yesteday\" | \"date.sunday\" | \"date.monday\" | \"date.tuesday\" | \"date.wednesday\" | \"date.thursday\" | \"date.friday\" | \"date.saturday\" | \"list.empty\" | \"grid.listening\" | \"transcript.off\" | \"transcript.on\" | \"settings.notification_sound\" | \"settings.microphone_input\" | \"settings.speaker_output\" | \"settings.mirror_video\" | \"settings.camera_off\") => string",
          "references": {
            "DyteI18n": {
              "location": "import",
              "path": "../../lib/lang"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Language"
        },
        "defaultValue": "useLanguage()"
      }
    };
  }
  static get states() {
    return {
      "videoExpanded": {},
      "screenShareEnabled": {},
      "isFullScreen": {},
      "remoteControlInfo": {}
    };
  }
  static get events() {
    return [{
        "method": "stateUpdate",
        "name": "dyteStateUpdate",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emits updated state data"
        },
        "complexType": {
          "original": "States",
          "resolved": "States",
          "references": {
            "States": {
              "location": "import",
              "path": "../../types/props"
            }
          }
        }
      }, {
        "method": "play",
        "name": "screensharePlay",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emits when video playback happens successfully"
        },
        "complexType": {
          "original": "{\n    participant: Peer;\n    screenshareParticipant: Peer;\n  }",
          "resolved": "{ participant: Peer; screenshareParticipant: Peer; }",
          "references": {
            "Peer": {
              "location": "import",
              "path": "../../types/dyte-client"
            }
          }
        }
      }];
  }
  static get elementRef() { return "host"; }
  static get watchers() {
    return [{
        "propName": "participant",
        "methodName": "participantChanged"
      }];
  }
}
