import { Host, h } from '@stencil/core';
import { ChatHead } from '../dyte-chat/components/ChatHead';
// import { Middlewares } from '../../types/props';
import { smoothScrollToBottom } from '../../utils/scroll';
export class DyteAiHome {
  constructor() {
    this.handleSubmit = (e) => {
      e.preventDefault();
      e.stopPropagation();
      this.messages = [
        ...this.messages,
        {
          action: 'Prompt',
          participantName: this.meeting.self.name,
          createdAt: new Date(),
          prompt: this.prompt,
          loading: true,
        },
      ];
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'default', message: this.prompt });
      this.prompt = '';
    };
    this.handleSummarise = () => {
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'summarization' });
    };
    this.handleAgenda = () => {
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'agenda generation' });
    };
    this.handleMoM = () => {
      // this.middlewares?.speech?.sendMessageToChatGPT({ action: 'action items generation' });
    };
    this.prompt = '';
    this.messages = [];
    this.meeting = undefined;
    this.initialMessages = undefined;
  }
  // private handleChatGPTReply(data: AIMessage) {
  //   const existingMessage = this.messages.find((message) =>
  //     data.action === 'default'
  //       ? message.id === data.id
  //       : message.id === data.id || message.action === this.mapMessageAction(data.action)
  //   );
  //
  //   if (
  //     existingMessage &&
  //     (existingMessage.loading || existingMessage.action !== this.mapMessageAction('default'))
  //   ) {
  //     this.messages = [
  //       ...this.messages.map((message) =>
  //         message.id === data.id || message.action === this.mapMessageAction(data.action)
  //           ? { ...data, action: this.mapMessageAction(data.action) }
  //           : message
  //       ),
  //     ];
  //   } else {
  //     this.messages = [...this.messages, { ...data, action: this.mapMessageAction(data.action) }];
  //   }
  // }
  connectedCallback() {
    var _a, _b;
    if (this.initialMessages) {
      this.messages = this.initialMessages.map((message) => (Object.assign(Object.assign({}, message), { action: this.mapMessageAction(message.action) })));
    }
    else {
      /**
       * NOTE: There is a latency in aiClient.aiMessages that's why sometimes
       * initialMessages comes as undefined. This is a really hacky solution
       * to wait for the aiMessages to set. But probably we can refactor this
       * in future.
       */
      if (((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions).transcriptionEnabled) {
        // setTimeout(() => {
        //   this.messages = this.middlewares.speech.aiMesssages?.map((message) => ({
        //     ...message,
        //     action: this.mapMessageAction(message.action),
        //   }));
        // }, 1000);
      }
    }
    // this.middlewares?.speech?.on('chatGPTReply', (data) => this.handleChatGPTReply(data));
  }
  disconnectedCallback() {
    // this.middlewares?.speech?.off('chatGPTReply', (data) => this.handleChatGPTReply(data));
  }
  messagesUpdated() {
    // NOTE: I don't know why initially contentContainer ref is not set, That's
    // why this setTimeout. We can figure a better approach for this
    setTimeout(() => {
      smoothScrollToBottom(this.contentContainer, false);
    }, 100);
  }
  mapMessageAction(action) {
    switch (action) {
      case 'default':
        return 'Prompt';
      case 'summarization':
        return 'Summary';
      case 'agenda generation':
        return 'Agenda';
      case 'action items generation':
        return 'Action items';
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "content scrollbar", ref: (el) => (this.contentContainer = el) }, h("p", { class: "public-message" }, "This conversation will be visible to everyone on the call."), !this.messages.length && (h("div", { class: "hint-message" }, h("p", null, "Ask ", h("i", null, "\"Hey AI, summarise this call\""), h("br", null), " or ", h("br", null), "Type ", h("i", null, "\"Hey AI, what is today's agenda?\"")))), this.messages.length > 0 && (h("div", { class: "" }, this.messages.map((message) => (h("div", { class: "message" }, h(ChatHead, { name: message.action, time: new Date(message.createdAt), now: new Date() }), h("p", { class: "subtitle" }, "Triggered by ", message.participantName), message.prompt && h("div", { class: "prompt-text" }, message.prompt), message.loading ? (h("div", { class: "loader" }, h("dyte-spinner", { size: "sm" }), "\u00A0\u00A0Generating...")) : (h("div", { class: "body" }, message.response)))))))), h("div", { class: "actions" }, h("span", null, "Quick actions:"), h("div", null, h("button", { onClick: this.handleSummarise }, "Summarise"), h("button", { onClick: this.handleAgenda }, "Agenda"), h("button", { onClick: this.handleMoM }, "MoM"))), h("form", { class: "prompt", onSubmit: this.handleSubmit }, h("input", { value: this.prompt, onInput: (e) => {
        this.prompt = e.target.value;
      }, placeholder: "Type your prompt..." }))));
  }
  static get is() { return "dyte-ai-home"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dyte-ai-home.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dyte-ai-home.css"]
    };
  }
  static get properties() {
    return {
      "meeting": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Meeting",
          "resolved": "DyteClient",
          "references": {
            "Meeting": {
              "location": "import",
              "path": "../../types/dyte-client"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Meeting object"
        }
      },
      "initialMessages": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "AIMessage[]",
          "resolved": "AIMessage[]",
          "references": {
            "AIMessage": {
              "location": "import",
              "path": "../../types/dyte-ai"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Initial messages"
        }
      }
    };
  }
  static get states() {
    return {
      "prompt": {},
      "messages": {}
    };
  }
  static get watchers() {
    return [{
        "propName": "messages",
        "methodName": "messagesUpdated"
      }];
  }
}
