import { h, Host } from '@stencil/core';
import { defaultIconPack } from '../../exports';
import { useLanguage } from '../../lib/lang';
import { awsIvsPlayerEventsToIgnore, isIvsPlayerCallStatsEvent, showLivestream, PlayerEventType, PlayerState, } from '../../utils/livestream';
export class DyteLivestreamPlayer {
  constructor() {
    this.showLatencyIndicator = false;
    this.LoadPlayer = (player = this.ivsPlayer) => {
      if (this.player && player) {
        player.attachHTMLVideoElement(this.player);
        player.setAutoplay(true);
        player.setVolume(1);
      }
    };
    this.livestreamUpdateListener = (state) => {
      var _a, _b, _c, _d;
      this.livestreamState = state;
      if (state === 'LIVESTREAMING') {
        this.LoadPlayer();
        this.getPlaybackUrl();
        if (!((_b = (_a = this.meeting.__internals__) === null || _a === void 0 ? void 0 : _a.browserSpecs) === null || _b === void 0 ? void 0 : _b.isIOSMobile())) {
          this.fetchLatency();
          this.updateLatency = setInterval(this.fetchLatency, 2000);
        }
        (_c = this.meeting.participants.pip) === null || _c === void 0 ? void 0 : _c.enableSource('livestream-player');
      }
      else {
        this.showLatencyIndicator = false;
        if (this.updateLatency)
          clearInterval(this.updateLatency);
        (_d = this.meeting.participants.pip) === null || _d === void 0 ? void 0 : _d.disableSource('livestream-player');
      }
    };
    this.getLoadingState = () => {
      let loadingMessage = '';
      let isLoading = false;
      let showIcon = false;
      switch (this.livestreamState) {
        case 'IDLE':
          loadingMessage = this.t('livestream.idle');
          isLoading = true;
          showIcon = false;
          break;
        case 'STARTING':
          loadingMessage = this.t('livestream.starting');
          isLoading = true;
          showIcon = true;
          break;
        case 'STOPPING':
          loadingMessage = this.t('livestream.stopping');
          isLoading = true;
          showIcon = true;
          break;
        case 'LIVESTREAMING':
          if (this.playerState !== PlayerState.PLAYING) {
            loadingMessage = this.t('livestream.starting');
            showIcon = true;
            isLoading = true;
          }
          break;
        default:
          isLoading = false;
          loadingMessage = this.t('');
          showIcon = true;
          break;
      }
      return { isLoading, loadingMessage, showIcon };
    };
    this.getErrorState = () => {
      var _a, _b;
      let isError = false;
      let errorMessage = '';
      if (this.livestreamState !== 'LIVESTREAMING') {
        isError = false;
        errorMessage = this.t('');
        return { isError, errorMessage };
      }
      if (!this.isSupported) {
        isError = true;
        errorMessage = this.t('livestream.error.not_supported');
      }
      if (!this.playbackUrl) {
        isError = true;
        errorMessage = this.t('livestream.error.not_found');
      }
      if (this.playerError) {
        isError = true;
        errorMessage = this.t((_b = (_a = this.playerError) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : 'livestream.error.unknown');
      }
      return { isError, errorMessage };
    };
    this.fetchLatency = () => {
      if (this.ivsPlayer) {
        this.latency = this.ivsPlayer.getLiveLatency();
        this.meeting.__internals__.logger.info('IVS.Player.LivestreamLatency', {
          livestream: {
            latency: this.latency,
          },
        });
      }
    };
    this.meeting = undefined;
    this.size = undefined;
    this.t = useLanguage();
    this.iconPack = defaultIconPack;
    this.playbackUrl = undefined;
    this.isSupported = true;
    this.playerState = PlayerState.IDLE;
    this.livestreamState = 'IDLE';
    this.playerError = undefined;
    this.latency = 0;
    this.audioPlaybackError = false;
  }
  AddPlayerListeners(player = this.ivsPlayer) {
    Object.values(Object.assign(Object.assign({}, PlayerEventType), PlayerState)).forEach((key) => {
      if (awsIvsPlayerEventsToIgnore.includes(key))
        return;
      player === null || player === void 0 ? void 0 : player.addEventListener(key, (event) => {
        var _a, _b, _c;
        if (key === PlayerState.IDLE ||
          key === PlayerState.PLAYING ||
          key === PlayerEventType.ERROR ||
          key === PlayerState.READY)
          this.playerState = key;
        if (key === PlayerEventType.ERROR) {
          this.playerError = event;
        }
        if (key === PlayerState.IDLE && player.isPaused()) {
          player.play();
        }
        if (key === PlayerEventType.AUDIO_BLOCKED) {
          this.audioPlaybackError = true;
        }
        if (this.playerState === PlayerState.PLAYING &&
          !((_b = (_a = this.meeting.__internals__) === null || _a === void 0 ? void 0 : _a.browserSpecs) === null || _b === void 0 ? void 0 : _b.isIOSMobile())) {
          this.showLatencyIndicator = true;
        }
        else
          this.showLatencyIndicator = false;
        this.meeting.__internals__.logger.info(`IVS.Player.${key}`, event);
        // Send selected data to CallStats
        if (isIvsPlayerCallStatsEvent.includes(key)) {
          (_c = this.meeting.__internals__.callStats) === null || _c === void 0 ? void 0 : _c.ivsPlayerEvent(key, event);
        }
      });
    });
  }
  getPlaybackUrl(player = this.ivsPlayer) {
    this.playbackUrl = this.meeting.livestream.playbackUrl;
    if (this.playbackUrl && player) {
      player.load(this.playbackUrl);
      player.play();
    }
  }
  onPlayerRef(el) {
    var _a, _b;
    this.player = el;
    (_a = this.meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.addSource('livestream-player', this.player, this.playbackUrl ? true : false);
    if (this.playbackUrl)
      (_b = this.meeting.participants.pip) === null || _b === void 0 ? void 0 : _b.enableSource('livestream-player');
  }
  // private stopRebuffer = (latency: number) => {
  //   this.ivsPlayer.setRebufferToLive(false);
  //   this.latency = latency;
  //   clearInterval(this.updateLatency);
  //   this.updateLatency = setInterval(this.fetchLatency, 2000);
  // };
  // private resetSyncLivestream = () => {
  //   const latency = this.ivsPlayer.getLiveLatency();
  //   this.stopRebuffer(latency);
  //   this.dyteAPIError.emit({
  //     trace: this.t('livestreamPlayer.rebuffer.error'),
  //     message: this.t('livestream.error.sync'),
  //   });
  // };
  // private syncLiveStream = () => {
  //   clearInterval(this.updateLatency);
  //   // set latency to -1, to show loading icon
  //   this.latency = -1;
  //   this.ivsPlayer.setRebufferToLive(true);
  //   // Reset after 15 seconds
  //   const resetTimeout = setTimeout(this.resetSyncLivestream, 15000);
  //   this.updateLatency = setInterval(() => {
  //     const latency = this.ivsPlayer.getLiveLatency();
  //     if (latency < 10) {
  //       // Stop dropping frames
  //       this.stopRebuffer(latency);
  //       clearTimeout(resetTimeout);
  //     }
  //   }, 1000);
  // };
  connectedCallback() {
    this.meetingChanged(this.meeting);
    window.onDyteLivestreamPlayer = (player) => {
      if (player) {
        this.isSupported = true;
        this.ivsPlayer = player;
        this.AddPlayerListeners(player);
        this.LoadPlayer(player);
        this.getPlaybackUrl(player);
      }
      else
        this.isSupported = false;
    };
    this.sendLatencyToCallStats = setInterval(() => {
      var _a;
      this.fetchLatency();
      (_a = this.meeting.__internals__.callStats) === null || _a === void 0 ? void 0 : _a.livestreamLatency(this.latency);
    }, 10000);
  }
  disconnectedCallback() {
    window.onDyteLivestreamPlayer = undefined;
    this.meeting.livestream.removeListener('livestreamUpdate', this.livestreamUpdateListener);
    clearInterval(this.sendLatencyToCallStats);
    this.ivsPlayer.load('');
    this.ivsPlayer = undefined;
    this.player = undefined;
  }
  async componentDidLoad() {
    const IVSPlayerImport = `
    import IVSPlayer from 'https://cdn.jsdelivr.net/npm/amazon-ivs-player@1.16.0/+esm'
    let player = undefined;
    if (IVSPlayer.isPlayerSupported) {
      player = IVSPlayer.create({
        wasmBinary:
          'https://unpkg.com/amazon-ivs-player@1.11.0/dist/assets/amazon-ivs-wasmworker.min.wasm',
        wasmWorker:
          'https://unpkg.com/amazon-ivs-player@1.11.0/dist/assets/amazon-ivs-wasmworker.min.js',
      });
    }
    window.onDyteLivestreamPlayer && window.onDyteLivestreamPlayer(player);
    `;
    const pScript = document.createElement('script');
    pScript.type = 'module';
    pScript.innerHTML = IVSPlayerImport;
    document.body.appendChild(pScript);
  }
  meetingChanged(meeting) {
    var _a;
    if (meeting == null)
      return;
    this.livestreamState = this.meeting.livestream.state;
    if (this.livestreamState === 'LIVESTREAMING') {
      this.LoadPlayer();
      this.getPlaybackUrl();
      (_a = this.meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.enableSource('livestream-player');
    }
    this.meeting.livestream.on('livestreamUpdate', this.livestreamUpdateListener);
  }
  render() {
    if (!showLivestream(this.meeting))
      return;
    const { isError, errorMessage } = this.getErrorState();
    const { isLoading, loadingMessage, showIcon } = this.getLoadingState();
    return (h(Host, null, h("div", { class: "player-container" }, h("video", { ref: (el) => this.onPlayerRef(el), playsInline: true }), this.audioPlaybackError && (h("div", { class: "unmute-popup" }, h("h3", null, this.t('audio_playback.title')), h("p", null, this.t('audio_playback.description')), h("dyte-button", { kind: "wide", onClick: () => {
        this.player.muted = false;
        this.audioPlaybackError = false;
      }, title: this.t('audio_playback'), iconPack: this.iconPack, t: this.t }, this.t('audio_playback')))), this.livestreamState === 'LIVESTREAMING' && this.showLatencyIndicator && (h("div", { class: "latency-controls" })), isError && (h("div", { class: "loader" }, h("dyte-icon", { icon: this.iconPack.warning, t: this.t }), h("p", null, errorMessage))), !isError && isLoading && (h("div", { class: "loader" }, showIcon && (h("dyte-spinner", { id: "icon", part: "spinner", iconPack: this.iconPack, t: this.t, size: "md" })), h("p", null, loadingMessage))))));
  }
  static get is() { return "dyte-livestream-player"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dyte-livestream-player.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dyte-livestream-player.css"]
    };
  }
  static get properties() {
    return {
      "meeting": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Meeting",
          "resolved": "DyteClient",
          "references": {
            "Meeting": {
              "location": "import",
              "path": "../../types/dyte-client"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Meeting object"
        }
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "Size",
          "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\"",
          "references": {
            "Size": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size"
        },
        "attribute": "size",
        "reflect": true
      },
      "t": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DyteI18n",
          "resolved": "(key: \"pin\" | \"unpin\" | \"kick\" | \"ended\" | \"disconnected\" | (string & {}) | \"about_call\" | \"screen\" | \"camera\" | \"leave\" | \"dismiss\" | \"logo\" | \"page\" | \"more\" | \"page.prev\" | \"page.next\" | \"layout\" | \"layout.auto\" | \"settings\" | \"file\" | \"image\" | \"connection\" | \"leave_confirmation\" | \"cancel\" | \"yes\" | \"you\" | \"to\" | \"mute\" | \"pinned\" | \"pip_on\" | \"pip_off\" | \"viewers\" | \"join\" | \"joined\" | \"create\" | \"close\" | \"ask\" | \"type\" | \"activate\" | \"mic_off\" | \"disable_mic\" | \"mic_on\" | \"enable_mic\" | \"audio\" | \"test\" | \"mute_all\" | \"mute_all.description\" | \"mute_all.header\" | \"mute_all.allow_unmute\" | \"video_off\" | \"disable_video\" | \"video_on\" | \"enable_video\" | \"video\" | \"offline\" | \"offline.description\" | \"disconnected.description\" | \"participants\" | \"participants.errors.empty_results\" | \"participants.empty_list\" | \"participants.turn_off_video\" | \"polls\" | \"polls.by\" | \"polls.question\" | \"polls.question.placeholder\" | \"polls.answers\" | \"polls.option\" | \"polls.option.placeholder\" | \"polls.results.anon\" | \"polls.results.hide\" | \"polls.create\" | \"polls.cancel\" | \"polls.errors.question_required\" | \"polls.errors.empty_option\" | \"screenshare\" | \"screenshare.min_preview\" | \"screenshare.max_preview\" | \"screenshare.shared\" | \"screenshare.start\" | \"screenshare.stop\" | \"screenshare.error.unknown\" | \"screenshare.error.max_count\" | \"plugins\" | \"perm_denied\" | \"perm_denied.audio\" | \"perm_denied.video\" | \"perm_denied.screenshare\" | \"perm_denied.audio.chrome.message\" | \"perm_denied.video.chrome.message\" | \"perm_denied.screenshare.chrome.message\" | \"perm_denied.audio.safari.message\" | \"perm_denied.video.safari.message\" | \"perm_denied.screenshare.safari.message\" | \"perm_denied.audio.edge.message\" | \"perm_denied.video.edge.message\" | \"perm_denied.screenshare.edge.message\" | \"perm_denied.audio.firefox.message\" | \"perm_denied.video.firefox.message\" | \"perm_denied.screenshare.firefox.message\" | \"perm_denied.audio.others.message\" | \"perm_denied.video.others.message\" | \"perm_denied.screenshare.others.message\" | \"perm_sys_denied\" | \"perm_sys_denied.audio\" | \"perm_sys_denied.video\" | \"perm_sys_denied.screenshare\" | \"perm_sys_denied.audio.macos.message\" | \"perm_sys_denied.video.macos.message\" | \"perm_sys_denied.screenshare.macos.message\" | \"perm_sys_denied.audio.ios.message\" | \"perm_sys_denied.video.ios.message\" | \"perm_sys_denied.screenshare.ios.message\" | \"perm_sys_denied.audio.windows.message\" | \"perm_sys_denied.video.windows.message\" | \"perm_sys_denied.screenshare.windows.message\" | \"perm_sys_denied.audio.android.message\" | \"perm_sys_denied.video.android.message\" | \"perm_sys_denied.screenshare.android.message\" | \"perm_sys_denied.audio.others.message\" | \"perm_sys_denied.video.others.message\" | \"perm_sys_denied.screenshare.others.message\" | \"perm_could_not_start\" | \"perm_could_not_start.audio\" | \"perm_could_not_start.video\" | \"perm_could_not_start.screenshare\" | \"perm_could_not_start.audio.message\" | \"perm_could_not_start.video.message\" | \"perm_could_not_start.screenshare.message\" | \"full_screen\" | \"full_screen.exit\" | \"waitlist.header_title\" | \"waitlist.body_text\" | \"waitlist.deny_request\" | \"waitlist.accept_request\" | \"waitlist.accept_all\" | \"stage_request.header_title\" | \"stage_request.deny_request\" | \"stage_request.accept_request\" | \"stage_request.accept_all\" | \"stage_request.deny_all\" | \"stage_request.approval_pending\" | \"stage_request.denied\" | \"stage_request.request\" | \"stage_request.requested\" | \"stage_request.cancel_request\" | \"stage_request.leave_stage\" | \"stage_request.request_tip\" | \"stage_request.leave_tip\" | \"stage_request.pending_tip\" | \"stage_request.denied_tip\" | \"stage.empty_host\" | \"stage.empty_host_summary\" | \"stage.empty_viewer\" | \"stage.remove_from_stage\" | \"stage.invited_notification\" | \"stage.add_to_stage\" | \"stage.join_title\" | \"stage.join_summary\" | \"stage.join_cancel\" | \"stage.join_confirm\" | \"setup_screen.join_in_as\" | \"setup_screen.joining_as\" | \"setup_screen.your_name\" | \"stage.reconnecting\" | \"recording.label\" | \"recording.indicator\" | \"recording.started\" | \"recording.stopped\" | \"recording.paused\" | \"recording.error.start\" | \"recording.error.stop\" | \"recording.error.resume\" | \"recording.start\" | \"recording.stop\" | \"recording.resume\" | \"recording.starting\" | \"recording.stopping\" | \"recording.loading\" | \"recording.idle\" | \"audio_playback\" | \"audio_playback.title\" | \"audio_playback.description\" | \"breakout_rooms\" | \"breakout_rooms.room_config_header\" | \"breakout_rooms.join_breakout_header\" | \"breakout_rooms.empty\" | \"breakout_rooms.delete\" | \"breakout_rooms.switch\" | \"breakout_rooms.main_room\" | \"breakout_rooms.shuffle_participants\" | \"breakout_rooms.deselect\" | \"breakout_rooms.selected\" | \"breakout_rooms.num_of_rooms\" | \"breakout_rooms.approx\" | \"breakout_rooms.participants_per_room\" | \"breakout_rooms.division_text\" | \"breakout_rooms.start_breakout\" | \"breakout_rooms.close_breakout\" | \"breakout_rooms.update_breakout\" | \"breakout_rooms.discard_changes\" | \"breakout_rooms.room\" | \"breakout_rooms.rooms\" | \"breakout_rooms.room_name\" | \"breakout_rooms.edit_room_name\" | \"breakout_rooms.save_room_name\" | \"breakout_rooms.add_room\" | \"breakout_rooms.add_room_brief\" | \"breakout_rooms.select_all\" | \"breakout_rooms.unassign_all\" | \"breakout_rooms.assign\" | \"breakout_rooms.assign_participants\" | \"breakout_rooms.none_assigned\" | \"breakout_rooms.drag_drop_participants\" | \"breakout_rooms.click_drop_participants\" | \"breakout_rooms.status.assign_multiple\" | \"breakout_rooms.status.select_room\" | \"breakout_rooms.ephemeral_status.participants_assigned\" | \"breakout_rooms.ephemeral_status.participants_assigned_randomly\" | \"breakout_rooms.ephemeral_status.changes_discarded\" | \"breakout_rooms.confirm_modal.start_breakout.header\" | \"breakout_rooms.confirm_modal.start_breakout.content\" | \"breakout_rooms.confirm_modal.start_breakout.cancelText\" | \"breakout_rooms.confirm_modal.start_breakout.ctaText\" | \"breakout_rooms.confirm_modal.close_breakout.header\" | \"breakout_rooms.confirm_modal.close_breakout.content\" | \"breakout_rooms.confirm_modal.close_breakout.ctaText\" | \"breakout_rooms.move_reason.started_msg\" | \"breakout_rooms.move_reason.started_desc\" | \"breakout_rooms.move_reason.closed_msg\" | \"breakout_rooms.move_reason.closed_desc\" | \"breakout_rooms.move_reason.switch_room\" | \"breakout_rooms.move_reason.switch_main_room\" | \"breakout_rooms.all_assigned\" | \"breakout_rooms.empty_main_room\" | \"breakout_rooms.leave_confirmation\" | \"breakout_rooms.leave_confirmation.main_room_btn\" | \"ai\" | \"ai.meeting_ai\" | \"ai.home\" | \"ai.transcriptions\" | \"ai.personal\" | \"ai.caption_view\" | \"ai.chat.tooltip\" | \"ai.chat.summerise\" | \"ai.chat.agenda\" | \"search\" | \"search.could_not_find\" | \"search.empty\" | \"end\" | \"end.all\" | \"ended.rejected\" | \"ended.left\" | \"ended.kicked\" | \"ended.disconnected\" | \"ended.network\" | \"network\" | \"network.reconnecting\" | \"network.delay\" | \"network.delay_extended\" | \"network.restored\" | \"network.lost\" | \"network.lost_extended\" | \"network.disconnected\" | \"network.leaving\" | \"livestream\" | \"livestream.indicator\" | \"livestream.skip\" | \"livestream.idle\" | \"livestream.starting\" | \"livestream.stopping\" | \"livestream.error.not_supported\" | \"livestream.error.not_found\" | \"livestream.error.unknown\" | \"livestream.error.sync\" | \"livestream.error.start\" | \"livestream.error.stop\" | \"livestream.go_live\" | \"livestream.end_live\" | \"livestream.error\" | \"cta.help\" | \"cta.continue\" | \"cta.reload\" | \"cta.confirmation\" | \"remote_access.empty\" | \"remote_access.requests\" | \"remote_access.allow\" | \"remote_access.grant\" | \"remote_access.indicator\" | \"chat\" | \"chat.new\" | \"chat.new_channel\" | \"chat.channel_name\" | \"chat.member_name\" | \"chat.add_members\" | \"chat.delete_msg\" | \"chat.edit_msg\" | \"chat.send_msg\" | \"chat.send_attachment\" | \"chat.send_img\" | \"chat.send_file\" | \"chat.send_emoji\" | \"chat.update_msg\" | \"chat.channel_members\" | \"chat.img.loading\" | \"chat.error.img_not_found\" | \"chat.error.empty_results\" | \"chat.img.shared_by\" | \"chat.reply\" | \"chat.message_placeholder\" | \"chat.click_to_send\" | \"chat.search_msgs\" | \"chat.search_conversations\" | \"chat.start_conversation\" | \"chat.empty_search\" | \"chat.empty_channel\" | \"chat.cancel_upload\" | \"chat.view_chats\" | \"chat.everyone\" | \"chat.pinned_msgs\" | \"chat.toggle_pinned_msgs\" | \"date.today\" | \"date.yesteday\" | \"date.sunday\" | \"date.monday\" | \"date.tuesday\" | \"date.wednesday\" | \"date.thursday\" | \"date.friday\" | \"date.saturday\" | \"list.empty\" | \"grid.listening\" | \"transcript.off\" | \"transcript.on\" | \"settings.notification_sound\" | \"settings.microphone_input\" | \"settings.speaker_output\" | \"settings.mirror_video\" | \"settings.camera_off\") => string",
          "references": {
            "DyteI18n": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Language"
        },
        "defaultValue": "useLanguage()"
      },
      "iconPack": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "IconPack",
          "resolved": "{ people: string; people_checked: string; chat: string; poll: string; participants: string; rocket: string; call_end: string; share: string; mic_on: string; mic_off: string; video_on: string; video_off: string; share_screen_start: string; share_screen_stop: string; share_screen_person: string; clock: string; dismiss: string; send: string; search: string; more_vertical: string; chevron_down: string; chevron_up: string; chevron_left: string; chevron_right: string; settings: string; wifi: string; speaker: string; speaker_off: string; download: string; full_screen_maximize: string; full_screen_minimize: string; copy: string; attach: string; image: string; emoji_multiple: string; image_off: string; disconnected: string; wand: string; recording: string; subtract: string; stop_recording: string; warning: string; pin: string; pin_off: string; spinner: string; breakout_rooms: string; add: string; shuffle: string; edit: string; delete: string; back: string; save: string; web: string; checkmark: string; spotlight: string; join_stage: string; leave_stage: string; pip_off: string; pip_on: string; signal_1: string; signal_2: string; signal_3: string; signal_4: string; signal_5: string; start_livestream: string; stop_livestream: string; viewers: string; debug: string; info: string; devices: string; horizontal_dots: string; ai_sparkle: string; meeting_ai: string; create_channel: string; create_channel_illustration: string; captionsOn: string; captionsOff: string; }",
          "references": {
            "IconPack": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon pack"
        },
        "defaultValue": "defaultIconPack"
      }
    };
  }
  static get states() {
    return {
      "playbackUrl": {},
      "isSupported": {},
      "playerState": {},
      "livestreamState": {},
      "playerError": {},
      "latency": {},
      "audioPlaybackError": {}
    };
  }
  static get events() {
    return [{
        "method": "dyteAPIError",
        "name": "dyteAPIError",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emit API error events"
        },
        "complexType": {
          "original": "{\n    trace: string;\n    message: string;\n  }",
          "resolved": "{ trace: string; message: string; }",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "meeting",
        "methodName": "meetingChanged"
      }];
  }
}
