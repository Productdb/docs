import { Host, h } from '@stencil/core';
import { defaultIconPack } from '../../exports';
import { useLanguage } from '../../lib/lang';
import storeState from '../../lib/store';
export class DyteDebuggerAudio {
  constructor() {
    this.blackFramesCount = 0;
    this.meeting = undefined;
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.activeTab = 'Report';
    this.stage = 0;
    this.mediaPermission = 'NOT_REQUESTED';
    this.videoPreview = false;
    this.videoMetadata = {};
    this.videoTrackStats = {
      isBlackFrame: false,
      isFrozenFrame: false,
      timestamp: 0,
      videoScore: 0,
    };
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.updateProgress();
  }
  disconnectedCallback() {
    var _a;
    const { self, troubleshoot } = this.meeting;
    this.videoPreview && this.toggleVideoTest();
    self === null || self === void 0 ? void 0 : self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    (_a = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.video) === null || _a === void 0 ? void 0 : _a.removeListener('videoTrackStats', this.videoTrackUpdateListener);
  }
  async meetingChanged(meeting) {
    var _a, _b;
    if (!meeting)
      return;
    const { self, troubleshoot } = meeting;
    if (self === null || self === void 0 ? void 0 : self.videoTrack) {
      await this.getTrackInfo();
    }
    self === null || self === void 0 ? void 0 : self.on('deviceUpdate', this.deviceUpdateListner.bind(this));
    self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener.bind(this));
    const permission = (_a = self === null || self === void 0 ? void 0 : self.mediaPermissions) === null || _a === void 0 ? void 0 : _a.video;
    this.mediaPermissionUpdateListener({ kind: 'video', message: permission });
    (_b = troubleshoot === null || troubleshoot === void 0 ? void 0 : troubleshoot.video) === null || _b === void 0 ? void 0 : _b.on('videoTrackStats', this.videoTrackUpdateListener.bind(this));
  }
  mediaPermissionUpdateListener({ kind, message }) {
    if (kind !== 'video')
      return;
    this.mediaPermission = message;
    if (this.mediaPermission !== 'ACCEPTED') {
      this.stage = 0;
      this.updateProgress();
      if (this.videoPreview)
        this.toggleVideoTest();
    }
  }
  deviceUpdateListner({ device, preview }) {
    if (preview)
      return;
    if ((device === null || device === void 0 ? void 0 : device.kind) !== 'videoinput')
      return;
    this.getTrackInfo();
  }
  videoTrackUpdateListener(data) {
    this.videoTrackStats = Object.assign(Object.assign({}, data), { videoScore: this.normalizeVideoScore(data === null || data === void 0 ? void 0 : data.videoScore) });
  }
  setActiveTab(state) {
    this.activeTab = state;
    this.updateProgress();
  }
  async toggleVideoTest() {
    var _a, _b;
    this.videoPreview = !this.videoPreview;
    const troubleshooter = (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.troubleshoot) === null || _b === void 0 ? void 0 : _b.video;
    if (this.videoPreview) {
      const track = await (troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.startPreview());
      const stream = new MediaStream();
      if (!track)
        return;
      stream.addTrack(track);
      setTimeout(() => {
        this.videoEl.srcObject = stream;
      }, 500);
      this.getTrackInfo();
      await (troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.startTrackAnalysis());
    }
    else {
      troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.stopPreview();
      troubleshooter === null || troubleshooter === void 0 ? void 0 : troubleshooter.stopTrackAnalysis();
      this.videoEl.srcObject = undefined;
    }
  }
  getTrackInfo() {
    var _a, _b;
    this.videoMetadata = (_b = (_a = this.meeting.troubleshoot) === null || _a === void 0 ? void 0 : _a.video) === null || _b === void 0 ? void 0 : _b.getTrackMetadata();
  }
  getAnalysisStatus() {
    var _a, _b;
    let message = 'All systems are functional.';
    let icon = 'checkmark';
    let style = 'success';
    if ((_a = this.videoTrackStats) === null || _a === void 0 ? void 0 : _a.isBlackFrame) {
      this.blackFramesCount++;
    }
    else {
      this.blackFramesCount = 0;
    }
    if ((_b = this.videoTrackStats) === null || _b === void 0 ? void 0 : _b.isFrozenFrame) {
      message = 'Looks like the video is frozen.';
      icon = 'warning';
      style = 'error';
    }
    if (this.blackFramesCount > 10) {
      message = 'Video is not being processed by the camera.';
      icon = 'warning';
      style = 'error';
    }
    return (h("div", { class: `row status-text ${style}` }, h("dyte-icon", { size: "sm", icon: this.iconPack[icon] }), this.t(message)));
  }
  changeStage(stage) {
    if (this.mediaPermission !== 'ACCEPTED')
      return;
    stage = Math.max(0, stage);
    stage = Math.min(1, stage);
    this.stage = stage;
    this.updateProgress();
    if (this.videoPreview)
      this.toggleVideoTest();
  }
  updateProgress() {
    if (this.activeTab === 'Troubleshoot') {
      this.testProgress.emit(((this.stage + 1) * 100) / 2);
    }
    else
      this.testProgress.emit(0);
  }
  formatLabel(camelCaseLabel) {
    const result = camelCaseLabel.replace(/([A-Z])/g, ' $1');
    return result.charAt(0).toUpperCase() + result.slice(1);
  }
  boolToStr(val) {
    if (val)
      return 'Yes';
    return 'No';
  }
  normalizeVideoScore(val = 0) {
    let max = 1;
    const min = 0;
    if (val > max)
      max = val;
    return Math.max(5, Math.round((val * 10) / (max - min)));
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      states: this.states || storeState,
      iconPack: this.iconPack,
      t: this.t,
      size: this.size,
    };
    return (h(Host, null, h("div", { id: "header" }, ['Report', 'Troubleshoot'].map((section) => (h("dyte-button", { key: section, variant: "ghost", class: { active: this.activeTab === section }, onClick: () => this.setActiveTab(section), iconPack: this.iconPack, t: this.t }, this.t(section))))), this.activeTab === 'Troubleshoot' && (h("div", { class: "tab-body" }, h("div", null, h("div", { class: "stage-indicator" }, "Step ", this.stage + 1, "/2"), this.stage === 0 && (h("dyte-debugger-permissions-ui", Object.assign({}, defaults, { mediaType: "video" }))), this.stage === 1 && (h("div", null, h("div", { class: "title" }, "Camera Test"), h("div", { class: "text" }, this.t('Upon starting the Camera Test, a video preview will be enabled for you.')), h("dyte-button", { size: "md", onClick: () => this.toggleVideoTest() }, this.videoPreview ? 'Stop' : 'Start', " Camera Test"), this.videoPreview && this.videoMetadata && (h("div", { class: "col" }, h("div", { class: "sub-title" }, "Device Information", h("dyte-information-tooltip", { iconPack: this.iconPack }, h("div", { slot: "tootlip-text", class: "tooltip-text" }, Object.keys(this.videoMetadata).map((key) => (h("div", null, this.formatLabel(key), ":", h("span", null, JSON.stringify(this.videoMetadata[key])))))))), h("div", { class: "row" }, h("div", { class: "label" }, h("span", null, this.t('Device Label')), ":"), h("div", { class: "text" }, this.t(this.videoMetadata.label))), h("div", { class: "sub-title" }, "Video & Device Analysis", h("dyte-information-tooltip", { iconPack: this.iconPack }, h("div", { slot: "tootlip-text", class: "tooltip-text" }, h("div", null, "Video Score:", h("span", null, this.videoTrackStats.videoScore, "/10")), h("div", null, "Black Frame Detected:", h("span", null, this.boolToStr(this.videoTrackStats.isBlackFrame))), h("div", null, "Frozen Frame Detected:", h("span", null, this.boolToStr(this.videoTrackStats.isFrozenFrame))), h("div", null, "Time:", h("span", null, new Date(this.videoTrackStats.timestamp).toLocaleTimeString()))))), h("div", { class: "video-container" }, !this.videoPreview && (h("div", { class: "no-video-preview" }, h("dyte-icon", { icon: this.iconPack.video_off, size: "md" }))), h("video", { ref: (el) => (this.videoEl = el), autoPlay: true, playsInline: true, muted: true, class: "video-preview" })), this.getAnalysisStatus()))))), h("div", { class: "stage-manager" }, this.stage > 0 && (h("div", { class: { 'stage-button': true, disabled: this.mediaPermission !== 'ACCEPTED' }, onClick: () => this.changeStage(this.stage - 1) }, h("dyte-icon", { size: "sm", icon: this.iconPack.chevron_left }), "Prev")), this.stage < 1 && (h("div", { class: { 'stage-button': true, disabled: this.mediaPermission !== 'ACCEPTED' }, onClick: () => this.changeStage(this.stage + 1) }, "Next", h("dyte-icon", { size: "sm", icon: this.iconPack.chevron_right })))))), this.activeTab === 'Report' && (h("div", { class: "tab-body" }, h("dyte-debugger-issues-ui", Object.assign({}, defaults, { mediaType: "video" }))))));
  }
  static get is() { return "dyte-debugger-video"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dyte-debugger-video.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dyte-debugger-video.css"]
    };
  }
  static get properties() {
    return {
      "meeting": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Meeting",
          "resolved": "DyteClient",
          "references": {
            "Meeting": {
              "location": "import",
              "path": "../../types/dyte-client"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Meeting object"
        }
      },
      "states": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "States",
          "resolved": "States",
          "references": {
            "States": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "States object"
        }
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "Size",
          "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\"",
          "references": {
            "Size": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size"
        },
        "attribute": "size",
        "reflect": true
      },
      "iconPack": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "IconPack",
          "resolved": "{ people: string; people_checked: string; chat: string; poll: string; participants: string; rocket: string; call_end: string; share: string; mic_on: string; mic_off: string; video_on: string; video_off: string; share_screen_start: string; share_screen_stop: string; share_screen_person: string; clock: string; dismiss: string; send: string; search: string; more_vertical: string; chevron_down: string; chevron_up: string; chevron_left: string; chevron_right: string; settings: string; wifi: string; speaker: string; speaker_off: string; download: string; full_screen_maximize: string; full_screen_minimize: string; copy: string; attach: string; image: string; emoji_multiple: string; image_off: string; disconnected: string; wand: string; recording: string; subtract: string; stop_recording: string; warning: string; pin: string; pin_off: string; spinner: string; breakout_rooms: string; add: string; shuffle: string; edit: string; delete: string; back: string; save: string; web: string; checkmark: string; spotlight: string; join_stage: string; leave_stage: string; pip_off: string; pip_on: string; signal_1: string; signal_2: string; signal_3: string; signal_4: string; signal_5: string; start_livestream: string; stop_livestream: string; viewers: string; debug: string; info: string; devices: string; horizontal_dots: string; ai_sparkle: string; meeting_ai: string; create_channel: string; create_channel_illustration: string; captionsOn: string; captionsOff: string; }",
          "references": {
            "IconPack": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon pack"
        },
        "defaultValue": "defaultIconPack"
      },
      "t": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DyteI18n",
          "resolved": "(key: \"pin\" | \"unpin\" | \"kick\" | \"ended\" | \"disconnected\" | (string & {}) | \"about_call\" | \"screen\" | \"camera\" | \"leave\" | \"dismiss\" | \"logo\" | \"page\" | \"more\" | \"page.prev\" | \"page.next\" | \"layout\" | \"layout.auto\" | \"settings\" | \"file\" | \"image\" | \"connection\" | \"leave_confirmation\" | \"cancel\" | \"yes\" | \"you\" | \"to\" | \"mute\" | \"pinned\" | \"pip_on\" | \"pip_off\" | \"viewers\" | \"join\" | \"joined\" | \"create\" | \"close\" | \"ask\" | \"type\" | \"activate\" | \"mic_off\" | \"disable_mic\" | \"mic_on\" | \"enable_mic\" | \"audio\" | \"test\" | \"mute_all\" | \"mute_all.description\" | \"mute_all.header\" | \"mute_all.allow_unmute\" | \"video_off\" | \"disable_video\" | \"video_on\" | \"enable_video\" | \"video\" | \"offline\" | \"offline.description\" | \"disconnected.description\" | \"participants\" | \"participants.errors.empty_results\" | \"participants.empty_list\" | \"participants.turn_off_video\" | \"polls\" | \"polls.by\" | \"polls.question\" | \"polls.question.placeholder\" | \"polls.answers\" | \"polls.option\" | \"polls.option.placeholder\" | \"polls.results.anon\" | \"polls.results.hide\" | \"polls.create\" | \"polls.cancel\" | \"polls.errors.question_required\" | \"polls.errors.empty_option\" | \"screenshare\" | \"screenshare.min_preview\" | \"screenshare.max_preview\" | \"screenshare.shared\" | \"screenshare.start\" | \"screenshare.stop\" | \"screenshare.error.unknown\" | \"screenshare.error.max_count\" | \"plugins\" | \"perm_denied\" | \"perm_denied.audio\" | \"perm_denied.video\" | \"perm_denied.screenshare\" | \"perm_denied.audio.chrome.message\" | \"perm_denied.video.chrome.message\" | \"perm_denied.screenshare.chrome.message\" | \"perm_denied.audio.safari.message\" | \"perm_denied.video.safari.message\" | \"perm_denied.screenshare.safari.message\" | \"perm_denied.audio.edge.message\" | \"perm_denied.video.edge.message\" | \"perm_denied.screenshare.edge.message\" | \"perm_denied.audio.firefox.message\" | \"perm_denied.video.firefox.message\" | \"perm_denied.screenshare.firefox.message\" | \"perm_denied.audio.others.message\" | \"perm_denied.video.others.message\" | \"perm_denied.screenshare.others.message\" | \"perm_sys_denied\" | \"perm_sys_denied.audio\" | \"perm_sys_denied.video\" | \"perm_sys_denied.screenshare\" | \"perm_sys_denied.audio.macos.message\" | \"perm_sys_denied.video.macos.message\" | \"perm_sys_denied.screenshare.macos.message\" | \"perm_sys_denied.audio.ios.message\" | \"perm_sys_denied.video.ios.message\" | \"perm_sys_denied.screenshare.ios.message\" | \"perm_sys_denied.audio.windows.message\" | \"perm_sys_denied.video.windows.message\" | \"perm_sys_denied.screenshare.windows.message\" | \"perm_sys_denied.audio.android.message\" | \"perm_sys_denied.video.android.message\" | \"perm_sys_denied.screenshare.android.message\" | \"perm_sys_denied.audio.others.message\" | \"perm_sys_denied.video.others.message\" | \"perm_sys_denied.screenshare.others.message\" | \"perm_could_not_start\" | \"perm_could_not_start.audio\" | \"perm_could_not_start.video\" | \"perm_could_not_start.screenshare\" | \"perm_could_not_start.audio.message\" | \"perm_could_not_start.video.message\" | \"perm_could_not_start.screenshare.message\" | \"full_screen\" | \"full_screen.exit\" | \"waitlist.header_title\" | \"waitlist.body_text\" | \"waitlist.deny_request\" | \"waitlist.accept_request\" | \"waitlist.accept_all\" | \"stage_request.header_title\" | \"stage_request.deny_request\" | \"stage_request.accept_request\" | \"stage_request.accept_all\" | \"stage_request.deny_all\" | \"stage_request.approval_pending\" | \"stage_request.denied\" | \"stage_request.request\" | \"stage_request.requested\" | \"stage_request.cancel_request\" | \"stage_request.leave_stage\" | \"stage_request.request_tip\" | \"stage_request.leave_tip\" | \"stage_request.pending_tip\" | \"stage_request.denied_tip\" | \"stage.empty_host\" | \"stage.empty_host_summary\" | \"stage.empty_viewer\" | \"stage.remove_from_stage\" | \"stage.invited_notification\" | \"stage.add_to_stage\" | \"stage.join_title\" | \"stage.join_summary\" | \"stage.join_cancel\" | \"stage.join_confirm\" | \"setup_screen.join_in_as\" | \"setup_screen.joining_as\" | \"setup_screen.your_name\" | \"stage.reconnecting\" | \"recording.label\" | \"recording.indicator\" | \"recording.started\" | \"recording.stopped\" | \"recording.paused\" | \"recording.error.start\" | \"recording.error.stop\" | \"recording.error.resume\" | \"recording.start\" | \"recording.stop\" | \"recording.resume\" | \"recording.starting\" | \"recording.stopping\" | \"recording.loading\" | \"recording.idle\" | \"audio_playback\" | \"audio_playback.title\" | \"audio_playback.description\" | \"breakout_rooms\" | \"breakout_rooms.room_config_header\" | \"breakout_rooms.join_breakout_header\" | \"breakout_rooms.empty\" | \"breakout_rooms.delete\" | \"breakout_rooms.switch\" | \"breakout_rooms.main_room\" | \"breakout_rooms.shuffle_participants\" | \"breakout_rooms.deselect\" | \"breakout_rooms.selected\" | \"breakout_rooms.num_of_rooms\" | \"breakout_rooms.approx\" | \"breakout_rooms.participants_per_room\" | \"breakout_rooms.division_text\" | \"breakout_rooms.start_breakout\" | \"breakout_rooms.close_breakout\" | \"breakout_rooms.update_breakout\" | \"breakout_rooms.discard_changes\" | \"breakout_rooms.room\" | \"breakout_rooms.rooms\" | \"breakout_rooms.room_name\" | \"breakout_rooms.edit_room_name\" | \"breakout_rooms.save_room_name\" | \"breakout_rooms.add_room\" | \"breakout_rooms.add_room_brief\" | \"breakout_rooms.select_all\" | \"breakout_rooms.unassign_all\" | \"breakout_rooms.assign\" | \"breakout_rooms.assign_participants\" | \"breakout_rooms.none_assigned\" | \"breakout_rooms.drag_drop_participants\" | \"breakout_rooms.click_drop_participants\" | \"breakout_rooms.status.assign_multiple\" | \"breakout_rooms.status.select_room\" | \"breakout_rooms.ephemeral_status.participants_assigned\" | \"breakout_rooms.ephemeral_status.participants_assigned_randomly\" | \"breakout_rooms.ephemeral_status.changes_discarded\" | \"breakout_rooms.confirm_modal.start_breakout.header\" | \"breakout_rooms.confirm_modal.start_breakout.content\" | \"breakout_rooms.confirm_modal.start_breakout.cancelText\" | \"breakout_rooms.confirm_modal.start_breakout.ctaText\" | \"breakout_rooms.confirm_modal.close_breakout.header\" | \"breakout_rooms.confirm_modal.close_breakout.content\" | \"breakout_rooms.confirm_modal.close_breakout.ctaText\" | \"breakout_rooms.move_reason.started_msg\" | \"breakout_rooms.move_reason.started_desc\" | \"breakout_rooms.move_reason.closed_msg\" | \"breakout_rooms.move_reason.closed_desc\" | \"breakout_rooms.move_reason.switch_room\" | \"breakout_rooms.move_reason.switch_main_room\" | \"breakout_rooms.all_assigned\" | \"breakout_rooms.empty_main_room\" | \"breakout_rooms.leave_confirmation\" | \"breakout_rooms.leave_confirmation.main_room_btn\" | \"ai\" | \"ai.meeting_ai\" | \"ai.home\" | \"ai.transcriptions\" | \"ai.personal\" | \"ai.caption_view\" | \"ai.chat.tooltip\" | \"ai.chat.summerise\" | \"ai.chat.agenda\" | \"search\" | \"search.could_not_find\" | \"search.empty\" | \"end\" | \"end.all\" | \"ended.rejected\" | \"ended.left\" | \"ended.kicked\" | \"ended.disconnected\" | \"ended.network\" | \"network\" | \"network.reconnecting\" | \"network.delay\" | \"network.delay_extended\" | \"network.restored\" | \"network.lost\" | \"network.lost_extended\" | \"network.disconnected\" | \"network.leaving\" | \"livestream\" | \"livestream.indicator\" | \"livestream.skip\" | \"livestream.idle\" | \"livestream.starting\" | \"livestream.stopping\" | \"livestream.error.not_supported\" | \"livestream.error.not_found\" | \"livestream.error.unknown\" | \"livestream.error.sync\" | \"livestream.error.start\" | \"livestream.error.stop\" | \"livestream.go_live\" | \"livestream.end_live\" | \"livestream.error\" | \"cta.help\" | \"cta.continue\" | \"cta.reload\" | \"cta.confirmation\" | \"remote_access.empty\" | \"remote_access.requests\" | \"remote_access.allow\" | \"remote_access.grant\" | \"remote_access.indicator\" | \"chat\" | \"chat.new\" | \"chat.new_channel\" | \"chat.channel_name\" | \"chat.member_name\" | \"chat.add_members\" | \"chat.delete_msg\" | \"chat.edit_msg\" | \"chat.send_msg\" | \"chat.send_attachment\" | \"chat.send_img\" | \"chat.send_file\" | \"chat.send_emoji\" | \"chat.update_msg\" | \"chat.channel_members\" | \"chat.img.loading\" | \"chat.error.img_not_found\" | \"chat.error.empty_results\" | \"chat.img.shared_by\" | \"chat.reply\" | \"chat.message_placeholder\" | \"chat.click_to_send\" | \"chat.search_msgs\" | \"chat.search_conversations\" | \"chat.start_conversation\" | \"chat.empty_search\" | \"chat.empty_channel\" | \"chat.cancel_upload\" | \"chat.view_chats\" | \"chat.everyone\" | \"chat.pinned_msgs\" | \"chat.toggle_pinned_msgs\" | \"date.today\" | \"date.yesteday\" | \"date.sunday\" | \"date.monday\" | \"date.tuesday\" | \"date.wednesday\" | \"date.thursday\" | \"date.friday\" | \"date.saturday\" | \"list.empty\" | \"grid.listening\" | \"transcript.off\" | \"transcript.on\" | \"settings.notification_sound\" | \"settings.microphone_input\" | \"settings.speaker_output\" | \"settings.mirror_video\" | \"settings.camera_off\") => string",
          "references": {
            "DyteI18n": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Language"
        },
        "defaultValue": "useLanguage()"
      }
    };
  }
  static get states() {
    return {
      "activeTab": {},
      "stage": {},
      "mediaPermission": {},
      "videoPreview": {},
      "videoMetadata": {},
      "videoTrackStats": {}
    };
  }
  static get events() {
    return [{
        "method": "testProgress",
        "name": "testProgress",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Test Progress Event"
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "meeting",
        "methodName": "meetingChanged"
      }];
  }
}
