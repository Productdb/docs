import { Host, h, writeTask, } from '@stencil/core';
import { defaultIconPack } from '../../exports';
import { useLanguage } from '../../lib/lang';
import { handleFilesDataTransfer, reverse, replyBlockPattern, extractReplyBlock, stripOutReplyBlock, MAX_TEXT_LENGTH, } from '../../utils/chat';
import gracefulStorage from '../../utils/graceful-storage';
const MENTION_CHAR = '@';
export class DyteChatComposerUi {
  constructor() {
    this.fileReader = new FileReader();
    this.fileToUpload = null;
    this.handleKeyDown = (e) => {
      if (e.key === MENTION_CHAR && [undefined, ' '].includes(this.$textArea.value.at(-1))) {
        // [undefined, ' '] checks if mention is start of text or start of new word
        this.mentionQuery = MENTION_CHAR;
      }
      if (e.key === 'ArrowDown') {
        this.focusedMemberIndex = Math.min(this.focusedMemberIndex + 1, this.getFilteredMembers().length - 1);
      }
      if (e.key === 'ArrowUp') {
        this.focusedMemberIndex = Math.max(0, this.focusedMemberIndex - 1);
      }
      if (e.key === 'Escape' || (e.key === 'Backspace' && this.mentionQuery === MENTION_CHAR)) {
        this.mentionQuery = '';
      }
      if (['Enter', 'Tab', ' '].includes(e.key) && this.mentionQuery !== '') {
        const member = this.getFilteredMembers()[this.focusedMemberIndex];
        this.onMemberSelect(member);
        e.preventDefault();
        return;
      }
      // slack like typing experience
      if (e.key === 'Enter' && e.shiftKey) {
        const height = this.$textArea.clientHeight;
        if (height < 200) {
          this.$textArea.style.height = this.$textArea.clientHeight + 20 + 'px';
        }
      }
      else if (e.key === 'Enter') {
        e.preventDefault();
        if (this.prefill.editMessage) {
          this.handleEditMessage();
        }
        else {
          this.handleSendMessage();
        }
      }
      else if (e.key === 'Backspace') {
        if (this.$textArea.value.endsWith('\n')) {
          this.$textArea.style.height = this.$textArea.clientHeight - 20 + 'px';
        }
        else if (this.$textArea.value === '') {
          this.$textArea.style.height = 'auto';
        }
      }
    };
    this.handleKeyUp = (_e) => {
      if (this.mentionQuery !== '') {
        const reversed = reverse(this.$textArea.value.trim());
        const query = reversed.substring(0, reversed.indexOf(MENTION_CHAR));
        this.mentionQuery = `${MENTION_CHAR}${reverse(query)}`;
      }
    };
    this.onPaste = (e) => {
      const data = e.clipboardData || e.originalEvent.clipboardData;
      writeTask(() => {
        if (data && data.items && data.items.length > 0) {
          handleFilesDataTransfer(data.items, this.generateFilePreview);
          this.$textArea.value = '';
        }
      });
    };
    this.generateFilePreview = (type, file) => {
      this.fileToUpload = { type, image: file, file };
      if (type === 'image') {
        this.fileReader.readAsDataURL(file);
      }
      else if (type === 'file') {
        this.filePreview = file.name;
      }
    };
    this.sendFile = () => {
      if (!this.canSendFiles) {
        return;
      }
      if (this.fileToUpload.type === 'image') {
        this.onNewMessage.emit({
          type: 'image',
          file: this.fileToUpload.image,
          image: this.fileToUpload.image,
        });
      }
      else {
        this.onNewMessage.emit({ type: 'file', file: this.fileToUpload.file });
      }
      this.cleanUpFileUpload();
    };
    this.handleSendMessage = () => {
      if (!this.canSendTextMessage) {
        return;
      }
      if (this.fileToUpload !== null) {
        this.sendFile();
        return;
      }
      const message = this.$textArea.value.trim();
      if (message.length > 0) {
        if (this.prefill.replyMessage) {
          this.onNewMessage.emit({
            type: 'text',
            message,
            replyTo: this.prefill.replyMessage,
          });
        }
        else {
          this.onNewMessage.emit({ type: 'text', message });
        }
        this.cleanup();
      }
    };
    this.cleanup = () => {
      this.mentionQuery = '';
      this.focusedMemberIndex = 0;
      this.$textArea.value = '';
      this.$textArea.style.height = 'auto';
      gracefulStorage.setItem(this.storageKey, '');
    };
    this.handleEditMessage = () => {
      var _a;
      let editedMessage = this.$textArea.value.trim();
      if (((_a = this.prefill.editMessage) === null || _a === void 0 ? void 0 : _a.message) &&
        replyBlockPattern.test(this.prefill.editMessage.message)) {
        // add back the reply block which we stripped out for editing
        const replyBlock = extractReplyBlock(this.prefill.editMessage.message);
        editedMessage = `${replyBlock}\n\n${editedMessage}`;
      }
      this.onEditMessage.emit({
        id: this.prefill.editMessage.id,
        message: editedMessage,
        channelId: this.prefill.editMessage.channelId,
      });
      this.cleanup();
    };
    this.handleEditCancel = () => {
      this.onEditCancelled.emit();
      this.cleanup();
    };
    this.initializeTextField = (el) => {
      this.$textArea = el;
      const message = gracefulStorage.getItem(this.storageKey) || '';
      this.$textArea.value = message;
    };
    this.onMemberSelect = (member) => {
      const reversedQuery = reverse(this.mentionQuery);
      const reversed = reverse(this.$textArea.value.trim()).replace(reversedQuery, '');
      this.$textArea.value = reverse(reversed) + `${MENTION_CHAR}${member.name} `;
      this.mentionQuery = '';
      this.focusedMemberIndex = 0;
      writeTask(() => this.$textArea.focus());
    };
    this.getFilteredMembers = () => {
      const query = this.mentionQuery.replace(MENTION_CHAR, '');
      return this.members.filter((member) => member.name.toLowerCase().includes(query.toLowerCase()));
    };
    this.cleanUpFileUpload = () => {
      this.filePreview = null;
      this.fileToUpload = null;
    };
    this.renderSuggestedReplies = () => {
      if (!this.prefill.suggestedReplies)
        return;
      if (this.prefill.suggestedReplies.length === 0)
        return;
      return (h("ul", { class: "suggested-replies scrollbar" }, this.prefill.suggestedReplies.map((reply) => (h("dyte-tooltip", { label: this.t('chat.click_to_send') }, h("li", { onClick: () => this.onNewMessage.emit({ type: 'text', message: reply }) }, reply))))));
    };
    this.renderMenu = () => {
      if (this.mentionQuery.length === 0)
        return;
      const filteredMembers = this.getFilteredMembers();
      if (filteredMembers.length === 0)
        return;
      return (h("ul", { class: "member-list scrollbar" }, filteredMembers.map((member, index) => (h("li", { class: { member: true, selected: index === this.focusedMemberIndex }, onClick: () => this.onMemberSelect(member), ref: ($li) => {
          if (index === this.focusedMemberIndex) {
            writeTask(() => {
              if ($li)
                $li.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'nearest' });
            });
          }
        } }, h("dyte-avatar", { participant: {
          name: member.name,
          picture: member.picture,
        }, size: "sm" }), h("span", null, member.name))))));
    };
    this.canSendTextMessage = false;
    this.canSendFiles = false;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.disableEmojiPicker = false;
    this.prefill = {};
    this.members = [];
    this.channelId = undefined;
    this.emojiPickerActive = false;
    this.mentionQuery = '';
    this.focusedMemberIndex = 0;
    this.filePreview = null;
  }
  connectedCallback() {
    this.fileReader.onload = (e) => {
      if (typeof e.target.result === 'string') {
        this.filePreview = e.target.result;
      }
    };
    // this.fileReader.onloadstart = () => {};
    // this.fileReader.onloadend = () => {};
  }
  onChannelChanged() {
    this.mentionQuery = '';
    this.focusedMemberIndex = 0;
    const message = gracefulStorage.getItem(this.storageKey) || '';
    this.$textArea.value = message;
    this.emojiPickerActive = false;
  }
  componentDidRender() {
    if (this.prefill.editMessage || this.prefill.replyMessage) {
      writeTask(() => this.$textArea.focus());
    }
  }
  get storageKey() {
    if (this.channelId) {
      return `dyte-text-message-${this.channelId}`;
    }
    return 'dyte-text-message';
  }
  uploadFile(type) {
    const input = document.createElement('input');
    input.type = 'file';
    if (type === 'image') {
      input.accept = 'image/*';
    }
    input.onchange = (e) => {
      const { validity, files: [file], } = e.target;
      if (validity.valid) {
        this.generateFilePreview(type, file);
      }
    };
    input.click();
  }
  renderFilePreview() {
    if (typeof this.filePreview !== 'string')
      return;
    return (h("div", { class: "preview-overlay" }, h("div", { class: "file-preview" }, h("dyte-tooltip", { label: this.t('chat.cancel_upload') }, h("dyte-button", { variant: "secondary", kind: "icon", onClick: this.cleanUpFileUpload }, h("dyte-icon", { icon: this.iconPack.dismiss }))), this.fileToUpload.type === 'image' ? (h("img", { class: "preview-image", src: this.filePreview })) : (h("div", { class: "preview-file" }, h("span", null, this.filePreview))))));
  }
  render() {
    var _a;
    const uiProps = { iconPack: this.iconPack, t: this.t, size: this.size };
    let defaultValue = '';
    if ((_a = this.prefill.editMessage) === null || _a === void 0 ? void 0 : _a.message) {
      defaultValue = stripOutReplyBlock(this.prefill.editMessage.message);
    }
    return (h(Host, null, this.canSendTextMessage && this.emojiPickerActive && (h("dyte-emoji-picker", { part: "emoji-picker", onPickerClose: () => {
        this.emojiPickerActive = false;
      }, onDyteEmojiClicked: (e) => {
        this.$textArea.value += e.detail;
        this.$textArea.focus();
      }, t: this.t })), this.renderSuggestedReplies(), h("slot", { name: "chat-addon" }), h("slot", { name: "quote-block" }), h("div", { class: "chat-input", part: "chat-input" }, this.renderMenu(), this.canSendTextMessage && (h("textarea", { class: "scrollbar", part: "textarea", ref: this.initializeTextField, autoFocus: true, placeholder: this.fileToUpload ? '' : this.t('chat.message_placeholder'), value: defaultValue, onPaste: this.onPaste, maxLength: MAX_TEXT_LENGTH, onKeyDown: this.handleKeyDown, onKeyUp: this.handleKeyUp, onInput: (e) => {
        gracefulStorage.setItem(this.storageKey, e.target.value);
      }, disabled: !!this.filePreview })), h("div", { class: "chat-buttons", part: "chat-buttons" }, h("div", { class: "left", part: "chat-buttons-left" }, !this.prefill.editMessage &&
      this.canSendFiles && [
      h("dyte-tooltip", Object.assign({ label: this.t('chat.send_file') }, uiProps), h("dyte-button", { variant: "ghost", kind: "icon", onClick: () => this.uploadFile('file'), title: this.t('chat.send_file'), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.attach }))),
      h("dyte-tooltip", Object.assign({ label: this.t('chat.send_img') }, uiProps), h("dyte-button", { variant: "ghost", kind: "icon", onClick: () => this.uploadFile('image'), title: this.t('chat.send_img'), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.image }))),
    ], !this.prefill.editMessage && this.canSendTextMessage && !this.disableEmojiPicker && (h("dyte-tooltip", Object.assign({ label: this.t('chat.send_emoji') }, uiProps), h("dyte-button", { variant: "ghost", kind: "icon", class: { active: this.emojiPickerActive }, title: this.t('chat.send_emoji'), iconPack: this.iconPack, t: this.t, onClick: () => {
        this.emojiPickerActive = !this.emojiPickerActive;
      } }, h("dyte-icon", { icon: this.iconPack.emoji_multiple }))))), !!this.filePreview && this.renderFilePreview(), this.canSendTextMessage && (h("div", { class: "right", part: "chat-buttons-right" }, !this.prefill.editMessage && (h("dyte-tooltip", Object.assign({ variant: "primary", label: this.t('chat.send_msg'), delay: 2000 }, uiProps), h("dyte-button", { kind: "icon", onClick: () => this.handleSendMessage(), title: this.t('chat.send_msg'), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.send })))), this.prefill.editMessage && (h("div", { class: "edit-buttons" }, h("dyte-tooltip", Object.assign({ variant: "secondary", label: this.t('cancel'), delay: 2000 }, uiProps), h("dyte-button", { kind: "icon", variant: "secondary", onClick: () => this.handleEditCancel(), title: this.t('cancel'), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.dismiss }))), h("dyte-tooltip", Object.assign({ variant: "primary", label: this.t('chat.update_msg'), delay: 2000 }, uiProps), h("dyte-button", { kind: "icon", onClick: () => this.handleEditMessage(), title: this.t('chat.send_msg'), iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.iconPack.checkmark })))))))))));
  }
  static get is() { return "dyte-chat-composer-ui"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dyte-chat-composer-ui.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dyte-chat-composer-ui.css"]
    };
  }
  static get properties() {
    return {
      "canSendTextMessage": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether user can send text messages"
        },
        "attribute": "can-send-text-message",
        "reflect": false,
        "defaultValue": "false"
      },
      "canSendFiles": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether user can send file messages"
        },
        "attribute": "can-send-files",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "Size",
          "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\"",
          "references": {
            "Size": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size"
        },
        "attribute": "size",
        "reflect": true
      },
      "iconPack": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "IconPack",
          "resolved": "{ people: string; people_checked: string; chat: string; poll: string; participants: string; rocket: string; call_end: string; share: string; mic_on: string; mic_off: string; video_on: string; video_off: string; share_screen_start: string; share_screen_stop: string; share_screen_person: string; clock: string; dismiss: string; send: string; search: string; more_vertical: string; chevron_down: string; chevron_up: string; chevron_left: string; chevron_right: string; settings: string; wifi: string; speaker: string; speaker_off: string; download: string; full_screen_maximize: string; full_screen_minimize: string; copy: string; attach: string; image: string; emoji_multiple: string; image_off: string; disconnected: string; wand: string; recording: string; subtract: string; stop_recording: string; warning: string; pin: string; pin_off: string; spinner: string; breakout_rooms: string; add: string; shuffle: string; edit: string; delete: string; back: string; save: string; web: string; checkmark: string; spotlight: string; join_stage: string; leave_stage: string; pip_off: string; pip_on: string; signal_1: string; signal_2: string; signal_3: string; signal_4: string; signal_5: string; start_livestream: string; stop_livestream: string; viewers: string; debug: string; info: string; devices: string; horizontal_dots: string; ai_sparkle: string; meeting_ai: string; create_channel: string; create_channel_illustration: string; captionsOn: string; captionsOff: string; }",
          "references": {
            "IconPack": {
              "location": "import",
              "path": "../../exports"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon pack"
        },
        "defaultValue": "defaultIconPack"
      },
      "t": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DyteI18n",
          "resolved": "(key: \"pin\" | \"unpin\" | \"kick\" | \"ended\" | \"disconnected\" | (string & {}) | \"about_call\" | \"screen\" | \"camera\" | \"leave\" | \"dismiss\" | \"logo\" | \"page\" | \"more\" | \"page.prev\" | \"page.next\" | \"layout\" | \"layout.auto\" | \"settings\" | \"file\" | \"image\" | \"connection\" | \"leave_confirmation\" | \"cancel\" | \"yes\" | \"you\" | \"to\" | \"mute\" | \"pinned\" | \"pip_on\" | \"pip_off\" | \"viewers\" | \"join\" | \"joined\" | \"create\" | \"close\" | \"ask\" | \"type\" | \"activate\" | \"mic_off\" | \"disable_mic\" | \"mic_on\" | \"enable_mic\" | \"audio\" | \"test\" | \"mute_all\" | \"mute_all.description\" | \"mute_all.header\" | \"mute_all.allow_unmute\" | \"video_off\" | \"disable_video\" | \"video_on\" | \"enable_video\" | \"video\" | \"offline\" | \"offline.description\" | \"disconnected.description\" | \"participants\" | \"participants.errors.empty_results\" | \"participants.empty_list\" | \"participants.turn_off_video\" | \"polls\" | \"polls.by\" | \"polls.question\" | \"polls.question.placeholder\" | \"polls.answers\" | \"polls.option\" | \"polls.option.placeholder\" | \"polls.results.anon\" | \"polls.results.hide\" | \"polls.create\" | \"polls.cancel\" | \"polls.errors.question_required\" | \"polls.errors.empty_option\" | \"screenshare\" | \"screenshare.min_preview\" | \"screenshare.max_preview\" | \"screenshare.shared\" | \"screenshare.start\" | \"screenshare.stop\" | \"screenshare.error.unknown\" | \"screenshare.error.max_count\" | \"plugins\" | \"perm_denied\" | \"perm_denied.audio\" | \"perm_denied.video\" | \"perm_denied.screenshare\" | \"perm_denied.audio.chrome.message\" | \"perm_denied.video.chrome.message\" | \"perm_denied.screenshare.chrome.message\" | \"perm_denied.audio.safari.message\" | \"perm_denied.video.safari.message\" | \"perm_denied.screenshare.safari.message\" | \"perm_denied.audio.edge.message\" | \"perm_denied.video.edge.message\" | \"perm_denied.screenshare.edge.message\" | \"perm_denied.audio.firefox.message\" | \"perm_denied.video.firefox.message\" | \"perm_denied.screenshare.firefox.message\" | \"perm_denied.audio.others.message\" | \"perm_denied.video.others.message\" | \"perm_denied.screenshare.others.message\" | \"perm_sys_denied\" | \"perm_sys_denied.audio\" | \"perm_sys_denied.video\" | \"perm_sys_denied.screenshare\" | \"perm_sys_denied.audio.macos.message\" | \"perm_sys_denied.video.macos.message\" | \"perm_sys_denied.screenshare.macos.message\" | \"perm_sys_denied.audio.ios.message\" | \"perm_sys_denied.video.ios.message\" | \"perm_sys_denied.screenshare.ios.message\" | \"perm_sys_denied.audio.windows.message\" | \"perm_sys_denied.video.windows.message\" | \"perm_sys_denied.screenshare.windows.message\" | \"perm_sys_denied.audio.android.message\" | \"perm_sys_denied.video.android.message\" | \"perm_sys_denied.screenshare.android.message\" | \"perm_sys_denied.audio.others.message\" | \"perm_sys_denied.video.others.message\" | \"perm_sys_denied.screenshare.others.message\" | \"perm_could_not_start\" | \"perm_could_not_start.audio\" | \"perm_could_not_start.video\" | \"perm_could_not_start.screenshare\" | \"perm_could_not_start.audio.message\" | \"perm_could_not_start.video.message\" | \"perm_could_not_start.screenshare.message\" | \"full_screen\" | \"full_screen.exit\" | \"waitlist.header_title\" | \"waitlist.body_text\" | \"waitlist.deny_request\" | \"waitlist.accept_request\" | \"waitlist.accept_all\" | \"stage_request.header_title\" | \"stage_request.deny_request\" | \"stage_request.accept_request\" | \"stage_request.accept_all\" | \"stage_request.deny_all\" | \"stage_request.approval_pending\" | \"stage_request.denied\" | \"stage_request.request\" | \"stage_request.requested\" | \"stage_request.cancel_request\" | \"stage_request.leave_stage\" | \"stage_request.request_tip\" | \"stage_request.leave_tip\" | \"stage_request.pending_tip\" | \"stage_request.denied_tip\" | \"stage.empty_host\" | \"stage.empty_host_summary\" | \"stage.empty_viewer\" | \"stage.remove_from_stage\" | \"stage.invited_notification\" | \"stage.add_to_stage\" | \"stage.join_title\" | \"stage.join_summary\" | \"stage.join_cancel\" | \"stage.join_confirm\" | \"setup_screen.join_in_as\" | \"setup_screen.joining_as\" | \"setup_screen.your_name\" | \"stage.reconnecting\" | \"recording.label\" | \"recording.indicator\" | \"recording.started\" | \"recording.stopped\" | \"recording.paused\" | \"recording.error.start\" | \"recording.error.stop\" | \"recording.error.resume\" | \"recording.start\" | \"recording.stop\" | \"recording.resume\" | \"recording.starting\" | \"recording.stopping\" | \"recording.loading\" | \"recording.idle\" | \"audio_playback\" | \"audio_playback.title\" | \"audio_playback.description\" | \"breakout_rooms\" | \"breakout_rooms.room_config_header\" | \"breakout_rooms.join_breakout_header\" | \"breakout_rooms.empty\" | \"breakout_rooms.delete\" | \"breakout_rooms.switch\" | \"breakout_rooms.main_room\" | \"breakout_rooms.shuffle_participants\" | \"breakout_rooms.deselect\" | \"breakout_rooms.selected\" | \"breakout_rooms.num_of_rooms\" | \"breakout_rooms.approx\" | \"breakout_rooms.participants_per_room\" | \"breakout_rooms.division_text\" | \"breakout_rooms.start_breakout\" | \"breakout_rooms.close_breakout\" | \"breakout_rooms.update_breakout\" | \"breakout_rooms.discard_changes\" | \"breakout_rooms.room\" | \"breakout_rooms.rooms\" | \"breakout_rooms.room_name\" | \"breakout_rooms.edit_room_name\" | \"breakout_rooms.save_room_name\" | \"breakout_rooms.add_room\" | \"breakout_rooms.add_room_brief\" | \"breakout_rooms.select_all\" | \"breakout_rooms.unassign_all\" | \"breakout_rooms.assign\" | \"breakout_rooms.assign_participants\" | \"breakout_rooms.none_assigned\" | \"breakout_rooms.drag_drop_participants\" | \"breakout_rooms.click_drop_participants\" | \"breakout_rooms.status.assign_multiple\" | \"breakout_rooms.status.select_room\" | \"breakout_rooms.ephemeral_status.participants_assigned\" | \"breakout_rooms.ephemeral_status.participants_assigned_randomly\" | \"breakout_rooms.ephemeral_status.changes_discarded\" | \"breakout_rooms.confirm_modal.start_breakout.header\" | \"breakout_rooms.confirm_modal.start_breakout.content\" | \"breakout_rooms.confirm_modal.start_breakout.cancelText\" | \"breakout_rooms.confirm_modal.start_breakout.ctaText\" | \"breakout_rooms.confirm_modal.close_breakout.header\" | \"breakout_rooms.confirm_modal.close_breakout.content\" | \"breakout_rooms.confirm_modal.close_breakout.ctaText\" | \"breakout_rooms.move_reason.started_msg\" | \"breakout_rooms.move_reason.started_desc\" | \"breakout_rooms.move_reason.closed_msg\" | \"breakout_rooms.move_reason.closed_desc\" | \"breakout_rooms.move_reason.switch_room\" | \"breakout_rooms.move_reason.switch_main_room\" | \"breakout_rooms.all_assigned\" | \"breakout_rooms.empty_main_room\" | \"breakout_rooms.leave_confirmation\" | \"breakout_rooms.leave_confirmation.main_room_btn\" | \"ai\" | \"ai.meeting_ai\" | \"ai.home\" | \"ai.transcriptions\" | \"ai.personal\" | \"ai.caption_view\" | \"ai.chat.tooltip\" | \"ai.chat.summerise\" | \"ai.chat.agenda\" | \"search\" | \"search.could_not_find\" | \"search.empty\" | \"end\" | \"end.all\" | \"ended.rejected\" | \"ended.left\" | \"ended.kicked\" | \"ended.disconnected\" | \"ended.network\" | \"network\" | \"network.reconnecting\" | \"network.delay\" | \"network.delay_extended\" | \"network.restored\" | \"network.lost\" | \"network.lost_extended\" | \"network.disconnected\" | \"network.leaving\" | \"livestream\" | \"livestream.indicator\" | \"livestream.skip\" | \"livestream.idle\" | \"livestream.starting\" | \"livestream.stopping\" | \"livestream.error.not_supported\" | \"livestream.error.not_found\" | \"livestream.error.unknown\" | \"livestream.error.sync\" | \"livestream.error.start\" | \"livestream.error.stop\" | \"livestream.go_live\" | \"livestream.end_live\" | \"livestream.error\" | \"cta.help\" | \"cta.continue\" | \"cta.reload\" | \"cta.confirmation\" | \"remote_access.empty\" | \"remote_access.requests\" | \"remote_access.allow\" | \"remote_access.grant\" | \"remote_access.indicator\" | \"chat\" | \"chat.new\" | \"chat.new_channel\" | \"chat.channel_name\" | \"chat.member_name\" | \"chat.add_members\" | \"chat.delete_msg\" | \"chat.edit_msg\" | \"chat.send_msg\" | \"chat.send_attachment\" | \"chat.send_img\" | \"chat.send_file\" | \"chat.send_emoji\" | \"chat.update_msg\" | \"chat.channel_members\" | \"chat.img.loading\" | \"chat.error.img_not_found\" | \"chat.error.empty_results\" | \"chat.img.shared_by\" | \"chat.reply\" | \"chat.message_placeholder\" | \"chat.click_to_send\" | \"chat.search_msgs\" | \"chat.search_conversations\" | \"chat.start_conversation\" | \"chat.empty_search\" | \"chat.empty_channel\" | \"chat.cancel_upload\" | \"chat.view_chats\" | \"chat.everyone\" | \"chat.pinned_msgs\" | \"chat.toggle_pinned_msgs\" | \"date.today\" | \"date.yesteday\" | \"date.sunday\" | \"date.monday\" | \"date.tuesday\" | \"date.wednesday\" | \"date.thursday\" | \"date.friday\" | \"date.saturday\" | \"list.empty\" | \"grid.listening\" | \"transcript.off\" | \"transcript.on\" | \"settings.notification_sound\" | \"settings.microphone_input\" | \"settings.speaker_output\" | \"settings.mirror_video\" | \"settings.camera_off\") => string",
          "references": {
            "DyteI18n": {
              "location": "import",
              "path": "../../lib/lang"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Language"
        },
        "defaultValue": "useLanguage()"
      },
      "disableEmojiPicker": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Whether to show emoji picker"
        },
        "attribute": "disable-emoji-picker",
        "reflect": false,
        "defaultValue": "false"
      },
      "prefill": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "{\n    suggestedReplies?: string[];\n    editMessage?: TextMessage;\n    replyMessage?: TextMessage;\n  }",
          "resolved": "{ suggestedReplies?: string[]; editMessage?: TextMessage; replyMessage?: TextMessage; }",
          "references": {
            "TextMessage": {
              "location": "import",
              "path": "@dytesdk/web-core"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "prefill the composer"
        },
        "defaultValue": "{}"
      },
      "members": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DyteBasicParticipant[]",
          "resolved": "DyteBasicParticipant[]",
          "references": {
            "DyteBasicParticipant": {
              "location": "import",
              "path": "@dytesdk/web-core"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "list of members that can be mentioned"
        },
        "defaultValue": "[]"
      },
      "channelId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "channel id"
        },
        "attribute": "channel-id",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "emojiPickerActive": {},
      "mentionQuery": {},
      "focusedMemberIndex": {},
      "filePreview": {}
    };
  }
  static get events() {
    return [{
        "method": "onNewMessage",
        "name": "dyteNewMessage",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitted when new message is submitted"
        },
        "complexType": {
          "original": "DyteNewMessageEvent",
          "resolved": "DyteFile | DyteImage | DyteText",
          "references": {
            "DyteNewMessageEvent": {
              "location": "local"
            }
          }
        }
      }, {
        "method": "onEditMessage",
        "name": "dyteEditMessage",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitted when message is edited"
        },
        "complexType": {
          "original": "{\n    id: string;\n    message: string;\n    channelId?: string;\n  }",
          "resolved": "{ id: string; message: string; channelId?: string; }",
          "references": {}
        }
      }, {
        "method": "onEditCancelled",
        "name": "dyteEditCancelled",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitted when message editing is cancelled"
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "channelId",
        "methodName": "onChannelChanged"
      }];
  }
}
