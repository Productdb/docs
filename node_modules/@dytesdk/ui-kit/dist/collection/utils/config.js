import { defaultConfig } from '../lib/default-ui-config';
import { getBackgroundColorsOld, getBrandColors, isValidHexColor } from './color';
import deepMerge from 'lodash-es/merge';
import { isBreakoutRoomsEnabled } from './flags';
import { isLiveStreamHost } from './livestream';
/**
 * Extend the default UI Config with your own
 * @param config Your extended UI Config
 * @returns New extended UI Config object
 */
export const extendConfig = (config, baseConfig = defaultConfig) => {
  let newConfig = Object.assign({}, baseConfig);
  deepMerge(newConfig, config);
  return newConfig;
};
/**
 * Generates a config with older theme value.
 * @param oldConfig Theme object
 * @param toExtend UI Config object to extend the generated config
 * @param options Options for toggling components
 * @returns
 */
export const generateConfig = (oldConfig, meeting, toExtend = {}, options = { grid_pagination: true, settings_toggle: true }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  const data = { showSetupScreen: true };
  let logo;
  let meetingElements = ['dyte-stage'];
  let headerChildren = {}, controlBarChildren = {};
  const showSettingsToggle = (options === null || options === void 0 ? void 0 : options.settings_toggle) !== false;
  const showGridPagination = (options === null || options === void 0 ? void 0 : options.grid_pagination) !== false;
  if ((_a = oldConfig.controlBar) === null || _a === void 0 ? void 0 : _a.isEnabled) {
    meetingElements.push('dyte-controlbar');
    const { elements } = oldConfig.controlBar;
    const leftElements = [
      ...(elements.fullscreen ? ['dyte-fullscreen-toggle'] : []),
      ...(showSettingsToggle ? ['dyte-settings-toggle'] : []),
    ];
    const rightElements = [];
    const moreElements = [];
    if (meeting.troubleshoot !== undefined) {
      moreElements.push('dyte-debugger-toggle');
    }
    if (((_b = meeting.participants.pip) === null || _b === void 0 ? void 0 : _b.isSupported()) &&
      ((_d = (_c = meeting.self) === null || _c === void 0 ? void 0 : _c.config) === null || _d === void 0 ? void 0 : _d.pipMode) &&
      ((_e = meeting.self.config) === null || _e === void 0 ? void 0 : _e.viewType) !== 'LIVESTREAM') {
      moreElements.push('dyte-pip-toggle');
    }
    if (meeting === null || meeting === void 0 ? void 0 : meeting.self.permissions.canDisableParticipantAudio) {
      moreElements.push('dyte-mute-all-button');
    }
    if (isBreakoutRoomsEnabled(meeting)) {
      moreElements.push('dyte-breakout-rooms-toggle');
    }
    if ((_f = meeting.self) === null || _f === void 0 ? void 0 : _f.permissions.canRecord) {
      moreElements.push('dyte-recording-toggle');
    }
    if ((_g = meeting.self.permissions.transcriptionEnabled) !== null && _g !== void 0 ? _g : false) {
      moreElements.push('dyte-caption-toggle');
    }
    if (isLiveStreamHost(meeting)) {
      leftElements.push('dyte-livestream-toggle');
    }
    if (elements.screenshare) {
      leftElements.push('dyte-screen-share-toggle');
    }
    if (elements.chat) {
      rightElements.push('dyte-chat-toggle');
    }
    if (elements.polls) {
      rightElements.push('dyte-polls-toggle');
    }
    if (elements.participants) {
      rightElements.push('dyte-participants-toggle');
    }
    if (elements.plugins) {
      rightElements.push('dyte-plugins-toggle');
    }
    rightElements.push('dyte-ai-toggle');
    // NOTE(ishita1805): No condition as permission check happens within component
    const centerElements = [
      'dyte-mic-toggle',
      'dyte-camera-toggle',
      'dyte-stage-toggle',
      'dyte-leave-button',
    ];
    if (moreElements.length > 0)
      centerElements.push('dyte-more-toggle');
    const allSideElements = leftElements.concat(rightElements).concat(moreElements);
    let hasMobileDrawer = false;
    if (allSideElements.length > 0) {
      hasMobileDrawer = true;
    }
    controlBarChildren = {
      'dyte-controlbar': {
        states: ['activeMoreMenu'],
        children: ['div#controlbar-left', 'div#controlbar-center', 'div#controlbar-right'],
      },
      'div#controlbar-left': leftElements,
      'div#controlbar-center': centerElements,
      'div#controlbar-right': rightElements,
      'dyte-more-toggle': {
        states: ['activeMoreMenu'],
        children: [],
      },
      'dyte-more-toggle.activeMoreMenu': moreElements.map((el) => [
        el,
        { variant: 'horizontal', slot: 'more-elements' },
      ]),
      'dyte-controlbar.sm': ['div#controlbar-mobile'],
      'dyte-controlbar.md': ['div#controlbar-mobile'],
      'dyte-more-toggle.activeMoreMenu.md': allSideElements.map((el) => [
        el,
        { variant: 'horizontal', slot: 'more-elements' },
      ]),
      'dyte-more-toggle.activeMoreMenu.sm': allSideElements.map((el) => [
        el,
        { variant: 'horizontal', slot: 'more-elements' },
      ]),
      'div#controlbar-mobile': [
        'dyte-mic-toggle',
        'dyte-camera-toggle',
        'dyte-stage-toggle',
        ...[hasMobileDrawer && 'dyte-more-toggle'],
        'dyte-leave-button',
      ],
    };
  }
  if ((_h = oldConfig.header) === null || _h === void 0 ? void 0 : _h.isEnabled) {
    meetingElements.unshift('dyte-header');
    const { elements } = oldConfig.header;
    let leftElements = ['dyte-recording-indicator', 'dyte-livestream-indicator'], centerElements = [], rightElements = [];
    if (showGridPagination) {
      rightElements.push('dyte-grid-pagination');
    }
    if (elements.title) {
      centerElements.push('dyte-meeting-title');
    }
    if (typeof elements.logo === 'string' && elements.logo.length > 0) {
      logo = elements.logo;
      leftElements.unshift('dyte-logo');
    }
    if (elements.participantCount) {
      rightElements.push('dyte-participant-count', 'dyte-viewer-count');
    }
    if (elements.timer) {
      rightElements.push('dyte-clock');
    }
    headerChildren = {
      'dyte-header': ['div#header-left', 'div#header-center', 'div#header-right'],
      'dyte-header.sm': { remove: ['div#header-center'] },
      'div#header-left': leftElements,
      'div#header-center': centerElements,
      'div#header-right': rightElements,
      'div#header-left.sm': {
        remove: ['dyte-logo'],
        prepend: ['dyte-meeting-title'],
      },
    };
  }
  meetingElements.push('dyte-participants-audio', 'dyte-dialog-manager');
  let designTokens = {
    logo,
  };
  if (oldConfig.isV2 === true) {
    designTokens = oldConfig.designTokens;
    if (isValidHexColor((_k = (_j = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _j === void 0 ? void 0 : _j.colors) === null || _k === void 0 ? void 0 : _k.textOnBrand)) {
      designTokens.colors['text-on-brand'] = (_m = (_l = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _l === void 0 ? void 0 : _l.colors) === null || _m === void 0 ? void 0 : _m.textOnBrand;
    }
    if (isValidHexColor((_p = (_o = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _o === void 0 ? void 0 : _o.colors) === null || _p === void 0 ? void 0 : _p.videoBg)) {
      designTokens.colors['video-bg'] = (_r = (_q = oldConfig === null || oldConfig === void 0 ? void 0 : oldConfig.designTokens) === null || _q === void 0 ? void 0 : _q.colors) === null || _r === void 0 ? void 0 : _r.videoBg;
    }
  }
  else if (oldConfig.colors != null) {
    designTokens['colors'] = {};
    if (isValidHexColor(oldConfig.colors.primary)) {
      designTokens['colors']['brand'] = getBrandColors(oldConfig.colors.primary);
    }
    else if (typeof oldConfig.colors.primary === 'object') {
      designTokens['colors']['brand'] = oldConfig.colors.primary;
    }
    if (isValidHexColor(oldConfig.colors.secondary)) {
      designTokens['colors']['background'] = getBackgroundColorsOld(oldConfig.colors.secondary);
    }
    else if (typeof oldConfig.colors.secondary === 'object') {
      designTokens['colors']['background'] = oldConfig.colors.secondary;
    }
    if (isValidHexColor(oldConfig.colors.text)) {
      designTokens['colors']['text'] = oldConfig.colors.text;
    }
    if (isValidHexColor(oldConfig.colors.textPrimary)) {
      designTokens['colors']['text-on-brand'] = oldConfig.colors.textPrimary;
    }
    if (isValidHexColor(oldConfig.colors.videoBackground)) {
      designTokens['colors']['video-bg'] = oldConfig.colors.videoBackground;
    }
  }
  let config = {
    designTokens,
    styles: {
      'dyte-header': {
        display: 'grid',
        height: '48px',
        gridTemplateColumns: 'repeat(3, 1fr)',
        gridTemplateRows: '1fr',
        alignItems: 'center',
      },
      'dyte-header.sm': {
        display: 'grid',
        gridArea: 'header',
        gridTemplateColumns: 'repeat(2, 1fr)',
        gridTemplateRows: '1fr',
        alignItems: 'center',
      },
      'div#header-left': {
        display: 'flex',
        alignItems: 'center',
        height: '48px',
        wordBreak: 'break-all',
      },
      'dyte-logo': {
        height: '26px',
      },
      'div#header-center': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        wordBreak: 'break-all',
      },
      'div#header-right': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'flex-end',
      },
      'dyte-stage': {
        display: 'flex',
        flex: '1',
      },
      'dyte-grid': {
        flex: '1',
        height: 'auto',
      },
      'dyte-controlbar': {
        display: 'grid',
        gridTemplateColumns: 'repeat(3,1fr)',
        gridTemplateRows: '1fr',
        alignItems: 'center',
        padding: '8px',
      },
      'dyte-controlbar.sm': {
        display: 'flex',
        position: 'relative',
        backgroundColor: 'var(--dyte-colors-background-1000, #000)',
      },
      'dyte-controlbar.md': {
        display: 'flex',
        position: 'relative',
        backgroundColor: 'var(--dyte-colors-background-1000, #000)',
      },
      'div#controlbar-left': {
        display: 'flex',
        alignItems: 'center',
      },
      'div#controlbar-center': {
        display: 'flex',
        alignItems: 'center',
        position: 'relative',
        overflow: 'visible',
        justifyContent: 'center',
      },
      'div#controlbar-mobile': {
        display: 'flex',
        flex: '1',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: '10000',
      },
      'div#controlbar-right': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'flex-end',
      },
      'dyte-settings': {
        width: '720px',
        height: '480px',
      },
      'dyte-debugger': {
        width: '720px',
        height: '480px',
      },
      'div#setupcontrols-media': {
        position: 'absolute',
        bottom: '8px',
        right: '8px',
        display: 'flex',
      },
      'div#setupcontrols-settings': {
        position: 'absolute',
        top: '8px',
        right: '8px',
      },
      'dyte-meeting-title.sm': {
        marginLeft: '0',
      },
      'dyte-clock': {
        marginRight: '0',
      },
    },
    root: Object.assign(Object.assign(Object.assign({ 'dyte-meeting': {
        // if using key value pair, provide the key in `state`
        // else provide array of states in `states`
        state: 'meeting',
        states: ['activeSidebar', 'activeAI'],
      }, 'dyte-meeting[meeting=idle]': ['dyte-idle-screen'], 'dyte-meeting[meeting=waiting]': ['dyte-waiting-screen'], 'dyte-meeting[meeting=setup]': ['dyte-setup-screen', 'dyte-dialog-manager'], 'dyte-meeting[meeting=joined]': meetingElements, 'dyte-meeting[meeting=joined].activeSidebar.sm': {
        add: [['dyte-sidebar', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=joined].activeSidebar.md': {
        add: [['dyte-sidebar', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=joined].activeAI.sm': {
        add: [['dyte-ai', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=joined].activeAI.md': {
        add: [['dyte-ai', { view: 'full-screen' }]],
      }, 'dyte-meeting[meeting=ended]': ['dyte-ended-screen'] }, headerChildren), controlBarChildren), { 'dyte-stage': {
        states: ['activeSidebar', 'activeAI'],
        children: ['dyte-grid', 'dyte-notifications', 'dyte-transcripts'],
      }, 'dyte-stage.activeSidebar': {
        add: [['dyte-sidebar', { view: 'sidebar' }]],
      },
      // hide sidebar for smaller screens
      'dyte-stage.activeSidebar.sm': { remove: ['dyte-sidebar'] }, 'dyte-stage.activeAI': {
        add: [['dyte-ai', { view: 'sidebar' }]],
      },
      // hide sidebar for smaller screens
      'dyte-stage.activeAI.sm': { remove: ['dyte-ai'] }, 'dyte-grid': {
        states: ['activeScreenShare', 'activePlugin', 'activeSpotlight'],
        state: 'viewType',
        children: ['dyte-simple-grid'],
      }, 'dyte-grid[viewType=AUDIO_ROOM]': ['dyte-audio-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activePlugin': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activeScreenshare': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activeScreenShare.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activePlugin.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid[viewType=AUDIO_ROOM].activePlugin.activeScreenShare.activeSpotlight': [
        'dyte-mixed-grid',
      ], 'dyte-grid.activeSpotlight': ['dyte-spotlight-grid'], 'dyte-grid.activeScreenShare': ['dyte-mixed-grid'], 'dyte-grid.activePlugin': ['dyte-mixed-grid'], 'dyte-grid.activeScreenShare.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid.activePlugin.activeSpotlight': ['dyte-mixed-grid'], 'dyte-grid.activePlugin.activeScreenShare.activeSpotlight': ['dyte-mixed-grid'], 'dyte-mixed-grid': {
        states: ['activeSpotlight'],
        state: 'viewType',
        children: ['dyte-simple-grid'],
      }, 'dyte-mixed-grid[viewType=AUDIO_ROOM]': ['dyte-audio-grid'], 'dyte-mixed-grid.activeSpotlight': ['dyte-spotlight-grid'], 'dyte-participant-tile': {
        state: 'meeting',
        children: ['dyte-name-tag', 'dyte-avatar', 'dyte-network-indicator'],
      }, 'dyte-participant-setup': ['dyte-avatar', 'div#setupcontrols-media'], 'dyte-participant-tile[meeting=setup]': [
        'dyte-avatar',
        'div#setupcontrols-media',
        ...(showSettingsToggle ? ['div#setupcontrols-settings'] : []),
      ], 'div#setupcontrols-media': [
        ['dyte-mic-toggle', { size: 'sm' }],
        ['dyte-camera-toggle', { size: 'sm' }],
      ], 'div#setupcontrols-settings': [
        ['dyte-settings-toggle', { size: 'sm' }],
        ['dyte-debugger-toggle', { size: 'sm' }],
      ], 'dyte-screenshare-view': ['dyte-name-tag', 'dyte-network-indicator'], 'dyte-name-tag': [['dyte-audio-visualizer', { slot: 'start' }]] }),
    config: {
      notification_sounds: {
        participant_left: false,
      },
      participant_joined_sound_notification_limit: 3,
      participant_chat_message_sound_notification_limit: 10,
      videoFit: 'cover',
    },
  };
  config = extendConfig(toExtend, config);
  data.showSetupScreen = (_t = (_s = oldConfig.setupScreen) === null || _s === void 0 ? void 0 : _s.isEnabled) !== null && _t !== void 0 ? _t : true;
  return { config, data };
};
