import { disableSettingSinkId } from '../utils/flags';
import logger from '../utils/logger';
const SOUNDS = {
  joined: 'https://dyte-uploads.s3.ap-south-1.amazonaws.com/notification_join.mp3',
  left: 'https://dyte-uploads.s3.ap-south-1.amazonaws.com/notification_join.mp3',
  message: 'https://dyte-uploads.s3.ap-south-1.amazonaws.com/notification_message.mp3',
};
/**
 * Handles notification sounds in a meeting
 */
export default class DyteNotificationsAudio {
  constructor(meeting) {
    this.meeting = meeting;
    this.audio = document.createElement('audio');
    this.audio.volume = 0.3;
  }
  play(sound, duration = 3000) {
    var _a;
    if (this.playing)
      return;
    this.playing = true;
    this.audio.src = SOUNDS[sound];
    this.audio.volume = 0.3;
    (_a = this.audio.play()) === null || _a === void 0 ? void 0 : _a.catch((err) => {
      logger.error('[dyte-notifications] play() failed\n', { sound, duration }, err);
    });
    setTimeout(() => {
      this.playing = false;
    }, duration);
  }
  async setDevice(id) {
    var _a, _b, _c;
    if (disableSettingSinkId(this.meeting))
      return;
    await ((_c = (_b = (_a = this.audio) === null || _a === void 0 ? void 0 : _a.setSinkId) === null || _b === void 0 ? void 0 : _b.call(_a, id)) === null || _c === void 0 ? void 0 : _c.catch((err) => {
      logger.error('[dyte-notifications] setSinkId() error\n', err);
    }));
  }
}
