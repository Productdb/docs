import { r as registerInstance, c as createEvent, h, H as Host } from './index-926e26e8.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import { o as onChange, s as state } from './store-8f4d7acc.js';
import { d as canViewPolls } from './sidebar-0feab53d.js';
import './user-prefs-47572e95.js';
import './livestream-1a40fc8d.js';
import './flags-f14ed3df.js';

const dytePollsToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:block}.unread-count{position:absolute;right:var(--dyte-space-3, 12px);box-sizing:border-box;padding:var(--dyte-space-0\\.5, 2px);-webkit-user-select:none;-moz-user-select:none;user-select:none;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-brand-500, 33 96 253) / var(--tw-bg-opacity));font-size:12px;color:rgb(var(--dyte-colors-text-on-brand-1000, var(--dyte-colors-text-1000, 255 255 255)));display:flex;height:var(--dyte-space-5, 20px);min-width:var(--dyte-space-5, 20px);align-items:center;justify-content:center;border-radius:9999px;z-index:1}:host([variant='horizontal']){display:flex;flex-direction:row-reverse;align-items:center}:host([variant='horizontal']) .unread-count{right:var(--dyte-space-4, 16px);top:auto}";

const DytePollsToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.onPollsUpdate = ({ newPoll }) => {
      if (newPoll === true)
        this.unreadPollsCount += 1;
    };
    this.updateCanView = () => {
      this.canViewPolls = canViewPolls(this.meeting);
    };
    this.variant = 'button';
    this.meeting = undefined;
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.pollsActive = false;
    this.unreadPollsCount = 0;
    this.canViewPolls = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.statesChanged(this.states);
    this.removeStateChangeListener = onChange('sidebar', () => this.statesChanged());
  }
  disconnectedCallback() {
    var _a, _b, _c, _d, _e, _f;
    this.removeStateChangeListener && this.removeStateChangeListener();
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.polls) === null || _b === void 0 ? void 0 : _b.removeListener('pollsUpdate', this.onPollsUpdate);
    (_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self) === null || _d === void 0 ? void 0 : _d.permissions.removeListener('pollsUpdate', this.updateCanView);
    (_f = (_e = this.meeting) === null || _e === void 0 ? void 0 : _e.stage) === null || _f === void 0 ? void 0 : _f.removeListener('stageStatusUpdate', this.updateCanView);
  }
  meetingChanged(meeting) {
    var _a, _b;
    if (meeting && meeting.polls) {
      this.unreadPollsCount = meeting.polls.items.length;
      this.meeting.polls.addListener('pollsUpdate', this.onPollsUpdate);
      (_a = meeting === null || meeting === void 0 ? void 0 : meeting.self) === null || _a === void 0 ? void 0 : _a.permissions.addListener('pollsUpdate', this.updateCanView);
      this.canViewPolls = canViewPolls(meeting);
      (_b = meeting === null || meeting === void 0 ? void 0 : meeting.stage) === null || _b === void 0 ? void 0 : _b.on('stageStatusUpdate', this.updateCanView);
    }
  }
  statesChanged(s) {
    const states = s || state;
    if (states != null) {
      this.pollsActive = states.activeSidebar === true && states.sidebar === 'polls';
    }
  }
  togglePollsTab() {
    const states = this.states || state;
    this.unreadPollsCount = 0;
    this.pollsActive = !((states === null || states === void 0 ? void 0 : states.activeSidebar) && (states === null || states === void 0 ? void 0 : states.sidebar) === 'polls');
    this.stateUpdate.emit({
      activeSidebar: this.pollsActive,
      sidebar: this.pollsActive ? 'polls' : undefined,
      activeMoreMenu: false,
      activeAI: false,
    });
    state.activeSidebar = this.pollsActive;
    state.sidebar = this.pollsActive ? 'polls' : undefined;
    state.activeMoreMenu = false;
    state.activeAI = false;
  }
  render() {
    if (!this.canViewPolls)
      return;
    const text = this.t('polls');
    // TODO(callmetarush): Just showing polls for all V2 users irrespective of themes
    // untill we get ui theme for V2.
    return (h(Host, { title: text }, this.unreadPollsCount !== 0 && !this.pollsActive && (h("div", { class: "unread-count", part: "unread-count" }, h("span", null, this.unreadPollsCount <= 100 ? this.unreadPollsCount : '99+'))), h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, class: { active: this.pollsActive }, onClick: () => this.togglePollsTab(), icon: this.iconPack.poll, label: text, variant: this.variant })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "states": ["statesChanged"]
  }; }
};
DytePollsToggle.style = dytePollsToggleCss;

export { DytePollsToggle as dyte_polls_toggle };
