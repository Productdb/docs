import { r as registerInstance, c as createEvent, h, H as Host } from './index-926e26e8.js';
import { d as defaultConfig } from './default-ui-config-f87e0ba7.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import { d as debounce_1 } from './debounce-c13afd3e.js';
import { R as Render } from './index-9bb85c23.js';
import { s as state } from './store-8f4d7acc.js';
import { a as isLiveStreamViewer } from './livestream-1a40fc8d.js';
import { d as defaultGridSize } from './grid-cfa3c02f.js';
import './user-prefs-47572e95.js';

const dyteGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block;height:100%;width:100%}.offline-grid{display:flex;height:100%;width:100%;flex-direction:column;align-items:center;justify-content:center}.offline-grid h3{margin-top:var(--dyte-space-2, 8px);margin-bottom:var(--dyte-space-2, 8px);margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px);font-size:20px;font-weight:500;color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88))}.offline-grid p{margin-top:var(--dyte-space-1, 4px);margin-bottom:var(--dyte-space-1, 4px);margin-left:var(--dyte-space-0, 0px);margin-right:var(--dyte-space-0, 0px);text-align:center;font-size:16px;font-weight:400;color:rgb(var(--dyte-colors-text-700, 255 255 255 / 0.64))}.offline-grid dyte-icon{margin-bottom:var(--dyte-space-2, 8px)}.webinar-stage{box-sizing:border-box;height:100%;display:flex;align-content:center;align-items:center;justify-content:center;text-align:center}.webinar-stage h2{margin:var(--dyte-space-0, 0px);font-weight:normal}dyte-viewer-count{display:none}.ctr{display:flex;flex-direction:column;align-items:center}.message{font-size:16px;border-radius:var(--dyte-border-radius-lg, 12px);--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity));padding-left:var(--dyte-space-8, 32px);padding-right:var(--dyte-space-8, 32px);padding-top:var(--dyte-space-4, 16px);padding-bottom:var(--dyte-space-4, 16px);color:rgb(var(--dyte-colors-text-1000, 255 255 255))}.description{margin-top:var(--dyte-space-4, 16px);margin-bottom:var(--dyte-space-4, 16px);font-size:14px}dyte-livestream-indicator{display:none}@media only screen and (max-device-height: 480px) and (orientation: landscape){dyte-viewer-count[variant='embedded']{position:absolute;top:var(--dyte-space-0, 0px);right:var(--dyte-space-2, 8px);z-index:20;margin-top:var(--dyte-space-0, 0px);margin-left:var(--dyte-space-0, 0px);display:flex}dyte-livestream-indicator{position:absolute;top:var(--dyte-space-0, 0px);left:var(--dyte-space-2, 8px);z-index:20;margin-top:var(--dyte-space-0, 0px);margin-left:var(--dyte-space-0, 0px);display:flex}}";

const MASS_ACTIONS_DEBOUNCE_TIMER = 50; // In ms
const DyteGrid = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.hideSelf = false;
    this.networkUpdateListener = ({ event }) => {
      this.meetingConnected = event === 'connected';
    };
    this.meetingDisconnectedListener = () => {
      this.networkUpdateListener({ event: 'disconnected' });
    };
    this.meetingConnectedListener = () => {
      this.networkUpdateListener({ event: 'connected' });
    };
    // TODO(@madhugb): Temp hack, remove this when we ship manual subscription
    this.filterParticipants = (participants) => {
      var _a;
      // Only filter for non recorders
      if (this.overrides && ((_a = this.overrides) === null || _a === void 0 ? void 0 : _a.videoUnsubscribed)) {
        const presetFilters = this.overrides.videoUnsubscribed.preset;
        if (presetFilters.length > 0) {
          // Filter out unsubscribed participants
          participants = participants.filter((p) => {
            const unsubscribed = presetFilters.some((regex) => {
              if (p.presetName === undefined)
                return false;
              return p.presetName.match(regex);
            });
            return !unsubscribed;
          });
        }
      }
      return participants;
    };
    this.onViewModeChanged = () => {
      if (this.meeting == null)
        return;
      this.updateActiveParticipants();
    };
    this.onParticipantJoined = debounce_1(() => {
      this.updateActiveParticipants();
    }, MASS_ACTIONS_DEBOUNCE_TIMER);
    this.onParticipantLeft = debounce_1(() => {
      this.updateActiveParticipants();
    }, MASS_ACTIONS_DEBOUNCE_TIMER);
    this.stageStatusListener = () => {
      this.updateActiveParticipants();
      this.showLiveStreamPlayer = isLiveStreamViewer(this.meeting);
      if (this.meeting.stage.status !== 'ON_STAGE') {
        this.removeScreenShare(this.meeting.self);
      }
    };
    this.peerStageStatusListener = (participant) => {
      this.updateActiveParticipants();
      if (this.meeting.stage.status !== 'ON_STAGE') {
        this.removePinned(participant);
        this.removeScreenShare(participant);
      }
    };
    this.onScreenShareUpdate = (participant) => {
      if (participant.screenShareEnabled) {
        this.addScreenShare(participant);
      }
      else {
        this.removeScreenShare(participant);
      }
    };
    this.onSelfScreenShareUpdate = ({ screenShareEnabled, }) => {
      if (screenShareEnabled) {
        this.addScreenShare(this.meeting.self);
      }
      else {
        this.removeScreenShare(this.meeting.self);
      }
    };
    this.onPluginStateUpdate = (plugin, { active }) => {
      if (active) {
        if (!this.plugins.some((p) => p.id === plugin.id)) {
          this.plugins = [...this.plugins, plugin];
        }
      }
      else {
        this.plugins = this.plugins.filter((p) => p.id !== plugin.id);
      }
    };
    this.onParticipantPinned = () => {
      this.updateActiveParticipants();
    };
    this.onParticipantUnpinned = () => {
      this.updateActiveParticipants();
    };
    this.roomJoinedListener = () => {
      this.mediaConnected = this.meeting.meta.mediaConnected;
    };
    this.updateRoomStateListener = () => {
      this.roomState = this.meeting.self.roomState;
    };
    this.participants = [];
    this.pinnedParticipants = [];
    this.screenShareParticipants = [];
    this.plugins = [];
    this.showStage = false;
    this.showLiveStreamPlayer = false;
    this.canCurrentPeerHost = false;
    this.pipSupported = false;
    this.pipEnabled = false;
    this.layout = 'row';
    this.aspectRatio = '16:9';
    this.meeting = undefined;
    this.gap = 8;
    this.size = undefined;
    this.states = state;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.gridSize = defaultGridSize;
    this.overrides = {};
    this.meetingConnected = true;
    this.mediaConnected = true;
    this.roomState = undefined;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  disconnectMeeting(meeting) {
    var _a;
    if (meeting == null)
      return;
    this.participants = [];
    this.plugins = [];
    const { self, participants, plugins, meta } = meeting;
    participants.active.removeListener('participantJoined', this.onParticipantJoined);
    participants.active.removeListener('participantLeft', this.onParticipantLeft);
    participants.joined.removeListener('screenShareUpdate', this.onScreenShareUpdate);
    participants.joined.removeListener('stageStatusUpdate', this.peerStageStatusListener);
    self.removeListener('screenShareUpdate', this.onSelfScreenShareUpdate);
    plugins === null || plugins === void 0 ? void 0 : plugins.all.removeListener('stateUpdate', this.onPluginStateUpdate);
    participants.pinned.removeListener('participantJoined', this.onParticipantPinned);
    participants.pinned.removeListener('participantLeft', this.onParticipantUnpinned);
    self.removeListener('pinned', this.onParticipantPinned);
    self.removeListener('unpinned', this.onParticipantUnpinned);
    participants.removeListener('viewModeChanged', this.onViewModeChanged);
    meta.removeListener('disconnected', this.meetingDisconnectedListener);
    meta.removeListener('connected', this.meetingConnectedListener);
    (_a = meeting.stage) === null || _a === void 0 ? void 0 : _a.removeListener('stageStatusUpdate', this.stageStatusListener);
    meta.removeListener('connected', this.roomJoinedListener);
    meta.removeListener('disconnected', this.roomJoinedListener);
    self.removeListener('roomLeft', this.updateRoomStateListener);
    self.removeListener('roomJoined', this.updateRoomStateListener);
  }
  disconnectedCallback() {
    this.disconnectMeeting(this.meeting);
  }
  overridesChanged(_overrides) {
    this.updateActiveParticipants();
  }
  screenShareParticipantsChanged(participants) {
    const activeScreenShare = participants.length > 0;
    if (!!state.activeScreenShare === activeScreenShare)
      return;
    this.stateUpdate.emit({ activeScreenShare });
    state.activeScreenShare = activeScreenShare;
  }
  pluginsChanged(plugins) {
    const activePlugin = plugins.length > 0;
    if (!!state.activePlugin === activePlugin)
      return;
    this.stateUpdate.emit({ activePlugin });
    state.activePlugin = activePlugin;
  }
  pinnedParticipantsChanged(participants) {
    const activeSpotlight = participants.length > 0;
    if (!!state.activeSpotlight === activeSpotlight)
      return;
    this.stateUpdate.emit({ activeSpotlight });
    state.activeSpotlight = activeSpotlight;
  }
  updateActiveParticipants() {
    var _a;
    const { self, participants, stage } = this.meeting;
    // NOTE(ishita1805): checking hiddenParticipant for v2 meetings.
    this.hideSelf =
      stage.status !== 'ON_STAGE' ||
        ((_a = self.permissions) === null || _a === void 0 ? void 0 : _a.isRecorder) ||
        self.permissions.hiddenParticipant;
    this.participants = this.filterParticipants([
      ...participants.active.toArray().filter((p) => p.id !== self.id),
      ...(participants.viewMode === 'ACTIVE_GRID' && !self.isPinned && !this.hideSelf
        ? [self]
        : []),
    ]);
    this.pinnedParticipants = [
      ...participants.pinned.toArray().filter((p) => p.id !== self.id),
      ...(self.isPinned && !this.hideSelf ? [self] : []),
    ];
    this.screenShareParticipants = participants.joined
      .toArray()
      .filter((participant) => participant.screenShareEnabled);
    if (self.screenShareEnabled) {
      this.screenShareParticipants = this.screenShareParticipants.concat([self]);
    }
    this.updateStage();
  }
  updateStage() {
    var _a;
    const { self } = this.meeting;
    if (!this.meeting)
      return;
    if ((_a = self === null || self === void 0 ? void 0 : self.permissions) === null || _a === void 0 ? void 0 : _a.stageEnabled) {
      this.showStage = this.participants.length === 0 && this.pinnedParticipants.length === 0;
    }
    else {
      this.showStage = false;
    }
  }
  meetingChanged(meeting, oldMeeting) {
    var _a, _b, _c, _d;
    if (oldMeeting !== null)
      this.disconnectMeeting(oldMeeting);
    if (meeting != null) {
      const { self, participants, plugins, meta, stage } = meeting;
      // Initialize values
      const { permissions } = self;
      this.roomState = self.roomState;
      this.mediaConnected = meta.mediaConnected;
      const isOffStage = this.meeting.stage.status !== 'ON_STAGE';
      const isRecorder = permissions === null || permissions === void 0 ? void 0 : permissions.isRecorder;
      this.hideSelf = isOffStage || isRecorder || permissions.hiddenParticipant;
      this.participants = this.filterParticipants([
        ...participants.active.toArray(),
        ...(!self.isPinned && !this.hideSelf ? [self] : []),
      ]);
      this.pinnedParticipants = [
        ...participants.pinned.toArray(),
        ...(self.isPinned && !this.hideSelf ? [self] : []),
      ];
      this.screenShareParticipants = participants.joined
        .toArray()
        .filter((participant) => participant.screenShareEnabled);
      this.plugins = (plugins === null || plugins === void 0 ? void 0 : plugins.active.toArray()) || [];
      if (permissions === null || permissions === void 0 ? void 0 : permissions.stageEnabled) {
        this.canCurrentPeerHost = permissions.acceptStageRequests || permissions.canPresent;
        this.updateStage();
      }
      // Check if PiP is supported and enabled
      this.pipSupported =
        ((_a = this.meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.isSupported()) && ((_b = meeting.self.config) === null || _b === void 0 ? void 0 : _b.pipMode);
      if (this.pipSupported) {
        this.meeting.participants.pip.init();
      }
      // Add all listeners
      participants.active.addListener('participantJoined', this.onParticipantJoined);
      participants.active.addListener('participantLeft', this.onParticipantLeft);
      participants.joined.addListener('screenShareUpdate', this.onScreenShareUpdate);
      (_c = participants === null || participants === void 0 ? void 0 : participants.joined) === null || _c === void 0 ? void 0 : _c.on('stageStatusUpdate', this.peerStageStatusListener);
      self.addListener('screenShareUpdate', this.onSelfScreenShareUpdate);
      plugins === null || plugins === void 0 ? void 0 : plugins.all.addListener('stateUpdate', this.onPluginStateUpdate);
      participants.pinned.addListener('participantJoined', this.onParticipantPinned);
      participants.pinned.addListener('participantLeft', this.onParticipantUnpinned);
      self.addListener('pinned', this.onParticipantPinned);
      self.addListener('unpinned', this.onParticipantUnpinned);
      meta.addListener('disconnected', this.meetingDisconnectedListener);
      meta.addListener('connected', this.meetingConnectedListener);
      stage === null || stage === void 0 ? void 0 : stage.addListener('stageStatusUpdate', this.stageStatusListener);
      participants.addListener('viewModeChanged', this.onViewModeChanged);
      meta.addListener('connected', this.roomJoinedListener);
      meta.addListener('disconnected', this.roomJoinedListener);
      self.addListener('roomLeft', this.updateRoomStateListener);
      self.addListener('roomJoined', this.updateRoomStateListener);
      if ((_d = meeting.stage) === null || _d === void 0 ? void 0 : _d.status) {
        this.stageStatusListener();
      }
    }
  }
  addScreenShare(participant) {
    if (!this.screenShareParticipants.some((p) => p.id === participant.id)) {
      this.screenShareParticipants = [...this.screenShareParticipants, participant];
    }
  }
  removeScreenShare(participant) {
    this.screenShareParticipants = this.screenShareParticipants.filter((p) => p.id !== participant.id);
  }
  removePinned(participant) {
    this.pinnedParticipants = this.pinnedParticipants.filter((p) => p.id !== participant.id);
  }
  render() {
    const defaults = {
      meeting: this.meeting,
      size: this.size,
      states: this.states || state,
      config: this.config,
      iconPack: this.iconPack,
      t: this.t,
    };
    if (this.roomState !== 'joined' && !isLiveStreamViewer(this.meeting))
      return (h(Host, null, h("div", { class: "offline-grid" }, h("dyte-icon", { icon: this.iconPack.join_stage, size: "xl" }), h("h3", null, this.t('disconnected')), h("p", null, this.t('disconnected.description')))));
    if (!this.mediaConnected && !isLiveStreamViewer(this.meeting))
      return (h(Host, null, h("div", { class: "offline-grid" }, h("dyte-icon", { icon: this.iconPack.disconnected, size: "xl" }), h("h3", null, this.t('offline')), h("p", null, this.t('offline.description')))));
    if (!this.meetingConnected && this.hideSelf && !isLiveStreamViewer(this.meeting)) {
      return (h("div", { class: "offline-grid" }, h("p", null, this.t('stage.reconnecting'))));
    }
    if (this.showStage && !this.showLiveStreamPlayer) {
      return (h(Host, null, h("div", { class: "webinar-stage" }, h("div", { class: "center" }, this.canCurrentPeerHost && (h("div", { class: "ctr", part: "container" }, h("p", { class: "message", part: "message" }, this.t('stage.empty_host')), h("span", { class: "description", part: "description" }, this.t('stage.empty_host_summary')))), !this.canCurrentPeerHost && (h("div", { class: "ctr", part: "container" }, h("p", { class: "message", part: "message" }, this.t('stage.empty_viewer'))))))));
    }
    if (this.showLiveStreamPlayer) {
      return (h(Host, null, h("dyte-livestream-player", { meeting: this.meeting, size: this.size }), h("dyte-livestream-indicator", { meeting: this.meeting, size: "sm", t: this.t }), h("dyte-viewer-count", { meeting: this.meeting, variant: "embedded", t: this.t })));
    }
    return (h(Host, null, h(Render, { element: "dyte-grid", defaults: defaults, childProps: {
        participants: this.participants,
        screenShareParticipants: this.screenShareParticipants,
        plugins: this.plugins,
        pinnedParticipants: this.pinnedParticipants,
        aspectRatio: this.aspectRatio,
        gap: this.gap,
        layout: this.layout,
        gridSize: this.gridSize,
      }, onlyChildren: true }), h("dyte-livestream-indicator", { meeting: this.meeting, size: "sm", t: this.t }), h("dyte-viewer-count", { meeting: this.meeting, variant: "embedded" })));
  }
  static get watchers() { return {
    "overrides": ["overridesChanged"],
    "screenShareParticipants": ["screenShareParticipantsChanged"],
    "plugins": ["pluginsChanged"],
    "pinnedParticipants": ["pinnedParticipantsChanged"],
    "meeting": ["meetingChanged"]
  }; }
};
DyteGrid.style = dyteGridCss;

export { DyteGrid as dyte_grid };
