import { r as registerInstance, c as createEvent, h, H as Host } from './index-926e26e8.js';
import { s as state } from './store-8f4d7acc.js';
import './breakout-rooms-manager-7dc0174a.js';
import { d as defaultConfig } from './default-ui-config-f87e0ba7.js';
import './livestream-1a40fc8d.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import './user-prefs-47572e95.js';
import './breakout-rooms-dea0806e.js';
import './flags-f14ed3df.js';

const dyteCaptionToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DyteCaptionToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.variant = 'button';
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.size = undefined;
    this.t = useLanguage();
    this.captionEnabled = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  meetingChanged(meeting) {
    var _a;
    if (meeting === null)
      return;
    this.captionEnabled =
      (_a = this.meeting.self.permissions.transcriptionEnabled) !== null && _a !== void 0 ? _a : false;
  }
  toggleCaptions() {
    this.stateUpdate.emit({ activeCaptions: !state.activeCaptions });
    state.activeCaptions = !state.activeCaptions;
    this.stateUpdate.emit({ activeMoreMenu: false });
    state.activeMoreMenu = false;
  }
  render() {
    if (!this.captionEnabled)
      return null;
    const captionsEnabled = this.states.activeCaptions;
    return (h(Host, { tabIndex: 0, role: "log", "aria-label": `Picture-in-Picture mode` }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, onClick: () => this.toggleCaptions(), icon: captionsEnabled ? this.iconPack.captionsOff : this.iconPack.captionsOn, label: captionsEnabled ? this.t('transcript.off') : this.t('transcript.on'), variant: this.variant })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
};
DyteCaptionToggle.style = dyteCaptionToggleCss;

export { DyteCaptionToggle as dyte_caption_toggle };
