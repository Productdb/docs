import { r as registerInstance, c as createEvent, h, H as Host } from './index-926e26e8.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import { o as onChange, s as state } from './store-8f4d7acc.js';
import { b as canViewPlugins } from './sidebar-0feab53d.js';
import './user-prefs-47572e95.js';
import './livestream-1a40fc8d.js';
import './flags-f14ed3df.js';

const dytePluginsToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DytePluginsToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.updateCanView = () => {
      this.canViewPlugins = canViewPlugins(this.meeting);
    };
    this.variant = 'button';
    this.meeting = undefined;
    this.states = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.pluginsActive = false;
    this.canViewPlugins = false;
  }
  disconnectedCallback() {
    var _a, _b, _c, _d;
    this.removeStateChangeListener && this.removeStateChangeListener();
    (_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.stage) === null || _b === void 0 ? void 0 : _b.removeListener('stageStatusUpdate', this.updateCanView);
    (_d = (_c = this.meeting) === null || _c === void 0 ? void 0 : _c.self) === null || _d === void 0 ? void 0 : _d.permissions.removeListener('pluginsUpdate', this.updateCanView);
  }
  connectedCallback() {
    this.statesChanged(this.states);
    this.meetingChanged(this.meeting);
    this.removeStateChangeListener = onChange('sidebar', () => this.statesChanged());
  }
  meetingChanged(meeting) {
    var _a, _b;
    if (meeting == null)
      return;
    this.canViewPlugins = canViewPlugins(meeting);
    (_a = meeting === null || meeting === void 0 ? void 0 : meeting.stage) === null || _a === void 0 ? void 0 : _a.on('stageStatusUpdate', this.updateCanView);
    (_b = meeting === null || meeting === void 0 ? void 0 : meeting.self) === null || _b === void 0 ? void 0 : _b.permissions.addListener('pluginsUpdate', this.updateCanView);
  }
  statesChanged(s) {
    const states = s || state;
    if (states != null) {
      this.pluginsActive = states.activeSidebar === true && states.sidebar === 'plugins';
    }
  }
  togglePlugins() {
    const states = this.states || state;
    this.pluginsActive = !((states === null || states === void 0 ? void 0 : states.activeSidebar) && (states === null || states === void 0 ? void 0 : states.sidebar) === 'plugins');
    this.stateUpdate.emit({
      activeSidebar: this.pluginsActive,
      sidebar: this.pluginsActive ? 'plugins' : undefined,
      activeMoreMenu: false,
      activeAI: false,
    });
    state.activeSidebar = this.pluginsActive;
    state.sidebar = this.pluginsActive ? 'plugins' : undefined;
    state.activeMoreMenu = false;
    state.activeAI = false;
  }
  render() {
    if (!this.canViewPlugins)
      return;
    const text = this.t('plugins');
    return (h(Host, { title: text }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, class: { active: this.pluginsActive }, onClick: () => this.togglePlugins(), icon: this.iconPack.rocket, label: text, variant: this.variant })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "states": ["statesChanged"]
  }; }
};
DytePluginsToggle.style = dytePluginsToggleCss;

export { DytePluginsToggle as dyte_plugins_toggle };
