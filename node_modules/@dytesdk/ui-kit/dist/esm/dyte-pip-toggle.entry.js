import { r as registerInstance, c as createEvent, h, H as Host } from './index-926e26e8.js';
import { s as state } from './store-8f4d7acc.js';
import './breakout-rooms-manager-7dc0174a.js';
import { d as defaultConfig } from './default-ui-config-f87e0ba7.js';
import './livestream-1a40fc8d.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import './user-prefs-47572e95.js';
import './breakout-rooms-dea0806e.js';
import './flags-f14ed3df.js';

const dytePipToggleCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{display:block}";

const DytePipToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.variant = 'button';
    this.meeting = undefined;
    this.states = undefined;
    this.config = defaultConfig;
    this.iconPack = defaultIconPack;
    this.size = undefined;
    this.t = useLanguage();
    this.pipSupported = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  meetingChanged(meeting) {
    var _a, _b, _c;
    if (meeting === null)
      return;
    // Check if PiP is supported and enabled
    this.pipSupported =
      ((_a = meeting.participants.pip) === null || _a === void 0 ? void 0 : _a.isSupported()) &&
        ((_b = meeting.self.config) === null || _b === void 0 ? void 0 : _b.pipMode) &&
        ((_c = meeting.self.config) === null || _c === void 0 ? void 0 : _c.viewType) !== 'LIVESTREAM';
  }
  togglePip() {
    if (!this.meeting.participants.pip)
      return;
    // Not active, activate
    if (this.meeting.participants.pip.isActive) {
      this.meeting.participants.pip.disable();
    }
    else {
      this.meeting.participants.pip.enable();
    }
    this.stateUpdate.emit({ activeMoreMenu: false });
    state.activeMoreMenu = false;
  }
  render() {
    if (!this.pipSupported)
      return;
    const pipEnabled = this.meeting.participants.pip.isActive;
    return (h(Host, { tabIndex: 0, role: "log", "aria-label": `Picture-in-Picture mode` }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, onClick: () => this.togglePip(), icon: pipEnabled ? this.iconPack.pip_on : this.iconPack.pip_off, label: pipEnabled ? this.t('pip_off') : this.t('pip_on'), variant: this.variant })));
  }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
};
DytePipToggle.style = dytePipToggleCss;

export { DytePipToggle as dyte_pip_toggle };
