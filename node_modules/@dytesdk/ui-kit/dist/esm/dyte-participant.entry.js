import { r as registerInstance, c as createEvent, h, H as Host, a as getElement } from './index-926e26e8.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import { l as lenChildren, R as Render } from './index-9bb85c23.js';
import { f as formatName, s as shorten } from './string-274004ff.js';
import { s as state } from './store-8f4d7acc.js';
import './breakout-rooms-manager-7dc0174a.js';
import { d as defaultConfig } from './default-ui-config-f87e0ba7.js';
import { F as FlagsmithFeatureFlags } from './flags-f14ed3df.js';
import './livestream-1a40fc8d.js';
import './user-prefs-47572e95.js';
import { c as computePosition, o as offset, f as flip, s as shift } from './floating-ui.dom.esm-eabd20d7.js';
import './breakout-rooms-dea0806e.js';

const dyteParticipantCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{position:relative;display:flex;height:var(--dyte-space-14, 56px);align-items:center;justify-content:space-between;cursor:pointer;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}:host dyte-avatar{height:var(--dyte-space-8, 32px);width:var(--dyte-space-8, 32px);font-size:14px}.left{display:flex;align-items:center}.left>*{margin-right:var(--dyte-space-2, 8px)}.left>*:last-child{margin-right:var(--dyte-space-0, 0px)}.right{display:flex;align-items:center;justify-content:flex-end}.right>*{margin-left:var(--dyte-space-2, 8px)}.right>*:first-child{margin-left:var(--dyte-space-0, 0px)}.name{overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1}dyte-icon{height:var(--dyte-space-6, 24px);width:var(--dyte-space-6, 24px)}dyte-icon.red{--tw-text-opacity:1;color:rgba(var(--dyte-colors-danger, 255 45 45) / var(--tw-text-opacity))}dyte-icon.more{cursor:pointer}.menu{position:relative;display:inline-block;color:rgb(var(--dyte-colors-text-1000, 255 255 255))}#menu-list{position:absolute;z-index:20}";

const DyteParticipant = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dyteSendNotification = createEvent(this, "dyteSendNotification", 7);
    this.pinnedListener = ({ isPinned }) => {
      this.isPinned = isPinned;
    };
    this.stageListener = ({ stageStatus }) => {
      this.isOnStage = stageStatus === 'ON_STAGE';
    };
    this.inviteToStageToggle = async () => {
      const p = this.participant;
      const { stage } = this.meeting;
      // If request has been sent once, do nothing.
      if (p.stageStatus === 'ACCEPTED_TO_JOIN_STAGE') {
        // Send a notification to host telling that the user has been invited.
        this.dyteSendNotification.emit({
          message: `${p.name} ${this.t('stage.invited_notification')}`,
          trace: `join-stage-${p.id}`,
        });
        return;
      }
      if (this.isOnStage) {
        // NOTE (@madhugb): when a pinned participnat is removed from stage, we need to unpin them manually
        if (p.isPinned)
          p.unpin();
        await stage.kick([p.userId]);
      }
      else {
        await stage.grantAccess([p.userId]);
        // Send a notification to host telling that the user has been invited.
        this.dyteSendNotification.emit({
          message: `${p.name} ${this.t('stage.invited_notification')}`,
          trace: `join-stage-invite-${p.id}`,
        });
      }
      this.isOnStage = p.stageStatus === 'ON_STAGE';
    };
    this.handleOutsideClick = () => {
      // handles clicking on other menu triggers
      if (!this.clickedThis && this.menuOpen) {
        // if other trigger is clicked, hide this menu-list
        this.menuOpen = false;
      }
      this.clickedThis = false;
    };
    this.clickedThis = false;
    this.update = () => {
      const triggerEl = this.host.shadowRoot.getElementById('trigger');
      const menuListEl = this.host.shadowRoot.getElementById('menu-list');
      computePosition(triggerEl, menuListEl, {
        placement: 'bottom-end',
        middleware: [offset(10), flip(), shift({ padding: 5 })],
      }).then(({ x, y }) => {
        Object.assign(menuListEl.style, {
          right: `${x}px`,
          top: `${y}px`,
        });
      });
    };
    this.onMenuToggle = () => {
      this.clickedThis = true;
      this.menuOpen = !this.menuOpen;
      if (this.menuOpen) {
        this.update();
      }
    };
    this.meeting = undefined;
    this.view = 'sidebar';
    this.participant = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.config = defaultConfig;
    this.audioEnabled = false;
    this.videoEnabled = false;
    this.isPinned = false;
    this.isOnStage = false;
    this.canDisableParticipantAudio = false;
    this.canDisableParticipantVideo = false;
    this.canKickParticipant = false;
    this.canPinParticipant = false;
    this.canAllowParticipantOnStage = false;
    this.menuOpen = false;
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
    this.participantChanged(this.participant);
  }
  disconnectedCallback() {
    document.removeEventListener('click', this.handleOutsideClick);
    if (this.participant == null || this.participant.removeListener == undefined)
      return;
    this.audioUpdateListener &&
      this.participant.removeListener('audioUpdate', this.audioUpdateListener);
    this.videoUpdateListener &&
      this.participant.removeListener('videoUpdate', this.videoUpdateListener);
    this.participant.removeListener('pinned', this.pinnedListener);
    this.participant.removeListener('unpinned', this.pinnedListener);
    this.participant.removeListener('stageStatusUpdate', this.stageListener);
  }
  meetingChanged(meeting) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (meeting != null) {
      const { self } = meeting;
      this.canDisableParticipantAudio =
        self.permissions.canAllowParticipantAudio || self.permissions.canDisableParticipantAudio;
      this.canDisableParticipantVideo =
        self.permissions.canAllowParticipantVideo || self.permissions.canDisableParticipantVideo;
      this.canKickParticipant =
        self.permissions.kickParticipant &&
          ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.__internals__.features.hasFeature(FlagsmithFeatureFlags.DISABLE_KICKING)) !==
            true &&
          (((_b = this.meeting) === null || _b === void 0 ? void 0 : _b.__internals__.features.hasFeature(FlagsmithFeatureFlags.ADMIN_CANTREMOVE_ADMIN)) !== true ||
            ((_c = this.participant) === null || _c === void 0 ? void 0 : _c.presetName) !== 'webinar_admin');
      this.canPinParticipant = self.permissions.pinParticipant;
      this.canAllowParticipantOnStage =
        self.permissions.acceptStageRequests &&
          self.permissions.stageEnabled &&
          (((_d = this.meeting) === null || _d === void 0 ? void 0 : _d.__internals__.features.hasFeature(FlagsmithFeatureFlags.ADMIN_CANTREMOVE_ADMIN)) !== true ||
            ((_e = this.participant) === null || _e === void 0 ? void 0 : _e.presetName) !== 'webinar_admin') &&
          (((_f = this.meeting) === null || _f === void 0 ? void 0 : _f.__internals__.features.hasFeature(FlagsmithFeatureFlags.CANTINVITE_VIEWER)) !== true ||
            ((_g = this.participant) === null || _g === void 0 ? void 0 : _g.presetName) !== 'webinar_viewer');
    }
  }
  participantChanged(participant) {
    if (participant != null) {
      this.audioEnabled = participant.audioEnabled;
      this.videoEnabled = participant.videoEnabled;
      this.isPinned = participant.isPinned;
      this.isOnStage = participant.stageStatus === 'ON_STAGE';
      this.audioUpdateListener = ({ audioEnabled }) => {
        this.audioEnabled = audioEnabled;
      };
      this.videoUpdateListener = ({ videoEnabled }) => {
        this.videoEnabled = videoEnabled;
      };
      if (participant.addListener == undefined)
        return;
      participant.addListener('audioUpdate', this.audioUpdateListener);
      participant.addListener('videoUpdate', this.videoUpdateListener);
      participant.addListener('pinned', this.pinnedListener);
      participant.addListener('unpinned', this.pinnedListener);
      participant.addListener('stageStatusUpdate', this.stageListener);
    }
  }
  componentDidLoad() {
    document.addEventListener('click', this.handleOutsideClick);
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const isAudioRoom = ((_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta.viewType) === 'AUDIO_ROOM';
    const isSelf = ((_b = this.meeting) === null || _b === void 0 ? void 0 : _b.self.id) === this.participant.id;
    const showMenu = (this.canDisableParticipantAudio && this.audioEnabled) ||
      (this.canDisableParticipantVideo && this.videoEnabled && !isAudioRoom) ||
      this.canKickParticipant ||
      (this.canPinParticipant && this.isOnStage) ||
      this.canAllowParticipantOnStage;
    const name = formatName(((_c = this.participant) === null || _c === void 0 ? void 0 : _c.name) || '');
    // NOTE(@madhugb): Show some actions for only on stage / non-webinar participants
    // NOTE(@vaibhavshn): Update check after listeners are implemented
    const isActiveParticipant = this.isOnStage || ['GROUP_CALL', 'AUDIO_ROOM'].includes((_d = this.meeting) === null || _d === void 0 ? void 0 : _d.meta.viewType);
    const defaults = {
      meeting: this.meeting,
      size: 'sm',
      states: state,
      config: this.config,
      iconPack: this.iconPack,
      t: this.t,
    };
    return (h(Host, null, h("div", { class: "left" }, h("dyte-avatar", { participant: this.participant, size: "sm", iconPack: this.iconPack, t: this.t }), h("p", { class: "name", title: name }, shorten(name, 16), " ", ((_e = this.meeting) === null || _e === void 0 ? void 0 : _e.self.id) === ((_f = this.participant) === null || _f === void 0 ? void 0 : _f.id) && this.t('(you)'))), this.view === 'sidebar' && (h("div", { class: "right" }, isActiveParticipant && (h("dyte-icon", { class: {
        red: !this.audioEnabled,
      }, iconPack: this.iconPack, t: this.t, icon: this.audioEnabled ? this.iconPack.mic_on : this.iconPack.mic_off })), isActiveParticipant && !isAudioRoom && (h("dyte-icon", { class: {
        red: !this.videoEnabled,
      }, iconPack: this.iconPack, t: this.t, icon: this.videoEnabled ? this.iconPack.video_on : this.iconPack.video_off })), (showMenu ||
      lenChildren({
        element: 'dyte-participant',
        defaults: defaults,
        childProps: {
          participant: this.participant,
        },
      }) > 0) && (h("div", { class: "menu" }, h("span", { id: "trigger", onClick: this.onMenuToggle }, h("dyte-button", { variant: "ghost", kind: "icon", slot: "trigger", iconPack: this.iconPack, t: this.t }, h("dyte-icon", { class: "more", icon: this.iconPack.more_vertical }))), h("span", { id: "menu-list" }, this.menuOpen && (h("dyte-menu-list", { iconPack: this.iconPack, t: this.t }, this.canPinParticipant && isActiveParticipant && !isAudioRoom && (h("dyte-menu-item", { onClick: () => {
        if (this.isPinned) {
          this.participant.unpin();
        }
        else {
          this.participant.pin();
        }
      }, iconPack: this.iconPack, t: this.t }, h("dyte-icon", { icon: this.isPinned ? this.iconPack.pin_off : this.iconPack.pin, slot: "start", iconPack: this.iconPack, t: this.t }), this.isPinned ? this.t('unpin') : this.t('pin'))), this.canDisableParticipantAudio && isActiveParticipant && this.audioEnabled && (h("dyte-menu-item", { iconPack: this.iconPack, t: this.t, onClick: () => {
        this.participant.disableAudio();
      } }, h("dyte-icon", { icon: this.iconPack.mic_off, slot: "start" }), this.t('mute'))), this.canDisableParticipantVideo && isActiveParticipant && this.videoEnabled && (h("dyte-menu-item", { iconPack: this.iconPack, t: this.t, onClick: () => {
        this.participant.disableVideo();
      } }, h("dyte-icon", { icon: this.iconPack.video_off, slot: "start", iconPack: this.iconPack, t: this.t }), this.t('participants.turn_off_video'))), this.canAllowParticipantOnStage &&
      ((_g = this.participant) === null || _g === void 0 ? void 0 : _g.id) !== ((_h = this.meeting) === null || _h === void 0 ? void 0 : _h.self.id) && (h("dyte-menu-item", { iconPack: this.iconPack, t: this.t, class: this.isOnStage ? 'red' : '', onClick: this.inviteToStageToggle }, h("dyte-icon", { iconPack: this.iconPack, t: this.t, icon: this.isOnStage
        ? this.iconPack.leave_stage
        : this.iconPack.join_stage, slot: "start" }), this.isOnStage
      ? this.t('stage.remove_from_stage')
      : this.t('stage.add_to_stage'))), !isSelf && this.canKickParticipant && (h("dyte-menu-item", { iconPack: this.iconPack, t: this.t, class: "red", onClick: () => {
        var _a, _b;
        (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.participants.kick((_b = this.participant) === null || _b === void 0 ? void 0 : _b.id);
      } }, h("dyte-icon", { icon: this.iconPack.dismiss, slot: "start", iconPack: this.iconPack, t: this.t }), this.t('kick'))), h("slot", null, h(Render, { element: "dyte-participant", defaults: defaults, childProps: {
        participant: this.participant,
      }, deepProps: true, onlyChildren: true })))))))))));
  }
  get host() { return getElement(this); }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "participant": ["participantChanged"]
  }; }
};
DyteParticipant.style = dyteParticipantCss;

export { DyteParticipant as dyte_participant };
