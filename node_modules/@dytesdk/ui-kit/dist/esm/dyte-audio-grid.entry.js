import { r as registerInstance, h, H as Host, a as getElement } from './index-926e26e8.js';
import './store-8f4d7acc.js';
import './breakout-rooms-manager-7dc0174a.js';
import './livestream-1a40fc8d.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import './user-prefs-47572e95.js';
import { R as Render } from './index-9bb85c23.js';
import './breakout-rooms-dea0806e.js';
import './flags-f14ed3df.js';

const dyteAudioGridCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}.scrollbar{scrollbar-width:thin;scrollbar-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))\n    var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar{height:var(--dyte-space-1\\.5, 6px);width:var(--dyte-space-1\\.5, 6px);border-radius:9999px;background-color:var(--dyte-scrollbar-background, transparent)}.scrollbar::-webkit-scrollbar-thumb{border-radius:9999px;background-color:var(--dyte-scrollbar-color, rgb(var(--dyte-colors-background-600, 60 60 60)))}:host{position:relative;height:100%;width:100%;box-sizing:border-box}.content{position:relative;display:flex;height:100%;width:100%;flex-direction:column;overflow-y:auto}.waitlist-area{display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-800, 30 30 30) / var(--tw-bg-opacity))}.listening-title{text-align:center;margin-top:var(--dyte-space-5, 20px);margin-bottom:var(--dyte-space-4, 16px)}.waitlist-grid{flex:1 1 0%}.grid{box-sizing:border-box;flex:1 1 0%;gap:var(--dyte-space-6, 24px);display:flex;align-content:center;justify-content:center;flex-wrap:wrap}:host([size='md']) .grid{gap:var(--dyte-space-4, 16px)}:host([size='sm']) .grid{gap:var(--dyte-space-3, 12px)}dyte-audio-tile{aspect-ratio:1 / 1;flex:none;width:calc(20%);max-width:var(--dyte-space-48, 192px);transition:all 0.3s}dyte-audio-tile[size='md']{width:100%;max-width:var(--dyte-space-36, 144px)}dyte-audio-tile[size='sm']{width:100%;max-width:var(--dyte-space-24, 96px)}";

const DyteAudioGrid = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.onParticipantListUpdate = () => {
      if (!this.meeting) {
        return;
      }
      let activeParticipants = this.meeting.participants.active.toArray();
      if (!this.hideSelf) {
        activeParticipants = [...activeParticipants, this.meeting.self];
      }
      let onStageParticipants = this.meeting.participants.joined
        .toArray()
        .filter((p) => !activeParticipants.some((a) => a.id === p.id));
      this.activeParticipants = activeParticipants;
      this.onStageParticipants = onStageParticipants;
    };
    this.meeting = undefined;
    this.config = undefined;
    this.states = undefined;
    this.iconPack = defaultIconPack;
    this.size = undefined;
    this.t = useLanguage();
    this.hideSelf = false;
    this.activeParticipants = [];
    this.onStageParticipants = [];
    this.offStageParticipants = [];
  }
  connectedCallback() {
    this.meetingChanged(this.meeting);
  }
  meetingChanged(meeting) {
    if (!meeting || meeting.self.config.viewType !== 'AUDIO_ROOM') {
      return;
    }
    this.onParticipantListUpdate();
    // listeners
    meeting.participants.active.addListener('participantJoined', this.onParticipantListUpdate);
    meeting.participants.active.addListener('participantLeft', this.onParticipantListUpdate);
    meeting.participants.joined.addListener('participantJoined', this.onParticipantListUpdate);
    meeting.participants.joined.addListener('participantLeft', this.onParticipantListUpdate);
  }
  disconnectedCallback() {
    this.resizeObserver.disconnect();
    this.resizeObserver = undefined;
    this.meeting.participants.active.removeListener('participantJoined', this.onParticipantListUpdate);
    this.meeting.participants.active.removeListener('participantLeft', this.onParticipantListUpdate);
    this.meeting.participants.joined.removeListener('participantJoined', this.onParticipantListUpdate);
    this.meeting.participants.joined.removeListener('participantLeft', this.onParticipantListUpdate);
  }
  renderGrid(participants = []) {
    const defaults = {
      meeting: this.meeting,
      size: this.size,
      config: this.config,
      t: this.t,
      iconPack: this.iconPack,
      states: this.states,
    };
    return participants.map((participant) => {
      return (h(Render, { element: "dyte-audio-tile", defaults: defaults, props: {
          key: participant.id,
          participant,
        }, childProps: {
          participant,
        }, deepProps: true }));
    });
  }
  render() {
    const onStage = this.activeParticipants.concat(this.onStageParticipants);
    return (h(Host, null, h("div", { class: "content scrollbar" }, h("div", { class: "stage grid" }, this.renderGrid(onStage)), this.offStageParticipants.length > 0 && (h("div", { class: "waitlist-area" }, h("div", { class: "listening-title" }, this.offStageParticipants.length, " ", this.t('grid.listening')), h("div", { class: "waitlist-grid grid" }, this.renderGrid(this.offStageParticipants))))), h("slot", null)));
  }
  get host() { return getElement(this); }
  static get watchers() { return {
    "meeting": ["meetingChanged"]
  }; }
};
DyteAudioGrid.style = dyteAudioGridCss;

export { DyteAudioGrid as dyte_audio_grid };
