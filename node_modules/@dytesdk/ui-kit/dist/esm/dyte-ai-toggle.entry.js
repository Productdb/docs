import { r as registerInstance, c as createEvent, h, H as Host } from './index-926e26e8.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import { u as useLanguage } from './index-7b89c939.js';
import { s as state } from './store-8f4d7acc.js';
import './user-prefs-47572e95.js';

const dyteAiToggleCss = ":host{display:block}";

const DyteAiToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.variant = 'button';
    this.states = undefined;
    this.meeting = undefined;
    this.size = undefined;
    this.iconPack = defaultIconPack;
    this.t = useLanguage();
    this.aiActive = false;
  }
  statesChanged(s) {
    const states = s || state;
    this.aiActive = states.activeAI;
  }
  toggleAI() {
    const states = this.states || state;
    this.aiActive = !(states === null || states === void 0 ? void 0 : states.activeAI);
    this.stateUpdate.emit({
      activeAI: this.aiActive,
      activeMoreMenu: false,
      activeSidebar: false,
    });
    state.activeAI = this.aiActive;
    state.activeMoreMenu = false;
    state.activeSidebar = false;
  }
  render() {
    var _a, _b;
    const text = this.t('ai.meeting_ai');
    if (!((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.permissions).transcriptionEnabled) {
      return null;
    }
    return (h(Host, { title: text }, h("dyte-controlbar-button", { part: "controlbar-button", size: this.size, iconPack: this.iconPack, t: this.t, class: { active: this.aiActive }, onClick: () => this.toggleAI(), icon: this.iconPack.meeting_ai, label: text, variant: this.variant, brandIcon: true })));
  }
  static get watchers() { return {
    "states": ["statesChanged"]
  }; }
};
DyteAiToggle.style = dyteAiToggleCss;

export { DyteAiToggle as dyte_ai_toggle };
