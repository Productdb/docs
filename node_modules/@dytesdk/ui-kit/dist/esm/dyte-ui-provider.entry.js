import { r as registerInstance, h, a as getElement } from './index-926e26e8.js';
import './store-8f4d7acc.js';
import './breakout-rooms-manager-7dc0174a.js';
import { g as generateConfig, p as provideDyteDesignSystem } from './config-5075148d.js';
import { d as defaultConfig } from './default-ui-config-f87e0ba7.js';
import { g as getIconPack, a as getSize } from './size-d48d31c8.js';
import { u as useLanguage } from './index-7b89c939.js';
import './livestream-1a40fc8d.js';
import './user-prefs-47572e95.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import './breakout-rooms-dea0806e.js';
import './flags-f14ed3df.js';
import './keysIn-8bf552ee.js';
import './isObjectLike-0d1a05d5.js';

const DyteUiProvider = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.meeting = undefined;
    this.size = undefined;
    this.config = defaultConfig;
    this.t = useLanguage();
    this.iconPackUrl = undefined;
    this.loadConfigFromPreset = true;
    this.applyDesignSystem = true;
    this.joinRoom = true;
    this.isReady = false;
    this.iconPack = defaultIconPack;
  }
  async iconPackUrlChanged(url) {
    this.iconPack = await getIconPack(url);
  }
  async meetingChanged(meeting) {
    var _a;
    if (!meeting)
      return;
    if (!meeting.self.roomJoined && this.joinRoom) {
      this.isReady = false;
      await meeting.joinRoom();
      this.isReady = true;
    }
    if (this.loadConfigFromPreset && meeting.self.config != null) {
      const theme = meeting.self.config;
      const { config } = generateConfig(theme, meeting);
      if (this.config === defaultConfig) {
        // only override the config if the object is same as defaultConfig
        // which means it's a different object passed via prop
        this.config = Object.assign(Object.assign(Object.assign({}, defaultConfig), config), { designTokens: Object.assign(Object.assign({}, defaultConfig.designTokens), config.designTokens) });
      }
    }
    if (this.applyDesignSystem &&
      ((_a = this.config) === null || _a === void 0 ? void 0 : _a.designTokens) != null &&
      typeof document !== 'undefined') {
      provideDyteDesignSystem(document.documentElement, this.config.designTokens);
    }
    Array.from(this.hostEl.children)
      .filter((element) => element.tagName.startsWith('DYTE-'))
      .forEach((element) => {
      element['meeting'] = meeting;
      element['config'] = this.config;
      element['size'] = this.size;
      element['iconPack'] = this.iconPack;
      element['t'] = this.t;
    });
  }
  connectedCallback() {
    this.resizeObserver = new ResizeObserver(() => this.handleResize());
    this.resizeObserver.observe(this.hostEl);
    this.meetingChanged(this.meeting);
    this.iconPackUrlChanged(this.iconPackUrl);
  }
  handleResize() {
    this.size = getSize(this.hostEl.clientWidth);
  }
  render() {
    if (!this.isReady)
      return null;
    return h("slot", null);
  }
  get hostEl() { return getElement(this); }
  static get watchers() { return {
    "iconPackUrl": ["iconPackUrlChanged"],
    "meeting": ["meetingChanged"]
  }; }
};

export { DyteUiProvider as dyte_ui_provider };
