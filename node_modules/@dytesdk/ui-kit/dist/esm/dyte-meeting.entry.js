import { r as registerInstance, c as createEvent, h, a as getElement } from './index-926e26e8.js';
import { p as provideDyteDesignSystem, g as generateConfig, m as merge } from './config-5075148d.js';
import { g as getIconPack, a as getSize } from './size-d48d31c8.js';
import { u as useLanguage } from './index-7b89c939.js';
import { d as defaultConfig } from './default-ui-config-f87e0ba7.js';
import { R as Render } from './index-9bb85c23.js';
import { s as state } from './store-8f4d7acc.js';
import './breakout-rooms-manager-7dc0174a.js';
import './livestream-1a40fc8d.js';
import { g as getUserPreferences } from './user-prefs-47572e95.js';
import { i as index } from './ResizeObserver.es-02979d4e.js';
import { d as defaultIconPack } from './default-icon-pack-307ffa7c.js';
import './keysIn-8bf552ee.js';
import './isObjectLike-0d1a05d5.js';
import './flags-f14ed3df.js';
import './breakout-rooms-dea0806e.js';

const dyteMeetingCss = ":host{line-height:initial;font-family:var(--dyte-font-family, sans-serif);font-feature-settings:normal;font-variation-settings:normal}p{margin:var(--dyte-space-0, 0px);padding:var(--dyte-space-0, 0px)}:host{box-sizing:border-box;display:flex;flex-direction:column;--tw-bg-opacity:1;background-color:rgba(var(--dyte-colors-background-1000, 8 8 8) / var(--tw-bg-opacity));color:rgb(var(--dyte-colors-text-900, 255 255 255 / 0.88));overflow:hidden;position:fixed;top:var(--dyte-space-0, 0px);right:var(--dyte-space-0, 0px);bottom:var(--dyte-space-0, 0px);left:var(--dyte-space-0, 0px);height:100%;width:100%}:host([mode='fill']){position:relative}";

const DyteMeeting = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.stateUpdate = createEvent(this, "dyteStateUpdate", 7);
    this.roomJoinedListener = () => {
      this.setStates({ meeting: 'joined' });
      state.meeting = 'joined';
    };
    this.socketServiceRoomJoinedListener = () => {
      if (this.meeting.stage.status === 'ON_STAGE' || this.meeting.stage.status === undefined)
        return;
      this.setStates({ meeting: 'joined' });
      state.meeting = 'joined';
    };
    this.waitlistedListener = () => {
      this.setStates({ meeting: 'waiting' });
      state.meeting = 'waiting';
    };
    this.roomLeftListener = ({ state: state$1 }) => {
      const states = this.states || state;
      if ((states === null || states === void 0 ? void 0 : states.roomLeftState) === 'disconnected') {
        this.setStates({ meeting: 'ended', roomLeftState: state$1 });
        state.meeting = 'ended';
        return;
      }
      this.setStates({ meeting: 'ended', roomLeftState: state$1 });
      state.meeting = 'ended';
      state.roomLeftState = state$1;
    };
    this.mediaPermissionUpdateListener = ({ kind, message }) => {
      if (['audio', 'video'].includes(kind)) {
        if (message === 'ACCEPTED' || message === 'NOT_REQUESTED' || state.activeDebugger)
          return;
        const permissionModalSettings = {
          enabled: true,
          kind,
        };
        this.setStates({ activePermissionsMessage: permissionModalSettings });
        state.activePermissionsMessage = permissionModalSettings;
      }
    };
    this.joinStateAcceptedListener = () => {
      this.setStates({ activeJoinStage: true });
      this.stateUpdate.emit({ activeJoinStage: true });
      state.activeJoinStage = true;
    };
    this.loadConfigFromPreset = true;
    this.applyDesignSystem = true;
    this.mode = 'fixed';
    this.leaveOnUnmount = false;
    this.meeting = undefined;
    this.showSetupScreen = undefined;
    this.t = useLanguage();
    this.config = defaultConfig;
    this.iconPackUrl = undefined;
    this.size = undefined;
    this.gridLayout = 'row';
    this.states = {
      meeting: 'idle',
      prefs: getUserPreferences(),
    };
    this.iconPack = defaultIconPack;
  }
  connectedCallback() {
    var _a;
    this.resizeObserver = new index(() => this.handleResize());
    this.resizeObserver.observe(this.host);
    if (this.applyDesignSystem &&
      ((_a = this.config) === null || _a === void 0 ? void 0 : _a.designTokens) != null &&
      typeof document !== 'undefined') {
      provideDyteDesignSystem(document.documentElement, this.config.designTokens);
    }
    this.meetingChanged(this.meeting);
    this.iconPackUrlChanged(this.iconPackUrl);
  }
  clearListeners(meeting) {
    if (meeting == undefined)
      return;
    meeting.self.removeListener('roomJoined', this.roomJoinedListener);
    meeting.self.removeListener('socketServiceRoomJoined', this.roomJoinedListener);
    meeting.meta.removeListener('socketReconnected', this.roomJoinedListener);
    meeting.self.removeListener('roomLeft', this.roomLeftListener);
    meeting.self.removeListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    meeting.self.removeListener('waitlisted', this.waitlistedListener);
    meeting.self.removeListener('joinStageRequestAccepted', this.joinStateAcceptedListener);
  }
  disconnectedCallback() {
    var _a;
    if (this.leaveOnUnmount) {
      (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.leaveRoom();
    }
    this.resizeObserver.disconnect();
    this.clearListeners(this.meeting);
  }
  meetingChanged(meeting) {
    var _a, _b;
    if (meeting == null)
      return;
    this.setStates({ viewType: meeting.meta.viewType });
    if (this.loadConfigFromPreset && meeting.self.config != null) {
      const theme = meeting.self.config;
      const { config, data } = generateConfig(theme, meeting);
      if (this.config === defaultConfig) {
        // only override the config if the object is same as defaultConfig
        // which means it's a different object passed via prop
        this.config = config;
      }
      if (this.showSetupScreen == null) {
        // only override this value if the prop isn't passed
        this.showSetupScreen = data.showSetupScreen;
      }
      if (meeting.connectedMeetings.supportsConnectedMeetings &&
        ((_a = state.activeBreakoutRoomsManager) === null || _a === void 0 ? void 0 : _a.destinationMeetingId)) {
        this.showSetupScreen = false;
      }
    }
    if (this.applyDesignSystem &&
      ((_b = this.config) === null || _b === void 0 ? void 0 : _b.designTokens) != null &&
      typeof document !== 'undefined') {
      provideDyteDesignSystem(document.documentElement, this.config.designTokens);
    }
    if (meeting.meta.viewType === 'LIVESTREAM') {
      meeting.self.addListener('socketServiceRoomJoined', this.socketServiceRoomJoinedListener);
    }
    meeting.self.addListener('roomJoined', this.roomJoinedListener);
    meeting.self.addListener('waitlisted', this.waitlistedListener);
    meeting.self.addListener('roomLeft', this.roomLeftListener);
    meeting.self.addListener('mediaPermissionUpdate', this.mediaPermissionUpdateListener);
    meeting.self.addListener('joinStageRequestAccepted', this.joinStateAcceptedListener);
    if (meeting.connectedMeetings.supportsConnectedMeetings) {
      meeting.connectedMeetings.once('changingMeeting', this.handleChangingMeeting);
    }
    if (meeting.self.roomJoined) {
      this.states = Object.assign(Object.assign({}, this.states), { meeting: 'joined' });
      state.meeting = 'joined';
    }
    else {
      if (this.showSetupScreen) {
        this.states = Object.assign(Object.assign({}, this.states), { meeting: 'setup' });
        state.meeting = 'setup';
      }
      else {
        // join directly to the meeting
        meeting.joinRoom();
      }
    }
  }
  async iconPackUrlChanged(url) {
    this.iconPack = await getIconPack(url);
  }
  listenState(e) {
    e.stopPropagation();
    this.setStates(e.detail);
  }
  handleChangingMeeting(destinationMeetingId) {
    state.activeBreakoutRoomsManager = Object.assign(Object.assign({}, state.activeBreakoutRoomsManager), { destinationMeetingId });
  }
  handleResize() {
    this.size = getSize(this.host.clientWidth);
  }
  setStates(states) {
    const newStates = Object.assign({}, this.states);
    merge(newStates, states);
    this.states = newStates;
  }
  render() {
    var _a, _b;
    const defaults = {
      meeting: this.meeting,
      size: this.size,
      states: this.states || state,
      config: this.config,
      iconPack: this.iconPack,
      t: this.t,
    };
    const elementProps = {
      'dyte-grid': {
        layout: this.gridLayout,
      },
    };
    if (((_b = (_a = this.meeting) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.viewType) === 'CHAT')
      return h(Render, { element: "dyte-chat", defaults: defaults });
    return h(Render, { element: "dyte-meeting", defaults: defaults, asHost: true, elementProps: elementProps });
  }
  get host() { return getElement(this); }
  static get watchers() { return {
    "meeting": ["meetingChanged"],
    "iconPackUrl": ["iconPackUrlChanged"]
  }; }
};
DyteMeeting.style = dyteMeetingCss;

export { DyteMeeting as dyte_meeting };
