var cm = Object.defineProperty, dm = Object.defineProperties;
var um = Object.getOwnPropertyDescriptors;
var wd = Object.getOwnPropertySymbols, lm = Object.getPrototypeOf, hm = Object.prototype.hasOwnProperty, fm = Object.prototype.propertyIsEnumerable, pm = Reflect.get;
var $a = (t, e, r) => e in t ? cm(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r, Y = (t, e) => {
  for (var r in e || (e = {}))
    hm.call(e, r) && $a(t, r, e[r]);
  if (wd)
    for (var r of wd(e))
      fm.call(e, r) && $a(t, r, e[r]);
  return t;
}, Ue = (t, e) => dm(t, um(e));
var _ = (t, e, r) => ($a(t, typeof e != "symbol" ? e + "" : e, r), r), Ua = (t, e, r) => {
  if (!e.has(t))
    throw TypeError("Cannot " + r);
};
var d = (t, e, r) => (Ua(t, e, "read from private field"), r ? r.call(t) : e.get(t)), b = (t, e, r) => {
  if (e.has(t))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(t) : e.set(t, r);
}, y = (t, e, r, n) => (Ua(t, e, "write to private field"), n ? n.call(t, r) : e.set(t, r), r);
var j = (t, e, r) => (Ua(t, e, "access private method"), r), yd = (t, e, r) => pm(lm(t), r, e);
var p = (t, e, r) => new Promise((n, i) => {
  var s = (c) => {
    try {
      o(r.next(c));
    } catch (u) {
      i(u);
    }
  }, a = (c) => {
    try {
      o(r.throw(c));
    } catch (u) {
      i(u);
    }
  }, o = (c) => c.done ? n(c.value) : Promise.resolve(c.value).then(s, a);
  o((r = r.apply(t, e)).next());
});
import { v4 as ot, validate as Dl } from "uuid";
import { EventEmitter as ta } from "events";
import mm from "bowser";
import { faker as gi } from "@faker-js/faker";
import * as Es from "worker-timers";
function gm(t) {
  const { length: e } = this, r = t >= 0 ? t : e + t;
  return r < 0 || r >= e ? void 0 : this[r];
}
Array.prototype.at || Object.assign(Array.prototype, { at: gm });
function _m(t) {
  const { length: e } = this, r = t >= 0 ? t : e + t;
  return r < 0 || r >= e ? void 0 : this[r];
}
String.prototype.at || Object.assign(String.prototype, { at: _m });
var ct;
(function(t) {
  t.GroupCall = "GROUP_CALL", t.Webinar = "WEBINAR", t.AudioRoom = "AUDIO_ROOM", t.Livestream = "LIVESTREAM", t.Chat = "CHAT";
})(ct || (ct = {}));
var ws;
(function(t) {
  t.Skip = "SKIP", t.OnPrivilegedUserEntry = "ON_PRIVILEGED_USER_ENTRY", t.SkipOnAccept = "SKIP_ON_ACCEPT";
})(ws || (ws = {}));
var L;
(function(t) {
  t.Allowed = "ALLOWED", t.NotAllowed = "NOT_ALLOWED", t.CanRequest = "CAN_REQUEST";
})(L || (L = {}));
var ys;
(function(t) {
  t.Allowed = "ALLOWED", t.NotAllowed = "NOT_ALLOWED";
})(ys || (ys = {}));
var Ad;
(function(t) {
  t.FULL_ACCESS = "FULL_ACCESS", t.VIEW_ONLY = "VIEW_ONLY";
})(Ad || (Ad = {}));
var As;
(function(t) {
  t.skip = "SKIP", t.onAccept = "ON_ACCEPT", t.skipOnPrivilegedUserEntry = "SKIP_ON_PRIVILEGED_USER_ENTRY", t.skipOnAccept = "SKIP_ON_ACCEPT";
})(As || (As = {}));
var Xn;
(function(t) {
  t.none = "NONE", t.recorder = "RECORDER", t.livestreamer = "LIVESTREAMER";
})(Xn || (Xn = {}));
var Eo;
(function(t) {
  t.groupCall = "GROUP_CALL", t.webinar = "WEBINAR", t.audioRoom = "AUDIO_ROOM", t.livestream = "LIVESTREAM", t.chat = "CHAT";
})(Eo || (Eo = {}));
var Rd;
(function(t) {
  t.SKIP = "skip", t.SKIP_ON_PRIVILEGED_USER_ENTRY = "skipOnPrivilegedUserEntry", t.ON_ACCEPT = "skipOnAccept", t.SKIP_ON_ACCEPT = "skipOnAccept";
})(Rd || (Rd = {}));
Eo.groupCall, As.skipOnAccept, Xn.none;
function Tm(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
var wo = {}, vm = {
  get exports() {
    return wo;
  },
  set exports(t) {
    wo = t;
  }
}, Rs = {}, Em = {
  get exports() {
    return Rs;
  },
  set exports(t) {
    Rs = t;
  }
}, Ol = function(e, r) {
  return function() {
    for (var i = new Array(arguments.length), s = 0; s < i.length; s++)
      i[s] = arguments[s];
    return e.apply(r, i);
  };
}, wm = Ol, Gr = Object.prototype.toString;
function sc(t) {
  return Array.isArray(t);
}
function yo(t) {
  return typeof t == "undefined";
}
function ym(t) {
  return t !== null && !yo(t) && t.constructor !== null && !yo(t.constructor) && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
}
function Ml(t) {
  return Gr.call(t) === "[object ArrayBuffer]";
}
function Am(t) {
  return Gr.call(t) === "[object FormData]";
}
function Rm(t) {
  var e;
  return typeof ArrayBuffer != "undefined" && ArrayBuffer.isView ? e = ArrayBuffer.isView(t) : e = t && t.buffer && Ml(t.buffer), e;
}
function Sm(t) {
  return typeof t == "string";
}
function bm(t) {
  return typeof t == "number";
}
function Nl(t) {
  return t !== null && typeof t == "object";
}
function us(t) {
  if (Gr.call(t) !== "[object Object]")
    return !1;
  var e = Object.getPrototypeOf(t);
  return e === null || e === Object.prototype;
}
function km(t) {
  return Gr.call(t) === "[object Date]";
}
function Cm(t) {
  return Gr.call(t) === "[object File]";
}
function Im(t) {
  return Gr.call(t) === "[object Blob]";
}
function xl(t) {
  return Gr.call(t) === "[object Function]";
}
function Pm(t) {
  return Nl(t) && xl(t.pipe);
}
function Dm(t) {
  return Gr.call(t) === "[object URLSearchParams]";
}
function Om(t) {
  return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
}
function Mm() {
  return typeof navigator != "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS") ? !1 : typeof window != "undefined" && typeof document != "undefined";
}
function ac(t, e) {
  if (!(t === null || typeof t == "undefined"))
    if (typeof t != "object" && (t = [t]), sc(t))
      for (var r = 0, n = t.length; r < n; r++)
        e.call(null, t[r], r, t);
    else
      for (var i in t)
        Object.prototype.hasOwnProperty.call(t, i) && e.call(null, t[i], i, t);
}
function Ao() {
  var t = {};
  function e(i, s) {
    us(t[s]) && us(i) ? t[s] = Ao(t[s], i) : us(i) ? t[s] = Ao({}, i) : sc(i) ? t[s] = i.slice() : t[s] = i;
  }
  for (var r = 0, n = arguments.length; r < n; r++)
    ac(arguments[r], e);
  return t;
}
function Nm(t, e, r) {
  return ac(e, function(i, s) {
    r && typeof i == "function" ? t[s] = wm(i, r) : t[s] = i;
  }), t;
}
function xm(t) {
  return t.charCodeAt(0) === 65279 && (t = t.slice(1)), t;
}
var et = {
  isArray: sc,
  isArrayBuffer: Ml,
  isBuffer: ym,
  isFormData: Am,
  isArrayBufferView: Rm,
  isString: Sm,
  isNumber: bm,
  isObject: Nl,
  isPlainObject: us,
  isUndefined: yo,
  isDate: km,
  isFile: Cm,
  isBlob: Im,
  isFunction: xl,
  isStream: Pm,
  isURLSearchParams: Dm,
  isStandardBrowserEnv: Mm,
  forEach: ac,
  merge: Ao,
  extend: Nm,
  trim: Om,
  stripBOM: xm
}, In = et;
function Sd(t) {
  return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var Ll = function(e, r, n) {
  if (!r)
    return e;
  var i;
  if (n)
    i = n(r);
  else if (In.isURLSearchParams(r))
    i = r.toString();
  else {
    var s = [];
    In.forEach(r, function(c, u) {
      c === null || typeof c == "undefined" || (In.isArray(c) ? u = u + "[]" : c = [c], In.forEach(c, function(f) {
        In.isDate(f) ? f = f.toISOString() : In.isObject(f) && (f = JSON.stringify(f)), s.push(Sd(u) + "=" + Sd(f));
      }));
    }), i = s.join("&");
  }
  if (i) {
    var a = e.indexOf("#");
    a !== -1 && (e = e.slice(0, a)), e += (e.indexOf("?") === -1 ? "?" : "&") + i;
  }
  return e;
}, Lm = et;
function ra() {
  this.handlers = [];
}
ra.prototype.use = function(e, r, n) {
  return this.handlers.push({
    fulfilled: e,
    rejected: r,
    synchronous: n ? n.synchronous : !1,
    runWhen: n ? n.runWhen : null
  }), this.handlers.length - 1;
};
ra.prototype.eject = function(e) {
  this.handlers[e] && (this.handlers[e] = null);
};
ra.prototype.forEach = function(e) {
  Lm.forEach(this.handlers, function(n) {
    n !== null && e(n);
  });
};
var $m = ra, Um = et, Fm = function(e, r) {
  Um.forEach(e, function(i, s) {
    s !== r && s.toUpperCase() === r.toUpperCase() && (e[r] = i, delete e[s]);
  });
}, $l = function(e, r, n, i, s) {
  return e.config = r, n && (e.code = n), e.request = i, e.response = s, e.isAxiosError = !0, e.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }, e;
}, Fa, bd;
function Ul() {
  if (bd)
    return Fa;
  bd = 1;
  var t = $l;
  return Fa = function(r, n, i, s, a) {
    var o = new Error(r);
    return t(o, n, i, s, a);
  }, Fa;
}
var Va, kd;
function Vm() {
  if (kd)
    return Va;
  kd = 1;
  var t = Ul();
  return Va = function(r, n, i) {
    var s = i.config.validateStatus;
    !i.status || !s || s(i.status) ? r(i) : n(t(
      "Request failed with status code " + i.status,
      i.config,
      null,
      i.request,
      i
    ));
  }, Va;
}
var Ba, Cd;
function Bm() {
  if (Cd)
    return Ba;
  Cd = 1;
  var t = et;
  return Ba = t.isStandardBrowserEnv() ? (
    // Standard browser envs support document.cookie
    function() {
      return {
        write: function(n, i, s, a, o, c) {
          var u = [];
          u.push(n + "=" + encodeURIComponent(i)), t.isNumber(s) && u.push("expires=" + new Date(s).toGMTString()), t.isString(a) && u.push("path=" + a), t.isString(o) && u.push("domain=" + o), c === !0 && u.push("secure"), document.cookie = u.join("; ");
        },
        read: function(n) {
          var i = document.cookie.match(new RegExp("(^|;\\s*)(" + n + ")=([^;]*)"));
          return i ? decodeURIComponent(i[3]) : null;
        },
        remove: function(n) {
          this.write(n, "", Date.now() - 864e5);
        }
      };
    }()
  ) : (
    // Non standard browser env (web workers, react-native) lack needed support.
    function() {
      return {
        write: function() {
        },
        read: function() {
          return null;
        },
        remove: function() {
        }
      };
    }()
  ), Ba;
}
var Ga, Id;
function Gm() {
  return Id || (Id = 1, Ga = function(e) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
  }), Ga;
}
var qa, Pd;
function qm() {
  return Pd || (Pd = 1, qa = function(e, r) {
    return r ? e.replace(/\/+$/, "") + "/" + r.replace(/^\/+/, "") : e;
  }), qa;
}
var Ha, Dd;
function Hm() {
  if (Dd)
    return Ha;
  Dd = 1;
  var t = Gm(), e = qm();
  return Ha = function(n, i) {
    return n && !t(i) ? e(n, i) : i;
  }, Ha;
}
var Wa, Od;
function Wm() {
  if (Od)
    return Wa;
  Od = 1;
  var t = et, e = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ];
  return Wa = function(n) {
    var i = {}, s, a, o;
    return n && t.forEach(n.split(`
`), function(u) {
      if (o = u.indexOf(":"), s = t.trim(u.substr(0, o)).toLowerCase(), a = t.trim(u.substr(o + 1)), s) {
        if (i[s] && e.indexOf(s) >= 0)
          return;
        s === "set-cookie" ? i[s] = (i[s] ? i[s] : []).concat([a]) : i[s] = i[s] ? i[s] + ", " + a : a;
      }
    }), i;
  }, Wa;
}
var ja, Md;
function jm() {
  if (Md)
    return ja;
  Md = 1;
  var t = et;
  return ja = t.isStandardBrowserEnv() ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function() {
      var r = /(msie|trident)/i.test(navigator.userAgent), n = document.createElement("a"), i;
      function s(a) {
        var o = a;
        return r && (n.setAttribute("href", o), o = n.href), n.setAttribute("href", o), {
          href: n.href,
          protocol: n.protocol ? n.protocol.replace(/:$/, "") : "",
          host: n.host,
          search: n.search ? n.search.replace(/^\?/, "") : "",
          hash: n.hash ? n.hash.replace(/^#/, "") : "",
          hostname: n.hostname,
          port: n.port,
          pathname: n.pathname.charAt(0) === "/" ? n.pathname : "/" + n.pathname
        };
      }
      return i = s(window.location.href), function(o) {
        var c = t.isString(o) ? s(o) : o;
        return c.protocol === i.protocol && c.host === i.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    function() {
      return function() {
        return !0;
      };
    }()
  ), ja;
}
var Ka, Nd;
function na() {
  if (Nd)
    return Ka;
  Nd = 1;
  function t(e) {
    this.message = e;
  }
  return t.prototype.toString = function() {
    return "Cancel" + (this.message ? ": " + this.message : "");
  }, t.prototype.__CANCEL__ = !0, Ka = t, Ka;
}
var Ja, xd;
function Ld() {
  if (xd)
    return Ja;
  xd = 1;
  var t = et, e = Vm(), r = Bm(), n = Ll, i = Hm(), s = Wm(), a = jm(), o = Ul(), c = ia(), u = na();
  return Ja = function(f) {
    return new Promise(function(E, R) {
      var I = f.data, S = f.headers, k = f.responseType, O;
      function W() {
        f.cancelToken && f.cancelToken.unsubscribe(O), f.signal && f.signal.removeEventListener("abort", O);
      }
      t.isFormData(I) && delete S["Content-Type"];
      var C = new XMLHttpRequest();
      if (f.auth) {
        var te = f.auth.username || "", J = f.auth.password ? unescape(encodeURIComponent(f.auth.password)) : "";
        S.Authorization = "Basic " + btoa(te + ":" + J);
      }
      var Ee = i(f.baseURL, f.url);
      C.open(f.method.toUpperCase(), n(Ee, f.params, f.paramsSerializer), !0), C.timeout = f.timeout;
      function We() {
        if (C) {
          var kt = "getAllResponseHeaders" in C ? s(C.getAllResponseHeaders()) : null, Cn = !k || k === "text" || k === "json" ? C.responseText : C.response, Yr = {
            data: Cn,
            status: C.status,
            statusText: C.statusText,
            headers: kt,
            config: f,
            request: C
          };
          e(function(La) {
            E(La), W();
          }, function(La) {
            R(La), W();
          }, Yr), C = null;
        }
      }
      if ("onloadend" in C ? C.onloadend = We : C.onreadystatechange = function() {
        !C || C.readyState !== 4 || C.status === 0 && !(C.responseURL && C.responseURL.indexOf("file:") === 0) || setTimeout(We);
      }, C.onabort = function() {
        C && (R(o("Request aborted", f, "ECONNABORTED", C)), C = null);
      }, C.onerror = function() {
        R(o("Network Error", f, null, C)), C = null;
      }, C.ontimeout = function() {
        var Cn = f.timeout ? "timeout of " + f.timeout + "ms exceeded" : "timeout exceeded", Yr = f.transitional || c.transitional;
        f.timeoutErrorMessage && (Cn = f.timeoutErrorMessage), R(o(
          Cn,
          f,
          Yr.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
          C
        )), C = null;
      }, t.isStandardBrowserEnv()) {
        var li = (f.withCredentials || a(Ee)) && f.xsrfCookieName ? r.read(f.xsrfCookieName) : void 0;
        li && (S[f.xsrfHeaderName] = li);
      }
      "setRequestHeader" in C && t.forEach(S, function(Cn, Yr) {
        typeof I == "undefined" && Yr.toLowerCase() === "content-type" ? delete S[Yr] : C.setRequestHeader(Yr, Cn);
      }), t.isUndefined(f.withCredentials) || (C.withCredentials = !!f.withCredentials), k && k !== "json" && (C.responseType = f.responseType), typeof f.onDownloadProgress == "function" && C.addEventListener("progress", f.onDownloadProgress), typeof f.onUploadProgress == "function" && C.upload && C.upload.addEventListener("progress", f.onUploadProgress), (f.cancelToken || f.signal) && (O = function(kt) {
        C && (R(!kt || kt && kt.type ? new u("canceled") : kt), C.abort(), C = null);
      }, f.cancelToken && f.cancelToken.subscribe(O), f.signal && (f.signal.aborted ? O() : f.signal.addEventListener("abort", O))), I || (I = null), C.send(I);
    });
  }, Ja;
}
var Ya, $d;
function ia() {
  if ($d)
    return Ya;
  $d = 1;
  var t = et, e = Fm, r = $l, n = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  function i(c, u) {
    !t.isUndefined(c) && t.isUndefined(c["Content-Type"]) && (c["Content-Type"] = u);
  }
  function s() {
    var c;
    return (typeof XMLHttpRequest != "undefined" || typeof process != "undefined" && Object.prototype.toString.call(process) === "[object process]") && (c = Ld()), c;
  }
  function a(c, u, h) {
    if (t.isString(c))
      try {
        return (u || JSON.parse)(c), t.trim(c);
      } catch (f) {
        if (f.name !== "SyntaxError")
          throw f;
      }
    return (h || JSON.stringify)(c);
  }
  var o = {
    transitional: {
      silentJSONParsing: !0,
      forcedJSONParsing: !0,
      clarifyTimeoutError: !1
    },
    adapter: s(),
    transformRequest: [function(u, h) {
      return e(h, "Accept"), e(h, "Content-Type"), t.isFormData(u) || t.isArrayBuffer(u) || t.isBuffer(u) || t.isStream(u) || t.isFile(u) || t.isBlob(u) ? u : t.isArrayBufferView(u) ? u.buffer : t.isURLSearchParams(u) ? (i(h, "application/x-www-form-urlencoded;charset=utf-8"), u.toString()) : t.isObject(u) || h && h["Content-Type"] === "application/json" ? (i(h, "application/json"), a(u)) : u;
    }],
    transformResponse: [function(u) {
      var h = this.transitional || o.transitional, f = h && h.silentJSONParsing, g = h && h.forcedJSONParsing, E = !f && this.responseType === "json";
      if (E || g && t.isString(u) && u.length)
        try {
          return JSON.parse(u);
        } catch (R) {
          if (E)
            throw R.name === "SyntaxError" ? r(R, this, "E_JSON_PARSE") : R;
        }
      return u;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function(u) {
      return u >= 200 && u < 300;
    },
    headers: {
      common: {
        Accept: "application/json, text/plain, */*"
      }
    }
  };
  return t.forEach(["delete", "get", "head"], function(u) {
    o.headers[u] = {};
  }), t.forEach(["post", "put", "patch"], function(u) {
    o.headers[u] = t.merge(n);
  }), Ya = o, Ya;
}
var Km = et, Jm = ia(), Ym = function(e, r, n) {
  var i = this || Jm;
  return Km.forEach(n, function(a) {
    e = a.call(i, e, r);
  }), e;
}, za, Ud;
function Fl() {
  return Ud || (Ud = 1, za = function(e) {
    return !!(e && e.__CANCEL__);
  }), za;
}
var Fd = et, Xa = Ym, zm = Fl(), Xm = ia(), Qm = na();
function Qa(t) {
  if (t.cancelToken && t.cancelToken.throwIfRequested(), t.signal && t.signal.aborted)
    throw new Qm("canceled");
}
var Zm = function(e) {
  Qa(e), e.headers = e.headers || {}, e.data = Xa.call(
    e,
    e.data,
    e.headers,
    e.transformRequest
  ), e.headers = Fd.merge(
    e.headers.common || {},
    e.headers[e.method] || {},
    e.headers
  ), Fd.forEach(
    ["delete", "get", "head", "post", "put", "patch", "common"],
    function(i) {
      delete e.headers[i];
    }
  );
  var r = e.adapter || Xm.adapter;
  return r(e).then(function(i) {
    return Qa(e), i.data = Xa.call(
      e,
      i.data,
      i.headers,
      e.transformResponse
    ), i;
  }, function(i) {
    return zm(i) || (Qa(e), i && i.response && (i.response.data = Xa.call(
      e,
      i.response.data,
      i.response.headers,
      e.transformResponse
    ))), Promise.reject(i);
  });
}, st = et, Vl = function(e, r) {
  r = r || {};
  var n = {};
  function i(h, f) {
    return st.isPlainObject(h) && st.isPlainObject(f) ? st.merge(h, f) : st.isPlainObject(f) ? st.merge({}, f) : st.isArray(f) ? f.slice() : f;
  }
  function s(h) {
    if (st.isUndefined(r[h])) {
      if (!st.isUndefined(e[h]))
        return i(void 0, e[h]);
    } else
      return i(e[h], r[h]);
  }
  function a(h) {
    if (!st.isUndefined(r[h]))
      return i(void 0, r[h]);
  }
  function o(h) {
    if (st.isUndefined(r[h])) {
      if (!st.isUndefined(e[h]))
        return i(void 0, e[h]);
    } else
      return i(void 0, r[h]);
  }
  function c(h) {
    if (h in r)
      return i(e[h], r[h]);
    if (h in e)
      return i(void 0, e[h]);
  }
  var u = {
    url: a,
    method: a,
    data: a,
    baseURL: o,
    transformRequest: o,
    transformResponse: o,
    paramsSerializer: o,
    timeout: o,
    timeoutMessage: o,
    withCredentials: o,
    adapter: o,
    responseType: o,
    xsrfCookieName: o,
    xsrfHeaderName: o,
    onUploadProgress: o,
    onDownloadProgress: o,
    decompress: o,
    maxContentLength: o,
    maxBodyLength: o,
    transport: o,
    httpAgent: o,
    httpsAgent: o,
    cancelToken: o,
    socketPath: o,
    responseEncoding: o,
    validateStatus: c
  };
  return st.forEach(Object.keys(e).concat(Object.keys(r)), function(f) {
    var g = u[f] || s, E = g(f);
    st.isUndefined(E) && g !== c || (n[f] = E);
  }), n;
}, Za, Vd;
function Bl() {
  return Vd || (Vd = 1, Za = {
    version: "0.25.0"
  }), Za;
}
var eg = Bl().version, oc = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(t, e) {
  oc[t] = function(n) {
    return typeof n === t || "a" + (e < 1 ? "n " : " ") + t;
  };
});
var Bd = {};
oc.transitional = function(e, r, n) {
  function i(s, a) {
    return "[Axios v" + eg + "] Transitional option '" + s + "'" + a + (n ? ". " + n : "");
  }
  return function(s, a, o) {
    if (e === !1)
      throw new Error(i(a, " has been removed" + (r ? " in " + r : "")));
    return r && !Bd[a] && (Bd[a] = !0, console.warn(
      i(
        a,
        " has been deprecated since v" + r + " and will be removed in the near future"
      )
    )), e ? e(s, a, o) : !0;
  };
};
function tg(t, e, r) {
  if (typeof t != "object")
    throw new TypeError("options must be an object");
  for (var n = Object.keys(t), i = n.length; i-- > 0; ) {
    var s = n[i], a = e[s];
    if (a) {
      var o = t[s], c = o === void 0 || a(o, s, t);
      if (c !== !0)
        throw new TypeError("option " + s + " must be " + c);
      continue;
    }
    if (r !== !0)
      throw Error("Unknown option " + s);
  }
}
var rg = {
  assertOptions: tg,
  validators: oc
}, Gl = et, ng = Ll, Gd = $m, qd = Zm, sa = Vl, ql = rg, Pn = ql.validators;
function Hi(t) {
  this.defaults = t, this.interceptors = {
    request: new Gd(),
    response: new Gd()
  };
}
Hi.prototype.request = function(e, r) {
  if (typeof e == "string" ? (r = r || {}, r.url = e) : r = e || {}, !r.url)
    throw new Error("Provided config url is not valid");
  r = sa(this.defaults, r), r.method ? r.method = r.method.toLowerCase() : this.defaults.method ? r.method = this.defaults.method.toLowerCase() : r.method = "get";
  var n = r.transitional;
  n !== void 0 && ql.assertOptions(n, {
    silentJSONParsing: Pn.transitional(Pn.boolean),
    forcedJSONParsing: Pn.transitional(Pn.boolean),
    clarifyTimeoutError: Pn.transitional(Pn.boolean)
  }, !1);
  var i = [], s = !0;
  this.interceptors.request.forEach(function(E) {
    typeof E.runWhen == "function" && E.runWhen(r) === !1 || (s = s && E.synchronous, i.unshift(E.fulfilled, E.rejected));
  });
  var a = [];
  this.interceptors.response.forEach(function(E) {
    a.push(E.fulfilled, E.rejected);
  });
  var o;
  if (!s) {
    var c = [qd, void 0];
    for (Array.prototype.unshift.apply(c, i), c = c.concat(a), o = Promise.resolve(r); c.length; )
      o = o.then(c.shift(), c.shift());
    return o;
  }
  for (var u = r; i.length; ) {
    var h = i.shift(), f = i.shift();
    try {
      u = h(u);
    } catch (g) {
      f(g);
      break;
    }
  }
  try {
    o = qd(u);
  } catch (g) {
    return Promise.reject(g);
  }
  for (; a.length; )
    o = o.then(a.shift(), a.shift());
  return o;
};
Hi.prototype.getUri = function(e) {
  if (!e.url)
    throw new Error("Provided config url is not valid");
  return e = sa(this.defaults, e), ng(e.url, e.params, e.paramsSerializer).replace(/^\?/, "");
};
Gl.forEach(["delete", "get", "head", "options"], function(e) {
  Hi.prototype[e] = function(r, n) {
    return this.request(sa(n || {}, {
      method: e,
      url: r,
      data: (n || {}).data
    }));
  };
});
Gl.forEach(["post", "put", "patch"], function(e) {
  Hi.prototype[e] = function(r, n, i) {
    return this.request(sa(i || {}, {
      method: e,
      url: r,
      data: n
    }));
  };
});
var ig = Hi, eo, Hd;
function sg() {
  if (Hd)
    return eo;
  Hd = 1;
  var t = na();
  function e(r) {
    if (typeof r != "function")
      throw new TypeError("executor must be a function.");
    var n;
    this.promise = new Promise(function(a) {
      n = a;
    });
    var i = this;
    this.promise.then(function(s) {
      if (i._listeners) {
        var a, o = i._listeners.length;
        for (a = 0; a < o; a++)
          i._listeners[a](s);
        i._listeners = null;
      }
    }), this.promise.then = function(s) {
      var a, o = new Promise(function(c) {
        i.subscribe(c), a = c;
      }).then(s);
      return o.cancel = function() {
        i.unsubscribe(a);
      }, o;
    }, r(function(a) {
      i.reason || (i.reason = new t(a), n(i.reason));
    });
  }
  return e.prototype.throwIfRequested = function() {
    if (this.reason)
      throw this.reason;
  }, e.prototype.subscribe = function(n) {
    if (this.reason) {
      n(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(n) : this._listeners = [n];
  }, e.prototype.unsubscribe = function(n) {
    if (this._listeners) {
      var i = this._listeners.indexOf(n);
      i !== -1 && this._listeners.splice(i, 1);
    }
  }, e.source = function() {
    var n, i = new e(function(a) {
      n = a;
    });
    return {
      token: i,
      cancel: n
    };
  }, eo = e, eo;
}
var to, Wd;
function ag() {
  return Wd || (Wd = 1, to = function(e) {
    return function(n) {
      return e.apply(null, n);
    };
  }), to;
}
var ro, jd;
function og() {
  if (jd)
    return ro;
  jd = 1;
  var t = et;
  return ro = function(r) {
    return t.isObject(r) && r.isAxiosError === !0;
  }, ro;
}
var Kd = et, cg = Ol, ls = ig, dg = Vl, ug = ia();
function Hl(t) {
  var e = new ls(t), r = cg(ls.prototype.request, e);
  return Kd.extend(r, ls.prototype, e), Kd.extend(r, e), r.create = function(i) {
    return Hl(dg(t, i));
  }, r;
}
var Kt = Hl(ug);
Kt.Axios = ls;
Kt.Cancel = na();
Kt.CancelToken = sg();
Kt.isCancel = Fl();
Kt.VERSION = Bl().version;
Kt.all = function(e) {
  return Promise.all(e);
};
Kt.spread = ag();
Kt.isAxiosError = og();
Em.exports = Kt;
Rs.default = Kt;
(function(t) {
  t.exports = Rs;
})(vm);
const Ro = /* @__PURE__ */ Tm(wo);
let Wl = "hXgU8Wc8pwuGNq9ms5q9Hh";
var El;
typeof process != "undefined" && (El = process == null ? void 0 : process.env) != null && El.FLAGSMITH_ENVIRONMENT_KEY && (Wl = process.env.FLAGSMITH_ENVIRONMENT_KEY);
function lg(t = []) {
  const e = {};
  return t.forEach((r) => {
    e[r.feature.name] = {
      enabled: r.enabled,
      value: r.feature_state_value
    };
  }), e;
}
class hg {
  constructor(e = Wl) {
    _(this, "flags", {});
    _(this, "environmentKey", null);
    this.environmentKey = e, this.identify = this.identify.bind(this), this.getValue = this.getValue.bind(this), this.hasFeature = this.hasFeature.bind(this), this.getAllFlags = this.getAllFlags.bind(this);
  }
  identify(a) {
    return p(this, arguments, function* (e, r = {}, n = !1, i = 5e3, s = "edge.api.flagsmith.com") {
      const o = JSON.parse(JSON.stringify(r)), c = Object.entries(o).map((u) => ({
        trait_key: u[0],
        trait_value: u[1]
      }));
      try {
        const u = "_" + (Math.random() + 1).toString(36).substring(2), h = yield Ro.post(`https://${s}/api/v1/identities/`, {
          identifier: e + (n ? u : ""),
          traits: c
        }, {
          headers: {
            "Content-Type": "application/json",
            "X-Environment-Key": this.environmentKey
          },
          timeout: i
        });
        this.flags = lg(h.data.flags || []);
      } catch (u) {
      }
      return this.flags;
    });
  }
  getValue(e) {
    return this.flags && this.flags[e] && this.flags[e].value;
  }
  hasFeature(e) {
    return this.flags && this.flags[e] && this.flags[e].enabled;
  }
  getAllFlags() {
    return this.flags;
  }
}
const ae = new hg(), jl = [-2, -1, 0, 1, 2], fg = [0, 1, 2, 3, 4];
function pg(t) {
  t = t.trim();
  let e = "0", r = "0", n = "0";
  return t.length == 4 ? (e = "0x" + t[1] + t[1], r = "0x" + t[2] + t[2], n = "0x" + t[3] + t[3]) : t.length > 6 && (e = "0x" + t[1] + t[2], r = "0x" + t[3] + t[4], n = "0x" + t[5] + t[6]), [+e, +r, +n];
}
const mg = (t, e, r) => {
  let n, i, s;
  if (e == 0)
    n = i = s = r;
  else {
    const a = (u, h, f) => (f < 0 && (f += 1), f > 1 && (f -= 1), f < 0.16666666666666666 ? u + (h - u) * 6 * f : f < 0.5 ? h : f < 0.6666666666666666 ? u + (h - u) * (0.6666666666666666 - f) * 6 : u), o = r < 0.5 ? r * (1 + e) : r + e - r * e, c = 2 * r - o;
    n = a(c, o, t + 1 / 3), i = a(c, o, t), s = a(c, o, t - 1 / 3);
  }
  return [Math.round(n * 255), Math.round(i * 255), Math.round(s * 255)];
}, gg = (t, e, r) => {
  t /= 255, e /= 255, r /= 255;
  const n = Math.max(t, e, r), i = Math.min(t, e, r);
  let s, a;
  const o = (n + i) / 2;
  if (n == i)
    s = a = 0;
  else {
    const c = n - i;
    switch (a = o > 0.5 ? c / (2 - n - i) : c / (n + i), n) {
      case t:
        s = (e - r) / c + (e < r ? 6 : 0);
        break;
      case e:
        s = (r - t) / c + 2;
        break;
      case r:
        s = (t - e) / c + 4;
        break;
    }
    s /= 6;
  }
  return [s, a, o];
}, _g = (t, e, r) => {
  const n = (i) => i.toString(16).padStart(2, "0");
  return `#${n(t)}${n(e)}${n(r)}`;
}, Kl = (t, e = jl, r = 0.4) => {
  const n = [], [i, s, a] = pg(t), [o, c, u] = gg(i, s, a), h = Math.round(u * 100);
  h > 70 ? r = 0.8 : h > 60 ? r = 0.9 : h < 10 ? r = 0.075 : h < 42 && (r = 0.3);
  const f = e.findIndex((S) => S === 0);
  if (f === -1)
    throw new Error("Invalid reducer provided, it must contain atleast one zero");
  const g = 5 - f, E = f + 1, R = (100 - h) / g, I = h / E;
  for (const S of e) {
    let k;
    S < 0 ? k = h + S * I * r : S > 0 ? k = h + S * R * r : k = h;
    const [O, W, C] = mg(o, c, k / 100);
    n.push(_g(O, W, C));
  }
  return n;
}, Jd = {
  dark: {
    background: {
      1e3: "#252525",
      900: "#2F2F2F",
      800: "#323232",
      700: "#3E3E3E",
      600: "#4A4A4A"
    },
    text: "#F5F5F5",
    "video-bg": "#1C1C1C"
  },
  light: {
    background: {
      1e3: "#FFFFFF",
      900: "#F5F5F5",
      800: "#EBEBEB",
      700: "#E0E0E0",
      600: "#D6D6D6"
    },
    text: "#111111",
    "text-on-brand": "#ffffff",
    "video-bg": "#DADADA"
  }
}, Tg = (t) => {
  const [e, r, n, i, s] = Kl(t, jl);
  return { 300: e, 400: r, 500: n, 600: i, 700: s };
}, vg = (t) => {
  if (t === "#FFFFFF")
    return Jd.light.background;
  if (t === "#000000")
    return Jd.dark.background;
  const [e, r, n, i, s] = Kl(t, fg);
  return { 1e3: e, 900: r, 800: n, 700: i, 600: s };
};
function Eg() {
  this.__data__ = [], this.size = 0;
}
function Nt(t, e) {
  return t === e || t !== t && e !== e;
}
function aa(t, e) {
  for (var r = t.length; r--; )
    if (Nt(t[r][0], e))
      return r;
  return -1;
}
var wg = Array.prototype, yg = wg.splice;
function Ag(t) {
  var e = this.__data__, r = aa(e, t);
  if (r < 0)
    return !1;
  var n = e.length - 1;
  return r == n ? e.pop() : yg.call(e, r, 1), --this.size, !0;
}
function Rg(t) {
  var e = this.__data__, r = aa(e, t);
  return r < 0 ? void 0 : e[r][1];
}
function Sg(t) {
  return aa(this.__data__, t) > -1;
}
function bg(t, e) {
  var r = this.__data__, n = aa(r, t);
  return n < 0 ? (++this.size, r.push([t, e])) : r[n][1] = e, this;
}
function _r(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
_r.prototype.clear = Eg;
_r.prototype.delete = Ag;
_r.prototype.get = Rg;
_r.prototype.has = Sg;
_r.prototype.set = bg;
function kg() {
  this.__data__ = new _r(), this.size = 0;
}
function Cg(t) {
  var e = this.__data__, r = e.delete(t);
  return this.size = e.size, r;
}
function Ig(t) {
  return this.__data__.get(t);
}
function Pg(t) {
  return this.__data__.has(t);
}
var Dg = typeof global == "object" && global && global.Object === Object && global;
const Jl = Dg;
var Og = typeof self == "object" && self && self.Object === Object && self, Mg = Jl || Og || Function("return this")();
const Me = Mg;
var Ng = Me.Symbol;
const Ge = Ng;
var Yl = Object.prototype, xg = Yl.hasOwnProperty, Lg = Yl.toString, hi = Ge ? Ge.toStringTag : void 0;
function $g(t) {
  var e = xg.call(t, hi), r = t[hi];
  try {
    t[hi] = void 0;
    var n = !0;
  } catch (s) {
  }
  var i = Lg.call(t);
  return n && (e ? t[hi] = r : delete t[hi]), i;
}
var Ug = Object.prototype, Fg = Ug.toString;
function Vg(t) {
  return Fg.call(t);
}
var Bg = "[object Null]", Gg = "[object Undefined]", Yd = Ge ? Ge.toStringTag : void 0;
function Ke(t) {
  return t == null ? t === void 0 ? Gg : Bg : Yd && Yd in Object(t) ? $g(t) : Vg(t);
}
function _e(t) {
  var e = typeof t;
  return t != null && (e == "object" || e == "function");
}
var qg = "[object AsyncFunction]", Hg = "[object Function]", Wg = "[object GeneratorFunction]", jg = "[object Proxy]";
function Tr(t) {
  if (!_e(t))
    return !1;
  var e = Ke(t);
  return e == Hg || e == Wg || e == qg || e == jg;
}
var Kg = Me["__core-js_shared__"];
const hs = Kg;
var zd = function() {
  var t = /[^.]+$/.exec(hs && hs.keys && hs.keys.IE_PROTO || "");
  return t ? "Symbol(src)_1." + t : "";
}();
function Jg(t) {
  return !!zd && zd in t;
}
var Yg = Function.prototype, zg = Yg.toString;
function vn(t) {
  if (t != null) {
    try {
      return zg.call(t);
    } catch (e) {
    }
    try {
      return t + "";
    } catch (e) {
    }
  }
  return "";
}
var Xg = /[\\^$.*+?()[\]{}|]/g, Qg = /^\[object .+?Constructor\]$/, Zg = Function.prototype, e_ = Object.prototype, t_ = Zg.toString, r_ = e_.hasOwnProperty, n_ = RegExp(
  "^" + t_.call(r_).replace(Xg, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function zl(t) {
  if (!_e(t) || Jg(t))
    return !1;
  var e = Tr(t) ? n_ : Qg;
  return e.test(vn(t));
}
function i_(t, e) {
  return t == null ? void 0 : t[e];
}
function En(t, e) {
  var r = i_(t, e);
  return zl(r) ? r : void 0;
}
var s_ = En(Me, "Map");
const wi = s_;
var a_ = En(Object, "create");
const yi = a_;
function o_() {
  this.__data__ = yi ? yi(null) : {}, this.size = 0;
}
function c_(t) {
  var e = this.has(t) && delete this.__data__[t];
  return this.size -= e ? 1 : 0, e;
}
var d_ = "__lodash_hash_undefined__", u_ = Object.prototype, l_ = u_.hasOwnProperty;
function h_(t) {
  var e = this.__data__;
  if (yi) {
    var r = e[t];
    return r === d_ ? void 0 : r;
  }
  return l_.call(e, t) ? e[t] : void 0;
}
var f_ = Object.prototype, p_ = f_.hasOwnProperty;
function m_(t) {
  var e = this.__data__;
  return yi ? e[t] !== void 0 : p_.call(e, t);
}
var g_ = "__lodash_hash_undefined__";
function __(t, e) {
  var r = this.__data__;
  return this.size += this.has(t) ? 0 : 1, r[t] = yi && e === void 0 ? g_ : e, this;
}
function mn(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
mn.prototype.clear = o_;
mn.prototype.delete = c_;
mn.prototype.get = h_;
mn.prototype.has = m_;
mn.prototype.set = __;
function T_() {
  this.size = 0, this.__data__ = {
    hash: new mn(),
    map: new (wi || _r)(),
    string: new mn()
  };
}
function v_(t) {
  var e = typeof t;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null;
}
function oa(t, e) {
  var r = t.__data__;
  return v_(e) ? r[typeof e == "string" ? "string" : "hash"] : r.map;
}
function E_(t) {
  var e = oa(this, t).delete(t);
  return this.size -= e ? 1 : 0, e;
}
function w_(t) {
  return oa(this, t).get(t);
}
function y_(t) {
  return oa(this, t).has(t);
}
function A_(t, e) {
  var r = oa(this, t), n = r.size;
  return r.set(t, e), this.size += r.size == n ? 0 : 1, this;
}
function vr(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
vr.prototype.clear = T_;
vr.prototype.delete = E_;
vr.prototype.get = w_;
vr.prototype.has = y_;
vr.prototype.set = A_;
var R_ = 200;
function S_(t, e) {
  var r = this.__data__;
  if (r instanceof _r) {
    var n = r.__data__;
    if (!wi || n.length < R_ - 1)
      return n.push([t, e]), this.size = ++r.size, this;
    r = this.__data__ = new vr(n);
  }
  return r.set(t, e), this.size = r.size, this;
}
function Dt(t) {
  var e = this.__data__ = new _r(t);
  this.size = e.size;
}
Dt.prototype.clear = kg;
Dt.prototype.delete = Cg;
Dt.prototype.get = Ig;
Dt.prototype.has = Pg;
Dt.prototype.set = S_;
function bt(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n && e(t[r], r, t) !== !1; )
    ;
  return t;
}
var b_ = function() {
  try {
    var t = En(Object, "defineProperty");
    return t({}, "", {}), t;
  } catch (e) {
  }
}();
const Ss = b_;
function Er(t, e, r) {
  e == "__proto__" && Ss ? Ss(t, e, {
    configurable: !0,
    enumerable: !0,
    value: r,
    writable: !0
  }) : t[e] = r;
}
var k_ = Object.prototype, C_ = k_.hasOwnProperty;
function Wi(t, e, r) {
  var n = t[e];
  (!(C_.call(t, e) && Nt(n, r)) || r === void 0 && !(e in t)) && Er(t, e, r);
}
function Jt(t, e, r, n) {
  var i = !r;
  r || (r = {});
  for (var s = -1, a = e.length; ++s < a; ) {
    var o = e[s], c = n ? n(r[o], t[o], o, r, t) : void 0;
    c === void 0 && (c = t[o]), i ? Er(r, o, c) : Wi(r, o, c);
  }
  return r;
}
function cc(t, e) {
  for (var r = -1, n = Array(t); ++r < t; )
    n[r] = e(r);
  return n;
}
function we(t) {
  return t != null && typeof t == "object";
}
var I_ = "[object Arguments]";
function Xd(t) {
  return we(t) && Ke(t) == I_;
}
var Xl = Object.prototype, P_ = Xl.hasOwnProperty, D_ = Xl.propertyIsEnumerable, O_ = Xd(function() {
  return arguments;
}()) ? Xd : function(t) {
  return we(t) && P_.call(t, "callee") && !D_.call(t, "callee");
};
const gn = O_;
var M_ = Array.isArray;
const V = M_;
function dc() {
  return !1;
}
var Ql = typeof exports == "object" && exports && !exports.nodeType && exports, Qd = Ql && typeof module == "object" && module && !module.nodeType && module, N_ = Qd && Qd.exports === Ql, Zd = N_ ? Me.Buffer : void 0, x_ = Zd ? Zd.isBuffer : void 0, L_ = x_ || dc;
const Fr = L_;
var $_ = 9007199254740991, U_ = /^(?:0|[1-9]\d*)$/;
function wr(t, e) {
  var r = typeof t;
  return e = e == null ? $_ : e, !!e && (r == "number" || r != "symbol" && U_.test(t)) && t > -1 && t % 1 == 0 && t < e;
}
var F_ = 9007199254740991;
function ca(t) {
  return typeof t == "number" && t > -1 && t % 1 == 0 && t <= F_;
}
var V_ = "[object Arguments]", B_ = "[object Array]", G_ = "[object Boolean]", q_ = "[object Date]", H_ = "[object Error]", W_ = "[object Function]", j_ = "[object Map]", K_ = "[object Number]", J_ = "[object Object]", Y_ = "[object RegExp]", z_ = "[object Set]", X_ = "[object String]", Q_ = "[object WeakMap]", Z_ = "[object ArrayBuffer]", eT = "[object DataView]", tT = "[object Float32Array]", rT = "[object Float64Array]", nT = "[object Int8Array]", iT = "[object Int16Array]", sT = "[object Int32Array]", aT = "[object Uint8Array]", oT = "[object Uint8ClampedArray]", cT = "[object Uint16Array]", dT = "[object Uint32Array]", he = {};
he[tT] = he[rT] = he[nT] = he[iT] = he[sT] = he[aT] = he[oT] = he[cT] = he[dT] = !0;
he[V_] = he[B_] = he[Z_] = he[G_] = he[eT] = he[q_] = he[H_] = he[W_] = he[j_] = he[K_] = he[J_] = he[Y_] = he[z_] = he[X_] = he[Q_] = !1;
function uT(t) {
  return we(t) && ca(t.length) && !!he[Ke(t)];
}
function dt(t) {
  return function(e) {
    return t(e);
  };
}
var Zl = typeof exports == "object" && exports && !exports.nodeType && exports, _i = Zl && typeof module == "object" && module && !module.nodeType && module, lT = _i && _i.exports === Zl, no = lT && Jl.process, hT = function() {
  try {
    var t = _i && _i.require && _i.require("util").types;
    return t || no && no.binding && no.binding("util");
  } catch (e) {
  }
}();
const At = hT;
var eu = At && At.isTypedArray, fT = eu ? dt(eu) : uT;
const Zn = fT;
var pT = Object.prototype, mT = pT.hasOwnProperty;
function eh(t, e) {
  var r = V(t), n = !r && gn(t), i = !r && !n && Fr(t), s = !r && !n && !i && Zn(t), a = r || n || i || s, o = a ? cc(t.length, String) : [], c = o.length;
  for (var u in t)
    (e || mT.call(t, u)) && !(a && // Safari 9 has enumerable `arguments.length` in strict mode.
    (u == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    i && (u == "offset" || u == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    s && (u == "buffer" || u == "byteLength" || u == "byteOffset") || // Skip index properties.
    wr(u, c))) && o.push(u);
  return o;
}
var gT = Object.prototype;
function ji(t) {
  var e = t && t.constructor, r = typeof e == "function" && e.prototype || gT;
  return t === r;
}
function th(t, e) {
  return function(r) {
    return t(e(r));
  };
}
var _T = th(Object.keys, Object);
const TT = _T;
var vT = Object.prototype, ET = vT.hasOwnProperty;
function uc(t) {
  if (!ji(t))
    return TT(t);
  var e = [];
  for (var r in Object(t))
    ET.call(t, r) && r != "constructor" && e.push(r);
  return e;
}
function tt(t) {
  return t != null && ca(t.length) && !Tr(t);
}
function De(t) {
  return tt(t) ? eh(t) : uc(t);
}
function rh(t, e) {
  return t && Jt(e, De(e), t);
}
function wT(t) {
  var e = [];
  if (t != null)
    for (var r in Object(t))
      e.push(r);
  return e;
}
var yT = Object.prototype, AT = yT.hasOwnProperty;
function RT(t) {
  if (!_e(t))
    return wT(t);
  var e = ji(t), r = [];
  for (var n in t)
    n == "constructor" && (e || !AT.call(t, n)) || r.push(n);
  return r;
}
function rt(t) {
  return tt(t) ? eh(t, !0) : RT(t);
}
function ST(t, e) {
  return t && Jt(e, rt(e), t);
}
var nh = typeof exports == "object" && exports && !exports.nodeType && exports, tu = nh && typeof module == "object" && module && !module.nodeType && module, bT = tu && tu.exports === nh, ru = bT ? Me.Buffer : void 0, nu = ru ? ru.allocUnsafe : void 0;
function ih(t, e) {
  if (e)
    return t.slice();
  var r = t.length, n = nu ? nu(r) : new t.constructor(r);
  return t.copy(n), n;
}
function Ze(t, e) {
  var r = -1, n = t.length;
  for (e || (e = Array(n)); ++r < n; )
    e[r] = t[r];
  return e;
}
function qr(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length, i = 0, s = []; ++r < n; ) {
    var a = t[r];
    e(a, r, t) && (s[i++] = a);
  }
  return s;
}
function lc() {
  return [];
}
var kT = Object.prototype, CT = kT.propertyIsEnumerable, iu = Object.getOwnPropertySymbols, IT = iu ? function(t) {
  return t == null ? [] : (t = Object(t), qr(iu(t), function(e) {
    return CT.call(t, e);
  }));
} : lc;
const hc = IT;
function PT(t, e) {
  return Jt(t, hc(t), e);
}
function Hr(t, e) {
  for (var r = -1, n = e.length, i = t.length; ++r < n; )
    t[i + r] = e[r];
  return t;
}
var DT = th(Object.getPrototypeOf, Object);
const da = DT;
var OT = Object.getOwnPropertySymbols, MT = OT ? function(t) {
  for (var e = []; t; )
    Hr(e, hc(t)), t = da(t);
  return e;
} : lc;
const sh = MT;
function NT(t, e) {
  return Jt(t, sh(t), e);
}
function ah(t, e, r) {
  var n = e(t);
  return V(t) ? n : Hr(n, r(t));
}
function So(t) {
  return ah(t, De, hc);
}
function fc(t) {
  return ah(t, rt, sh);
}
var xT = En(Me, "DataView");
const bo = xT;
var LT = En(Me, "Promise");
const ko = LT;
var $T = En(Me, "Set");
const xn = $T;
var UT = En(Me, "WeakMap");
const Ai = UT;
var su = "[object Map]", FT = "[object Object]", au = "[object Promise]", ou = "[object Set]", cu = "[object WeakMap]", du = "[object DataView]", VT = vn(bo), BT = vn(wi), GT = vn(ko), qT = vn(xn), HT = vn(Ai), zr = Ke;
(bo && zr(new bo(new ArrayBuffer(1))) != du || wi && zr(new wi()) != su || ko && zr(ko.resolve()) != au || xn && zr(new xn()) != ou || Ai && zr(new Ai()) != cu) && (zr = function(t) {
  var e = Ke(t), r = e == FT ? t.constructor : void 0, n = r ? vn(r) : "";
  if (n)
    switch (n) {
      case VT:
        return du;
      case BT:
        return su;
      case GT:
        return au;
      case qT:
        return ou;
      case HT:
        return cu;
    }
  return e;
});
const jt = zr;
var WT = Object.prototype, jT = WT.hasOwnProperty;
function KT(t) {
  var e = t.length, r = new t.constructor(e);
  return e && typeof t[0] == "string" && jT.call(t, "index") && (r.index = t.index, r.input = t.input), r;
}
var JT = Me.Uint8Array;
const bs = JT;
function pc(t) {
  var e = new t.constructor(t.byteLength);
  return new bs(e).set(new bs(t)), e;
}
function YT(t, e) {
  var r = e ? pc(t.buffer) : t.buffer;
  return new t.constructor(r, t.byteOffset, t.byteLength);
}
var zT = /\w*$/;
function XT(t) {
  var e = new t.constructor(t.source, zT.exec(t));
  return e.lastIndex = t.lastIndex, e;
}
var uu = Ge ? Ge.prototype : void 0, lu = uu ? uu.valueOf : void 0;
function QT(t) {
  return lu ? Object(lu.call(t)) : {};
}
function oh(t, e) {
  var r = e ? pc(t.buffer) : t.buffer;
  return new t.constructor(r, t.byteOffset, t.length);
}
var ZT = "[object Boolean]", ev = "[object Date]", tv = "[object Map]", rv = "[object Number]", nv = "[object RegExp]", iv = "[object Set]", sv = "[object String]", av = "[object Symbol]", ov = "[object ArrayBuffer]", cv = "[object DataView]", dv = "[object Float32Array]", uv = "[object Float64Array]", lv = "[object Int8Array]", hv = "[object Int16Array]", fv = "[object Int32Array]", pv = "[object Uint8Array]", mv = "[object Uint8ClampedArray]", gv = "[object Uint16Array]", _v = "[object Uint32Array]";
function Tv(t, e, r) {
  var n = t.constructor;
  switch (e) {
    case ov:
      return pc(t);
    case ZT:
    case ev:
      return new n(+t);
    case cv:
      return YT(t, r);
    case dv:
    case uv:
    case lv:
    case hv:
    case fv:
    case pv:
    case mv:
    case gv:
    case _v:
      return oh(t, r);
    case tv:
      return new n();
    case rv:
    case sv:
      return new n(t);
    case nv:
      return XT(t);
    case iv:
      return new n();
    case av:
      return QT(t);
  }
}
var hu = Object.create, vv = function() {
  function t() {
  }
  return function(e) {
    if (!_e(e))
      return {};
    if (hu)
      return hu(e);
    t.prototype = e;
    var r = new t();
    return t.prototype = void 0, r;
  };
}();
const ei = vv;
function ch(t) {
  return typeof t.constructor == "function" && !ji(t) ? ei(da(t)) : {};
}
var Ev = "[object Map]";
function wv(t) {
  return we(t) && jt(t) == Ev;
}
var fu = At && At.isMap, yv = fu ? dt(fu) : wv;
const dh = yv;
var Av = "[object Set]";
function Rv(t) {
  return we(t) && jt(t) == Av;
}
var pu = At && At.isSet, Sv = pu ? dt(pu) : Rv;
const uh = Sv;
var bv = 1, kv = 2, Cv = 4, lh = "[object Arguments]", Iv = "[object Array]", Pv = "[object Boolean]", Dv = "[object Date]", Ov = "[object Error]", hh = "[object Function]", Mv = "[object GeneratorFunction]", Nv = "[object Map]", xv = "[object Number]", fh = "[object Object]", Lv = "[object RegExp]", $v = "[object Set]", Uv = "[object String]", Fv = "[object Symbol]", Vv = "[object WeakMap]", Bv = "[object ArrayBuffer]", Gv = "[object DataView]", qv = "[object Float32Array]", Hv = "[object Float64Array]", Wv = "[object Int8Array]", jv = "[object Int16Array]", Kv = "[object Int32Array]", Jv = "[object Uint8Array]", Yv = "[object Uint8ClampedArray]", zv = "[object Uint16Array]", Xv = "[object Uint32Array]", de = {};
de[lh] = de[Iv] = de[Bv] = de[Gv] = de[Pv] = de[Dv] = de[qv] = de[Hv] = de[Wv] = de[jv] = de[Kv] = de[Nv] = de[xv] = de[fh] = de[Lv] = de[$v] = de[Uv] = de[Fv] = de[Jv] = de[Yv] = de[zv] = de[Xv] = !0;
de[Ov] = de[hh] = de[Vv] = !1;
function Et(t, e, r, n, i, s) {
  var a, o = e & bv, c = e & kv, u = e & Cv;
  if (r && (a = i ? r(t, n, i, s) : r(t)), a !== void 0)
    return a;
  if (!_e(t))
    return t;
  var h = V(t);
  if (h) {
    if (a = KT(t), !o)
      return Ze(t, a);
  } else {
    var f = jt(t), g = f == hh || f == Mv;
    if (Fr(t))
      return ih(t, o);
    if (f == fh || f == lh || g && !i) {
      if (a = c || g ? {} : ch(t), !o)
        return c ? NT(t, ST(a, t)) : PT(t, rh(a, t));
    } else {
      if (!de[f])
        return i ? t : {};
      a = Tv(t, f, o);
    }
  }
  s || (s = new Dt());
  var E = s.get(t);
  if (E)
    return E;
  s.set(t, a), uh(t) ? t.forEach(function(S) {
    a.add(Et(S, e, r, S, t, s));
  }) : dh(t) && t.forEach(function(S, k) {
    a.set(k, Et(S, e, r, k, t, s));
  });
  var R = u ? c ? fc : So : c ? rt : De, I = h ? void 0 : R(t);
  return bt(I || t, function(S, k) {
    I && (k = S, S = t[k]), Wi(a, k, Et(S, e, r, k, t, s));
  }), a;
}
var Qv = 1, Zv = 4;
function ua(t) {
  return Et(t, Qv | Zv);
}
var eE = "[object Symbol]";
function ut(t) {
  return typeof t == "symbol" || we(t) && Ke(t) == eE;
}
var tE = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, rE = /^\w*$/;
function mc(t, e) {
  if (V(t))
    return !1;
  var r = typeof t;
  return r == "number" || r == "symbol" || r == "boolean" || t == null || ut(t) ? !0 : rE.test(t) || !tE.test(t) || e != null && t in Object(e);
}
var nE = "Expected a function";
function la(t, e) {
  if (typeof t != "function" || e != null && typeof e != "function")
    throw new TypeError(nE);
  var r = function() {
    var n = arguments, i = e ? e.apply(this, n) : n[0], s = r.cache;
    if (s.has(i))
      return s.get(i);
    var a = t.apply(this, n);
    return r.cache = s.set(i, a) || s, a;
  };
  return r.cache = new (la.Cache || vr)(), r;
}
la.Cache = vr;
var iE = 500;
function sE(t) {
  var e = la(t, function(n) {
    return r.size === iE && r.clear(), n;
  }), r = e.cache;
  return e;
}
var aE = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, oE = /\\(\\)?/g, cE = sE(function(t) {
  var e = [];
  return t.charCodeAt(0) === 46 && e.push(""), t.replace(aE, function(r, n, i, s) {
    e.push(i ? s.replace(oE, "$1") : n || r);
  }), e;
});
const ph = cE;
function ge(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length, i = Array(n); ++r < n; )
    i[r] = e(t[r], r, t);
  return i;
}
var dE = 1 / 0, mu = Ge ? Ge.prototype : void 0, gu = mu ? mu.toString : void 0;
function lt(t) {
  if (typeof t == "string")
    return t;
  if (V(t))
    return ge(t, lt) + "";
  if (ut(t))
    return gu ? gu.call(t) : "";
  var e = t + "";
  return e == "0" && 1 / t == -dE ? "-0" : e;
}
function Z(t) {
  return t == null ? "" : lt(t);
}
function Wr(t, e) {
  return V(t) ? t : mc(t, e) ? [t] : ph(Z(t));
}
var uE = 1 / 0;
function Yt(t) {
  if (typeof t == "string" || ut(t))
    return t;
  var e = t + "";
  return e == "0" && 1 / t == -uE ? "-0" : e;
}
function wn(t, e) {
  e = Wr(e, t);
  for (var r = 0, n = e.length; t != null && r < n; )
    t = t[Yt(e[r++])];
  return r && r == n ? t : void 0;
}
function gc(t, e, r) {
  var n = t == null ? void 0 : wn(t, e);
  return n === void 0 ? r : n;
}
var lE = Object.prototype, hE = lE.hasOwnProperty;
function fE(t, e) {
  return t != null && hE.call(t, e);
}
function mh(t, e, r) {
  e = Wr(e, t);
  for (var n = -1, i = e.length, s = !1; ++n < i; ) {
    var a = Yt(e[n]);
    if (!(s = t != null && r(t, a)))
      break;
    t = t[a];
  }
  return s || ++n != i ? s : (i = t == null ? 0 : t.length, !!i && ca(i) && wr(a, i) && (V(t) || gn(t)));
}
function pE(t, e) {
  return t != null && mh(t, e, fE);
}
function Ki(t, e, r, n) {
  if (!_e(t))
    return t;
  e = Wr(e, t);
  for (var i = -1, s = e.length, a = s - 1, o = t; o != null && ++i < s; ) {
    var c = Yt(e[i]), u = r;
    if (c === "__proto__" || c === "constructor" || c === "prototype")
      return t;
    if (i != a) {
      var h = o[c];
      u = n ? n(h, c, o) : void 0, u === void 0 && (u = _e(h) ? h : wr(e[i + 1]) ? [] : {});
    }
    Wi(o, c, u), o = o[c];
  }
  return t;
}
function mE(t, e, r) {
  return t == null ? t : Ki(t, e, r);
}
const gE = {
  border_radius: "rounded",
  border_width: "thin",
  spacing_base: 4,
  theme: "dark",
  colors: {
    brand: Tg("#2160FD"),
    background: vg("#141414"),
    danger: "#FF2D2D",
    text: "#EEEEEE",
    text_on_brand: "#EEEEEE",
    success: "#62A504",
    video_bg: "#191919",
    warning: "#FFCD07"
  }
};
function gh() {
  return ua(gE);
}
const _E = {
  permissions: {
    // webinar
    can_accept_production_requests: !1,
    can_edit_display_name: !0,
    accept_waiting_requests: !1,
    disable_participant_audio: !1,
    disable_participant_screensharing: !1,
    disable_participant_video: !1,
    can_spotlight: !1,
    kick_participant: !1,
    pin_participant: !1,
    can_record: !1,
    can_livestream: !1,
    waiting_room_type: ws.Skip,
    plugins: {
      can_close: !0,
      can_start: !0,
      can_edit_config: !1,
      config: {}
    },
    polls: {
      can_create: !0,
      can_vote: !0,
      can_view: !0
    },
    media: {
      video: {
        can_produce: L.Allowed,
        can_consume: ys.Allowed
      },
      audio: {
        can_produce: L.Allowed
      },
      screenshare: {
        can_produce: L.Allowed,
        can_consume: ys.Allowed
      }
    },
    chat: {
      public: {
        can_send: !0,
        text: !0,
        files: !0
      },
      private: {
        can_send: !1,
        can_receive: !1,
        text: !1,
        files: !1
      },
      channel: {
        // Make sure these are the same in default to ensure consistency in developer portal
        can_create: "ALL",
        can_delete: "ALL",
        can_update: "ALL",
        // end same
        can_read_all: !1
      },
      message: {
        // Make sure these are the same in default to ensure consistency in developer portal
        can_delete: "ALL",
        can_edit: "ALL",
        // end same
        delete_cutoff_time_seconds: 0,
        edit_cutoff_time_seconds: 0
      }
    },
    hidden_participant: !1,
    is_recorder: !1,
    recorder_type: Xn.none,
    show_participant_list: !0,
    transcription_enabled: !1,
    can_change_participant_permissions: !1,
    connected_meetings: {
      can_alter_connected_meetings: !1,
      can_switch_connected_meetings: !1,
      can_switch_to_parent_meeting: !1
    },
    stage_enabled: !1,
    stage_access: void 0,
    accept_stage_requests: !1
  },
  ui: {
    oldTheme: {
      setup_screen: {
        is_enabled: !1
      },
      alone_here: {
        is_enabled: !1
      },
      waiting_room: {
        is_enabled: !1,
        enable_preview: !0
      },
      control_bar: {
        is_enabled: !0,
        elements: {
          plugins: !0,
          screenshare: !0,
          invite: !1,
          participants: !0,
          chat: !0,
          reactions: !1,
          polls: !0,
          fullscreen: !0,
          layout: !0
        }
      },
      header: {
        is_enabled: !0,
        elements: {
          timer: !0,
          title: !0,
          participant_count: !0,
          change_layout: !0
        }
      },
      pip_mode: !0,
      auto_tune: !0,
      colors: {
        primary: "#2160FD",
        secondary: "#1A1A1A",
        text: "#EEEEEE",
        background: "#1A1A1A",
        textPrimary: "#EEEEEE",
        videoBackground: "#1A1A1A"
      },
      dimensions: {
        mode: "fillParent"
      },
      grid: {
        multi: {
          maxVideoCount: 6,
          videoFit: "cover"
        },
        single: {
          maxVideoCount: 6,
          videoFit: "cover"
        },
        defaultView: "MULTI"
      },
      controls: {
        pip_toggle: !1
      },
      plugins: []
    },
    design_tokens: gh(),
    config_diff: {}
  },
  config: {
    view_type: ct.GroupCall,
    media: {
      audio: {
        enable_stereo: !1,
        enable_high_bitrate: !1
      },
      video: {
        quality: "vga",
        frame_rate: 24
      },
      screenshare: {
        quality: "hd",
        frame_rate: 5
      }
    },
    max_video_streams: {
      mobile: 6,
      desktop: 6
    },
    max_screenshare_count: 1
  },
  version: "hybrid"
};
function TE() {
  return ua(_E);
}
Xn.none, As.skip;
const vE = {
  permissions: {
    // webinar
    can_accept_production_requests: !1,
    can_edit_display_name: !0,
    accept_waiting_requests: !1,
    disable_participant_audio: !1,
    disable_participant_screensharing: !1,
    disable_participant_video: !1,
    can_spotlight: !1,
    kick_participant: !1,
    pin_participant: !1,
    can_record: !1,
    can_livestream: !1,
    waiting_room_type: ws.Skip,
    plugins: {
      can_close: !0,
      can_start: !0,
      can_edit_config: !1,
      config: {}
    },
    polls: {
      can_create: !0,
      can_vote: !0,
      can_view: !0
    },
    media: {
      video: {
        can_produce: L.Allowed
      },
      audio: {
        can_produce: L.Allowed
      },
      screenshare: {
        can_produce: L.Allowed
      }
    },
    chat: {
      public: {
        can_send: !0,
        text: !0,
        files: !0
      },
      private: {
        can_send: !1,
        can_receive: !1,
        text: !1,
        files: !1
      }
    },
    hidden_participant: !1,
    is_recorder: !1,
    recorder_type: Xn.none,
    show_participant_list: !0,
    transcription_enabled: !1,
    can_change_participant_permissions: !1,
    connected_meetings: {
      can_alter_connected_meetings: !1,
      can_switch_connected_meetings: !1,
      can_switch_to_parent_meeting: !1
    },
    stage_enabled: !1,
    stage_access: void 0,
    accept_stage_requests: !1
  },
  ui: {
    design_tokens: gh(),
    config_diff: {}
  },
  config: {
    view_type: ct.GroupCall,
    media: {
      audio: {
        enable_stereo: !1,
        enable_high_bitrate: !1
      },
      video: {
        quality: "vga",
        frame_rate: 24
      },
      screenshare: {
        quality: "hd",
        frame_rate: 5
      }
    },
    max_video_streams: {
      mobile: 6,
      desktop: 6
    },
    max_screenshare_count: 1
  },
  version: "2.0.0"
};
function _c() {
  return ua(vE);
}
var EE = 0 / 0;
function _u(t) {
  return typeof t == "number" ? t : ut(t) ? EE : +t;
}
function ha(t, e) {
  return function(r, n) {
    var i;
    if (r === void 0 && n === void 0)
      return e;
    if (r !== void 0 && (i = r), n !== void 0) {
      if (i === void 0)
        return n;
      typeof r == "string" || typeof n == "string" ? (r = lt(r), n = lt(n)) : (r = _u(r), n = _u(n)), i = t(r, n);
    }
    return i;
  };
}
var wE = ha(function(t, e) {
  return t + e;
}, 0);
const yE = wE;
var AE = /\s/;
function _h(t) {
  for (var e = t.length; e-- && AE.test(t.charAt(e)); )
    ;
  return e;
}
var RE = /^\s+/;
function Th(t) {
  return t && t.slice(0, _h(t) + 1).replace(RE, "");
}
var Tu = 0 / 0, SE = /^[-+]0x[0-9a-f]+$/i, bE = /^0b[01]+$/i, kE = /^0o[0-7]+$/i, CE = parseInt;
function wt(t) {
  if (typeof t == "number")
    return t;
  if (ut(t))
    return Tu;
  if (_e(t)) {
    var e = typeof t.valueOf == "function" ? t.valueOf() : t;
    t = _e(e) ? e + "" : e;
  }
  if (typeof t != "string")
    return t === 0 ? t : +t;
  t = Th(t);
  var r = bE.test(t);
  return r || kE.test(t) ? CE(t.slice(2), r ? 2 : 8) : SE.test(t) ? Tu : +t;
}
var vu = 1 / 0, IE = 17976931348623157e292;
function mr(t) {
  if (!t)
    return t === 0 ? t : 0;
  if (t = wt(t), t === vu || t === -vu) {
    var e = t < 0 ? -1 : 1;
    return e * IE;
  }
  return t === t ? t : 0;
}
function B(t) {
  var e = mr(t), r = e % 1;
  return e === e ? r ? e - r : e : 0;
}
var PE = "Expected a function";
function DE(t, e) {
  if (typeof e != "function")
    throw new TypeError(PE);
  return t = B(t), function() {
    if (--t < 1)
      return e.apply(this, arguments);
  };
}
function Je(t) {
  return t;
}
var OE = Ai && new Ai();
const ks = OE;
var ME = ks ? function(t, e) {
  return ks.set(t, e), t;
} : Je;
const vh = ME;
function Ri(t) {
  return function() {
    var e = arguments;
    switch (e.length) {
      case 0:
        return new t();
      case 1:
        return new t(e[0]);
      case 2:
        return new t(e[0], e[1]);
      case 3:
        return new t(e[0], e[1], e[2]);
      case 4:
        return new t(e[0], e[1], e[2], e[3]);
      case 5:
        return new t(e[0], e[1], e[2], e[3], e[4]);
      case 6:
        return new t(e[0], e[1], e[2], e[3], e[4], e[5]);
      case 7:
        return new t(e[0], e[1], e[2], e[3], e[4], e[5], e[6]);
    }
    var r = ei(t.prototype), n = t.apply(r, e);
    return _e(n) ? n : r;
  };
}
var NE = 1;
function xE(t, e, r) {
  var n = e & NE, i = Ri(t);
  function s() {
    var a = this && this !== Me && this instanceof s ? i : t;
    return a.apply(n ? r : this, arguments);
  }
  return s;
}
function ht(t, e, r) {
  switch (r.length) {
    case 0:
      return t.call(e);
    case 1:
      return t.call(e, r[0]);
    case 2:
      return t.call(e, r[0], r[1]);
    case 3:
      return t.call(e, r[0], r[1], r[2]);
  }
  return t.apply(e, r);
}
var LE = Math.max;
function Eh(t, e, r, n) {
  for (var i = -1, s = t.length, a = r.length, o = -1, c = e.length, u = LE(s - a, 0), h = Array(c + u), f = !n; ++o < c; )
    h[o] = e[o];
  for (; ++i < a; )
    (f || i < s) && (h[r[i]] = t[i]);
  for (; u--; )
    h[o++] = t[i++];
  return h;
}
var $E = Math.max;
function wh(t, e, r, n) {
  for (var i = -1, s = t.length, a = -1, o = r.length, c = -1, u = e.length, h = $E(s - o, 0), f = Array(h + u), g = !n; ++i < h; )
    f[i] = t[i];
  for (var E = i; ++c < u; )
    f[E + c] = e[c];
  for (; ++a < o; )
    (g || i < s) && (f[E + r[a]] = t[i++]);
  return f;
}
function UE(t, e) {
  for (var r = t.length, n = 0; r--; )
    t[r] === e && ++n;
  return n;
}
function fa() {
}
var FE = 4294967295;
function H(t) {
  this.__wrapped__ = t, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = FE, this.__views__ = [];
}
H.prototype = ei(fa.prototype);
H.prototype.constructor = H;
function Tc() {
}
var VE = ks ? function(t) {
  return ks.get(t);
} : Tc;
const vc = VE;
var BE = {};
const Ln = BE;
var GE = Object.prototype, qE = GE.hasOwnProperty;
function fs(t) {
  for (var e = t.name + "", r = Ln[e], n = qE.call(Ln, e) ? r.length : 0; n--; ) {
    var i = r[n], s = i.func;
    if (s == null || s == t)
      return i.name;
  }
  return e;
}
function Rt(t, e) {
  this.__wrapped__ = t, this.__actions__ = [], this.__chain__ = !!e, this.__index__ = 0, this.__values__ = void 0;
}
Rt.prototype = ei(fa.prototype);
Rt.prototype.constructor = Rt;
function yh(t) {
  if (t instanceof H)
    return t.clone();
  var e = new Rt(t.__wrapped__, t.__chain__);
  return e.__actions__ = Ze(t.__actions__), e.__index__ = t.__index__, e.__values__ = t.__values__, e;
}
var HE = Object.prototype, WE = HE.hasOwnProperty;
function l(t) {
  if (we(t) && !V(t) && !(t instanceof H)) {
    if (t instanceof Rt)
      return t;
    if (WE.call(t, "__wrapped__"))
      return yh(t);
  }
  return new Rt(t);
}
l.prototype = fa.prototype;
l.prototype.constructor = l;
function Co(t) {
  var e = fs(t), r = l[e];
  if (typeof r != "function" || !(e in H.prototype))
    return !1;
  if (t === r)
    return !0;
  var n = vc(r);
  return !!n && t === n[0];
}
var jE = 800, KE = 16, JE = Date.now;
function Ah(t) {
  var e = 0, r = 0;
  return function() {
    var n = JE(), i = KE - (n - r);
    if (r = n, i > 0) {
      if (++e >= jE)
        return arguments[0];
    } else
      e = 0;
    return t.apply(void 0, arguments);
  };
}
var YE = Ah(vh);
const Rh = YE;
var zE = /\{\n\/\* \[wrapped with (.+)\] \*/, XE = /,? & /;
function QE(t) {
  var e = t.match(zE);
  return e ? e[1].split(XE) : [];
}
var ZE = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
function ew(t, e) {
  var r = e.length;
  if (!r)
    return t;
  var n = r - 1;
  return e[n] = (r > 1 ? "& " : "") + e[n], e = e.join(r > 2 ? ", " : " "), t.replace(ZE, `{
/* [wrapped with ` + e + `] */
`);
}
function Ec(t) {
  return function() {
    return t;
  };
}
var tw = Ss ? function(t, e) {
  return Ss(t, "toString", {
    configurable: !0,
    enumerable: !1,
    value: Ec(e),
    writable: !0
  });
} : Je;
const rw = tw;
var nw = Ah(rw);
const wc = nw;
function pa(t, e, r, n) {
  for (var i = t.length, s = r + (n ? 1 : -1); n ? s-- : ++s < i; )
    if (e(t[s], s, t))
      return s;
  return -1;
}
function Sh(t) {
  return t !== t;
}
function iw(t, e, r) {
  for (var n = r - 1, i = t.length; ++n < i; )
    if (t[n] === e)
      return n;
  return -1;
}
function ti(t, e, r) {
  return e === e ? iw(t, e, r) : pa(t, Sh, r);
}
function ma(t, e) {
  var r = t == null ? 0 : t.length;
  return !!r && ti(t, e, 0) > -1;
}
var sw = 1, aw = 2, ow = 8, cw = 16, dw = 32, uw = 64, lw = 128, hw = 256, fw = 512, pw = [
  ["ary", lw],
  ["bind", sw],
  ["bindKey", aw],
  ["curry", ow],
  ["curryRight", cw],
  ["flip", fw],
  ["partial", dw],
  ["partialRight", uw],
  ["rearg", hw]
];
function mw(t, e) {
  return bt(pw, function(r) {
    var n = "_." + r[0];
    e & r[1] && !ma(t, n) && t.push(n);
  }), t.sort();
}
function bh(t, e, r) {
  var n = e + "";
  return wc(t, ew(n, mw(QE(n), r)));
}
var gw = 1, _w = 2, Tw = 4, vw = 8, Eu = 32, wu = 64;
function kh(t, e, r, n, i, s, a, o, c, u) {
  var h = e & vw, f = h ? a : void 0, g = h ? void 0 : a, E = h ? s : void 0, R = h ? void 0 : s;
  e |= h ? Eu : wu, e &= ~(h ? wu : Eu), e & Tw || (e &= ~(gw | _w));
  var I = [
    t,
    e,
    i,
    E,
    f,
    R,
    g,
    o,
    c,
    u
  ], S = r.apply(void 0, I);
  return Co(t) && Rh(S, I), S.placeholder = n, bh(S, t, e);
}
function ri(t) {
  var e = t;
  return e.placeholder;
}
var Ew = Math.min;
function ww(t, e) {
  for (var r = t.length, n = Ew(e.length, r), i = Ze(t); n--; ) {
    var s = e[n];
    t[n] = wr(s, r) ? i[s] : void 0;
  }
  return t;
}
var yu = "__lodash_placeholder__";
function Vr(t, e) {
  for (var r = -1, n = t.length, i = 0, s = []; ++r < n; ) {
    var a = t[r];
    (a === e || a === yu) && (t[r] = yu, s[i++] = r);
  }
  return s;
}
var yw = 1, Aw = 2, Rw = 8, Sw = 16, bw = 128, kw = 512;
function ga(t, e, r, n, i, s, a, o, c, u) {
  var h = e & bw, f = e & yw, g = e & Aw, E = e & (Rw | Sw), R = e & kw, I = g ? void 0 : Ri(t);
  function S() {
    for (var k = arguments.length, O = Array(k), W = k; W--; )
      O[W] = arguments[W];
    if (E)
      var C = ri(S), te = UE(O, C);
    if (n && (O = Eh(O, n, i, E)), s && (O = wh(O, s, a, E)), k -= te, E && k < u) {
      var J = Vr(O, C);
      return kh(
        t,
        e,
        ga,
        S.placeholder,
        r,
        O,
        J,
        o,
        c,
        u - k
      );
    }
    var Ee = f ? r : this, We = g ? Ee[t] : t;
    return k = O.length, o ? O = ww(O, o) : R && k > 1 && O.reverse(), h && c < k && (O.length = c), this && this !== Me && this instanceof S && (We = I || Ri(We)), We.apply(Ee, O);
  }
  return S;
}
function Cw(t, e, r) {
  var n = Ri(t);
  function i() {
    for (var s = arguments.length, a = Array(s), o = s, c = ri(i); o--; )
      a[o] = arguments[o];
    var u = s < 3 && a[0] !== c && a[s - 1] !== c ? [] : Vr(a, c);
    if (s -= u.length, s < r)
      return kh(
        t,
        e,
        ga,
        i.placeholder,
        void 0,
        a,
        u,
        void 0,
        void 0,
        r - s
      );
    var h = this && this !== Me && this instanceof i ? n : t;
    return ht(h, this, a);
  }
  return i;
}
var Iw = 1;
function Pw(t, e, r, n) {
  var i = e & Iw, s = Ri(t);
  function a() {
    for (var o = -1, c = arguments.length, u = -1, h = n.length, f = Array(h + c), g = this && this !== Me && this instanceof a ? s : t; ++u < h; )
      f[u] = n[u];
    for (; c--; )
      f[u++] = arguments[++o];
    return ht(g, i ? r : this, f);
  }
  return a;
}
var Au = "__lodash_placeholder__", io = 1, Dw = 2, Ow = 4, Ru = 8, fi = 128, Su = 256, Mw = Math.min;
function Nw(t, e) {
  var r = t[1], n = e[1], i = r | n, s = i < (io | Dw | fi), a = n == fi && r == Ru || n == fi && r == Su && t[7].length <= e[8] || n == (fi | Su) && e[7].length <= e[8] && r == Ru;
  if (!(s || a))
    return t;
  n & io && (t[2] = e[2], i |= r & io ? 0 : Ow);
  var o = e[3];
  if (o) {
    var c = t[3];
    t[3] = c ? Eh(c, o, e[4]) : o, t[4] = c ? Vr(t[3], Au) : e[4];
  }
  return o = e[5], o && (c = t[5], t[5] = c ? wh(c, o, e[6]) : o, t[6] = c ? Vr(t[5], Au) : e[6]), o = e[7], o && (t[7] = o), n & fi && (t[8] = t[8] == null ? e[8] : Mw(t[8], e[8])), t[9] == null && (t[9] = e[9]), t[0] = e[0], t[1] = i, t;
}
var xw = "Expected a function", bu = 1, Lw = 2, so = 8, ao = 16, oo = 32, ku = 64, Cu = Math.max;
function yr(t, e, r, n, i, s, a, o) {
  var c = e & Lw;
  if (!c && typeof t != "function")
    throw new TypeError(xw);
  var u = n ? n.length : 0;
  if (u || (e &= ~(oo | ku), n = i = void 0), a = a === void 0 ? a : Cu(B(a), 0), o = o === void 0 ? o : B(o), u -= i ? i.length : 0, e & ku) {
    var h = n, f = i;
    n = i = void 0;
  }
  var g = c ? void 0 : vc(t), E = [
    t,
    e,
    r,
    n,
    i,
    h,
    f,
    s,
    a,
    o
  ];
  if (g && Nw(E, g), t = E[0], e = E[1], r = E[2], n = E[3], i = E[4], o = E[9] = E[9] === void 0 ? c ? 0 : t.length : Cu(E[9] - u, 0), !o && e & (so | ao) && (e &= ~(so | ao)), !e || e == bu)
    var R = xE(t, e, r);
  else
    e == so || e == ao ? R = Cw(t, e, o) : (e == oo || e == (bu | oo)) && !i.length ? R = Pw(t, e, r, n) : R = ga.apply(void 0, E);
  var I = g ? vh : Rh;
  return bh(I(R, E), t, e);
}
var $w = 128;
function Ch(t, e, r) {
  return e = r ? void 0 : e, e = t && e == null ? t.length : e, yr(t, $w, void 0, void 0, void 0, void 0, e);
}
var Iu = Math.max;
function Ih(t, e, r) {
  return e = Iu(e === void 0 ? t.length - 1 : e, 0), function() {
    for (var n = arguments, i = -1, s = Iu(n.length - e, 0), a = Array(s); ++i < s; )
      a[i] = n[e + i];
    i = -1;
    for (var o = Array(e + 1); ++i < e; )
      o[i] = n[i];
    return o[e] = r(a), ht(t, this, o);
  };
}
function q(t, e) {
  return wc(Ih(t, e, Je), t + "");
}
function je(t, e, r) {
  if (!_e(r))
    return !1;
  var n = typeof e;
  return (n == "number" ? tt(r) && wr(e, r.length) : n == "string" && e in r) ? Nt(r[e], t) : !1;
}
function ni(t) {
  return q(function(e, r) {
    var n = -1, i = r.length, s = i > 1 ? r[i - 1] : void 0, a = i > 2 ? r[2] : void 0;
    for (s = t.length > 3 && typeof s == "function" ? (i--, s) : void 0, a && je(r[0], r[1], a) && (s = i < 3 ? void 0 : s, i = 1), e = Object(e); ++n < i; ) {
      var o = r[n];
      o && t(e, o, n, s);
    }
    return e;
  });
}
var Uw = Object.prototype, Fw = Uw.hasOwnProperty, Vw = ni(function(t, e) {
  if (ji(e) || tt(e)) {
    Jt(e, De(e), t);
    return;
  }
  for (var r in e)
    Fw.call(e, r) && Wi(t, r, e[r]);
});
const Bw = Vw;
var Gw = ni(function(t, e) {
  Jt(e, rt(e), t);
});
const Pu = Gw;
var qw = ni(function(t, e, r, n) {
  Jt(e, rt(e), t, n);
});
const Cs = qw;
var Hw = ni(function(t, e, r, n) {
  Jt(e, De(e), t, n);
});
const Ww = Hw;
function yc(t, e) {
  for (var r = -1, n = e.length, i = Array(n), s = t == null; ++r < n; )
    i[r] = s ? void 0 : gc(t, e[r]);
  return i;
}
var Du = Ge ? Ge.isConcatSpreadable : void 0;
function jw(t) {
  return V(t) || gn(t) || !!(Du && t && t[Du]);
}
function Le(t, e, r, n, i) {
  var s = -1, a = t.length;
  for (r || (r = jw), i || (i = []); ++s < a; ) {
    var o = t[s];
    e > 0 && r(o) ? e > 1 ? Le(o, e - 1, r, n, i) : Hr(i, o) : n || (i[i.length] = o);
  }
  return i;
}
function Ph(t) {
  var e = t == null ? 0 : t.length;
  return e ? Le(t, 1) : [];
}
function Ar(t) {
  return wc(Ih(t, void 0, Ph), t + "");
}
var Kw = Ar(yc);
const Jw = Kw;
var Yw = "[object Object]", zw = Function.prototype, Xw = Object.prototype, Dh = zw.toString, Qw = Xw.hasOwnProperty, Zw = Dh.call(Object);
function Ji(t) {
  if (!we(t) || Ke(t) != Yw)
    return !1;
  var e = da(t);
  if (e === null)
    return !0;
  var r = Qw.call(e, "constructor") && e.constructor;
  return typeof r == "function" && r instanceof r && Dh.call(r) == Zw;
}
var ey = "[object DOMException]", ty = "[object Error]";
function Ac(t) {
  if (!we(t))
    return !1;
  var e = Ke(t);
  return e == ty || e == ey || typeof t.message == "string" && typeof t.name == "string" && !Ji(t);
}
var ry = q(function(t, e) {
  try {
    return ht(t, void 0, e);
  } catch (r) {
    return Ac(r) ? r : new Error(r);
  }
});
const Oh = ry;
var ny = "Expected a function";
function Mh(t, e) {
  var r;
  if (typeof e != "function")
    throw new TypeError(ny);
  return t = B(t), function() {
    return --t > 0 && (r = e.apply(this, arguments)), t <= 1 && (e = void 0), r;
  };
}
var iy = 1, sy = 32, Rc = q(function(t, e, r) {
  var n = iy;
  if (r.length) {
    var i = Vr(r, ri(Rc));
    n |= sy;
  }
  return yr(t, n, e, r, i);
});
Rc.placeholder = {};
const Nh = Rc;
var ay = Ar(function(t, e) {
  return bt(e, function(r) {
    r = Yt(r), Er(t, r, Nh(t[r], t));
  }), t;
});
const oy = ay;
var cy = 1, dy = 2, uy = 32, Sc = q(function(t, e, r) {
  var n = cy | dy;
  if (r.length) {
    var i = Vr(r, ri(Sc));
    n |= uy;
  }
  return yr(e, n, t, r, i);
});
Sc.placeholder = {};
const ly = Sc;
function St(t, e, r) {
  var n = -1, i = t.length;
  e < 0 && (e = -e > i ? 0 : i + e), r = r > i ? i : r, r < 0 && (r += i), i = e > r ? 0 : r - e >>> 0, e >>>= 0;
  for (var s = Array(i); ++n < i; )
    s[n] = t[n + e];
  return s;
}
function jr(t, e, r) {
  var n = t.length;
  return r = r === void 0 ? n : r, !e && r >= n ? t : St(t, e, r);
}
var hy = "\\ud800-\\udfff", fy = "\\u0300-\\u036f", py = "\\ufe20-\\ufe2f", my = "\\u20d0-\\u20ff", gy = fy + py + my, _y = "\\ufe0e\\ufe0f", Ty = "\\u200d", vy = RegExp("[" + Ty + hy + gy + _y + "]");
function ii(t) {
  return vy.test(t);
}
function Ey(t) {
  return t.split("");
}
var xh = "\\ud800-\\udfff", wy = "\\u0300-\\u036f", yy = "\\ufe20-\\ufe2f", Ay = "\\u20d0-\\u20ff", Ry = wy + yy + Ay, Sy = "\\ufe0e\\ufe0f", by = "[" + xh + "]", Io = "[" + Ry + "]", Po = "\\ud83c[\\udffb-\\udfff]", ky = "(?:" + Io + "|" + Po + ")", Lh = "[^" + xh + "]", $h = "(?:\\ud83c[\\udde6-\\uddff]){2}", Uh = "[\\ud800-\\udbff][\\udc00-\\udfff]", Cy = "\\u200d", Fh = ky + "?", Vh = "[" + Sy + "]?", Iy = "(?:" + Cy + "(?:" + [Lh, $h, Uh].join("|") + ")" + Vh + Fh + ")*", Py = Vh + Fh + Iy, Dy = "(?:" + [Lh + Io + "?", Io, $h, Uh, by].join("|") + ")", Oy = RegExp(Po + "(?=" + Po + ")|" + Dy + Py, "g");
function My(t) {
  return t.match(Oy) || [];
}
function Ot(t) {
  return ii(t) ? My(t) : Ey(t);
}
function Bh(t) {
  return function(e) {
    e = Z(e);
    var r = ii(e) ? Ot(e) : void 0, n = r ? r[0] : e.charAt(0), i = r ? jr(r, 1).join("") : e.slice(1);
    return n[t]() + i;
  };
}
var Ny = Bh("toUpperCase");
const bc = Ny;
function Gh(t) {
  return bc(Z(t).toLowerCase());
}
function kc(t, e, r, n) {
  var i = -1, s = t == null ? 0 : t.length;
  for (n && s && (r = t[++i]); ++i < s; )
    r = e(r, t[i], i, t);
  return r;
}
function Cc(t) {
  return function(e) {
    return t == null ? void 0 : t[e];
  };
}
var xy = {
  // Latin-1 Supplement block.
  À: "A",
  Á: "A",
  Â: "A",
  Ã: "A",
  Ä: "A",
  Å: "A",
  à: "a",
  á: "a",
  â: "a",
  ã: "a",
  ä: "a",
  å: "a",
  Ç: "C",
  ç: "c",
  Ð: "D",
  ð: "d",
  È: "E",
  É: "E",
  Ê: "E",
  Ë: "E",
  è: "e",
  é: "e",
  ê: "e",
  ë: "e",
  Ì: "I",
  Í: "I",
  Î: "I",
  Ï: "I",
  ì: "i",
  í: "i",
  î: "i",
  ï: "i",
  Ñ: "N",
  ñ: "n",
  Ò: "O",
  Ó: "O",
  Ô: "O",
  Õ: "O",
  Ö: "O",
  Ø: "O",
  ò: "o",
  ó: "o",
  ô: "o",
  õ: "o",
  ö: "o",
  ø: "o",
  Ù: "U",
  Ú: "U",
  Û: "U",
  Ü: "U",
  ù: "u",
  ú: "u",
  û: "u",
  ü: "u",
  Ý: "Y",
  ý: "y",
  ÿ: "y",
  Æ: "Ae",
  æ: "ae",
  Þ: "Th",
  þ: "th",
  ß: "ss",
  // Latin Extended-A block.
  Ā: "A",
  Ă: "A",
  Ą: "A",
  ā: "a",
  ă: "a",
  ą: "a",
  Ć: "C",
  Ĉ: "C",
  Ċ: "C",
  Č: "C",
  ć: "c",
  ĉ: "c",
  ċ: "c",
  č: "c",
  Ď: "D",
  Đ: "D",
  ď: "d",
  đ: "d",
  Ē: "E",
  Ĕ: "E",
  Ė: "E",
  Ę: "E",
  Ě: "E",
  ē: "e",
  ĕ: "e",
  ė: "e",
  ę: "e",
  ě: "e",
  Ĝ: "G",
  Ğ: "G",
  Ġ: "G",
  Ģ: "G",
  ĝ: "g",
  ğ: "g",
  ġ: "g",
  ģ: "g",
  Ĥ: "H",
  Ħ: "H",
  ĥ: "h",
  ħ: "h",
  Ĩ: "I",
  Ī: "I",
  Ĭ: "I",
  Į: "I",
  İ: "I",
  ĩ: "i",
  ī: "i",
  ĭ: "i",
  į: "i",
  ı: "i",
  Ĵ: "J",
  ĵ: "j",
  Ķ: "K",
  ķ: "k",
  ĸ: "k",
  Ĺ: "L",
  Ļ: "L",
  Ľ: "L",
  Ŀ: "L",
  Ł: "L",
  ĺ: "l",
  ļ: "l",
  ľ: "l",
  ŀ: "l",
  ł: "l",
  Ń: "N",
  Ņ: "N",
  Ň: "N",
  Ŋ: "N",
  ń: "n",
  ņ: "n",
  ň: "n",
  ŋ: "n",
  Ō: "O",
  Ŏ: "O",
  Ő: "O",
  ō: "o",
  ŏ: "o",
  ő: "o",
  Ŕ: "R",
  Ŗ: "R",
  Ř: "R",
  ŕ: "r",
  ŗ: "r",
  ř: "r",
  Ś: "S",
  Ŝ: "S",
  Ş: "S",
  Š: "S",
  ś: "s",
  ŝ: "s",
  ş: "s",
  š: "s",
  Ţ: "T",
  Ť: "T",
  Ŧ: "T",
  ţ: "t",
  ť: "t",
  ŧ: "t",
  Ũ: "U",
  Ū: "U",
  Ŭ: "U",
  Ů: "U",
  Ű: "U",
  Ų: "U",
  ũ: "u",
  ū: "u",
  ŭ: "u",
  ů: "u",
  ű: "u",
  ų: "u",
  Ŵ: "W",
  ŵ: "w",
  Ŷ: "Y",
  ŷ: "y",
  Ÿ: "Y",
  Ź: "Z",
  Ż: "Z",
  Ž: "Z",
  ź: "z",
  ż: "z",
  ž: "z",
  Ĳ: "IJ",
  ĳ: "ij",
  Œ: "Oe",
  œ: "oe",
  ŉ: "'n",
  ſ: "s"
}, Ly = Cc(xy);
const $y = Ly;
var Uy = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, Fy = "\\u0300-\\u036f", Vy = "\\ufe20-\\ufe2f", By = "\\u20d0-\\u20ff", Gy = Fy + Vy + By, qy = "[" + Gy + "]", Hy = RegExp(qy, "g");
function qh(t) {
  return t = Z(t), t && t.replace(Uy, $y).replace(Hy, "");
}
var Wy = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function jy(t) {
  return t.match(Wy) || [];
}
var Ky = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function Jy(t) {
  return Ky.test(t);
}
var Hh = "\\ud800-\\udfff", Yy = "\\u0300-\\u036f", zy = "\\ufe20-\\ufe2f", Xy = "\\u20d0-\\u20ff", Qy = Yy + zy + Xy, Wh = "\\u2700-\\u27bf", jh = "a-z\\xdf-\\xf6\\xf8-\\xff", Zy = "\\xac\\xb1\\xd7\\xf7", eA = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", tA = "\\u2000-\\u206f", rA = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", Kh = "A-Z\\xc0-\\xd6\\xd8-\\xde", nA = "\\ufe0e\\ufe0f", Jh = Zy + eA + tA + rA, Yh = "['’]", Ou = "[" + Jh + "]", iA = "[" + Qy + "]", zh = "\\d+", sA = "[" + Wh + "]", Xh = "[" + jh + "]", Qh = "[^" + Hh + Jh + zh + Wh + jh + Kh + "]", aA = "\\ud83c[\\udffb-\\udfff]", oA = "(?:" + iA + "|" + aA + ")", cA = "[^" + Hh + "]", Zh = "(?:\\ud83c[\\udde6-\\uddff]){2}", ef = "[\\ud800-\\udbff][\\udc00-\\udfff]", Dn = "[" + Kh + "]", dA = "\\u200d", Mu = "(?:" + Xh + "|" + Qh + ")", uA = "(?:" + Dn + "|" + Qh + ")", Nu = "(?:" + Yh + "(?:d|ll|m|re|s|t|ve))?", xu = "(?:" + Yh + "(?:D|LL|M|RE|S|T|VE))?", tf = oA + "?", rf = "[" + nA + "]?", lA = "(?:" + dA + "(?:" + [cA, Zh, ef].join("|") + ")" + rf + tf + ")*", hA = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", fA = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", pA = rf + tf + lA, mA = "(?:" + [sA, Zh, ef].join("|") + ")" + pA, gA = RegExp([
  Dn + "?" + Xh + "+" + Nu + "(?=" + [Ou, Dn, "$"].join("|") + ")",
  uA + "+" + xu + "(?=" + [Ou, Dn + Mu, "$"].join("|") + ")",
  Dn + "?" + Mu + "+" + Nu,
  Dn + "+" + xu,
  fA,
  hA,
  zh,
  mA
].join("|"), "g");
function _A(t) {
  return t.match(gA) || [];
}
function nf(t, e, r) {
  return t = Z(t), e = r ? void 0 : e, e === void 0 ? Jy(t) ? _A(t) : jy(t) : t.match(e) || [];
}
var TA = "['’]", vA = RegExp(TA, "g");
function si(t) {
  return function(e) {
    return kc(nf(qh(e).replace(vA, "")), t, "");
  };
}
var EA = si(function(t, e, r) {
  return e = e.toLowerCase(), t + (r ? Gh(e) : e);
});
const wA = EA;
function yA() {
  if (!arguments.length)
    return [];
  var t = arguments[0];
  return V(t) ? t : [t];
}
var AA = Me.isFinite, RA = Math.min;
function Ic(t) {
  var e = Math[t];
  return function(r, n) {
    if (r = wt(r), n = n == null ? 0 : RA(B(n), 292), n && AA(r)) {
      var i = (Z(r) + "e").split("e"), s = e(i[0] + "e" + (+i[1] + n));
      return i = (Z(s) + "e").split("e"), +(i[0] + "e" + (+i[1] - n));
    }
    return e(r);
  };
}
var SA = Ic("ceil");
const bA = SA;
function sf(t) {
  var e = l(t);
  return e.__chain__ = !0, e;
}
var kA = Math.ceil, CA = Math.max;
function IA(t, e, r) {
  (r ? je(t, e, r) : e === void 0) ? e = 1 : e = CA(B(e), 0);
  var n = t == null ? 0 : t.length;
  if (!n || e < 1)
    return [];
  for (var i = 0, s = 0, a = Array(kA(n / e)); i < n; )
    a[s++] = St(t, i, i += e);
  return a;
}
function yn(t, e, r) {
  return t === t && (r !== void 0 && (t = t <= r ? t : r), e !== void 0 && (t = t >= e ? t : e)), t;
}
function PA(t, e, r) {
  return r === void 0 && (r = e, e = void 0), r !== void 0 && (r = wt(r), r = r === r ? r : 0), e !== void 0 && (e = wt(e), e = e === e ? e : 0), yn(wt(t), e, r);
}
var DA = 4;
function OA(t) {
  return Et(t, DA);
}
var MA = 1, NA = 4;
function xA(t, e) {
  return e = typeof e == "function" ? e : void 0, Et(t, MA | NA, e);
}
var LA = 4;
function $A(t, e) {
  return e = typeof e == "function" ? e : void 0, Et(t, LA, e);
}
function UA() {
  return new Rt(this.value(), this.__chain__);
}
function FA(t) {
  for (var e = -1, r = t == null ? 0 : t.length, n = 0, i = []; ++e < r; ) {
    var s = t[e];
    s && (i[n++] = s);
  }
  return i;
}
function VA() {
  var t = arguments.length;
  if (!t)
    return [];
  for (var e = Array(t - 1), r = arguments[0], n = t; n--; )
    e[n - 1] = arguments[n];
  return Hr(V(r) ? Ze(r) : [r], Le(e, 1));
}
var BA = "__lodash_hash_undefined__";
function GA(t) {
  return this.__data__.set(t, BA), this;
}
function qA(t) {
  return this.__data__.has(t);
}
function _n(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.__data__ = new vr(); ++e < r; )
    this.add(t[e]);
}
_n.prototype.add = _n.prototype.push = GA;
_n.prototype.has = qA;
function Pc(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n; )
    if (e(t[r], r, t))
      return !0;
  return !1;
}
function Si(t, e) {
  return t.has(e);
}
var HA = 1, WA = 2;
function af(t, e, r, n, i, s) {
  var a = r & HA, o = t.length, c = e.length;
  if (o != c && !(a && c > o))
    return !1;
  var u = s.get(t), h = s.get(e);
  if (u && h)
    return u == e && h == t;
  var f = -1, g = !0, E = r & WA ? new _n() : void 0;
  for (s.set(t, e), s.set(e, t); ++f < o; ) {
    var R = t[f], I = e[f];
    if (n)
      var S = a ? n(I, R, f, e, t, s) : n(R, I, f, t, e, s);
    if (S !== void 0) {
      if (S)
        continue;
      g = !1;
      break;
    }
    if (E) {
      if (!Pc(e, function(k, O) {
        if (!Si(E, O) && (R === k || i(R, k, r, n, s)))
          return E.push(O);
      })) {
        g = !1;
        break;
      }
    } else if (!(R === I || i(R, I, r, n, s))) {
      g = !1;
      break;
    }
  }
  return s.delete(t), s.delete(e), g;
}
function Dc(t) {
  var e = -1, r = Array(t.size);
  return t.forEach(function(n, i) {
    r[++e] = [i, n];
  }), r;
}
function _a(t) {
  var e = -1, r = Array(t.size);
  return t.forEach(function(n) {
    r[++e] = n;
  }), r;
}
var jA = 1, KA = 2, JA = "[object Boolean]", YA = "[object Date]", zA = "[object Error]", XA = "[object Map]", QA = "[object Number]", ZA = "[object RegExp]", eR = "[object Set]", tR = "[object String]", rR = "[object Symbol]", nR = "[object ArrayBuffer]", iR = "[object DataView]", Lu = Ge ? Ge.prototype : void 0, co = Lu ? Lu.valueOf : void 0;
function sR(t, e, r, n, i, s, a) {
  switch (r) {
    case iR:
      if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset)
        return !1;
      t = t.buffer, e = e.buffer;
    case nR:
      return !(t.byteLength != e.byteLength || !s(new bs(t), new bs(e)));
    case JA:
    case YA:
    case QA:
      return Nt(+t, +e);
    case zA:
      return t.name == e.name && t.message == e.message;
    case ZA:
    case tR:
      return t == e + "";
    case XA:
      var o = Dc;
    case eR:
      var c = n & jA;
      if (o || (o = _a), t.size != e.size && !c)
        return !1;
      var u = a.get(t);
      if (u)
        return u == e;
      n |= KA, a.set(t, e);
      var h = af(o(t), o(e), n, i, s, a);
      return a.delete(t), h;
    case rR:
      if (co)
        return co.call(t) == co.call(e);
  }
  return !1;
}
var aR = 1, oR = Object.prototype, cR = oR.hasOwnProperty;
function dR(t, e, r, n, i, s) {
  var a = r & aR, o = So(t), c = o.length, u = So(e), h = u.length;
  if (c != h && !a)
    return !1;
  for (var f = c; f--; ) {
    var g = o[f];
    if (!(a ? g in e : cR.call(e, g)))
      return !1;
  }
  var E = s.get(t), R = s.get(e);
  if (E && R)
    return E == e && R == t;
  var I = !0;
  s.set(t, e), s.set(e, t);
  for (var S = a; ++f < c; ) {
    g = o[f];
    var k = t[g], O = e[g];
    if (n)
      var W = a ? n(O, k, g, e, t, s) : n(k, O, g, t, e, s);
    if (!(W === void 0 ? k === O || i(k, O, r, n, s) : W)) {
      I = !1;
      break;
    }
    S || (S = g == "constructor");
  }
  if (I && !S) {
    var C = t.constructor, te = e.constructor;
    C != te && "constructor" in t && "constructor" in e && !(typeof C == "function" && C instanceof C && typeof te == "function" && te instanceof te) && (I = !1);
  }
  return s.delete(t), s.delete(e), I;
}
var uR = 1, $u = "[object Arguments]", Uu = "[object Array]", rs = "[object Object]", lR = Object.prototype, Fu = lR.hasOwnProperty;
function hR(t, e, r, n, i, s) {
  var a = V(t), o = V(e), c = a ? Uu : jt(t), u = o ? Uu : jt(e);
  c = c == $u ? rs : c, u = u == $u ? rs : u;
  var h = c == rs, f = u == rs, g = c == u;
  if (g && Fr(t)) {
    if (!Fr(e))
      return !1;
    a = !0, h = !1;
  }
  if (g && !h)
    return s || (s = new Dt()), a || Zn(t) ? af(t, e, r, n, i, s) : sR(t, e, c, r, n, i, s);
  if (!(r & uR)) {
    var E = h && Fu.call(t, "__wrapped__"), R = f && Fu.call(e, "__wrapped__");
    if (E || R) {
      var I = E ? t.value() : t, S = R ? e.value() : e;
      return s || (s = new Dt()), i(I, S, r, n, s);
    }
  }
  return g ? (s || (s = new Dt()), dR(t, e, r, n, i, s)) : !1;
}
function Yi(t, e, r, n, i) {
  return t === e ? !0 : t == null || e == null || !we(t) && !we(e) ? t !== t && e !== e : hR(t, e, r, n, Yi, i);
}
var fR = 1, pR = 2;
function Oc(t, e, r, n) {
  var i = r.length, s = i, a = !n;
  if (t == null)
    return !s;
  for (t = Object(t); i--; ) {
    var o = r[i];
    if (a && o[2] ? o[1] !== t[o[0]] : !(o[0] in t))
      return !1;
  }
  for (; ++i < s; ) {
    o = r[i];
    var c = o[0], u = t[c], h = o[1];
    if (a && o[2]) {
      if (u === void 0 && !(c in t))
        return !1;
    } else {
      var f = new Dt();
      if (n)
        var g = n(u, h, c, t, e, f);
      if (!(g === void 0 ? Yi(h, u, fR | pR, n, f) : g))
        return !1;
    }
  }
  return !0;
}
function of(t) {
  return t === t && !_e(t);
}
function Mc(t) {
  for (var e = De(t), r = e.length; r--; ) {
    var n = e[r], i = t[n];
    e[r] = [n, i, of(i)];
  }
  return e;
}
function cf(t, e) {
  return function(r) {
    return r == null ? !1 : r[t] === e && (e !== void 0 || t in Object(r));
  };
}
function df(t) {
  var e = Mc(t);
  return e.length == 1 && e[0][2] ? cf(e[0][0], e[0][1]) : function(r) {
    return r === t || Oc(r, t, e);
  };
}
function mR(t, e) {
  return t != null && e in Object(t);
}
function Nc(t, e) {
  return t != null && mh(t, e, mR);
}
var gR = 1, _R = 2;
function uf(t, e) {
  return mc(t) && of(e) ? cf(Yt(t), e) : function(r) {
    var n = gc(r, t);
    return n === void 0 && n === e ? Nc(r, t) : Yi(e, n, gR | _R);
  };
}
function xc(t) {
  return function(e) {
    return e == null ? void 0 : e[t];
  };
}
function TR(t) {
  return function(e) {
    return wn(e, t);
  };
}
function lf(t) {
  return mc(t) ? xc(Yt(t)) : TR(t);
}
function F(t) {
  return typeof t == "function" ? t : t == null ? Je : typeof t == "object" ? V(t) ? uf(t[0], t[1]) : df(t) : lf(t);
}
var vR = "Expected a function";
function ER(t) {
  var e = t == null ? 0 : t.length, r = F;
  return t = e ? ge(t, function(n) {
    if (typeof n[1] != "function")
      throw new TypeError(vR);
    return [r(n[0]), n[1]];
  }) : [], q(function(n) {
    for (var i = -1; ++i < e; ) {
      var s = t[i];
      if (ht(s[0], this, n))
        return ht(s[1], this, n);
    }
  });
}
function hf(t, e, r) {
  var n = r.length;
  if (t == null)
    return !n;
  for (t = Object(t); n--; ) {
    var i = r[n], s = e[i], a = t[i];
    if (a === void 0 && !(i in t) || !s(a))
      return !1;
  }
  return !0;
}
function wR(t) {
  var e = De(t);
  return function(r) {
    return hf(r, t, e);
  };
}
var yR = 1;
function AR(t) {
  return wR(Et(t, yR));
}
function RR(t, e) {
  return e == null || hf(t, e, De(e));
}
function SR(t, e, r, n) {
  for (var i = -1, s = t == null ? 0 : t.length; ++i < s; ) {
    var a = t[i];
    e(n, a, r(a), t);
  }
  return n;
}
function ff(t) {
  return function(e, r, n) {
    for (var i = -1, s = Object(e), a = n(e), o = a.length; o--; ) {
      var c = a[t ? o : ++i];
      if (r(s[c], c, s) === !1)
        break;
    }
    return e;
  };
}
var bR = ff();
const Lc = bR;
function zt(t, e) {
  return t && Lc(t, e, De);
}
function pf(t, e) {
  return function(r, n) {
    if (r == null)
      return r;
    if (!tt(r))
      return t(r, n);
    for (var i = r.length, s = e ? i : -1, a = Object(r); (e ? s-- : ++s < i) && n(a[s], s, a) !== !1; )
      ;
    return r;
  };
}
var kR = pf(zt);
const Kr = kR;
function CR(t, e, r, n) {
  return Kr(t, function(i, s, a) {
    e(n, i, r(i), a);
  }), n;
}
function Ta(t, e) {
  return function(r, n) {
    var i = V(r) ? SR : CR, s = e ? e() : {};
    return i(r, t, F(n), s);
  };
}
var IR = Object.prototype, PR = IR.hasOwnProperty, DR = Ta(function(t, e, r) {
  PR.call(t, r) ? ++t[r] : Er(t, r, 1);
});
const OR = DR;
function MR(t, e) {
  var r = ei(t);
  return e == null ? r : rh(r, e);
}
var NR = 8;
function $c(t, e, r) {
  e = r ? void 0 : e;
  var n = yr(t, NR, void 0, void 0, void 0, void 0, void 0, e);
  return n.placeholder = $c.placeholder, n;
}
$c.placeholder = {};
var xR = 16;
function Uc(t, e, r) {
  e = r ? void 0 : e;
  var n = yr(t, xR, void 0, void 0, void 0, void 0, void 0, e);
  return n.placeholder = Uc.placeholder, n;
}
Uc.placeholder = {};
var LR = function() {
  return Me.Date.now();
};
const ps = LR;
var $R = "Expected a function", UR = Math.max, FR = Math.min;
function va(t, e, r) {
  var n, i, s, a, o, c, u = 0, h = !1, f = !1, g = !0;
  if (typeof t != "function")
    throw new TypeError($R);
  e = wt(e) || 0, _e(r) && (h = !!r.leading, f = "maxWait" in r, s = f ? UR(wt(r.maxWait) || 0, e) : s, g = "trailing" in r ? !!r.trailing : g);
  function E(J) {
    var Ee = n, We = i;
    return n = i = void 0, u = J, a = t.apply(We, Ee), a;
  }
  function R(J) {
    return u = J, o = setTimeout(k, e), h ? E(J) : a;
  }
  function I(J) {
    var Ee = J - c, We = J - u, li = e - Ee;
    return f ? FR(li, s - We) : li;
  }
  function S(J) {
    var Ee = J - c, We = J - u;
    return c === void 0 || Ee >= e || Ee < 0 || f && We >= s;
  }
  function k() {
    var J = ps();
    if (S(J))
      return O(J);
    o = setTimeout(k, I(J));
  }
  function O(J) {
    return o = void 0, g && n ? E(J) : (n = i = void 0, a);
  }
  function W() {
    o !== void 0 && clearTimeout(o), u = 0, n = c = i = o = void 0;
  }
  function C() {
    return o === void 0 ? a : O(ps());
  }
  function te() {
    var J = ps(), Ee = S(J);
    if (n = arguments, i = this, c = J, Ee) {
      if (o === void 0)
        return R(c);
      if (f)
        return clearTimeout(o), o = setTimeout(k, e), E(c);
    }
    return o === void 0 && (o = setTimeout(k, e)), a;
  }
  return te.cancel = W, te.flush = C, te;
}
function VR(t, e) {
  return t == null || t !== t ? e : t;
}
var mf = Object.prototype, BR = mf.hasOwnProperty, GR = q(function(t, e) {
  t = Object(t);
  var r = -1, n = e.length, i = n > 2 ? e[2] : void 0;
  for (i && je(e[0], e[1], i) && (n = 1); ++r < n; )
    for (var s = e[r], a = rt(s), o = -1, c = a.length; ++o < c; ) {
      var u = a[o], h = t[u];
      (h === void 0 || Nt(h, mf[u]) && !BR.call(t, u)) && (t[u] = s[u]);
    }
  return t;
});
const qR = GR;
function Do(t, e, r) {
  (r !== void 0 && !Nt(t[e], r) || r === void 0 && !(e in t)) && Er(t, e, r);
}
function be(t) {
  return we(t) && tt(t);
}
function Oo(t, e) {
  if (!(e === "constructor" && typeof t[e] == "function") && e != "__proto__")
    return t[e];
}
function gf(t) {
  return Jt(t, rt(t));
}
function HR(t, e, r, n, i, s, a) {
  var o = Oo(t, r), c = Oo(e, r), u = a.get(c);
  if (u) {
    Do(t, r, u);
    return;
  }
  var h = s ? s(o, c, r + "", t, e, a) : void 0, f = h === void 0;
  if (f) {
    var g = V(c), E = !g && Fr(c), R = !g && !E && Zn(c);
    h = c, g || E || R ? V(o) ? h = o : be(o) ? h = Ze(o) : E ? (f = !1, h = ih(c, !0)) : R ? (f = !1, h = oh(c, !0)) : h = [] : Ji(c) || gn(c) ? (h = o, gn(o) ? h = gf(o) : (!_e(o) || Tr(o)) && (h = ch(c))) : f = !1;
  }
  f && (a.set(c, h), i(h, c, n, s, a), a.delete(c)), Do(t, r, h);
}
function Ea(t, e, r, n, i) {
  t !== e && Lc(e, function(s, a) {
    if (i || (i = new Dt()), _e(s))
      HR(t, e, a, r, Ea, n, i);
    else {
      var o = n ? n(Oo(t, a), s, a + "", t, e, i) : void 0;
      o === void 0 && (o = s), Do(t, a, o);
    }
  }, rt);
}
function _f(t, e, r, n, i, s) {
  return _e(t) && _e(e) && (s.set(e, t), Ea(t, e, void 0, _f, s), s.delete(e)), t;
}
var WR = ni(function(t, e, r, n) {
  Ea(t, e, r, n);
});
const Tf = WR;
var jR = q(function(t) {
  return t.push(void 0, _f), ht(Tf, void 0, t);
});
const KR = jR;
var JR = "Expected a function";
function vf(t, e, r) {
  if (typeof t != "function")
    throw new TypeError(JR);
  return setTimeout(function() {
    t.apply(void 0, r);
  }, e);
}
var YR = q(function(t, e) {
  return vf(t, 1, e);
});
const zR = YR;
var XR = q(function(t, e, r) {
  return vf(t, wt(e) || 0, r);
});
const QR = XR;
function Fc(t, e, r) {
  for (var n = -1, i = t == null ? 0 : t.length; ++n < i; )
    if (r(e, t[n]))
      return !0;
  return !1;
}
var ZR = 200;
function zi(t, e, r, n) {
  var i = -1, s = ma, a = !0, o = t.length, c = [], u = e.length;
  if (!o)
    return c;
  r && (e = ge(e, dt(r))), n ? (s = Fc, a = !1) : e.length >= ZR && (s = Si, a = !1, e = new _n(e));
  e:
    for (; ++i < o; ) {
      var h = t[i], f = r == null ? h : r(h);
      if (h = n || h !== 0 ? h : 0, a && f === f) {
        for (var g = u; g--; )
          if (e[g] === f)
            continue e;
        c.push(h);
      } else
        s(e, f, n) || c.push(h);
    }
  return c;
}
var eS = q(function(t, e) {
  return be(t) ? zi(t, Le(e, 1, be, !0)) : [];
});
const tS = eS;
function ft(t) {
  var e = t == null ? 0 : t.length;
  return e ? t[e - 1] : void 0;
}
var rS = q(function(t, e) {
  var r = ft(e);
  return be(r) && (r = void 0), be(t) ? zi(t, Le(e, 1, be, !0), F(r)) : [];
});
const nS = rS;
var iS = q(function(t, e) {
  var r = ft(e);
  return be(r) && (r = void 0), be(t) ? zi(t, Le(e, 1, be, !0), void 0, r) : [];
});
const sS = iS;
var aS = ha(function(t, e) {
  return t / e;
}, 1);
const oS = aS;
function cS(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (e = r || e === void 0 ? 1 : B(e), St(t, e < 0 ? 0 : e, n)) : [];
}
function dS(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (e = r || e === void 0 ? 1 : B(e), e = n - e, St(t, 0, e < 0 ? 0 : e)) : [];
}
function wa(t, e, r, n) {
  for (var i = t.length, s = n ? i : -1; (n ? s-- : ++s < i) && e(t[s], s, t); )
    ;
  return r ? St(t, n ? 0 : s, n ? s + 1 : i) : St(t, n ? s + 1 : 0, n ? i : s);
}
function uS(t, e) {
  return t && t.length ? wa(t, F(e), !0, !0) : [];
}
function lS(t, e) {
  return t && t.length ? wa(t, F(e), !0) : [];
}
function Xt(t) {
  return typeof t == "function" ? t : Je;
}
function Vu(t, e) {
  var r = V(t) ? bt : Kr;
  return r(t, Xt(e));
}
function hS(t, e) {
  for (var r = t == null ? 0 : t.length; r-- && e(t[r], r, t) !== !1; )
    ;
  return t;
}
var fS = ff(!0);
const Ef = fS;
function Vc(t, e) {
  return t && Ef(t, e, De);
}
var pS = pf(Vc, !0);
const wf = pS;
function Bu(t, e) {
  var r = V(t) ? hS : wf;
  return r(t, Xt(e));
}
function mS(t, e, r) {
  t = Z(t), e = lt(e);
  var n = t.length;
  r = r === void 0 ? n : yn(B(r), 0, n);
  var i = r;
  return r -= e.length, r >= 0 && t.slice(r, i) == e;
}
function gS(t, e) {
  return ge(e, function(r) {
    return [r, t[r]];
  });
}
function _S(t) {
  var e = -1, r = Array(t.size);
  return t.forEach(function(n) {
    r[++e] = [n, n];
  }), r;
}
var TS = "[object Map]", vS = "[object Set]";
function yf(t) {
  return function(e) {
    var r = jt(e);
    return r == TS ? Dc(e) : r == vS ? _S(e) : gS(e, t(e));
  };
}
var ES = yf(De);
const Gu = ES;
var wS = yf(rt);
const qu = wS;
var yS = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
}, AS = Cc(yS);
const RS = AS;
var Af = /[&<>"']/g, SS = RegExp(Af.source);
function Rf(t) {
  return t = Z(t), t && SS.test(t) ? t.replace(Af, RS) : t;
}
var Sf = /[\\^$.*+?()[\]{}|]/g, bS = RegExp(Sf.source);
function kS(t) {
  return t = Z(t), t && bS.test(t) ? t.replace(Sf, "\\$&") : t;
}
function bf(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n; )
    if (!e(t[r], r, t))
      return !1;
  return !0;
}
function CS(t, e) {
  var r = !0;
  return Kr(t, function(n, i, s) {
    return r = !!e(n, i, s), r;
  }), r;
}
function IS(t, e, r) {
  var n = V(t) ? bf : CS;
  return r && je(t, e, r) && (e = void 0), n(t, F(e));
}
var PS = 4294967295;
function kf(t) {
  return t ? yn(B(t), 0, PS) : 0;
}
function DS(t, e, r, n) {
  var i = t.length;
  for (r = B(r), r < 0 && (r = -r > i ? 0 : i + r), n = n === void 0 || n > i ? i : B(n), n < 0 && (n += i), n = r > n ? 0 : kf(n); r < n; )
    t[r++] = e;
  return t;
}
function OS(t, e, r, n) {
  var i = t == null ? 0 : t.length;
  return i ? (r && typeof r != "number" && je(t, e, r) && (r = 0, n = i), DS(t, e, r, n)) : [];
}
function Cf(t, e) {
  var r = [];
  return Kr(t, function(n, i, s) {
    e(n, i, s) && r.push(n);
  }), r;
}
function MS(t, e) {
  var r = V(t) ? qr : Cf;
  return r(t, F(e));
}
function If(t) {
  return function(e, r, n) {
    var i = Object(e);
    if (!tt(e)) {
      var s = F(r);
      e = De(e), r = function(o) {
        return s(i[o], o, i);
      };
    }
    var a = t(e, r, n);
    return a > -1 ? i[s ? e[a] : a] : void 0;
  };
}
var NS = Math.max;
function Pf(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = r == null ? 0 : B(r);
  return i < 0 && (i = NS(n + i, 0)), pa(t, F(e), i);
}
var xS = If(Pf);
const LS = xS;
function Df(t, e, r) {
  var n;
  return r(t, function(i, s, a) {
    if (e(i, s, a))
      return n = s, !1;
  }), n;
}
function $S(t, e) {
  return Df(t, F(e), zt);
}
var US = Math.max, FS = Math.min;
function Of(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = n - 1;
  return r !== void 0 && (i = B(r), i = r < 0 ? US(n + i, 0) : FS(i, n - 1)), pa(t, F(e), i, !0);
}
var VS = If(Of);
const BS = VS;
function GS(t, e) {
  return Df(t, F(e), Vc);
}
function Hu(t) {
  return t && t.length ? t[0] : void 0;
}
function Mf(t, e) {
  var r = -1, n = tt(t) ? Array(t.length) : [];
  return Kr(t, function(i, s, a) {
    n[++r] = e(i, s, a);
  }), n;
}
function ya(t, e) {
  var r = V(t) ? ge : Mf;
  return r(t, F(e));
}
function qS(t, e) {
  return Le(ya(t, e), 1);
}
var HS = 1 / 0;
function WS(t, e) {
  return Le(ya(t, e), HS);
}
function jS(t, e, r) {
  return r = r === void 0 ? 1 : B(r), Le(ya(t, e), r);
}
var KS = 1 / 0;
function JS(t) {
  var e = t == null ? 0 : t.length;
  return e ? Le(t, KS) : [];
}
function YS(t, e) {
  var r = t == null ? 0 : t.length;
  return r ? (e = e === void 0 ? 1 : B(e), Le(t, e)) : [];
}
var zS = 512;
function XS(t) {
  return yr(t, zS);
}
var QS = Ic("floor");
const ZS = QS;
var eb = "Expected a function", tb = 8, rb = 32, nb = 128, ib = 256;
function Nf(t) {
  return Ar(function(e) {
    var r = e.length, n = r, i = Rt.prototype.thru;
    for (t && e.reverse(); n--; ) {
      var s = e[n];
      if (typeof s != "function")
        throw new TypeError(eb);
      if (i && !a && fs(s) == "wrapper")
        var a = new Rt([], !0);
    }
    for (n = a ? n : r; ++n < r; ) {
      s = e[n];
      var o = fs(s), c = o == "wrapper" ? vc(s) : void 0;
      c && Co(c[0]) && c[1] == (nb | tb | rb | ib) && !c[4].length && c[9] == 1 ? a = a[fs(c[0])].apply(a, c[3]) : a = s.length == 1 && Co(s) ? a[o]() : a.thru(s);
    }
    return function() {
      var u = arguments, h = u[0];
      if (a && u.length == 1 && V(h))
        return a.plant(h).value();
      for (var f = 0, g = r ? e[f].apply(this, u) : h; ++f < r; )
        g = e[f].call(this, g);
      return g;
    };
  });
}
var sb = Nf();
const ab = sb;
var ob = Nf(!0);
const cb = ob;
function db(t, e) {
  return t == null ? t : Lc(t, Xt(e), rt);
}
function ub(t, e) {
  return t == null ? t : Ef(t, Xt(e), rt);
}
function lb(t, e) {
  return t && zt(t, Xt(e));
}
function hb(t, e) {
  return t && Vc(t, Xt(e));
}
function fb(t) {
  for (var e = -1, r = t == null ? 0 : t.length, n = {}; ++e < r; ) {
    var i = t[e];
    n[i[0]] = i[1];
  }
  return n;
}
function Aa(t, e) {
  return qr(e, function(r) {
    return Tr(t[r]);
  });
}
function pb(t) {
  return t == null ? [] : Aa(t, De(t));
}
function mb(t) {
  return t == null ? [] : Aa(t, rt(t));
}
var gb = Object.prototype, _b = gb.hasOwnProperty, Tb = Ta(function(t, e, r) {
  _b.call(t, r) ? t[r].push(e) : Er(t, r, [e]);
});
const vb = Tb;
function Bc(t, e) {
  return t > e;
}
function Ra(t) {
  return function(e, r) {
    return typeof e == "string" && typeof r == "string" || (e = wt(e), r = wt(r)), t(e, r);
  };
}
var Eb = Ra(Bc);
const wb = Eb;
var yb = Ra(function(t, e) {
  return t >= e;
});
const Ab = yb;
var Rb = Math.max, Sb = Math.min;
function bb(t, e, r) {
  return t >= Sb(e, r) && t < Rb(e, r);
}
function kb(t, e, r) {
  return e = mr(e), r === void 0 ? (r = e, e = 0) : r = mr(r), t = wt(t), bb(t, e, r);
}
var Cb = "[object String]";
function Sa(t) {
  return typeof t == "string" || !V(t) && we(t) && Ke(t) == Cb;
}
function Gc(t, e) {
  return ge(e, function(r) {
    return t[r];
  });
}
function ai(t) {
  return t == null ? [] : Gc(t, De(t));
}
var Ib = Math.max;
function Pb(t, e, r, n) {
  t = tt(t) ? t : ai(t), r = r && !n ? B(r) : 0;
  var i = t.length;
  return r < 0 && (r = Ib(i + r, 0)), Sa(t) ? r <= i && t.indexOf(e, r) > -1 : !!i && ti(t, e, r) > -1;
}
var Db = Math.max;
function Ob(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = r == null ? 0 : B(r);
  return i < 0 && (i = Db(n + i, 0)), ti(t, e, i);
}
function Mb(t) {
  var e = t == null ? 0 : t.length;
  return e ? St(t, 0, -1) : [];
}
var Nb = Math.min;
function qc(t, e, r) {
  for (var n = r ? Fc : ma, i = t[0].length, s = t.length, a = s, o = Array(s), c = 1 / 0, u = []; a--; ) {
    var h = t[a];
    a && e && (h = ge(h, dt(e))), c = Nb(h.length, c), o[a] = !r && (e || i >= 120 && h.length >= 120) ? new _n(a && h) : void 0;
  }
  h = t[0];
  var f = -1, g = o[0];
  e:
    for (; ++f < i && u.length < c; ) {
      var E = h[f], R = e ? e(E) : E;
      if (E = r || E !== 0 ? E : 0, !(g ? Si(g, R) : n(u, R, r))) {
        for (a = s; --a; ) {
          var I = o[a];
          if (!(I ? Si(I, R) : n(t[a], R, r)))
            continue e;
        }
        g && g.push(R), u.push(E);
      }
    }
  return u;
}
function Hc(t) {
  return be(t) ? t : [];
}
var xb = q(function(t) {
  var e = ge(t, Hc);
  return e.length && e[0] === t[0] ? qc(e) : [];
});
const Lb = xb;
var $b = q(function(t) {
  var e = ft(t), r = ge(t, Hc);
  return e === ft(r) ? e = void 0 : r.pop(), r.length && r[0] === t[0] ? qc(r, F(e)) : [];
});
const Ub = $b;
var Fb = q(function(t) {
  var e = ft(t), r = ge(t, Hc);
  return e = typeof e == "function" ? e : void 0, e && r.pop(), r.length && r[0] === t[0] ? qc(r, void 0, e) : [];
});
const Vb = Fb;
function Bb(t, e, r, n) {
  return zt(t, function(i, s, a) {
    e(n, r(i), s, a);
  }), n;
}
function xf(t, e) {
  return function(r, n) {
    return Bb(r, t, e(n), {});
  };
}
var Gb = Object.prototype, qb = Gb.toString, Hb = xf(function(t, e, r) {
  e != null && typeof e.toString != "function" && (e = qb.call(e)), t[e] = r;
}, Ec(Je));
const Wb = Hb;
var Lf = Object.prototype, jb = Lf.hasOwnProperty, Kb = Lf.toString, Jb = xf(function(t, e, r) {
  e != null && typeof e.toString != "function" && (e = Kb.call(e)), jb.call(t, e) ? t[e].push(r) : t[e] = [r];
}, F);
const Yb = Jb;
function $f(t, e) {
  return e.length < 2 ? t : wn(t, St(e, 0, -1));
}
function Xi(t, e, r) {
  e = Wr(e, t), t = $f(t, e);
  var n = t == null ? t : t[Yt(ft(e))];
  return n == null ? void 0 : ht(n, t, r);
}
var zb = q(Xi);
const Xb = zb;
var Qb = q(function(t, e, r) {
  var n = -1, i = typeof e == "function", s = tt(t) ? Array(t.length) : [];
  return Kr(t, function(a) {
    s[++n] = i ? ht(e, a, r) : Xi(a, e, r);
  }), s;
});
const Zb = Qb;
var ek = "[object ArrayBuffer]";
function tk(t) {
  return we(t) && Ke(t) == ek;
}
var Wu = At && At.isArrayBuffer, rk = Wu ? dt(Wu) : tk;
const nk = rk;
var ik = "[object Boolean]";
function sk(t) {
  return t === !0 || t === !1 || we(t) && Ke(t) == ik;
}
var ak = "[object Date]";
function ok(t) {
  return we(t) && Ke(t) == ak;
}
var ju = At && At.isDate, ck = ju ? dt(ju) : ok;
const dk = ck;
function uk(t) {
  return we(t) && t.nodeType === 1 && !Ji(t);
}
var lk = "[object Map]", hk = "[object Set]", fk = Object.prototype, pk = fk.hasOwnProperty;
function Wc(t) {
  if (t == null)
    return !0;
  if (tt(t) && (V(t) || typeof t == "string" || typeof t.splice == "function" || Fr(t) || Zn(t) || gn(t)))
    return !t.length;
  var e = jt(t);
  if (e == lk || e == hk)
    return !t.size;
  if (ji(t))
    return !uc(t).length;
  for (var r in t)
    if (pk.call(t, r))
      return !1;
  return !0;
}
function Uf(t, e) {
  return Yi(t, e);
}
function mk(t, e, r) {
  r = typeof r == "function" ? r : void 0;
  var n = r ? r(t, e) : void 0;
  return n === void 0 ? Yi(t, e, void 0, r) : !!n;
}
var gk = Me.isFinite;
function _k(t) {
  return typeof t == "number" && gk(t);
}
function Ff(t) {
  return typeof t == "number" && t == B(t);
}
function Tk(t, e) {
  return t === e || Oc(t, e, Mc(e));
}
function vk(t, e, r) {
  return r = typeof r == "function" ? r : void 0, Oc(t, e, Mc(e), r);
}
var Ek = "[object Number]";
function Vf(t) {
  return typeof t == "number" || we(t) && Ke(t) == Ek;
}
function wk(t) {
  return Vf(t) && t != +t;
}
var yk = hs ? Tr : dc;
const Ak = yk;
var Rk = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.";
function Sk(t) {
  if (Ak(t))
    throw new Error(Rk);
  return zl(t);
}
function bk(t) {
  return t == null;
}
function kk(t) {
  return t === null;
}
var Ck = "[object RegExp]";
function Ik(t) {
  return we(t) && Ke(t) == Ck;
}
var Ku = At && At.isRegExp, Pk = Ku ? dt(Ku) : Ik;
const jc = Pk;
var Ju = 9007199254740991;
function Dk(t) {
  return Ff(t) && t >= -Ju && t <= Ju;
}
function Ok(t) {
  return t === void 0;
}
var Mk = "[object WeakMap]";
function Nk(t) {
  return we(t) && jt(t) == Mk;
}
var xk = "[object WeakSet]";
function Lk(t) {
  return we(t) && Ke(t) == xk;
}
var $k = 1;
function Uk(t) {
  return F(typeof t == "function" ? t : Et(t, $k));
}
var Fk = Array.prototype, Vk = Fk.join;
function Bk(t, e) {
  return t == null ? "" : Vk.call(t, e);
}
var Gk = si(function(t, e, r) {
  return t + (r ? "-" : "") + e.toLowerCase();
});
const qk = Gk;
var Hk = Ta(function(t, e, r) {
  Er(t, r, e);
});
const Wk = Hk;
function jk(t, e, r) {
  for (var n = r + 1; n--; )
    if (t[n] === e)
      return n;
  return n;
}
var Kk = Math.max, Jk = Math.min;
function Yk(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = n;
  return r !== void 0 && (i = B(r), i = i < 0 ? Kk(n + i, 0) : Jk(i, n - 1)), e === e ? jk(t, e, i) : pa(t, Sh, i, !0);
}
var zk = si(function(t, e, r) {
  return t + (r ? " " : "") + e.toLowerCase();
});
const Xk = zk;
var Qk = Bh("toLowerCase");
const Zk = Qk;
function Kc(t, e) {
  return t < e;
}
var eC = Ra(Kc);
const tC = eC;
var rC = Ra(function(t, e) {
  return t <= e;
});
const nC = rC;
function iC(t, e) {
  var r = {};
  return e = F(e), zt(t, function(n, i, s) {
    Er(r, e(n, i, s), n);
  }), r;
}
function sC(t, e) {
  var r = {};
  return e = F(e), zt(t, function(n, i, s) {
    Er(r, i, e(n, i, s));
  }), r;
}
var aC = 1;
function oC(t) {
  return df(Et(t, aC));
}
var cC = 1;
function dC(t, e) {
  return uf(t, Et(e, cC));
}
function ba(t, e, r) {
  for (var n = -1, i = t.length; ++n < i; ) {
    var s = t[n], a = e(s);
    if (a != null && (o === void 0 ? a === a && !ut(a) : r(a, o)))
      var o = a, c = s;
  }
  return c;
}
function uC(t) {
  return t && t.length ? ba(t, Je, Bc) : void 0;
}
function lC(t, e) {
  return t && t.length ? ba(t, F(e), Bc) : void 0;
}
function Jc(t, e) {
  for (var r, n = -1, i = t.length; ++n < i; ) {
    var s = e(t[n]);
    s !== void 0 && (r = r === void 0 ? s : r + s);
  }
  return r;
}
var hC = 0 / 0;
function Bf(t, e) {
  var r = t == null ? 0 : t.length;
  return r ? Jc(t, e) / r : hC;
}
function fC(t) {
  return Bf(t, Je);
}
function pC(t, e) {
  return Bf(t, F(e));
}
var mC = ni(function(t, e, r) {
  Ea(t, e, r);
});
const Gf = mC;
var gC = q(function(t, e) {
  return function(r) {
    return Xi(r, t, e);
  };
});
const _C = gC;
var TC = q(function(t, e) {
  return function(r) {
    return Xi(t, r, e);
  };
});
const vC = TC;
function EC(t) {
  return t && t.length ? ba(t, Je, Kc) : void 0;
}
function wC(t, e) {
  return t && t.length ? ba(t, F(e), Kc) : void 0;
}
function qf(t, e, r) {
  var n = De(e), i = Aa(e, n), s = !(_e(r) && "chain" in r) || !!r.chain, a = Tr(t);
  return bt(i, function(o) {
    var c = e[o];
    t[o] = c, a && (t.prototype[o] = function() {
      var u = this.__chain__;
      if (s || u) {
        var h = t(this.__wrapped__), f = h.__actions__ = Ze(this.__actions__);
        return f.push({ func: c, args: arguments, thisArg: t }), h.__chain__ = u, h;
      }
      return c.apply(t, Hr([this.value()], arguments));
    });
  }), t;
}
var yC = ha(function(t, e) {
  return t * e;
}, 1);
const AC = yC;
var RC = "Expected a function";
function Qi(t) {
  if (typeof t != "function")
    throw new TypeError(RC);
  return function() {
    var e = arguments;
    switch (e.length) {
      case 0:
        return !t.call(this);
      case 1:
        return !t.call(this, e[0]);
      case 2:
        return !t.call(this, e[0], e[1]);
      case 3:
        return !t.call(this, e[0], e[1], e[2]);
    }
    return !t.apply(this, e);
  };
}
function SC(t) {
  for (var e, r = []; !(e = t.next()).done; )
    r.push(e.value);
  return r;
}
var bC = "[object Map]", kC = "[object Set]", uo = Ge ? Ge.iterator : void 0;
function Hf(t) {
  if (!t)
    return [];
  if (tt(t))
    return Sa(t) ? Ot(t) : Ze(t);
  if (uo && t[uo])
    return SC(t[uo]());
  var e = jt(t), r = e == bC ? Dc : e == kC ? _a : ai;
  return r(t);
}
function CC() {
  this.__values__ === void 0 && (this.__values__ = Hf(this.value()));
  var t = this.__index__ >= this.__values__.length, e = t ? void 0 : this.__values__[this.__index__++];
  return { done: t, value: e };
}
function Wf(t, e) {
  var r = t.length;
  if (r)
    return e += e < 0 ? r : 0, wr(e, r) ? t[e] : void 0;
}
function IC(t, e) {
  return t && t.length ? Wf(t, B(e)) : void 0;
}
function PC(t) {
  return t = B(t), q(function(e) {
    return Wf(e, t);
  });
}
function Yc(t, e) {
  return e = Wr(e, t), t = $f(t, e), t == null || delete t[Yt(ft(e))];
}
function DC(t) {
  return Ji(t) ? void 0 : t;
}
var OC = 1, MC = 2, NC = 4, xC = Ar(function(t, e) {
  var r = {};
  if (t == null)
    return r;
  var n = !1;
  e = ge(e, function(s) {
    return s = Wr(s, t), n || (n = s.length > 1), s;
  }), Jt(t, fc(t), r), n && (r = Et(r, OC | MC | NC, DC));
  for (var i = e.length; i--; )
    Yc(r, e[i]);
  return r;
});
const LC = xC;
function jf(t, e, r) {
  for (var n = -1, i = e.length, s = {}; ++n < i; ) {
    var a = e[n], o = wn(t, a);
    r(o, a) && Ki(s, Wr(a, t), o);
  }
  return s;
}
function Kf(t, e) {
  if (t == null)
    return {};
  var r = ge(fc(t), function(n) {
    return [n];
  });
  return e = F(e), jf(t, r, function(n, i) {
    return e(n, i[0]);
  });
}
function $C(t, e) {
  return Kf(t, Qi(F(e)));
}
function UC(t) {
  return Mh(2, t);
}
function FC(t, e) {
  var r = t.length;
  for (t.sort(e); r--; )
    t[r] = t[r].value;
  return t;
}
function Jf(t, e) {
  if (t !== e) {
    var r = t !== void 0, n = t === null, i = t === t, s = ut(t), a = e !== void 0, o = e === null, c = e === e, u = ut(e);
    if (!o && !u && !s && t > e || s && a && c && !o && !u || n && a && c || !r && c || !i)
      return 1;
    if (!n && !s && !u && t < e || u && r && i && !n && !s || o && r && i || !a && i || !c)
      return -1;
  }
  return 0;
}
function VC(t, e, r) {
  for (var n = -1, i = t.criteria, s = e.criteria, a = i.length, o = r.length; ++n < a; ) {
    var c = Jf(i[n], s[n]);
    if (c) {
      if (n >= o)
        return c;
      var u = r[n];
      return c * (u == "desc" ? -1 : 1);
    }
  }
  return t.index - e.index;
}
function Yf(t, e, r) {
  e.length ? e = ge(e, function(s) {
    return V(s) ? function(a) {
      return wn(a, s.length === 1 ? s[0] : s);
    } : s;
  }) : e = [Je];
  var n = -1;
  e = ge(e, dt(F));
  var i = Mf(t, function(s, a, o) {
    var c = ge(e, function(u) {
      return u(s);
    });
    return { criteria: c, index: ++n, value: s };
  });
  return FC(i, function(s, a) {
    return VC(s, a, r);
  });
}
function BC(t, e, r, n) {
  return t == null ? [] : (V(e) || (e = e == null ? [] : [e]), r = n ? void 0 : r, V(r) || (r = r == null ? [] : [r]), Yf(t, e, r));
}
function zc(t) {
  return Ar(function(e) {
    return e = ge(e, dt(F)), q(function(r) {
      var n = this;
      return t(e, function(i) {
        return ht(i, n, r);
      });
    });
  });
}
var GC = zc(ge);
const qC = GC;
var HC = q;
const WC = HC;
var jC = Math.min, KC = WC(function(t, e) {
  e = e.length == 1 && V(e[0]) ? ge(e[0], dt(F)) : ge(Le(e, 1), dt(F));
  var r = e.length;
  return q(function(n) {
    for (var i = -1, s = jC(n.length, r); ++i < s; )
      n[i] = e[i].call(this, n[i]);
    return ht(t, this, n);
  });
});
const JC = KC;
var YC = zc(bf);
const zC = YC;
var XC = zc(Pc);
const QC = XC;
var ZC = 9007199254740991, e0 = Math.floor;
function Mo(t, e) {
  var r = "";
  if (!t || e < 1 || e > ZC)
    return r;
  do
    e % 2 && (r += t), e = e0(e / 2), e && (t += t);
  while (e);
  return r;
}
var t0 = xc("length");
const r0 = t0;
var zf = "\\ud800-\\udfff", n0 = "\\u0300-\\u036f", i0 = "\\ufe20-\\ufe2f", s0 = "\\u20d0-\\u20ff", a0 = n0 + i0 + s0, o0 = "\\ufe0e\\ufe0f", c0 = "[" + zf + "]", No = "[" + a0 + "]", xo = "\\ud83c[\\udffb-\\udfff]", d0 = "(?:" + No + "|" + xo + ")", Xf = "[^" + zf + "]", Qf = "(?:\\ud83c[\\udde6-\\uddff]){2}", Zf = "[\\ud800-\\udbff][\\udc00-\\udfff]", u0 = "\\u200d", ep = d0 + "?", tp = "[" + o0 + "]?", l0 = "(?:" + u0 + "(?:" + [Xf, Qf, Zf].join("|") + ")" + tp + ep + ")*", h0 = tp + ep + l0, f0 = "(?:" + [Xf + No + "?", No, Qf, Zf, c0].join("|") + ")", Yu = RegExp(xo + "(?=" + xo + ")|" + f0 + h0, "g");
function p0(t) {
  for (var e = Yu.lastIndex = 0; Yu.test(t); )
    ++e;
  return e;
}
function oi(t) {
  return ii(t) ? p0(t) : r0(t);
}
var m0 = Math.ceil;
function Is(t, e) {
  e = e === void 0 ? " " : lt(e);
  var r = e.length;
  if (r < 2)
    return r ? Mo(e, t) : e;
  var n = Mo(e, m0(t / oi(e)));
  return ii(e) ? jr(Ot(n), 0, t).join("") : n.slice(0, t);
}
var g0 = Math.ceil, _0 = Math.floor;
function T0(t, e, r) {
  t = Z(t), e = B(e);
  var n = e ? oi(t) : 0;
  if (!e || n >= e)
    return t;
  var i = (e - n) / 2;
  return Is(_0(i), r) + t + Is(g0(i), r);
}
function v0(t, e, r) {
  t = Z(t), e = B(e);
  var n = e ? oi(t) : 0;
  return e && n < e ? t + Is(e - n, r) : t;
}
function E0(t, e, r) {
  t = Z(t), e = B(e);
  var n = e ? oi(t) : 0;
  return e && n < e ? Is(e - n, r) + t : t;
}
var w0 = /^\s+/, y0 = Me.parseInt;
function A0(t, e, r) {
  return r || e == null ? e = 0 : e && (e = +e), y0(Z(t).replace(w0, ""), e || 0);
}
var R0 = 32, Xc = q(function(t, e) {
  var r = Vr(e, ri(Xc));
  return yr(t, R0, void 0, e, r);
});
Xc.placeholder = {};
const rp = Xc;
var S0 = 64, Qc = q(function(t, e) {
  var r = Vr(e, ri(Qc));
  return yr(t, S0, void 0, e, r);
});
Qc.placeholder = {};
const b0 = Qc;
var k0 = Ta(function(t, e, r) {
  t[r ? 0 : 1].push(e);
}, function() {
  return [[], []];
});
const C0 = k0;
function I0(t, e) {
  return jf(t, e, function(r, n) {
    return Nc(t, n);
  });
}
var P0 = Ar(function(t, e) {
  return t == null ? {} : I0(t, e);
});
const D0 = P0;
function O0(t) {
  for (var e, r = this; r instanceof fa; ) {
    var n = yh(r);
    n.__index__ = 0, n.__values__ = void 0, e ? i.__wrapped__ = n : e = n;
    var i = n;
    r = r.__wrapped__;
  }
  return i.__wrapped__ = t, e;
}
function M0(t) {
  return function(e) {
    return t == null ? void 0 : wn(t, e);
  };
}
function N0(t, e, r, n) {
  for (var i = r - 1, s = t.length; ++i < s; )
    if (n(t[i], e))
      return i;
  return -1;
}
var x0 = Array.prototype, zu = x0.splice;
function Zc(t, e, r, n) {
  var i = n ? N0 : ti, s = -1, a = e.length, o = t;
  for (t === e && (e = Ze(e)), r && (o = ge(t, dt(r))); ++s < a; )
    for (var c = 0, u = e[s], h = r ? r(u) : u; (c = i(o, h, c, n)) > -1; )
      o !== t && zu.call(o, c, 1), zu.call(t, c, 1);
  return t;
}
function np(t, e) {
  return t && t.length && e && e.length ? Zc(t, e) : t;
}
var L0 = q(np);
const $0 = L0;
function U0(t, e, r) {
  return t && t.length && e && e.length ? Zc(t, e, F(r)) : t;
}
function F0(t, e, r) {
  return t && t.length && e && e.length ? Zc(t, e, void 0, r) : t;
}
var V0 = Array.prototype, B0 = V0.splice;
function ip(t, e) {
  for (var r = t ? e.length : 0, n = r - 1; r--; ) {
    var i = e[r];
    if (r == n || i !== s) {
      var s = i;
      wr(i) ? B0.call(t, i, 1) : Yc(t, i);
    }
  }
  return t;
}
var G0 = Ar(function(t, e) {
  var r = t == null ? 0 : t.length, n = yc(t, e);
  return ip(t, ge(e, function(i) {
    return wr(i, r) ? +i : i;
  }).sort(Jf)), n;
});
const q0 = G0;
var H0 = Math.floor, W0 = Math.random;
function ed(t, e) {
  return t + H0(W0() * (e - t + 1));
}
var j0 = parseFloat, K0 = Math.min, J0 = Math.random;
function Y0(t, e, r) {
  if (r && typeof r != "boolean" && je(t, e, r) && (e = r = void 0), r === void 0 && (typeof e == "boolean" ? (r = e, e = void 0) : typeof t == "boolean" && (r = t, t = void 0)), t === void 0 && e === void 0 ? (t = 0, e = 1) : (t = mr(t), e === void 0 ? (e = t, t = 0) : e = mr(e)), t > e) {
    var n = t;
    t = e, e = n;
  }
  if (r || t % 1 || e % 1) {
    var i = J0();
    return K0(t + i * (e - t + j0("1e-" + ((i + "").length - 1))), e);
  }
  return ed(t, e);
}
var z0 = Math.ceil, X0 = Math.max;
function Q0(t, e, r, n) {
  for (var i = -1, s = X0(z0((e - t) / (r || 1)), 0), a = Array(s); s--; )
    a[n ? s : ++i] = t, t += r;
  return a;
}
function sp(t) {
  return function(e, r, n) {
    return n && typeof n != "number" && je(e, r, n) && (r = n = void 0), e = mr(e), r === void 0 ? (r = e, e = 0) : r = mr(r), n = n === void 0 ? e < r ? 1 : -1 : mr(n), Q0(e, r, n, t);
  };
}
var Z0 = sp();
const eI = Z0;
var tI = sp(!0);
const rI = tI;
var nI = 256, iI = Ar(function(t, e) {
  return yr(t, nI, void 0, void 0, void 0, e);
});
const sI = iI;
function ap(t, e, r, n, i) {
  return i(t, function(s, a, o) {
    r = n ? (n = !1, s) : e(r, s, a, o);
  }), r;
}
function aI(t, e, r) {
  var n = V(t) ? kc : ap, i = arguments.length < 3;
  return n(t, F(e), r, i, Kr);
}
function oI(t, e, r, n) {
  var i = t == null ? 0 : t.length;
  for (n && i && (r = t[--i]); i--; )
    r = e(r, t[i], i, t);
  return r;
}
function cI(t, e, r) {
  var n = V(t) ? oI : ap, i = arguments.length < 3;
  return n(t, F(e), r, i, wf);
}
function dI(t, e) {
  var r = V(t) ? qr : Cf;
  return r(t, Qi(F(e)));
}
function uI(t, e) {
  var r = [];
  if (!(t && t.length))
    return r;
  var n = -1, i = [], s = t.length;
  for (e = F(e); ++n < s; ) {
    var a = t[n];
    e(a, n, t) && (r.push(a), i.push(n));
  }
  return ip(t, i), r;
}
function lI(t, e, r) {
  return (r ? je(t, e, r) : e === void 0) ? e = 1 : e = B(e), Mo(Z(t), e);
}
function hI() {
  var t = arguments, e = Z(t[0]);
  return t.length < 3 ? e : e.replace(t[1], t[2]);
}
var fI = "Expected a function";
function pI(t, e) {
  if (typeof t != "function")
    throw new TypeError(fI);
  return e = e === void 0 ? e : B(e), q(t, e);
}
function mI(t, e, r) {
  e = Wr(e, t);
  var n = -1, i = e.length;
  for (i || (i = 1, t = void 0); ++n < i; ) {
    var s = t == null ? void 0 : t[Yt(e[n])];
    s === void 0 && (n = i, s = r), t = Tr(s) ? s.call(t) : s;
  }
  return t;
}
var gI = Array.prototype, _I = gI.reverse;
function Lo(t) {
  return t == null ? t : _I.call(t);
}
var TI = Ic("round");
const vI = TI;
function op(t) {
  var e = t.length;
  return e ? t[ed(0, e - 1)] : void 0;
}
function EI(t) {
  return op(ai(t));
}
function wI(t) {
  var e = V(t) ? op : EI;
  return e(t);
}
function ka(t, e) {
  var r = -1, n = t.length, i = n - 1;
  for (e = e === void 0 ? n : e; ++r < e; ) {
    var s = ed(r, i), a = t[s];
    t[s] = t[r], t[r] = a;
  }
  return t.length = e, t;
}
function yI(t, e) {
  return ka(Ze(t), yn(e, 0, t.length));
}
function AI(t, e) {
  var r = ai(t);
  return ka(r, yn(e, 0, r.length));
}
function RI(t, e, r) {
  (r ? je(t, e, r) : e === void 0) ? e = 1 : e = B(e);
  var n = V(t) ? yI : AI;
  return n(t, e);
}
function SI(t, e, r, n) {
  return n = typeof n == "function" ? n : void 0, t == null ? t : Ki(t, e, r, n);
}
function bI(t) {
  return ka(Ze(t));
}
function kI(t) {
  return ka(ai(t));
}
function CI(t) {
  var e = V(t) ? bI : kI;
  return e(t);
}
var II = "[object Map]", PI = "[object Set]";
function DI(t) {
  if (t == null)
    return 0;
  if (tt(t))
    return Sa(t) ? oi(t) : t.length;
  var e = jt(t);
  return e == II || e == PI ? t.size : uc(t).length;
}
function OI(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (r && typeof r != "number" && je(t, e, r) ? (e = 0, r = n) : (e = e == null ? 0 : B(e), r = r === void 0 ? n : B(r)), St(t, e, r)) : [];
}
var MI = si(function(t, e, r) {
  return t + (r ? "_" : "") + e.toLowerCase();
});
const NI = MI;
function xI(t, e) {
  var r;
  return Kr(t, function(n, i, s) {
    return r = e(n, i, s), !r;
  }), !!r;
}
function LI(t, e, r) {
  var n = V(t) ? Pc : xI;
  return r && je(t, e, r) && (e = void 0), n(t, F(e));
}
var $I = q(function(t, e) {
  if (t == null)
    return [];
  var r = e.length;
  return r > 1 && je(t, e[0], e[1]) ? e = [] : r > 2 && je(e[0], e[1], e[2]) && (e = [e[0]]), Yf(t, Le(e, 1), []);
});
const UI = $I;
var FI = 4294967295, VI = FI - 1, BI = Math.floor, GI = Math.min;
function td(t, e, r, n) {
  var i = 0, s = t == null ? 0 : t.length;
  if (s === 0)
    return 0;
  e = r(e);
  for (var a = e !== e, o = e === null, c = ut(e), u = e === void 0; i < s; ) {
    var h = BI((i + s) / 2), f = r(t[h]), g = f !== void 0, E = f === null, R = f === f, I = ut(f);
    if (a)
      var S = n || R;
    else
      u ? S = R && (n || g) : o ? S = R && g && (n || !E) : c ? S = R && g && !E && (n || !I) : E || I ? S = !1 : S = n ? f <= e : f < e;
    S ? i = h + 1 : s = h;
  }
  return GI(s, VI);
}
var qI = 4294967295, HI = qI >>> 1;
function Ca(t, e, r) {
  var n = 0, i = t == null ? n : t.length;
  if (typeof e == "number" && e === e && i <= HI) {
    for (; n < i; ) {
      var s = n + i >>> 1, a = t[s];
      a !== null && !ut(a) && (r ? a <= e : a < e) ? n = s + 1 : i = s;
    }
    return i;
  }
  return td(t, e, Je, r);
}
function WI(t, e) {
  return Ca(t, e);
}
function jI(t, e, r) {
  return td(t, e, F(r));
}
function KI(t, e) {
  var r = t == null ? 0 : t.length;
  if (r) {
    var n = Ca(t, e);
    if (n < r && Nt(t[n], e))
      return n;
  }
  return -1;
}
function JI(t, e) {
  return Ca(t, e, !0);
}
function YI(t, e, r) {
  return td(t, e, F(r), !0);
}
function zI(t, e) {
  var r = t == null ? 0 : t.length;
  if (r) {
    var n = Ca(t, e, !0) - 1;
    if (Nt(t[n], e))
      return n;
  }
  return -1;
}
function cp(t, e) {
  for (var r = -1, n = t.length, i = 0, s = []; ++r < n; ) {
    var a = t[r], o = e ? e(a) : a;
    if (!r || !Nt(o, c)) {
      var c = o;
      s[i++] = a === 0 ? 0 : a;
    }
  }
  return s;
}
function XI(t) {
  return t && t.length ? cp(t) : [];
}
function QI(t, e) {
  return t && t.length ? cp(t, F(e)) : [];
}
var ZI = 4294967295;
function eP(t, e, r) {
  return r && typeof r != "number" && je(t, e, r) && (e = r = void 0), r = r === void 0 ? ZI : r >>> 0, r ? (t = Z(t), t && (typeof e == "string" || e != null && !jc(e)) && (e = lt(e), !e && ii(t)) ? jr(Ot(t), 0, r) : t.split(e, r)) : [];
}
var tP = "Expected a function", rP = Math.max;
function nP(t, e) {
  if (typeof t != "function")
    throw new TypeError(tP);
  return e = e == null ? 0 : rP(B(e), 0), q(function(r) {
    var n = r[e], i = jr(r, 0, e);
    return n && Hr(i, n), ht(t, this, i);
  });
}
var iP = si(function(t, e, r) {
  return t + (r ? " " : "") + bc(e);
});
const sP = iP;
function aP(t, e, r) {
  return t = Z(t), r = r == null ? 0 : yn(B(r), 0, t.length), e = lt(e), t.slice(r, r + e.length) == e;
}
function oP() {
  return {};
}
function cP() {
  return "";
}
function dP() {
  return !0;
}
var uP = ha(function(t, e) {
  return t - e;
}, 0);
const lP = uP;
function hP(t) {
  return t && t.length ? Jc(t, Je) : 0;
}
function fP(t, e) {
  return t && t.length ? Jc(t, F(e)) : 0;
}
function pP(t) {
  var e = t == null ? 0 : t.length;
  return e ? St(t, 1, e) : [];
}
function mP(t, e, r) {
  return t && t.length ? (e = r || e === void 0 ? 1 : B(e), St(t, 0, e < 0 ? 0 : e)) : [];
}
function gP(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (e = r || e === void 0 ? 1 : B(e), e = n - e, St(t, e < 0 ? 0 : e, n)) : [];
}
function _P(t, e) {
  return t && t.length ? wa(t, F(e), !1, !0) : [];
}
function TP(t, e) {
  return t && t.length ? wa(t, F(e)) : [];
}
function vP(t, e) {
  return e(t), t;
}
var dp = Object.prototype, EP = dp.hasOwnProperty;
function Xu(t, e, r, n) {
  return t === void 0 || Nt(t, dp[r]) && !EP.call(n, r) ? e : t;
}
var wP = {
  "\\": "\\",
  "'": "'",
  "\n": "n",
  "\r": "r",
  "\u2028": "u2028",
  "\u2029": "u2029"
};
function yP(t) {
  return "\\" + wP[t];
}
var AP = /<%=([\s\S]+?)%>/g;
const up = AP;
var RP = /<%-([\s\S]+?)%>/g;
const SP = RP;
var bP = /<%([\s\S]+?)%>/g;
const kP = bP;
var CP = {
  /**
   * Used to detect `data` property values to be HTML-escaped.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  escape: SP,
  /**
   * Used to detect code to be evaluated.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  evaluate: kP,
  /**
   * Used to detect `data` property values to inject.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  interpolate: up,
  /**
   * Used to reference the data object in the template text.
   *
   * @memberOf _.templateSettings
   * @type {string}
   */
  variable: "",
  /**
   * Used to import variables into the compiled template.
   *
   * @memberOf _.templateSettings
   * @type {Object}
   */
  imports: {
    /**
     * A reference to the `lodash` function.
     *
     * @memberOf _.templateSettings.imports
     * @type {Function}
     */
    _: { escape: Rf }
  }
};
const $o = CP;
var IP = "Invalid `variable` option passed into `_.template`", PP = /\b__p \+= '';/g, DP = /\b(__p \+=) '' \+/g, OP = /(__e\(.*?\)|\b__t\)) \+\n'';/g, MP = /[()=,{}\[\]\/\s]/, NP = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, ns = /($^)/, xP = /['\n\r\u2028\u2029\\]/g, LP = Object.prototype, Qu = LP.hasOwnProperty;
function $P(t, e, r) {
  var n = $o.imports._.templateSettings || $o;
  r && je(t, e, r) && (e = void 0), t = Z(t), e = Cs({}, e, n, Xu);
  var i = Cs({}, e.imports, n.imports, Xu), s = De(i), a = Gc(i, s), o, c, u = 0, h = e.interpolate || ns, f = "__p += '", g = RegExp(
    (e.escape || ns).source + "|" + h.source + "|" + (h === up ? NP : ns).source + "|" + (e.evaluate || ns).source + "|$",
    "g"
  ), E = Qu.call(e, "sourceURL") ? "//# sourceURL=" + (e.sourceURL + "").replace(/\s/g, " ") + `
` : "";
  t.replace(g, function(S, k, O, W, C, te) {
    return O || (O = W), f += t.slice(u, te).replace(xP, yP), k && (o = !0, f += `' +
__e(` + k + `) +
'`), C && (c = !0, f += `';
` + C + `;
__p += '`), O && (f += `' +
((__t = (` + O + `)) == null ? '' : __t) +
'`), u = te + S.length, S;
  }), f += `';
`;
  var R = Qu.call(e, "variable") && e.variable;
  if (!R)
    f = `with (obj) {
` + f + `
}
`;
  else if (MP.test(R))
    throw new Error(IP);
  f = (c ? f.replace(PP, "") : f).replace(DP, "$1").replace(OP, "$1;"), f = "function(" + (R || "obj") + `) {
` + (R ? "" : `obj || (obj = {});
`) + "var __t, __p = ''" + (o ? ", __e = _.escape" : "") + (c ? `, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
` : `;
`) + f + `return __p
}`;
  var I = Oh(function() {
    return Function(s, E + "return " + f).apply(void 0, a);
  });
  if (I.source = f, Ac(I))
    throw I;
  return I;
}
var UP = "Expected a function";
function FP(t, e, r) {
  var n = !0, i = !0;
  if (typeof t != "function")
    throw new TypeError(UP);
  return _e(r) && (n = "leading" in r ? !!r.leading : n, i = "trailing" in r ? !!r.trailing : i), va(t, e, {
    leading: n,
    maxWait: e,
    trailing: i
  });
}
function Zi(t, e) {
  return e(t);
}
var VP = 9007199254740991, lo = 4294967295, BP = Math.min;
function GP(t, e) {
  if (t = B(t), t < 1 || t > VP)
    return [];
  var r = lo, n = BP(t, lo);
  e = Xt(e), t -= lo;
  for (var i = cc(n, e); ++r < t; )
    e(r);
  return i;
}
function qP() {
  return this;
}
function lp(t, e) {
  var r = t;
  return r instanceof H && (r = r.value()), kc(e, function(n, i) {
    return i.func.apply(i.thisArg, Hr([n], i.args));
  }, r);
}
function ho() {
  return lp(this.__wrapped__, this.__actions__);
}
function HP(t) {
  return Z(t).toLowerCase();
}
function WP(t) {
  return V(t) ? ge(t, Yt) : ut(t) ? [t] : Ze(ph(Z(t)));
}
var Zu = 9007199254740991;
function jP(t) {
  return t ? yn(B(t), -Zu, Zu) : t === 0 ? t : 0;
}
function KP(t) {
  return Z(t).toUpperCase();
}
function JP(t, e, r) {
  var n = V(t), i = n || Fr(t) || Zn(t);
  if (e = F(e), r == null) {
    var s = t && t.constructor;
    i ? r = n ? new s() : [] : _e(t) ? r = Tr(s) ? ei(da(t)) : {} : r = {};
  }
  return (i ? bt : zt)(t, function(a, o, c) {
    return e(r, a, o, c);
  }), r;
}
function hp(t, e) {
  for (var r = t.length; r-- && ti(e, t[r], 0) > -1; )
    ;
  return r;
}
function fp(t, e) {
  for (var r = -1, n = t.length; ++r < n && ti(e, t[r], 0) > -1; )
    ;
  return r;
}
function YP(t, e, r) {
  if (t = Z(t), t && (r || e === void 0))
    return Th(t);
  if (!t || !(e = lt(e)))
    return t;
  var n = Ot(t), i = Ot(e), s = fp(n, i), a = hp(n, i) + 1;
  return jr(n, s, a).join("");
}
function zP(t, e, r) {
  if (t = Z(t), t && (r || e === void 0))
    return t.slice(0, _h(t) + 1);
  if (!t || !(e = lt(e)))
    return t;
  var n = Ot(t), i = hp(n, Ot(e)) + 1;
  return jr(n, 0, i).join("");
}
var XP = /^\s+/;
function QP(t, e, r) {
  if (t = Z(t), t && (r || e === void 0))
    return t.replace(XP, "");
  if (!t || !(e = lt(e)))
    return t;
  var n = Ot(t), i = fp(n, Ot(e));
  return jr(n, i).join("");
}
var ZP = 30, e1 = "...", t1 = /\w*$/;
function r1(t, e) {
  var r = ZP, n = e1;
  if (_e(e)) {
    var i = "separator" in e ? e.separator : i;
    r = "length" in e ? B(e.length) : r, n = "omission" in e ? lt(e.omission) : n;
  }
  t = Z(t);
  var s = t.length;
  if (ii(t)) {
    var a = Ot(t);
    s = a.length;
  }
  if (r >= s)
    return t;
  var o = r - oi(n);
  if (o < 1)
    return n;
  var c = a ? jr(a, 0, o).join("") : t.slice(0, o);
  if (i === void 0)
    return c + n;
  if (a && (o += c.length - o), jc(i)) {
    if (t.slice(o).search(i)) {
      var u, h = c;
      for (i.global || (i = RegExp(i.source, Z(t1.exec(i)) + "g")), i.lastIndex = 0; u = i.exec(h); )
        var f = u.index;
      c = c.slice(0, f === void 0 ? o : f);
    }
  } else if (t.indexOf(lt(i), o) != o) {
    var g = c.lastIndexOf(i);
    g > -1 && (c = c.slice(0, g));
  }
  return c + n;
}
function n1(t) {
  return Ch(t, 1);
}
var i1 = {
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">",
  "&quot;": '"',
  "&#39;": "'"
}, s1 = Cc(i1);
const a1 = s1;
var pp = /&(?:amp|lt|gt|quot|#39);/g, o1 = RegExp(pp.source);
function c1(t) {
  return t = Z(t), t && o1.test(t) ? t.replace(pp, a1) : t;
}
var d1 = 1 / 0, u1 = xn && 1 / _a(new xn([, -0]))[1] == d1 ? function(t) {
  return new xn(t);
} : Tc;
const l1 = u1;
var h1 = 200;
function Br(t, e, r) {
  var n = -1, i = ma, s = t.length, a = !0, o = [], c = o;
  if (r)
    a = !1, i = Fc;
  else if (s >= h1) {
    var u = e ? null : l1(t);
    if (u)
      return _a(u);
    a = !1, i = Si, c = new _n();
  } else
    c = e ? [] : o;
  e:
    for (; ++n < s; ) {
      var h = t[n], f = e ? e(h) : h;
      if (h = r || h !== 0 ? h : 0, a && f === f) {
        for (var g = c.length; g--; )
          if (c[g] === f)
            continue e;
        e && c.push(f), o.push(h);
      } else
        i(c, f, r) || (c !== o && c.push(f), o.push(h));
    }
  return o;
}
var f1 = q(function(t) {
  return Br(Le(t, 1, be, !0));
});
const p1 = f1;
var m1 = q(function(t) {
  var e = ft(t);
  return be(e) && (e = void 0), Br(Le(t, 1, be, !0), F(e));
});
const g1 = m1;
var _1 = q(function(t) {
  var e = ft(t);
  return e = typeof e == "function" ? e : void 0, Br(Le(t, 1, be, !0), void 0, e);
});
const T1 = _1;
function v1(t) {
  return t && t.length ? Br(t) : [];
}
function E1(t, e) {
  return t && t.length ? Br(t, F(e)) : [];
}
function w1(t, e) {
  return e = typeof e == "function" ? e : void 0, t && t.length ? Br(t, void 0, e) : [];
}
var y1 = 0;
function A1(t) {
  var e = ++y1;
  return Z(t) + e;
}
function R1(t, e) {
  return t == null ? !0 : Yc(t, e);
}
var S1 = Math.max;
function rd(t) {
  if (!(t && t.length))
    return [];
  var e = 0;
  return t = qr(t, function(r) {
    if (be(r))
      return e = S1(r.length, e), !0;
  }), cc(e, function(r) {
    return ge(t, xc(r));
  });
}
function mp(t, e) {
  if (!(t && t.length))
    return [];
  var r = rd(t);
  return e == null ? r : ge(r, function(n) {
    return ht(e, void 0, n);
  });
}
function gp(t, e, r, n) {
  return Ki(t, e, r(wn(t, e)), n);
}
function b1(t, e, r) {
  return t == null ? t : gp(t, e, Xt(r));
}
function k1(t, e, r, n) {
  return n = typeof n == "function" ? n : void 0, t == null ? t : gp(t, e, Xt(r), n);
}
var C1 = si(function(t, e, r) {
  return t + (r ? " " : "") + e.toUpperCase();
});
const I1 = C1;
function P1(t) {
  return t == null ? [] : Gc(t, rt(t));
}
var D1 = q(function(t, e) {
  return be(t) ? zi(t, e) : [];
});
const O1 = D1;
function M1(t, e) {
  return rp(Xt(e), t);
}
var N1 = Ar(function(t) {
  var e = t.length, r = e ? t[0] : 0, n = this.__wrapped__, i = function(s) {
    return yc(s, t);
  };
  return e > 1 || this.__actions__.length || !(n instanceof H) || !wr(r) ? this.thru(i) : (n = n.slice(r, +r + (e ? 1 : 0)), n.__actions__.push({
    func: Zi,
    args: [i],
    thisArg: void 0
  }), new Rt(n, this.__chain__).thru(function(s) {
    return e && !s.length && s.push(void 0), s;
  }));
});
const x1 = N1;
function L1() {
  return sf(this);
}
function $1() {
  var t = this.__wrapped__;
  if (t instanceof H) {
    var e = t;
    return this.__actions__.length && (e = new H(this)), e = e.reverse(), e.__actions__.push({
      func: Zi,
      args: [Lo],
      thisArg: void 0
    }), new Rt(e, this.__chain__);
  }
  return this.thru(Lo);
}
function nd(t, e, r) {
  var n = t.length;
  if (n < 2)
    return n ? Br(t[0]) : [];
  for (var i = -1, s = Array(n); ++i < n; )
    for (var a = t[i], o = -1; ++o < n; )
      o != i && (s[i] = zi(s[i] || a, t[o], e, r));
  return Br(Le(s, 1), e, r);
}
var U1 = q(function(t) {
  return nd(qr(t, be));
});
const F1 = U1;
var V1 = q(function(t) {
  var e = ft(t);
  return be(e) && (e = void 0), nd(qr(t, be), F(e));
});
const B1 = V1;
var G1 = q(function(t) {
  var e = ft(t);
  return e = typeof e == "function" ? e : void 0, nd(qr(t, be), void 0, e);
});
const _p = G1;
var q1 = q(rd);
const H1 = q1;
function Tp(t, e, r) {
  for (var n = -1, i = t.length, s = e.length, a = {}; ++n < i; ) {
    var o = n < s ? e[n] : void 0;
    r(a, t[n], o);
  }
  return a;
}
function W1(t, e) {
  return Tp(t || [], e || [], Wi);
}
function j1(t, e) {
  return Tp(t || [], e || [], Ki);
}
var K1 = q(function(t) {
  var e = t.length, r = e > 1 ? t[e - 1] : void 0;
  return r = typeof r == "function" ? (t.pop(), r) : void 0, mp(t, r);
});
const J1 = K1, M = {
  chunk: IA,
  compact: FA,
  concat: VA,
  difference: tS,
  differenceBy: nS,
  differenceWith: sS,
  drop: cS,
  dropRight: dS,
  dropRightWhile: uS,
  dropWhile: lS,
  fill: OS,
  findIndex: Pf,
  findLastIndex: Of,
  first: Hu,
  flatten: Ph,
  flattenDeep: JS,
  flattenDepth: YS,
  fromPairs: fb,
  head: Hu,
  indexOf: Ob,
  initial: Mb,
  intersection: Lb,
  intersectionBy: Ub,
  intersectionWith: Vb,
  join: Bk,
  last: ft,
  lastIndexOf: Yk,
  nth: IC,
  pull: $0,
  pullAll: np,
  pullAllBy: U0,
  pullAllWith: F0,
  pullAt: q0,
  remove: uI,
  reverse: Lo,
  slice: OI,
  sortedIndex: WI,
  sortedIndexBy: jI,
  sortedIndexOf: KI,
  sortedLastIndex: JI,
  sortedLastIndexBy: YI,
  sortedLastIndexOf: zI,
  sortedUniq: XI,
  sortedUniqBy: QI,
  tail: pP,
  take: mP,
  takeRight: gP,
  takeRightWhile: _P,
  takeWhile: TP,
  union: p1,
  unionBy: g1,
  unionWith: T1,
  uniq: v1,
  uniqBy: E1,
  uniqWith: w1,
  unzip: rd,
  unzipWith: mp,
  without: O1,
  xor: F1,
  xorBy: B1,
  xorWith: _p,
  zip: H1,
  zipObject: W1,
  zipObjectDeep: j1,
  zipWith: J1
}, ne = {
  countBy: OR,
  each: Vu,
  eachRight: Bu,
  every: IS,
  filter: MS,
  find: LS,
  findLast: BS,
  flatMap: qS,
  flatMapDeep: WS,
  flatMapDepth: jS,
  forEach: Vu,
  forEachRight: Bu,
  groupBy: vb,
  includes: Pb,
  invokeMap: Zb,
  keyBy: Wk,
  map: ya,
  orderBy: BC,
  partition: C0,
  reduce: aI,
  reduceRight: cI,
  reject: dI,
  sample: wI,
  sampleSize: RI,
  shuffle: CI,
  size: DI,
  some: LI,
  sortBy: UI
}, Y1 = {
  now: ps
}, ye = {
  after: DE,
  ary: Ch,
  before: Mh,
  bind: Nh,
  bindKey: ly,
  curry: $c,
  curryRight: Uc,
  debounce: va,
  defer: zR,
  delay: QR,
  flip: XS,
  memoize: la,
  negate: Qi,
  once: UC,
  overArgs: JC,
  partial: rp,
  partialRight: b0,
  rearg: sI,
  rest: pI,
  spread: nP,
  throttle: FP,
  unary: n1,
  wrap: M1
}, x = {
  castArray: yA,
  clone: OA,
  cloneDeep: ua,
  cloneDeepWith: xA,
  cloneWith: $A,
  conformsTo: RR,
  eq: Nt,
  gt: wb,
  gte: Ab,
  isArguments: gn,
  isArray: V,
  isArrayBuffer: nk,
  isArrayLike: tt,
  isArrayLikeObject: be,
  isBoolean: sk,
  isBuffer: Fr,
  isDate: dk,
  isElement: uk,
  isEmpty: Wc,
  isEqual: Uf,
  isEqualWith: mk,
  isError: Ac,
  isFinite: _k,
  isFunction: Tr,
  isInteger: Ff,
  isLength: ca,
  isMap: dh,
  isMatch: Tk,
  isMatchWith: vk,
  isNaN: wk,
  isNative: Sk,
  isNil: bk,
  isNull: kk,
  isNumber: Vf,
  isObject: _e,
  isObjectLike: we,
  isPlainObject: Ji,
  isRegExp: jc,
  isSafeInteger: Dk,
  isSet: uh,
  isString: Sa,
  isSymbol: ut,
  isTypedArray: Zn,
  isUndefined: Ok,
  isWeakMap: Nk,
  isWeakSet: Lk,
  lt: tC,
  lte: nC,
  toArray: Hf,
  toFinite: mr,
  toInteger: B,
  toLength: kf,
  toNumber: wt,
  toPlainObject: gf,
  toSafeInteger: jP,
  toString: Z
}, Ye = {
  add: yE,
  ceil: bA,
  divide: oS,
  floor: ZS,
  max: uC,
  maxBy: lC,
  mean: fC,
  meanBy: pC,
  min: EC,
  minBy: wC,
  multiply: AC,
  round: vI,
  subtract: lP,
  sum: hP,
  sumBy: fP
}, id = {
  clamp: PA,
  inRange: kb,
  random: Y0
}, $ = {
  assign: Bw,
  assignIn: Pu,
  assignInWith: Cs,
  assignWith: Ww,
  at: Jw,
  create: MR,
  defaults: qR,
  defaultsDeep: KR,
  entries: Gu,
  entriesIn: qu,
  extend: Pu,
  extendWith: Cs,
  findKey: $S,
  findLastKey: GS,
  forIn: db,
  forInRight: ub,
  forOwn: lb,
  forOwnRight: hb,
  functions: pb,
  functionsIn: mb,
  get: gc,
  has: pE,
  hasIn: Nc,
  invert: Wb,
  invertBy: Yb,
  invoke: Xb,
  keys: De,
  keysIn: rt,
  mapKeys: iC,
  mapValues: sC,
  merge: Gf,
  mergeWith: Tf,
  omit: LC,
  omitBy: $C,
  pick: D0,
  pickBy: Kf,
  result: mI,
  set: mE,
  setWith: SI,
  toPairs: Gu,
  toPairsIn: qu,
  transform: JP,
  unset: R1,
  update: b1,
  updateWith: k1,
  values: ai,
  valuesIn: P1
}, Qt = {
  at: x1,
  chain: sf,
  commit: UA,
  lodash: l,
  next: CC,
  plant: O0,
  reverse: $1,
  tap: vP,
  thru: Zi,
  toIterator: qP,
  toJSON: ho,
  value: ho,
  valueOf: ho,
  wrapperChain: L1
}, Q = {
  camelCase: wA,
  capitalize: Gh,
  deburr: qh,
  endsWith: mS,
  escape: Rf,
  escapeRegExp: kS,
  kebabCase: qk,
  lowerCase: Xk,
  lowerFirst: Zk,
  pad: T0,
  padEnd: v0,
  padStart: E0,
  parseInt: A0,
  repeat: lI,
  replace: hI,
  snakeCase: NI,
  split: eP,
  startCase: sP,
  startsWith: aP,
  template: $P,
  templateSettings: $o,
  toLower: HP,
  toUpper: KP,
  trim: YP,
  trimEnd: zP,
  trimStart: QP,
  truncate: r1,
  unescape: c1,
  upperCase: I1,
  upperFirst: bc,
  words: nf
}, ee = {
  attempt: Oh,
  bindAll: oy,
  cond: ER,
  conforms: AR,
  constant: Ec,
  defaultTo: VR,
  flow: ab,
  flowRight: cb,
  identity: Je,
  iteratee: Uk,
  matches: oC,
  matchesProperty: dC,
  method: _C,
  methodOf: vC,
  mixin: qf,
  noop: Tc,
  nthArg: PC,
  over: qC,
  overEvery: zC,
  overSome: QC,
  property: lf,
  propertyOf: M0,
  range: eI,
  rangeRight: rI,
  stubArray: lc,
  stubFalse: dc,
  stubObject: oP,
  stubString: cP,
  stubTrue: dP,
  times: GP,
  toPath: WP,
  uniqueId: A1
};
function z1() {
  var t = new H(this.__wrapped__);
  return t.__actions__ = Ze(this.__actions__), t.__dir__ = this.__dir__, t.__filtered__ = this.__filtered__, t.__iteratees__ = Ze(this.__iteratees__), t.__takeCount__ = this.__takeCount__, t.__views__ = Ze(this.__views__), t;
}
function X1() {
  if (this.__filtered__) {
    var t = new H(this);
    t.__dir__ = -1, t.__filtered__ = !0;
  } else
    t = this.clone(), t.__dir__ *= -1;
  return t;
}
var Q1 = Math.max, Z1 = Math.min;
function eD(t, e, r) {
  for (var n = -1, i = r.length; ++n < i; ) {
    var s = r[n], a = s.size;
    switch (s.type) {
      case "drop":
        t += a;
        break;
      case "dropRight":
        e -= a;
        break;
      case "take":
        e = Z1(e, t + a);
        break;
      case "takeRight":
        t = Q1(t, e - a);
        break;
    }
  }
  return { start: t, end: e };
}
var tD = 1, rD = 2, nD = Math.min;
function iD() {
  var t = this.__wrapped__.value(), e = this.__dir__, r = V(t), n = e < 0, i = r ? t.length : 0, s = eD(0, i, this.__views__), a = s.start, o = s.end, c = o - a, u = n ? o : a - 1, h = this.__iteratees__, f = h.length, g = 0, E = nD(c, this.__takeCount__);
  if (!r || !n && i == c && E == c)
    return lp(t, this.__actions__);
  var R = [];
  e:
    for (; c-- && g < E; ) {
      u += e;
      for (var I = -1, S = t[u]; ++I < f; ) {
        var k = h[I], O = k.iteratee, W = k.type, C = O(S);
        if (W == rD)
          S = C;
        else if (!C) {
          if (W == tD)
            continue e;
          break e;
        }
      }
      R[g++] = S;
    }
  return R;
}
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
var sD = "4.17.21", aD = 2, oD = 1, cD = 3, vp = 4294967295, dD = Array.prototype, uD = Object.prototype, Ep = uD.hasOwnProperty, el = Ge ? Ge.iterator : void 0, lD = Math.max, tl = Math.min, sd = function(t) {
  return function(e, r, n) {
    if (n == null) {
      var i = _e(r), s = i && De(r), a = s && s.length && Aa(r, s);
      (a ? a.length : i) || (n = r, r = e, e = this);
    }
    return t(e, r, n);
  };
}(qf);
l.after = ye.after;
l.ary = ye.ary;
l.assign = $.assign;
l.assignIn = $.assignIn;
l.assignInWith = $.assignInWith;
l.assignWith = $.assignWith;
l.at = $.at;
l.before = ye.before;
l.bind = ye.bind;
l.bindAll = ee.bindAll;
l.bindKey = ye.bindKey;
l.castArray = x.castArray;
l.chain = Qt.chain;
l.chunk = M.chunk;
l.compact = M.compact;
l.concat = M.concat;
l.cond = ee.cond;
l.conforms = ee.conforms;
l.constant = ee.constant;
l.countBy = ne.countBy;
l.create = $.create;
l.curry = ye.curry;
l.curryRight = ye.curryRight;
l.debounce = ye.debounce;
l.defaults = $.defaults;
l.defaultsDeep = $.defaultsDeep;
l.defer = ye.defer;
l.delay = ye.delay;
l.difference = M.difference;
l.differenceBy = M.differenceBy;
l.differenceWith = M.differenceWith;
l.drop = M.drop;
l.dropRight = M.dropRight;
l.dropRightWhile = M.dropRightWhile;
l.dropWhile = M.dropWhile;
l.fill = M.fill;
l.filter = ne.filter;
l.flatMap = ne.flatMap;
l.flatMapDeep = ne.flatMapDeep;
l.flatMapDepth = ne.flatMapDepth;
l.flatten = M.flatten;
l.flattenDeep = M.flattenDeep;
l.flattenDepth = M.flattenDepth;
l.flip = ye.flip;
l.flow = ee.flow;
l.flowRight = ee.flowRight;
l.fromPairs = M.fromPairs;
l.functions = $.functions;
l.functionsIn = $.functionsIn;
l.groupBy = ne.groupBy;
l.initial = M.initial;
l.intersection = M.intersection;
l.intersectionBy = M.intersectionBy;
l.intersectionWith = M.intersectionWith;
l.invert = $.invert;
l.invertBy = $.invertBy;
l.invokeMap = ne.invokeMap;
l.iteratee = ee.iteratee;
l.keyBy = ne.keyBy;
l.keys = De;
l.keysIn = $.keysIn;
l.map = ne.map;
l.mapKeys = $.mapKeys;
l.mapValues = $.mapValues;
l.matches = ee.matches;
l.matchesProperty = ee.matchesProperty;
l.memoize = ye.memoize;
l.merge = $.merge;
l.mergeWith = $.mergeWith;
l.method = ee.method;
l.methodOf = ee.methodOf;
l.mixin = sd;
l.negate = Qi;
l.nthArg = ee.nthArg;
l.omit = $.omit;
l.omitBy = $.omitBy;
l.once = ye.once;
l.orderBy = ne.orderBy;
l.over = ee.over;
l.overArgs = ye.overArgs;
l.overEvery = ee.overEvery;
l.overSome = ee.overSome;
l.partial = ye.partial;
l.partialRight = ye.partialRight;
l.partition = ne.partition;
l.pick = $.pick;
l.pickBy = $.pickBy;
l.property = ee.property;
l.propertyOf = ee.propertyOf;
l.pull = M.pull;
l.pullAll = M.pullAll;
l.pullAllBy = M.pullAllBy;
l.pullAllWith = M.pullAllWith;
l.pullAt = M.pullAt;
l.range = ee.range;
l.rangeRight = ee.rangeRight;
l.rearg = ye.rearg;
l.reject = ne.reject;
l.remove = M.remove;
l.rest = ye.rest;
l.reverse = M.reverse;
l.sampleSize = ne.sampleSize;
l.set = $.set;
l.setWith = $.setWith;
l.shuffle = ne.shuffle;
l.slice = M.slice;
l.sortBy = ne.sortBy;
l.sortedUniq = M.sortedUniq;
l.sortedUniqBy = M.sortedUniqBy;
l.split = Q.split;
l.spread = ye.spread;
l.tail = M.tail;
l.take = M.take;
l.takeRight = M.takeRight;
l.takeRightWhile = M.takeRightWhile;
l.takeWhile = M.takeWhile;
l.tap = Qt.tap;
l.throttle = ye.throttle;
l.thru = Zi;
l.toArray = x.toArray;
l.toPairs = $.toPairs;
l.toPairsIn = $.toPairsIn;
l.toPath = ee.toPath;
l.toPlainObject = x.toPlainObject;
l.transform = $.transform;
l.unary = ye.unary;
l.union = M.union;
l.unionBy = M.unionBy;
l.unionWith = M.unionWith;
l.uniq = M.uniq;
l.uniqBy = M.uniqBy;
l.uniqWith = M.uniqWith;
l.unset = $.unset;
l.unzip = M.unzip;
l.unzipWith = M.unzipWith;
l.update = $.update;
l.updateWith = $.updateWith;
l.values = $.values;
l.valuesIn = $.valuesIn;
l.without = M.without;
l.words = Q.words;
l.wrap = ye.wrap;
l.xor = M.xor;
l.xorBy = M.xorBy;
l.xorWith = M.xorWith;
l.zip = M.zip;
l.zipObject = M.zipObject;
l.zipObjectDeep = M.zipObjectDeep;
l.zipWith = M.zipWith;
l.entries = $.toPairs;
l.entriesIn = $.toPairsIn;
l.extend = $.assignIn;
l.extendWith = $.assignInWith;
sd(l, l);
l.add = Ye.add;
l.attempt = ee.attempt;
l.camelCase = Q.camelCase;
l.capitalize = Q.capitalize;
l.ceil = Ye.ceil;
l.clamp = id.clamp;
l.clone = x.clone;
l.cloneDeep = x.cloneDeep;
l.cloneDeepWith = x.cloneDeepWith;
l.cloneWith = x.cloneWith;
l.conformsTo = x.conformsTo;
l.deburr = Q.deburr;
l.defaultTo = ee.defaultTo;
l.divide = Ye.divide;
l.endsWith = Q.endsWith;
l.eq = x.eq;
l.escape = Q.escape;
l.escapeRegExp = Q.escapeRegExp;
l.every = ne.every;
l.find = ne.find;
l.findIndex = M.findIndex;
l.findKey = $.findKey;
l.findLast = ne.findLast;
l.findLastIndex = M.findLastIndex;
l.findLastKey = $.findLastKey;
l.floor = Ye.floor;
l.forEach = ne.forEach;
l.forEachRight = ne.forEachRight;
l.forIn = $.forIn;
l.forInRight = $.forInRight;
l.forOwn = $.forOwn;
l.forOwnRight = $.forOwnRight;
l.get = $.get;
l.gt = x.gt;
l.gte = x.gte;
l.has = $.has;
l.hasIn = $.hasIn;
l.head = M.head;
l.identity = Je;
l.includes = ne.includes;
l.indexOf = M.indexOf;
l.inRange = id.inRange;
l.invoke = $.invoke;
l.isArguments = x.isArguments;
l.isArray = V;
l.isArrayBuffer = x.isArrayBuffer;
l.isArrayLike = x.isArrayLike;
l.isArrayLikeObject = x.isArrayLikeObject;
l.isBoolean = x.isBoolean;
l.isBuffer = x.isBuffer;
l.isDate = x.isDate;
l.isElement = x.isElement;
l.isEmpty = x.isEmpty;
l.isEqual = x.isEqual;
l.isEqualWith = x.isEqualWith;
l.isError = x.isError;
l.isFinite = x.isFinite;
l.isFunction = x.isFunction;
l.isInteger = x.isInteger;
l.isLength = x.isLength;
l.isMap = x.isMap;
l.isMatch = x.isMatch;
l.isMatchWith = x.isMatchWith;
l.isNaN = x.isNaN;
l.isNative = x.isNative;
l.isNil = x.isNil;
l.isNull = x.isNull;
l.isNumber = x.isNumber;
l.isObject = _e;
l.isObjectLike = x.isObjectLike;
l.isPlainObject = x.isPlainObject;
l.isRegExp = x.isRegExp;
l.isSafeInteger = x.isSafeInteger;
l.isSet = x.isSet;
l.isString = x.isString;
l.isSymbol = x.isSymbol;
l.isTypedArray = x.isTypedArray;
l.isUndefined = x.isUndefined;
l.isWeakMap = x.isWeakMap;
l.isWeakSet = x.isWeakSet;
l.join = M.join;
l.kebabCase = Q.kebabCase;
l.last = ft;
l.lastIndexOf = M.lastIndexOf;
l.lowerCase = Q.lowerCase;
l.lowerFirst = Q.lowerFirst;
l.lt = x.lt;
l.lte = x.lte;
l.max = Ye.max;
l.maxBy = Ye.maxBy;
l.mean = Ye.mean;
l.meanBy = Ye.meanBy;
l.min = Ye.min;
l.minBy = Ye.minBy;
l.stubArray = ee.stubArray;
l.stubFalse = ee.stubFalse;
l.stubObject = ee.stubObject;
l.stubString = ee.stubString;
l.stubTrue = ee.stubTrue;
l.multiply = Ye.multiply;
l.nth = M.nth;
l.noop = ee.noop;
l.now = Y1.now;
l.pad = Q.pad;
l.padEnd = Q.padEnd;
l.padStart = Q.padStart;
l.parseInt = Q.parseInt;
l.random = id.random;
l.reduce = ne.reduce;
l.reduceRight = ne.reduceRight;
l.repeat = Q.repeat;
l.replace = Q.replace;
l.result = $.result;
l.round = Ye.round;
l.sample = ne.sample;
l.size = ne.size;
l.snakeCase = Q.snakeCase;
l.some = ne.some;
l.sortedIndex = M.sortedIndex;
l.sortedIndexBy = M.sortedIndexBy;
l.sortedIndexOf = M.sortedIndexOf;
l.sortedLastIndex = M.sortedLastIndex;
l.sortedLastIndexBy = M.sortedLastIndexBy;
l.sortedLastIndexOf = M.sortedLastIndexOf;
l.startCase = Q.startCase;
l.startsWith = Q.startsWith;
l.subtract = Ye.subtract;
l.sum = Ye.sum;
l.sumBy = Ye.sumBy;
l.template = Q.template;
l.times = ee.times;
l.toFinite = x.toFinite;
l.toInteger = B;
l.toLength = x.toLength;
l.toLower = Q.toLower;
l.toNumber = x.toNumber;
l.toSafeInteger = x.toSafeInteger;
l.toString = x.toString;
l.toUpper = Q.toUpper;
l.trim = Q.trim;
l.trimEnd = Q.trimEnd;
l.trimStart = Q.trimStart;
l.truncate = Q.truncate;
l.unescape = Q.unescape;
l.uniqueId = ee.uniqueId;
l.upperCase = Q.upperCase;
l.upperFirst = Q.upperFirst;
l.each = ne.forEach;
l.eachRight = ne.forEachRight;
l.first = M.head;
sd(l, function() {
  var t = {};
  return zt(l, function(e, r) {
    Ep.call(l.prototype, r) || (t[r] = e);
  }), t;
}(), { chain: !1 });
l.VERSION = sD;
(l.templateSettings = Q.templateSettings).imports._ = l;
bt(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(t) {
  l[t].placeholder = l;
});
bt(["drop", "take"], function(t, e) {
  H.prototype[t] = function(r) {
    r = r === void 0 ? 1 : lD(B(r), 0);
    var n = this.__filtered__ && !e ? new H(this) : this.clone();
    return n.__filtered__ ? n.__takeCount__ = tl(r, n.__takeCount__) : n.__views__.push({
      size: tl(r, vp),
      type: t + (n.__dir__ < 0 ? "Right" : "")
    }), n;
  }, H.prototype[t + "Right"] = function(r) {
    return this.reverse()[t](r).reverse();
  };
});
bt(["filter", "map", "takeWhile"], function(t, e) {
  var r = e + 1, n = r == oD || r == cD;
  H.prototype[t] = function(i) {
    var s = this.clone();
    return s.__iteratees__.push({
      iteratee: F(i),
      type: r
    }), s.__filtered__ = s.__filtered__ || n, s;
  };
});
bt(["head", "last"], function(t, e) {
  var r = "take" + (e ? "Right" : "");
  H.prototype[t] = function() {
    return this[r](1).value()[0];
  };
});
bt(["initial", "tail"], function(t, e) {
  var r = "drop" + (e ? "" : "Right");
  H.prototype[t] = function() {
    return this.__filtered__ ? new H(this) : this[r](1);
  };
});
H.prototype.compact = function() {
  return this.filter(Je);
};
H.prototype.find = function(t) {
  return this.filter(t).head();
};
H.prototype.findLast = function(t) {
  return this.reverse().find(t);
};
H.prototype.invokeMap = q(function(t, e) {
  return typeof t == "function" ? new H(this) : this.map(function(r) {
    return Xi(r, t, e);
  });
});
H.prototype.reject = function(t) {
  return this.filter(Qi(F(t)));
};
H.prototype.slice = function(t, e) {
  t = B(t);
  var r = this;
  return r.__filtered__ && (t > 0 || e < 0) ? new H(r) : (t < 0 ? r = r.takeRight(-t) : t && (r = r.drop(t)), e !== void 0 && (e = B(e), r = e < 0 ? r.dropRight(-e) : r.take(e - t)), r);
};
H.prototype.takeRightWhile = function(t) {
  return this.reverse().takeWhile(t).reverse();
};
H.prototype.toArray = function() {
  return this.take(vp);
};
zt(H.prototype, function(t, e) {
  var r = /^(?:filter|find|map|reject)|While$/.test(e), n = /^(?:head|last)$/.test(e), i = l[n ? "take" + (e == "last" ? "Right" : "") : e], s = n || /^find/.test(e);
  i && (l.prototype[e] = function() {
    var a = this.__wrapped__, o = n ? [1] : arguments, c = a instanceof H, u = o[0], h = c || V(a), f = function(k) {
      var O = i.apply(l, Hr([k], o));
      return n && g ? O[0] : O;
    };
    h && r && typeof u == "function" && u.length != 1 && (c = h = !1);
    var g = this.__chain__, E = !!this.__actions__.length, R = s && !g, I = c && !E;
    if (!s && h) {
      a = I ? a : new H(this);
      var S = t.apply(a, o);
      return S.__actions__.push({ func: Zi, args: [f], thisArg: void 0 }), new Rt(S, g);
    }
    return R && I ? t.apply(this, o) : (S = this.thru(f), R ? n ? S.value()[0] : S.value() : S);
  });
});
bt(["pop", "push", "shift", "sort", "splice", "unshift"], function(t) {
  var e = dD[t], r = /^(?:push|sort|unshift)$/.test(t) ? "tap" : "thru", n = /^(?:pop|shift)$/.test(t);
  l.prototype[t] = function() {
    var i = arguments;
    if (n && !this.__chain__) {
      var s = this.value();
      return e.apply(V(s) ? s : [], i);
    }
    return this[r](function(a) {
      return e.apply(V(a) ? a : [], i);
    });
  };
});
zt(H.prototype, function(t, e) {
  var r = l[e];
  if (r) {
    var n = r.name + "";
    Ep.call(Ln, n) || (Ln[n] = []), Ln[n].push({ name: e, func: r });
  }
});
Ln[ga(void 0, aD).name] = [{
  name: "wrapper",
  func: void 0
}];
H.prototype.clone = z1;
H.prototype.reverse = X1;
H.prototype.value = iD;
l.prototype.at = Qt.at;
l.prototype.chain = Qt.wrapperChain;
l.prototype.commit = Qt.commit;
l.prototype.next = Qt.next;
l.prototype.plant = Qt.plant;
l.prototype.reverse = Qt.reverse;
l.prototype.toJSON = l.prototype.valueOf = l.prototype.value = Qt.value;
l.prototype.first = l.prototype.head;
el && (l.prototype[el] = Qt.toIterator);
const G = {
  roomName: void 0,
  authToken: void 0,
  peerId: void 0,
  apiBase: void 0,
  baseURI: void 0,
  defaults: {
    audio: !0,
    video: !0
  },
  modules: void 0,
  organizationId: void 0,
  overrides: {},
  viewType: void 0,
  env: void 0,
  cachedUserDetails: void 0
};
function hD(t) {
  var e, r, n, i, s, a, o, c;
  (e = G.roomName) != null || (G.roomName = t == null ? void 0 : t.roomName), (r = G.authToken) != null || (G.authToken = t == null ? void 0 : t.authToken), (n = G.peerId) != null || (G.peerId = t == null ? void 0 : t.peerId), (i = G.apiBase) != null || (G.apiBase = t == null ? void 0 : t.apiBase), (s = G.baseURI) != null || (G.baseURI = t == null ? void 0 : t.baseURI), (a = G.modules) != null || (G.modules = t == null ? void 0 : t.modules), (o = G.organizationId) != null || (G.organizationId = t == null ? void 0 : t.organizationId), G.defaults = Y(Y({}, G.defaults), (c = t == null ? void 0 : t.defaults) != null ? c : {});
}
const wp = "VERSION_PLACEHOLDER";
function fD({ servicePrefix: t, apiBase: e, baseURI: r }) {
  return r ? `${t}.${r}` : e != null && e.includes("api.preprod.dyte") ? `${t}.preprod.dyte.io` : e != null && e.includes("api.devel.dyte") ? `${t}.devel.dyte.io` : `${t}.dyte.io`;
}
const oe = {
  INTERNAL_CALL_STATS: "internal_call_stats",
  SIMULCAST: "simulcast",
  CHAT_SOCKET_SERVER: "chat_socket_server",
  POLL_SOCKET_SERVER: "poll_socket_server",
  PLUGIN_SOCKET_SERVER: "plugin_socket_server",
  NR_OTEL_WEB: "nr_otel_web",
  CONNECTED_MEETINGS: "connected_meetings",
  ICE_RESTART_ON_FAILED_STATE: "ice_restart_on_failed_state",
  ICE_RESTART_ON_DISCONNECTED_STATE: "ice_restart_on_disconnected_state",
  ENABLE_ICE_STATE_LOGGING: "enable_ice_state_logging",
  REMOVE_OPERATIONAL_MIC: "web_core_remove_operational_mic",
  SUPPRESS_PEER_MUTE_UNMUTE_EMITS: "web_core_suppress_peer_mute_unmute_emits",
  SKIP_OTEL_TRACES: "skip_otel_traces",
  NEW_LOCAL_MEDIA_HANDLER: "new_local_media_handler",
  CALLSTATS_INGESTION_LAYER: "callstats_ingestion_layer",
  USE_USERIDS_IN_CHAT: "use_userids_in_chat",
  CUSTOM_PING_PONG: "custom_ping_pong",
  // NOTE(itzmanish) below flags is added by me
  ENABLE_HIVE_SIMULCAST: "enable_hive_simulcast",
  ENABLE_HIVE_TRANSPORT_RECONNECTION_ON_ICE_FAILED: "enable_hive_transport_reconnection_on_ice_failed",
  ENABLE_HIVE_EXPERIMENTAL_FAIL_RECOVERY: "enable_hive_fail_recovery",
  ENABLE_HIVE_INFINITE_RETRIES: "enable_hive_infinite_retries",
  // ==========================================
  BYPASS_LOG_EXCLUSION_LIST: "bypass_log_exclusion_list",
  LOG_LEVEL: "log_level",
  V1_PLUGINS: "v1_plugins",
  SCREENSHARE_DTX: "screenshare_dtx",
  SCREENSHARE_PRIORITY: "screenshare_priority",
  SCREENSHARE_MIN_BITRATE: "screenshare_minbitrate",
  SCREENSHARE_MAX_DIMENSIONS: "screenshare_maxdimensions",
  SCREENSHARE_SIMULCAST: "screenshare_simulcast",
  DISABLE_WEBCAM_LAYERS_ON_SCREENSHARE: "disable_webcam_layers_on_screenshare",
  SCREENSHARE_FORCE_GOOG_CONFERENCE: "screenshare_force_goog_conference",
  LIVESTREAM: "feat_livestream",
  FETCH_RETRY: "fetch_retry",
  DEVICE_REMOVE_EXP: "device_remove_exp",
  DISABLE_WEBCAM_SIMULCAST: "webcore_disable_webcam_simulcast",
  OVERRIDE_WEBCAM_SIMULCAST: "override_webcam_simulcast",
  SOCKET_POLLING: "socket_polling",
  NS_NETWORK_SCORE: "ns_network_score",
  FEAT_PAGINATED_CHAT: "feat_paginated_chat",
  VAL_MIN_FRAMERATE: "val_min_framerate",
  EXTENSION_HACK: "extension_hack",
  VAL_MAX_FRAMERATE_EXT: "val_max_framerate_ext",
  VAL_MIN_FRAMERATE_EXT: "val_min_framerate_ext",
  SCREEENSHARE_ERR_HACK: "screenshare_err_hack",
  TROUBLESHOOTING: "feat_troubleshooting",
  VIDEO_CONSTRAINTS: "video_constraints",
  SCREENSHARE_CONSTRAINTS: "screenshare_constraints",
  FEAT_CHAT_SDK: "feat_chat_sdk",
  FEAT_CHAT_SDK_SEARCH: "chat_search",
  OBS_QUALITY: "obs_quality",
  ALLOW_SAFARI_MEDIA_MIDDLEWARES: "allow_safari_media_middlewares",
  DYNAMIC_VIDEO_QUALITY: "dynamic_video_quality",
  EXP_RESHARE: "exp_reshare",
  LEAVE_STAGE_ON_END: "leave_stage_on_end",
  SKIP_SETTING_IN_USE_DEVICE: "skip_setting_in_use_device",
  PRECALL_BANDWIDTH_TEST: "precall_bandwidth_test"
};
function Uo(t) {
  const e = {};
  return typeof (t == null ? void 0 : t.code) == "number" && (e.code = t.code), typeof (t == null ? void 0 : t.code) == "string" && (e.code = t.code.substring(0, 100)), typeof (t == null ? void 0 : t.name) == "string" && (e.name = t.name.substring(0, 500)), typeof (t == null ? void 0 : t.message) == "string" && (e.message = t.message.substring(0, 500)), typeof (t == null ? void 0 : t.reason) == "string" && (e.reason = t.reason.substring(0, 500)), typeof (t == null ? void 0 : t.stack) == "string" && (e.stack = t.stack.substring(0, 500)), e;
}
function yp() {
  var r, n, i, s;
  const t = typeof navigator != "undefined" && !navigator.isReactNative && ((r = window.location.host) == null ? void 0 : r.includes("devel")) && ((n = window.location.host) == null ? void 0 : n.includes("dyte.io")), e = !!((s = (i = G.modules) == null ? void 0 : i.devTools) != null && s.logs);
  return t || e;
}
function pD(t) {
  if (ae.hasFeature(oe.LOG_LEVEL)) {
    let e = ae.getValue(oe.LOG_LEVEL) || "all";
    if (e = e.toLowerCase().trim(), e === "off")
      return !1;
    if (e !== "all") {
      const r = ["debug", "log", "info", "warn", "error"], n = r.indexOf(
        t
      ), i = r.indexOf(e);
      if (n < i)
        return !1;
    }
  }
  return !0;
}
function Ap(t, e, r = {}) {
  return Object.getOwnPropertyNames(t).forEach((n) => {
    var s;
    if ([null, void 0, NaN].includes(t[n]) || e && (((s = e.match(/\./g)) == null ? void 0 : s.length) || 0) >= 10)
      return;
    const i = e ? `${e}.${n}` : n;
    typeof t[n] == "object" ? Ap(t[n], i, r) : ["number", "string", "boolean"].includes(typeof t[n]) && (r[i] = t[n]);
  }), r;
}
function mD(t, e = {}, r = "") {
  const n = {};
  try {
    const i = JSON.stringify(e), s = JSON.parse(i), a = Ap(
      s,
      r
    ), o = JSON.stringify(a);
    if (o.length > 5e3) {
      const c = `Log named: "${t}" is trying to log an flattened object of size ${o.length} chars that is beyond permitted limit of 5000 chars. Please optimize.`;
      throw yp() && console.error(c, {
        log: e,
        flattened: o
      }), new Error(c);
    }
    return JSON.parse(o);
  } catch (i) {
    const s = Uo(i);
    n[`${r}.error.message`] = s.message || "", n[`${r}.error.stack`] = s.stack || "", n[`${r}.error.reason`] = s.reason || "", n[`${r}.error.source`] = "safelyFlattenObjForOpenTelemetry";
  }
  return n;
}
const bi = "chrome", Rp = "opera", Sp = "firefox", bp = "iexplorer", kp = "safari", Cp = "nwjs", Ip = "electron", Pp = "react-native", ad = "unknown", Ps = {
  Chrome: bi,
  Chromium: bi,
  Opera: Rp,
  Firefox: Sp,
  "Internet Explorer": bp,
  Safari: kp
};
function gD() {
  const { userAgent: t } = navigator, e = {
    name: ad,
    version: void 0
  };
  if (t.match(/Chrome/) && !t.match(/Edge/))
    if (t.match(/Edg(A?)/)) {
      const r = t.match(/Chrome\/([\d.]+)/)[1];
      Number.parseInt(r, 10) > 72 && (e.name = bi, e.version = r);
    } else
      e.name = bi, e.version = t.match(/Chrome\/([\d.]+)/)[1];
  return e;
}
function _D() {
  const { userAgent: t } = navigator;
  if (t.match(/Electron/)) {
    const e = t.match(/Electron\/([\d.]+)/)[1];
    return {
      name: Ip,
      version: e
    };
  }
  return null;
}
function TD() {
  const { userAgent: t } = navigator;
  if (t.match(/JitsiMeetNW/)) {
    const e = t.match(/JitsiMeetNW\/([\d.]+)/)[1];
    return {
      name: Cp,
      version: e
    };
  }
}
function vD() {
  const t = navigator.userAgent.match(
    /\b(react[ \t_-]*native)(?:\/(\S+))?/i
  );
  let e;
  if (t || navigator.product === "ReactNative")
    return t && t.length > 2 && (t[1], e = t[2]), e || (e = "unknown"), {
      name: Pp,
      version: e
    };
}
function ED(t) {
  let e;
  const r = [vD, _D, TD];
  for (let i = 0; i < r.length; i += 1)
    if (e = r[i](), e)
      return e;
  const n = t.getBrowserName();
  return n in Ps ? {
    name: Ps[n],
    version: t.getBrowserVersion()
  } : (e = gD(), e || {
    name: ad,
    version: void 0
  });
}
class wD {
  constructor() {
    _(this, "_bowser");
    _(this, "_name");
    _(this, "_version");
    _(this, "getDeviceInfo", () => ({
      isMobile: this.isMobile(),
      browserName: this._bowser.getBrowserName(),
      osName: this._bowser.getOSName(),
      browserVersion: this._bowser.getBrowserVersion(),
      osVersionName: this._bowser.getOSVersion(),
      engineName: this._bowser.getEngineName()
    }));
  }
  /**
   * Creates new BrowserDetection instance.
   *
   * @param {Object} [browserInfo] - Information about the browser.
   * @param {string} browserInfo.name - The name of the browser.
   * @param {string} browserInfo.version - The version of the browser.
   */
  init(e) {
    let r, n;
    if (this._bowser = mm.getParser(navigator.userAgent), typeof e == "undefined") {
      const i = ED(this._bowser);
      r = i.name, n = i.version;
    } else
      e.name in Ps ? (r = Ps[e.name], n = e.version) : (r = ad, n = void 0);
    this._name = r, this._version = n;
  }
  /**
   * Gets current browser name.
   * @returns {string}
   */
  getName() {
    return this._name;
  }
  /**
   * Checks if current browser is Chrome.
   * @returns {boolean}
   */
  isChrome() {
    return this._name === bi;
  }
  /**
   * Checks if current browser is Opera.
   * @returns {boolean}
   */
  isOpera() {
    return this._name === Rp;
  }
  /**
   * Checks if current browser is Firefox.
   * @returns {boolean}
   */
  isFirefox() {
    return this._name === Sp;
  }
  /**
   * Checks if current browser is Internet Explorer.
   * @returns {boolean}
   */
  isIExplorer() {
    return this._name === bp;
  }
  /**
   * Checks if current browser is Safari.
   * @returns {boolean}
   */
  isSafari() {
    return this._name === kp;
  }
  /**
   * Checks if current environment is NWJS.
   * @returns {boolean}
   */
  isNWJS() {
    return this._name === Cp;
  }
  /**
   * Checks if current environment is Electron.
   * @returns {boolean}
   */
  isElectron() {
    return this._name === Ip;
  }
  /**
   * Checks if current environment is React Native.
   * @returns {boolean}
   */
  isReactNative() {
    return this._name === Pp || navigator.isReactNative === !0;
  }
  /**
   * Returns the version of the current browser.
   * @returns {string}
   */
  getVersion() {
    return this._version;
  }
  isMobile() {
    return this._bowser.getPlatformType() === "mobile";
  }
  /**
   * Check if the parsed browser matches the passed condition.
   *
   * @param {Object} checkTree - It's one or two layered object, which can include a
   * platform or an OS on the first layer and should have browsers specs on the
   * bottom layer.
   * Eg. { chrome: '>71.1.0' }
   *		 { windows: { chrome: '<70.2' } }
   * @returns {boolean | undefined} - Returns true if the browser satisfies the set
   * conditions, false if not and undefined when the browser is not defined in the
   * checktree object or when the current browser's version is unknown.
   * @private
   */
  _checkCondition(e) {
    if (this._version)
      return this._bowser.satisfies(e);
  }
  /**
   * Compares the passed version with the current browser version.
   *
   * @param {*} version - The version to compare with. Anything different
   * than string will be converted to string.
   * @returns {boolean|undefined} - Returns true if the current version is
   * greater than the passed version and false otherwise. Returns undefined if
   * the current browser version is unknown.
   */
  isVersionGreaterThan(e) {
    return this._checkCondition({ [this._name]: `>${e}` });
  }
  /**
   * Compares the passed version with the current browser version.
   *
   * @param {*} version - The version to compare with. Anything different
   * than string will be converted to string.
   * @returns {boolean|undefined} - Returns true if the current version is
   * lower than the passed version and false otherwise. Returns undefined if
   * the current browser version is unknown.
   */
  isVersionLessThan(e) {
    return this._checkCondition({ [this._name]: `<${e}` });
  }
  /**
   * Compares the passed version with the current browser version.
   *
   * @param {*} version - The version to compare with. Anything different
   * than string will be converted to string.
   * @returns {boolean|undefined} - Returns true if the current version is
   * equal to the passed version and false otherwise. Returns undefined if
   * the current browser version is unknown.
   * A loose-equality operator is used here so that it matches the sub-versions as well.
   */
  isVersionEqualTo(e) {
    return this._checkCondition({ [this._name]: `~${e}` });
  }
}
const yD = 72;
class AD extends wD {
  /**
   * Tells whether or not the <tt>MediaStream/tt> is removed from
   * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn
   * off the camera device).
   * @return {boolean} <tt>true</tt> if the current browser supports this
   * strategy or <tt>false</tt> otherwise.
   */
  doesVideoMuteByStreamRemove() {
    return this.isChromiumBased() || this.isWebKitBased();
  }
  /**
   * Check whether or not the current browser support peer to peer connections
   * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>
   * otherwise.
   */
  supportsP2P() {
    return !this.usesUnifiedPlan();
  }
  /**
   * Checks if the current browser is Chromium based, that is, it's either
   * Chrome / Chromium or uses it as its engine, but doesn't identify as
   * Chrome.
   *
   * This includes the following browsers:
   * - Chrome and Chromium
   * - Other browsers which use the Chrome engine, but are detected as Chrome,
   *	 such as Brave and Vivaldi
   * - Browsers which are NOT Chrome but use it as their engine, and have
   *	 custom detection code: Opera, Electron and NW.JS
   */
  isChromiumBased() {
    return this.isChrome() || this.isElectron() || this.isNWJS() || this.isOpera();
  }
  /**
   * Checks if the current browser is WebKit based. It's either
   * Safari or uses WebKit as its engine.
   *
   * This includes Chrome and Firefox on iOS
   *
   * @returns {boolean}
   */
  isWebKitBased() {
    return this._bowser.isEngine("webkit") && typeof navigator.mediaDevices != "undefined" && typeof navigator.mediaDevices.getUserMedia != "undefined" && typeof window.RTCRtpTransceiver != "undefined" && Object.keys(RTCRtpTransceiver.prototype).indexOf("currentDirection") > -1;
  }
  /**
   * Checks if the current browser is supported.
   *
   * @returns {boolean} true if the browser is supported, false otherwise.
   */
  isSupported() {
    return this.isChromiumBased() && this._getChromiumBasedVersion() >= yD || this.isFirefox() || this.isReactNative() || this.isWebKitBased();
  }
  /**
   * Returns whether or not the current environment needs a user interaction
   * with the page before any unmute can occur.
   *
   * @returns {boolean}
   */
  isUserInteractionRequiredForUnmute() {
    return this.isFirefox() && this.isVersionLessThan("68");
  }
  /**
   * Checks if the current browser triggers 'onmute'/'onunmute' events when
   * user's connection is interrupted and the video stops playback.
   * @returns {*|boolean} 'true' if the event is supported or 'false'
   * otherwise.
   */
  supportsVideoMuteOnConnInterrupted() {
    return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();
  }
  /**
   * Checks if the current browser reports upload and download bandwidth
   * statistics.
   * @return {boolean}
   */
  supportsBandwidthStatistics() {
    return !this.isFirefox() && !this.isWebKitBased();
  }
  /**
   * Checks if the current browser supports setting codec preferences on the transceiver.
   * @returns {boolean}
   */
  supportsCodecPreferences() {
    return this.usesUnifiedPlan() && typeof window.RTCRtpTransceiver != "undefined" && Object.keys(window.RTCRtpTransceiver.prototype).indexOf(
      "setCodecPreferences"
    ) > -1 && Object.keys(RTCRtpSender.prototype).indexOf("getCapabilities") > -1 && !this.isWebKitBased();
  }
  /**
   * Checks if the current browser support the device change event.
   * @return {boolean}
   */
  // eslint-disable-next-line class-methods-use-this
  supportsDeviceChangeEvent() {
    return navigator.mediaDevices && typeof navigator.mediaDevices.ondevicechange != "undefined" && typeof navigator.mediaDevices.addEventListener != "undefined";
  }
  /**
   * Checks if the current browser supports RTT statistics for srflx local
   * candidates through the legacy getStats() API.
   */
  supportsLocalCandidateRttStatistics() {
    return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();
  }
  /**
   * Checks if the current browser supports the Long Tasks API that lets us observe
   * performance measurement events and be notified of tasks that take longer than
   * 50ms to execute on the main thread.
   */
  supportsPerformanceObserver() {
    return typeof window.PerformanceObserver != "undefined" && PerformanceObserver.supportedEntryTypes.indexOf("longtask") > -1;
  }
  /**
   * Checks if the current browser supports audio level stats on the receivers.
   */
  supportsReceiverStats() {
    return typeof window.RTCRtpReceiver != "undefined" && Object.keys(RTCRtpReceiver.prototype).indexOf(
      "getSynchronizationSources"
    ) > -1;
  }
  /**
   * Checks if the current browser reports round trip time statistics for
   * the ICE candidate pair.
   * @return {boolean}
   */
  supportsRTTStatistics() {
    return !this.isFirefox();
  }
  /**
   * Checks if the browser uses plan B.
   *
   * @returns {boolean}
   */
  usesPlanB() {
    return !this.usesUnifiedPlan();
  }
  /**
   * Checks if the browser uses SDP munging for turning on simulcast.
   *
   * @returns {boolean}
   */
  usesSdpMungingForSimulcast() {
    return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();
  }
  /**
   * Checks if the browser uses unified plan.
   *
   * @returns {boolean}
   */
  usesUnifiedPlan() {
    return !!(this.isFirefox() || this.isWebKitBased());
  }
  /**
   * Returns whether or not the current browser should be using the new
   * getUserMedia flow, which utilizes the adapter shim. This method should
   * be temporary and used while migrating all browsers to use adapter and
   * the new getUserMedia.
   *
   * @returns {boolean}
   */
  usesNewGumFlow() {
    return !!(this.isChromiumBased() || this.isFirefox() || this.isWebKitBased());
  }
  /**
   * Checks if the browser uses webrtc-adapter. All browsers using the new
   * getUserMedia flow.
   *
   * @returns {boolean}
   */
  usesAdapter() {
    return this.usesNewGumFlow();
  }
  /**
   * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams
   * to the bridge instead of the ssrcs.
   */
  usesRidsForSimulcast() {
    return !1;
  }
  /**
   * Checks if the browser supports getDisplayMedia.
   * @returns {boolean} {@code true} if the browser supports getDisplayMedia.
   */
  supportsGetDisplayMedia() {
    return typeof navigator.getDisplayMedia != "undefined" || typeof navigator.mediaDevices != "undefined" && typeof navigator.mediaDevices.getDisplayMedia != "undefined";
  }
  /**
   * Checks if the browser supports insertable streams, needed for E2EE.
   * @returns {boolean} {@code true} if the browser supports insertable streams.
   */
  supportsInsertableStreams() {
    if (!(typeof window.RTCRtpSender != "undefined" && (window.RTCRtpSender.prototype.createEncodedStreams || window.RTCRtpSender.prototype.createEncodedVideoStreams)))
      return !1;
    const e = new ReadableStream();
    try {
      return window.postMessage(e, "*", [e]), !0;
    } catch (r) {
      return !1;
    }
  }
  /**
   * Whether the browser supports the RED format for audio.
   */
  supportsAudioRed() {
    return Boolean(
      window.RTCRtpSender && window.RTCRtpSender.getCapabilities && window.RTCRtpSender.getCapabilities("audio").codecs.some(
        (e) => e.mimeType === "audio/red"
      ) && window.RTCRtpReceiver && window.RTCRtpReceiver.getCapabilities && window.RTCRtpReceiver.getCapabilities("audio").codecs.some(
        (e) => e.mimeType === "audio/red"
      )
    );
  }
  /**
   * Checks if the browser supports the "sdpSemantics" configuration option.
   * https://webrtc.org/web-apis/chrome/unified-plan/
   *
   * @returns {boolean}
   */
  supportsSdpSemantics() {
    return this.isChromiumBased();
  }
  /**
   * Returns the version of a Chromium based browser.
   *
   * @returns {Number}
   */
  _getChromiumBasedVersion() {
    if (this.isChromiumBased()) {
      if (this.isNWJS())
        return Number.parseInt(process.versions.chromium, 10);
      const e = navigator.userAgent;
      if (e.match(/Chrome/))
        return Number.parseInt(e.match(/Chrome\/([\d.]+)/)[1], 10);
    }
    return -1;
  }
  isIOSMobile() {
    return this.isMobile && this._bowser.getOSName() === "iOS";
  }
}
const fe = new AD(), le = class {
  static get logsEndpoint() {
    return `https://${fD({
      servicePrefix: "api-silos",
      apiBase: G.apiBase,
      baseURI: G.baseURI
    })}/otel/logs`;
  }
  static init(e, r) {
    navigator.isReactNative || (le.tracingEnabled = r, le.meetingMetadata.peerId = e, le.meetingMetadata.sdkVersion = wp, le.meetingMetadata.deviceInfo = fe.getDeviceInfo(), le.meetingMetadata.visitedUrl = !navigator.isReactNative && typeof window != "undefined" && window.location.href, document.addEventListener(
      "visibilitychange",
      le.processCachedLogs
    ), le.logsProcessorTimer = setInterval(
      le.processCachedLogs,
      le.logsProcessingInterval
    ), r && (le.initialized = !0));
  }
  static trace(e) {
    return (r, n, i) => {
      const s = i.value;
      return i.value = function(...o) {
        if (!le.initialized || navigator.isReactNative || !le.tracingEnabled || ae.hasFeature(oe.SKIP_OTEL_TRACES))
          return s.apply(this, o);
        le.addLogInCurrentSpan("info", e);
        const c = performance.now(), u = s.apply(this, o);
        return Promise.resolve(u).then(() => {
          const h = performance.now();
          le.addLogInCurrentSpan("info", `${e}_timing`, {
            execTime: h - c
          });
        }).catch(() => {
          const h = performance.now();
          le.addLogInCurrentSpan("info", `${e}_timing`, {
            execTime: h - c
          });
        }), u;
      }, i;
    };
  }
  static injectContext(e) {
    var i;
    const r = ot().replace(/-/g, "").substring(0, 16), n = (i = le.meetingMetadata.peerId) == null ? void 0 : i.replace(/-/g, "");
    e.TRACEPARENT = `00-${n}-${r}-01`;
  }
  /**
   * Adds event into the current span or the main span.
   * Event(or this method) is not a replacement for a log.
   * Tip :: Heavy objects should be logged.
   * Tip :: Light objects with `to the point` info should be added as events.
   * @param eventSeverity severity of the passed event to create better dashboards
   * @param eventName name of event in format
   *	fileName::functionName::eventName or functionName::eventName or whatever seems fit
   * @param metadata pass any information which makes sense for analytics or debugging
   * @param noCache optionally pass if log can be cached in FE or it has to be sent instantly
   * @returns nothing
   */
  static addLogInCurrentSpan(e, r, n = {}, i = !1) {
    if (n != null && n.error && Object.assign(n, { error: Uo(n.error) }), yp() && (Wc(n) ? console[e]("DyteInternalLogs:: ", e, r) : console[e](
      "DyteInternalLogs:: ",
      e,
      r,
      n
    )), !!pD(e))
      try {
        const a = mD(
          r,
          n,
          "metadata"
        ), o = new Date(), c = Ue(Y({
          message: r,
          level: e
        }, a), {
          loggedAt: o.toISOString(),
          loggedAtTzOffset: o.getTimezoneOffset()
        });
        i ? le.sendOtelLogsToNewRelic([c]) : le.logsCache.push(c);
      } catch (a) {
        le.addLogInCurrentSpan(
          "error",
          "opentelemetry::addLogInCurrentSpan_failed",
          {
            error: Uo(a)
          }
        );
      }
  }
  static sendOtelLogsToNewRelic(e) {
  }
  static processCachedLogs() {
    const e = le.logsCache.splice(0, 25);
    e != null && e.length;
  }
  static destruct() {
    clearInterval(le.logsProcessorTimer), le.processCachedLogs(), !navigator.isReactNative && document.removeEventListener(
      "visibilitychange",
      le.processCachedLogs
    );
  }
};
let v = le;
_(v, "logsCache", []), _(v, "logsProcessorTimer"), _(v, "tracingEnabled", !0), _(v, "initialized", !1), /**
 * NOTE(ravindra-dyte)
 * Periodically send logs to Log Aggregator. Current period: 7 secs
 */
_(v, "logsProcessingInterval", 7e3), _(v, "logExclusionList", [
  "message",
  "websocket/message",
  "roomMessage",
  "websocket/room-message",
  "websocket/room-legacy-mode",
  "chatMessage",
  "websocket/new-chat-message",
  "websocket/no-active-speaker",
  "websocket/selected-peers",
  "websocket/active-speaker",
  "ping",
  "websocket/new-consumer",
  "websocket/producer-score",
  "websocket/consumer-score",
  "websocket/plugin-event",
  "websocket/plugin-data",
  "websocket/plugin-internal-data"
]), _(v, "meetingMetadata", {});
class m {
  static info(e, r, n) {
    v.addLogInCurrentSpan(
      "info",
      e,
      r,
      n
    );
  }
  static error(e, r, n) {
    v.addLogInCurrentSpan(
      "error",
      e,
      r,
      n
    );
  }
  static debug(e, r, n) {
    v.addLogInCurrentSpan(
      "debug",
      e,
      r,
      n
    );
  }
  static log(e, r, n) {
    v.addLogInCurrentSpan(
      "log",
      e,
      r,
      n
    );
  }
  static warn(e, r, n) {
    v.addLogInCurrentSpan(
      "warn",
      e,
      r,
      n
    );
  }
}
class Rr extends ta {
  constructor() {
    super(), super.setMaxListeners(25);
  }
  emit(e, ...r) {
    return super.emit("*", e, ...r), super.emit(e, ...r);
  }
  on(e, r) {
    try {
      const n = this.listenerCount(e);
      n > 25 && n % 25 === 0 && m.warn("DyteEventEmitter::maxListenersExceeded", {
        eventListener: {
          eventName: e.toString(),
          listenerCount: this.listenerCount(e)
        }
      });
    } catch (n) {
    }
    return super.on(e, r);
  }
  addListener(e, r) {
    try {
      const n = this.listenerCount(e);
      n > 25 && n % 25 === 0 && m.warn("DyteEventEmitter::maxListenersExceeded", {
        eventListener: {
          eventName: e.toString(),
          listenerCount: this.listenerCount(e)
        }
      });
    } catch (n) {
    }
    return super.addListener(e, r);
  }
  off(e, r) {
    return super.off(e, r);
  }
  once(e, r) {
    return super.once(e, r);
  }
  prependListener(e, r) {
    return super.prependListener(e, r);
  }
  prependOnceListener(e, r) {
    return super.prependOnceListener(e, r);
  }
  removeListener(e, r) {
    return super.removeListener(e, r);
  }
  removeAllListeners(e) {
    return super.removeAllListeners(e);
  }
  listeners(e) {
    return super.listeners(e);
  }
  listenerCount(e) {
    return super.listenerCount(e);
  }
}
class mt extends ta {
  constructor() {
    super(), super.setMaxListeners(25);
  }
  emit(e, ...r) {
    return super.emit("*", e, ...r), super.emit(e, ...r);
  }
  on(e, r) {
    try {
      const n = this.listenerCount(e);
      n > 25 && n % 25 === 0 && m.warn("DyteEventEmitter::maxListenersExceeded", {
        eventListener: {
          eventName: e.toString(),
          listenerCount: this.listenerCount(e)
        }
      });
    } catch (n) {
    }
    return super.on(e, r);
  }
  addListener(e, r) {
    try {
      const n = this.listenerCount(e);
      n > 25 && n % 25 === 0 && m.warn("DyteEventEmitter::maxListenersExceeded", {
        eventListener: {
          eventName: e.toString(),
          listenerCount: this.listenerCount(e)
        }
      });
    } catch (n) {
    }
    return super.addListener(e, r);
  }
  off(e, r) {
    return super.off(e, r);
  }
  once(e, r) {
    return super.once(e, r);
  }
  prependListener(e, r) {
    return super.prependListener(e, r);
  }
  prependOnceListener(e, r) {
    return super.prependOnceListener(e, r);
  }
  removeListener(e, r) {
    return super.removeListener(e, r);
  }
  removeAllListeners(e) {
    return super.removeAllListeners(e);
  }
  listeners(e) {
    return super.listeners(e);
  }
  listenerCount(e) {
    return super.listenerCount(e);
  }
}
const RD = {
  "00": "DyteClient",
  "01": "Controller",
  "02": "RoomNodeClient",
  "03": "HiveNodeClient",
  "04": "SocketService",
  "05": "Chat",
  "06": "Plugin",
  "07": "Polls",
  "08": "Meta",
  "09": "Preset",
  10: "Recording",
  11: "Self",
  12: "Participant",
  13: "Spotlight",
  14: "Remote Request",
  15: "Webinar",
  16: "LocalMediaHandler"
}, ms = {
  "0000": "Internal exception.",
  "0001": "Failed to initialize.",
  "0002": "Failed to join room.",
  "0003": "Failed to leave room.",
  "0100": "Internal exception",
  "0200": "Internal exception.",
  "0300": "Internal exception",
  "0400": "Internal exception",
  "0500": "Internal exception",
  "0501": "Permission denied.",
  "0502": "Invalid message body.",
  "0510": "Invalid channel name.",
  "0600": "Internal exception",
  "0700": "Internal exception",
  "0800": "Internal exception",
  "0900": "Internal exception",
  1e3: "Internal exception",
  1100: "Internal exception",
  1200: "Internal exception",
  1300: "Internal exception",
  1400: "Internal exception",
  1500: "Internal exception",
  1600: "Internal exception",
  1601: "Failed to get audio track",
  1602: "Failed to get video track",
  1603: "Incorrect device",
  1604: "Failed to change device",
  1700: "Internal exception"
};
Object.keys(ms).forEach((t) => {
  ms[t] = `{${RD[t.slice(0, 2)]}} ${ms[t]}`;
});
class w extends Error {
  constructor(r, n, i = !1) {
    super(r);
    _(this, "code");
    this.code = n, this.name = "DyteError", this.message = `[ERR${this.code}]: ${ms[this.code]}
${this.message}`;
    try {
      let s = i;
      n && n.endsWith("00") && (s = !0), s && m.error("DyteError", {
        error: { message: this.message, name: this.name, code: n }
      });
    } catch (s) {
    }
  }
}
function is(t, e, r, n) {
  if (typeof r == "function" && n instanceof e)
    r.call(null, n, t);
  else
    throw n;
}
function rl(t, e, r) {
  if (!t.value) {
    const i = t.get, s = t.set;
    return i && (t.get = function() {
      try {
        return i.apply(this);
      } catch (a) {
        is(this, e, r, a);
      }
    }), s && (t.set = function(a) {
      try {
        return s.apply(this, [a]);
      } catch (o) {
        is(this, e, r, o);
      }
    }), t;
  }
  const n = t.value;
  return t.value = function(...i) {
    try {
      const s = n.apply(this, i);
      return s && s instanceof Promise ? s.catch((a) => {
        is(this, e, r, a);
      }) : s;
    } catch (s) {
      is(this, e, r, s);
    }
  }, t;
}
function SD(t, e) {
  return (r, n, i) => {
    if (i)
      return rl(i, t, e);
    for (const s of Reflect.ownKeys(r.prototype).filter(
      (a) => a !== "constructor"
    )) {
      const a = Object.getOwnPropertyDescriptor(
        r.prototype,
        s
      );
      (a.value instanceof Function || a.get instanceof Function || a.set instanceof Function) && Object.defineProperty(
        r.prototype,
        s,
        rl(a, t, e)
      );
    }
  };
}
const $e = (t) => SD(Error, t);
var bD = Object.defineProperty, kD = Object.getOwnPropertyDescriptor, CD = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? kD(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && bD(e, r, i), i;
}, Or, wl;
let Fo = (wl = class extends mt {
  constructor(e, r, n) {
    super();
    /**
     *	Represents the current active tab
    */
    _(this, "selfActiveTab");
    /**
     * Represents whether current user is spotlighted
    */
    _(this, "broadcastTabChanges");
    b(this, Or, void 0);
    /**
     * The `viewType` tells the type of the meeting
     * possible values are: GROUP_CALL| LIVESTREAM | CHAT | AUDIO_ROOM
     */
    _(this, "viewType");
    /**
     * The timestamp of the time when the meeting started.
     */
    _(this, "meetingStartedTimestamp");
    /**
     * The title of the meeting.
     */
    _(this, "meetingTitle");
    /**
     * (Experimental) The sessionId this meeting object is part of.
     */
    _(this, "sessionId");
    y(this, Or, e), this.viewType = r, this.meetingTitle = n, this.broadcastTabChanges = e.permissions.canSpotlight;
  }
  /**
   * @deprecated
   * This is set to true if the current user has joined the meeting.
   */
  get joined() {
    return d(this, Or).roomJoined;
  }
  /**
   * @deprecated
   * The room name of the meeting.
   */
  get roomName() {
    return this.meetingId;
  }
  /**
   * The room name of the meeting.
   */
  get meetingId() {
    return ot();
  }
  /**
   * Has room-node connection been made.
   */
  get mediaConnected() {
    return d(this, Or).roomJoined;
  }
  /**
   * This is set to true if user has succesfully connected to the socket.
   */
  get socketConnected() {
    return d(this, Or).roomJoined;
  }
  /**
   * Sets current user as broadcasting tab changes
   * @param broadcastTabChanges
   */
  setBroadcastTabChanges(e) {
    if (!d(this, Or).permissions.canSpotlight)
      throw m.error("DyteSpotlight::setSpotlighted::permission_denied"), new w("User does not have permission to toggle spotlight");
    this.broadcastTabChanges = e, this.emit("broadcastTabChangesUpdate", this.broadcastTabChanges);
  }
  /**
   * Sets current active tab for user
   * @param spotlightTab
   */
  setSelfActiveTab(e, r) {
    m.info("DyteSpotlight::setActiveTab", {
      spotlight: {
        currentTab: {
          id: e.id,
          type: e.type
        }
      }
    }), this.selfActiveTab = e, r === 0 && this.emit("selfTabUpdate", e);
  }
}, Or = new WeakMap(), wl);
Fo = CD([
  $e((t) => {
    throw new w(t.message, "0800");
  })
], Fo);
const Vo = {
  gross: { width: { ideal: 192 }, height: { ideal: 144 } },
  qvga: { width: { ideal: 384 }, height: { ideal: 288 } },
  pvga: { width: { ideal: 480 }, height: { ideal: 360 } },
  vga: { width: { ideal: 640 }, height: { ideal: 480 } },
  hd: { width: { ideal: 1280 }, height: { ideal: 720 } },
  hd_cropped: { width: { ideal: 900 }, height: { ideal: 720 } },
  fhd: { width: { ideal: 1920 }, height: { ideal: 1080 } }
};
function ID(t) {
  return t.replace(
    /([-_]\w)/g,
    (e) => e[1].toUpperCase()
  );
}
function yt(t) {
  if (!t || typeof t != "object")
    return t;
  if (Array.isArray(t))
    return t.map(
      (r) => yt(r)
    );
  const e = {};
  return Object.keys(t).forEach((r) => {
    const n = Dl(r) ? r : ID(r);
    e[n] = yt(t[r]);
  }), e;
}
function PD(t) {
  return t.replace(
    /[A-Z]/g,
    (e) => `_${e.toLowerCase()}`
  );
}
function Dp(t) {
  if (!t || typeof t != "object")
    return t;
  if (Array.isArray(t))
    return t.map(
      (r) => Dp(r)
    );
  const e = {};
  return Object.keys(t).forEach((r) => {
    const n = Dl(r) ? r : PD(r);
    e[n] = t[r];
  }), e;
}
const DD = TE(), Xe = yt(
  DD.config.media
);
function OD(t) {
  var r, n;
  const e = {};
  return t.audio && (e.audio = {
    enableStereo: (r = t.audio.enableStereo) != null ? r : !1,
    enableHighBitrate: (n = t.audio.enableHighBitrate) != null ? n : !1
  }), e.video = t.video.quality, e;
}
var tn;
class Op {
  constructor(e) {
    b(this, tn, void 0);
    // eslint-disable-next-line class-methods-use-this
    _(this, "getScreenShareConstraints", () => {
      var c, u, h, f, g, E, R, I, S, k;
      const { displaySurface: e } = (c = G.defaults.screenShare) != null ? c : {}, r = (u = d(this, tn)) == null ? void 0 : u.screenshare, n = (f = (h = r == null ? void 0 : r.width) == null ? void 0 : h.max) != null ? f : 1920, i = (E = (g = r == null ? void 0 : r.height) == null ? void 0 : g.max) != null ? E : 1080, s = (I = (R = r == null ? void 0 : r.frameRate) == null ? void 0 : R.max) != null ? I : 5;
      let a = (k = (S = r == null ? void 0 : r.frameRate) == null ? void 0 : S.ideal) != null ? k : 5;
      ae.getValue(oe.VAL_MIN_FRAMERATE) && (a = parseInt(ae.getValue(oe.VAL_MIN_FRAMERATE), 10));
      let o = {
        width: { max: n },
        height: { max: i },
        frameRate: {
          ideal: a,
          max: s
        }
      };
      if (ae.hasFeature(oe.SCREENSHARE_CONSTRAINTS)) {
        const O = ae.getValue(
          oe.SCREENSHARE_CONSTRAINTS
        );
        o = JSON.parse(O);
      }
      return e !== void 0 && ["monitor", "browser", "window"].includes(e) && (o = Ue(Y({}, o), { displaySurface: e })), {
        audio: !0,
        video: o
      };
    });
    // eslint-disable-next-line class-methods-use-this
    _(this, "getAudioConstraints", (e) => {
      var s, a, o, c, u, h, f, g;
      const r = {}, n = (s = d(this, tn)) == null ? void 0 : s.audio, i = n != null && n.enableStereo ? 2 : 1;
      return fe.isFirefox() || fe.isWebKitBased() ? (r.audio = {
        deviceId: e,
        autoGainControl: (a = n == null ? void 0 : n.autoGainControl) != null ? a : !0,
        echoCancellation: (o = n == null ? void 0 : n.echoCancellation) != null ? o : !0,
        noiseSuppression: (c = n == null ? void 0 : n.noiseSupression) != null ? c : !0,
        channelCount: i
      }, r) : (r.audio = {}, r.audio.optional = [
        e ? { sourceId: e } : { sourceId: "default" },
        { channelCount: i },
        { echoCancellation: (u = n == null ? void 0 : n.echoCancellation) != null ? u : !0 },
        { googEchoCancellation: (h = n == null ? void 0 : n.echoCancellation) != null ? h : !0 },
        { googAutoGainControl: (f = n == null ? void 0 : n.autoGainControl) != null ? f : !0 },
        { googNoiseSuppression: (g = n == null ? void 0 : n.noiseSupression) != null ? g : !0 },
        { googHighpassFilter: !0 }
      ], r);
    });
    _(this, "getVideoConstraints", (e) => {
      var s, a, o;
      const r = {}, n = (s = d(this, tn)) == null ? void 0 : s.video;
      let i = Vo.vga;
      if (typeof n == "string" ? i = Vo[n] : n !== void 0 && (i.height.ideal = n.height.ideal, i.width.ideal = n.width.ideal), i.frameRate = {
        ideal: (o = (a = i.frameRate) == null ? void 0 : a.ideal) != null ? o : 24
      }, fe.isChromiumBased() && (i.frameRate.max = 30), ae.hasFeature(oe.VIDEO_CONSTRAINTS)) {
        const c = ae.getValue(
          oe.VIDEO_CONSTRAINTS
        );
        i = JSON.parse(c);
      }
      return r.video = i, e ? r.video.deviceId = { exact: e } : r.video.facingMode = "user", r;
    });
    y(this, tn, e);
  }
  // eslint-disable-next-line class-methods-use-this
  getUpdatedVideoConstraints(e) {
    return e;
  }
}
tn = new WeakMap();
var P = /* @__PURE__ */ ((t) => (t.NEW_PRODUCER = "NEW_PRODUCER", t.PRODUCER_TRACK_ENDED = "PRODUCER_TRACK_ENDED", t.ROOM_NODE_CONNECTED = "ROOM_NODE_CONNECTED", t.ROOM_NODE_DISCONNECTED = "ROOM_NODE_DISCONNECTED", t.ROOM_NODE_CONNECTION_ERROR = "ROOM_NODE_CONNECTION_ERROR", t.SOCKET_SERVICE_CONNECTED = "SOCKET_SERVICE_CONNECTED", t.SOCKET_SERVICE_DISCONNECTED = "SOCKET_SERVICE_DISCONNECTED", t.SOCKET_SERVICE_RECONNECTING = "SOCKET_SERVICE_RECONNECTING", t.SOCKET_SERVICE_RECONNECTION_ATTEMPT = "SOCKET_SERVICE_RECONNECTION_ATTEMPT", t.SOCKET_SERVICE_RECONNECT_FAILURE = "SOCKET_SERVICE_RECONNECT_FAILURE", t.SOCKET_SERVICE_RECONNECTED = "SOCKET_SERVICE_RECONNECTED", t.SOCKET_SERVICE_FAILED = "SOCKET_SERVICE_FAILED", t.ROOM_JOINED = "ROOM_JOINED", t.SOCKET_SERVICE_ROOM_JOINED = "SOCKET_SERVICE_ROOM_JOINED", t.SELF_ROOM_JOINED = "SELF_ROOM_JOINED", t.PRODUCER_SCORE_UPDATE = "PRODUCER_SCORE_UPDATE", t.CONSUMER_SCORE_UPDATE = "CONSUMER_SCORE_UPDATE", t.PRODUCER_STATUS_UPDATE = "PRODUCER_STATUS_UPDATE", t.CONSUMER_STATUS_UPDATE = "CONSUMER_STATUS_UPDATE", t.LOW_PRODUCER_SCORE = "LOW_PRODUCER_SCORE", t.LOW_CONSUMER_SCORE = "LOW_CONSUMER_SCORE", t.MEDIA_PERMISSION_ERROR = "MEDIA_PERMISSION_ERROR", t.MEDIA_PERMISSION_UPDATE = "MEDIA_PERMISSION_UPDATE", t.WAITLISTED = "WAIT_LISTED", t.WAITLIST_ACCEPTED = "websocket/waitlist-accepted", t.WAITLIST_REJECTED = "websocket/waitlist-rejected", t.WAITLIST_PEER_ADDED = "websocket/waitlist-peer-added", t.WAITLIST_PEER_REMOVED = "websocket/waitlist-peer-closed", t.MESSAGE = "websocket/message", t.ROOM_MESSAGE = "websocket/room-message", t.DISABLE_AUDIO = "websocket/disable-audio", t.DISABLE_VIDEO = "websocket/disable-video", t.PEER_JOINED = "websocket/peer-joined", t.PEER_CLOSED = "websocket/peer-closed", t.PEER_MUTED = "websocket/peer-muted", t.PEER_UNMUTED = "websocket/peer-unmuted", t.PEER_PINNED = "websocket/pin-peer", t.PEER_UNPINNED = "websocker/unpin-peer", t.MUTE_ALL = "websocket/mute-all", t.MUTE_ALL_VIDEO = "websocket/mute-all-video", t.CONSUMER_CLOSED = "websocket/consumer-closed", t.CONSUMER_PAUSED = "websocket/consumer-paused", t.CONSUMER_RESUMED = "websocket/consumer-resumed", t.PRODUCER_CLOSED = "websocket/producer-closed", t.NEW_CONSUMER = "websocket/new-consumer", t.CONNECTED_MEETING_STATE = "websocket/connectedMeetingState", t.MOVE_TO_CONNECTED_MEETING = "websocket/transferMeeting", t.GET_CHAT_MESSAGES = "websocket/get-chat-messages", t.NEW_CHAT_MESSAGE = "websocket/new-chat-message", t.PIN_CHAT_MESSAGE = "websocket/pin-chat-message", t.UNPIN_CHAT_MESSAGE = "websocket/unpin-chat-message", t.GET_POLLS = "websocket/get-polls", t.UPDATE_POLL = "websocket/update-poll", t.SELECTED_PEERS = "websocket/selected-peers", t.GET_PAGE = "websocket/get-page", t.ACTIVE_SPEAKER = "websocket/active-speaker", t.NO_ACTIVE_SPEAKER = "websocket/no-active-speaker", t.PRODUCER_SCORE = "websocket/producer-score", t.CONSUMER_SCORE = "websocket/consumer-score", t.ENABLE_PLUGIN = "websocket/enable-plugin", t.DISABLE_PLUGIN = "websocket/disable-plugin", t.PLUGIN_EVENT = "websocket/plugin-event", t.PLUGIN_DATA = "websocket/plugin-data", t.PLUGIN_INTERNAL_DATA = "websocket/plugin-internal-data", t.KICKED = "websocket/kicked", t.ICE_CONNECTED = "ICE_CONNECTED", t.ICE_DISCONNECTED = "ICE_DISCONNECTED", t.ICE_FAILED = "ICE_FAILED", t.ICE_RECONNECTING = "ICE_RECONNECTING", t.AUDIO_TRACK_ANALYSIS = "AUDIO_TRACK_ANALYSIS", t.AUDIO_TRACK_CLOSED = "AUDIO_TRACK_CLOSED", t.AUDIO_TRACK_CHANGED = "AUDIO_TRACK_CHANGED", t.AUDIO_TRACK_CREATED = "AUDIO_TRACK_CREATED", t.VIDEO_TRACK_ANALYSIS = "VIDEO_TRACK_ANALYSIS", t.VIDEO_TRACK_ANALYSIS_ERROR = "VIDEO_TRACK_ANALYSIS_ERROR", t.VIDEO_TRACK_CLOSED = "VIDEO_TRACK_CLOSED", t.VIDEO_TRACK_CHANGED = "VIDEO_TRACK_CHANGED", t.VIDEO_TRACK_CREATED = "VIDEO_TRACK_CREATED", t.SCREENSHARE_AUDIO_TRACK_ANALYSIS = "SCREENSHARE_AUDIO_TRACK_ANALYSIS", t.SCREENSHARE_AUDIO_TRACK_CLOSED = "SCREENSHARE_AUDIO_TRACK_CLOSED", t.SCREENSHARE_AUDIO_TRACK_CREATED = "SCREENSHARE_AUDIO_TRACK_CREATED", t.SCREENSHARE_VIDEO_TRACK_ANALYSIS = "SCREENSHARE_VIDEO_TRACK_ANALYSIS", t.SCREENSHARE_VIDEO_TRACK_ANALYSIS_ERROR = "SCREENSHARE_VIDEO_TRACK_ANALYSIS_ERROR", t.SCREENSHARE_VIDEO_TRACK_CLOSED = "SCREENSHARE_VIDEO_TRACK_CLOSED", t.SCREENSHARE_VIDEO_TRACK_CREATED = "SCREENSHARE_VIDEO_TRACK_CREATED", t.SCREENSHARE_TRACK_CHANGED = "SCREENSHARE_TRACK_CHANGED", t.CANDIDATE_PEER_UPDATE = "CANDIDATE_PEER_UPDATE", t.INBOUND_RTP_UPDATE = "INBOUND_RTP_UPDATE", t.OUTBOUND_RTP_UPDATE = "OUTBOUND_RTP_UPDATE", t.SEND_TRANSPORT_CLOSED = "SEND_TRANSPORT_CLOSED", t.RECV_TRANSPORT_CLOSED = "RECV_TRANSPORT_CLOSED", t.SEND_TRANSPORT_CREATED = "SEND_TRANSPORT_CREATED", t.RECV_TRANSPORT_CREATED = "RECV_TRANSPORT_CREATED", t.PRODUCER_TOGGLE = "hive/producer-toggle", t.CONSUMER_TOGGLE = "hive/consumer-toggle", t.SELECTED_PEERS_DIFF = "hive/selected-peers-diff", t.REFRESH_GRID = "hive/refresh-grid", t.RESET_PRODUCER_STATE = "hive/reset-producer-state", t.HIVE_TRANSPORT_STATE_CHANGED = "hive/transport-state-changed", t.HIVE_ROOM_REJOINING = "hive/room-rejoining", t.HIVE_ROOM_REJOIN_FAILED = "hive/room-rejoining-failed", t.HIVE_ROOM_REJOINED = "hive/room-rejoined", t.HIVE_TRANPSORT_RECONNECTING = "hive/transport-reconnecting", t.ROOM_STATE = "sockethub/room-state", t.PEER_DISPLAY_NAME_CHANGED = "hive/display-name-changed", t.ASSERT_SPOTLIGHTER = "websocket/assert-spotlighter", t.GET_STAGE_REQUESTS = "GET_STAGE_REQUESTS", t.UPDATE_STAGE_REQUESTS = "UPDATE_STAGE_REQUESTS", t.PEER_REQUESTED_TO_JOIN_STAGE = "websocket/request-to-join-stage-peer-added", t.PEER_WITHDRAWN_REQUEST_TO_JOIN_STAGE = "websocket/request-to-join-stage-peer-withdrawn", t.PEER_REJECTED_TO_JOIN_STAGE = "websocket/peer-rejected-to-join-stage", t.PEER_ADDED_TO_STAGE = "websocket/peer-added-to-stage", t.PEER_REMOVED_FROM_STAGE = "websocket/peer-removed-from-stage", t.PEER_STARTED_PRESENTING = "websocket/peer-started-presenting", t.PEER_STOPPED_PRESENTING = "websocket/peer-stopped-presenting", t.STAGE_REQUESTS_UPDATED = "STAGE_REQUESTS_UPDATED", t.KICK_PEER = "KICK_PEER", t.REQUEST_TO_JOIN_STAGE_ACCEPTED = "websocket/request-to-join-stage-accepted", t.REQUEST_TO_JOIN_STAGE_REJECTED = "websocket/request-to-join-stage-rejected", t.STARTED_PRESENTING = "websocket/started-presenting", t.STOPPED_PRESENTING = "websocket/stopped-presenting", t.REMOVED_FROM_STAGE = "websocket/removed-from-stage", t.JOIN_MEDIA_ROOM = "JOIN_MEDIA_ROOM", t.LEAVE_MEDIA_ROOM = "LEAVE_MEDIA_ROOM", t.UPDATE_PEER_STAGE_STATUS = "UPDATE_PEER_STAGE_STATUS", t.GET_WEBINAR_STAGE_STATUS = "GET_WEBINAR_STAGE_STATUS", t.REQUEST_TO_JOIN_STAGE = "REQUEST_TO_JOIN_STAGE", t.WITHDRAW_REQUEST_TO_JOIN_STAGE = "WITHDRAW_REQUEST_TO_JOIN_STAGE", t.LEAVE_STAGE = "LEAVE_STAGE", t.JOIN_STAGE = "JOIN_STAGE", t.SET_WEBINAR_STAGE_STATUS = "SET_WEBINAR_STAGE_STATUS", t.SET_STAGE_STATUS = "SET_STAGE_STATUS", t.NEW_STAGE_REQUEST = "NEW_STAGE_REQUEST", t.ACCEPT_JOIN_STAGE_REQUEST = "ACCEPT_JOIN_STAGE_REQUEST", t.REMOVE_FROM_STAGE = "REMOVE_FROM_STAGE", t.REJECT_REQUEST_TO_JOIN_STAGE = "REJECT_REQUEST_TO_JOIN_STAGE", t.ACCEPT_ALL_REQUESTS_TO_JOIN_STAGE = "ACCEPT_ALL_REQUESTS_TO_JOIN_STAGE", t.PIP_HANGUP = "PIP_HANGUP", t.SOCKET_PEERS = "SOCKET_PEERS", t.UPDATE_PERMISSIONS = "UPDATE_PERMISSIONS", t))(P || {}), ir, sr;
const vd = class extends ta {
  constructor() {
    super();
    b(this, ir, void 0);
    b(this, sr, void 0);
    _(this, "asyncPromiseTimeout");
    y(this, ir, /* @__PURE__ */ new Map()), y(this, sr, /* @__PURE__ */ new Map()), this.asyncPromiseTimeout = 8e3;
  }
  emitAsync(r, ...n) {
    return p(this, null, function* () {
      d(this, ir).set(r, []);
      const i = d(this, sr).get(r).map(
        () => new Promise((s) => {
          d(this, ir).get(r).push(s);
        })
      );
      yd(vd.prototype, this, "emit").call(this, r, ...n), yield Promise.race([
        Promise.all(i),
        new Promise(
          (s, a) => setTimeout(
            () => a(new Error(`emitAsync failed to resolve for event ${r}.`)),
            this.asyncPromiseTimeout
          )
        )
      ]), d(this, ir).delete(r);
    });
  }
  onAsync(r, n) {
    const i = d(this, ir), s = (...a) => p(this, null, function* () {
      var c;
      try {
        yield n(...a);
      } catch (u) {
        m.error("[onAsync]", { error: u });
      }
      const o = (c = i.get(r)) == null ? void 0 : c.shift();
      o == null || o();
    });
    return d(this, sr).get(r) || d(this, sr).set(r, []), d(this, sr).get(r).push(s), super.on(r, s);
  }
  /**
   * removes all attached listeners
   */
  reset() {
    y(this, ir, /* @__PURE__ */ new Map()), y(this, sr, /* @__PURE__ */ new Map()), super.removeAllListeners();
  }
};
let Bo = vd;
ir = new WeakMap(), sr = new WeakMap();
const D = new Bo();
var Xr = /* @__PURE__ */ ((t) => (t.allowed = "ALLOWED", t.notAllowed = "NOT_ALLOWED", t.canRequest = "CAN_REQUEST", t))(Xr || {});
const MD = {
  view_type: ct.GroupCall,
  accept_waiting_requests: !1,
  request_produce: !1,
  can_allow_participant_audio: !0,
  can_allow_participant_screensharing: !1,
  can_allow_participant_video: !0,
  request_kick_participant: !1,
  kick_participant: !0,
  pin_participant: !0,
  can_record: !1,
  waiting_room_type: "SKIP",
  plugins: {
    can_close: !0,
    can_start: !0,
    can_edit_acl: !1,
    config: {}
  },
  polls: {
    can_create: !0,
    can_vote: !0,
    can_view: !0
  },
  produce: {
    video: {
      allow: !0,
      quality: Xe.video.quality,
      frame_rate: Xe.video.frameRate
    },
    audio: !0,
    screenshare: {
      allow: !0,
      quality: Xe.screenshare.quality,
      frame_rate: Xe.screenshare.frameRate
    }
  },
  chat: {
    public: {
      can_send: !0,
      text: !0,
      files: !0
    },
    private: {
      can_send: !1,
      can_receive: !1,
      text: !1,
      files: !1
    }
  },
  reactions: !1,
  hidden_participant: !1,
  show_participant_list: !0,
  can_change_participant_role: !0,
  can_change_theme: !1,
  can_present: !1,
  accept_present_requests: !1,
  can_edit_display_name: !1,
  max_screenshare_count: 1,
  is_recorder: !1,
  can_spotlight: !1
};
yt(
  MD
);
const ce = yt(
  _c().permissions
);
var N, $n, ki, Fe, Fs;
const Vs = class extends mt {
  constructor(r, n, i, s = !1) {
    super();
    b(this, N, void 0);
    b(this, $n, void 0);
    b(this, ki, void 0);
    b(this, Fe, void 0);
    b(this, Fs, (r) => {
      r.chat && (r.chat.private && l.merge(d(this, N).chat.private, r.chat.private), r.chat.public && l.merge(d(this, N).chat.public, r.chat.public), this.emit("chatUpdate")), r.polls && (l.merge(d(this, N).polls, r.polls), this.emit("pollsUpdate")), r.plugins && (l.merge(d(this, N).plugins, r.plugins), this.emit("pluginsUpdate"));
    });
    if (!r)
      throw m.error("DytePermissionsPreset::load_preset_permissions_failed"), new w("Could not load preset permissions.");
    y(this, ki, i), y(this, $n, n), y(this, N, r), s && this.setupEvents();
  }
  setupEvents() {
    function r(n) {
      return p(this, null, function* () {
        y(this, Fe, n), this.stageStatus = n;
      });
    }
    D.onAsync(P.SET_STAGE_STATUS, r.bind(this)), D.on(P.UPDATE_PERMISSIONS, d(this, Fs));
  }
  static fromResponse(r, n, i) {
    return new Vs(r, n, i, !0);
  }
  static default(r, n) {
    return new Vs(ce, r, n);
  }
  get mediaRoomType() {
    return d(this, ki) ? "HIVE" : "ROOM_NODE";
  }
  /**
   * The `stageEnabled` property returns a boolean value.
   * If `true`, stage management is available for the participant.
   */
  get stageEnabled() {
    var r;
    return ((r = d(this, N)) == null ? void 0 : r.stageEnabled) || d(this, $n) === ct.Webinar || d(this, $n) === ct.Livestream;
  }
  get acceptStageRequests() {
    var r, n;
    return this.stageEnabled ? ((r = d(this, N)) == null ? void 0 : r.acceptStageRequests) || ((n = d(this, N)) == null ? void 0 : n.canAcceptProductionRequests) : !1;
  }
  /**
   * The `stageAccess` property dictactes how a user interacts with the stage.
   * There possible values are `ALLOWED`, `NOT_ALLOWED`, `CAN_REQUEST`;
   */
  get stageAccess() {
    var r, n, i;
    return ((r = d(this, N)) == null ? void 0 : r.stageAccess) === L.NotAllowed ? L.NotAllowed : ((n = d(this, N)) == null ? void 0 : n.stageAccess) === L.CanRequest ? L.CanRequest : ((i = d(this, N)) == null ? void 0 : i.stageAccess) === L.Allowed || d(this, N).media.audio.canProduce === L.Allowed || d(this, N).media.video.canProduce === L.Allowed || d(this, N).media.screenshare.canProduce === L.Allowed ? L.Allowed : d(this, N).media.audio.canProduce === L.CanRequest || d(this, N).media.video.canProduce === L.CanRequest || d(this, N).media.screenshare.canProduce === L.CanRequest ? L.CanRequest : L.NotAllowed;
  }
  /**
   * The `acceptWaitingRequests` returns boolean value.
   * If `true`, participant can accept the request of waiting participant.
   */
  get acceptWaitingRequests() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.acceptWaitingRequests) != null ? n : ce.acceptWaitingRequests;
  }
  /**
   * The `requestProduceVideo` returns boolean value.
   * If `true`, participant can send request to participants
   * about producing video.
   */
  get requestProduceVideo() {
    var r, n, i;
    return ((i = (n = (r = d(this, N)) == null ? void 0 : r.media) == null ? void 0 : n.video) == null ? void 0 : i.canProduce) === L.CanRequest;
  }
  /**
   * The `requestProduceAudio` returns boolean value.
   * If `true`, participant can send request to participants
   * about producing audio.
   */
  get requestProduceAudio() {
    var r, n, i;
    return ((i = (n = (r = d(this, N)) == null ? void 0 : r.media) == null ? void 0 : n.audio) == null ? void 0 : i.canProduce) === L.CanRequest;
  }
  /**
   * The `requestProduceScreenshare` returns boolean value.
   * If `true`, participant can send request to participants
   * about sharing screen.
   */
  get requestProduceScreenshare() {
    var r, n, i;
    return ((i = (n = (r = d(this, N)) == null ? void 0 : r.media) == null ? void 0 : n.screenshare) == null ? void 0 : i.canProduce) === L.CanRequest;
  }
  /**
   * The `canAllowParticipantAudio` returns boolean value.
   * If `true`, participant can enable other participants` audio.
   */
  get canAllowParticipantAudio() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.disableParticipantAudio) != null ? n : ce.disableParticipantAudio;
  }
  /**
   * The `canAllowParticipantScreensharing` returns boolean value.
   * If `true`, participant can enable other participants` screen share.
   */
  get canAllowParticipantScreensharing() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.canAcceptProductionRequests) != null ? n : ce.canAcceptProductionRequests;
  }
  /**
   * The `canAllowParticipantVideo` returns boolean value.
   * If `true`, participant can enable other participants` video.
   */
  get canAllowParticipantVideo() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.disableParticipantVideo) != null ? n : ce.disableParticipantVideo;
  }
  /**
   * If `true`, a participant can disable other participants` audio.
   */
  get canDisableParticipantAudio() {
    return this.canAllowParticipantAudio;
  }
  /**
   * If `true`, a participant can disable other participants` video.
   */
  get canDisableParticipantVideo() {
    return this.canAllowParticipantVideo;
  }
  /**
   * The `kickParticipant` returns boolean value.
   * If `true`, participant can remove other participants from the meeting.
   */
  get kickParticipant() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.kickParticipant) != null ? n : ce.kickParticipant;
  }
  /**
   * The `pinParticipant` returns boolean value.
   * If `true`, participant can pin a participant in the meeting.
   */
  get pinParticipant() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.pinParticipant) != null ? n : ce.pinParticipant;
  }
  /**
   * The `canRecord` returns boolean value.
   * If `true`, participant can record the meeting.
   */
  get canRecord() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.canRecord) != null ? n : ce.canRecord;
  }
  /**
   * @deprecated in favour of `waitingRoomBehaviour`.
   * The `waitingRoomType` returns string value.
   * type of waiting room behavior
   * possible values are `SKIP`, `ON_PRIVILEGED_USER_ENTRY`, `SKIP_ON_ACCEPT`
   */
  get waitingRoomType() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.waitingRoomType) != null ? n : ce.waitingRoomType;
  }
  /**
   * The `waitingRoomType` returns string value.
   * type of waiting room behavior
   * possible values are `SKIP`, `ON_PRIVILEGED_USER_ENTRY`, `SKIP_ON_ACCEPT`
   */
  get waitingRoomBehaviour() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.waitingRoomType) != null ? n : ce.waitingRoomType;
  }
  /**
   * The `plugins` tells if the participant can act on plugins
   * there are 2 permissions with boolean values, `canStart` and `canClose`.
   */
  get plugins() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.plugins) != null ? n : ce.plugins;
  }
  /**
   * The `polls` tells if the participant can use polls.
   * There are 3 permissions with boolean values, `canCreate`, `canVote`, `canViewResults`
   */
  get polls() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.polls) != null ? n : ce.polls;
  }
  /**
   * @deprecated in favour of `canProduceVideo`
   * The `produceVideo` shows permissions for enabling video.
   * There possible values are `ALLOWED`, `NOT_ALLOWED`, `CAN_REQUEST`
   */
  get produceVideo() {
    return this.canProduceVideo;
  }
  /**
   * @deprecated
   * The `requestProduce` returns boolean value.
   * If `true`, participant can send request to participants
   * about producing audio, video or screenshare.
   */
  get requestProduce() {
    return d(this, N).media.audio.canProduce === L.CanRequest || d(this, N).media.video.canProduce === L.CanRequest || d(this, N).media.screenshare.canProduce === L.CanRequest;
  }
  /**
   * The `canProduceVideo` shows permissions for enabling video.
   * There possible values are `ALLOWED`, `NOT_ALLOWED`, `CAN_REQUEST`
   */
  get canProduceVideo() {
    var n;
    const r = (n = d(this, N).media.video.canProduce) != null ? n : ce.media.video.canProduce;
    return this.stageEnabled && (d(this, Fe) === "ACCEPTED_TO_JOIN_STAGE" || d(this, Fe) === "ON_STAGE") && r === L.CanRequest ? L.Allowed : this.stageEnabled && (d(this, Fe) === "OFF_STAGE" || d(this, Fe) === "REQUESTED_TO_JOIN_STAGE") && r === L.Allowed ? L.NotAllowed : r;
  }
  /**
   * @deprecated in favour of `canProduceScreenshare`
   * The `produceVideo` shows permissions for sharing screen.
   * There possible values are `ALLOWED`, `NOT_ALLOWED`, `CAN_REQUEST`
   */
  get produceScreenshare() {
    return this.canProduceScreenshare;
  }
  /**
   * The `canProduceScreenshare` shows permissions for sharing screen.
   * There possible values are `ALLOWED`, `NOT_ALLOWED`, `CAN_REQUEST`
   */
  get canProduceScreenshare() {
    var n;
    const r = (n = d(this, N).media.screenshare.canProduce) != null ? n : ce.media.screenshare.canProduce;
    return this.stageEnabled && (d(this, Fe) === "ACCEPTED_TO_JOIN_STAGE" || d(this, Fe) === "ON_STAGE") && r === L.CanRequest ? L.Allowed : this.stageEnabled && (d(this, Fe) === "OFF_STAGE" || d(this, Fe) === "REQUESTED_TO_JOIN_STAGE") && r === L.Allowed ? L.NotAllowed : r;
  }
  /**
   * @deprecated in favour of `canProduceAudio`
   * The `produceAudio` shows permissions for enabling audio.
   * There possible values are `ALLOWED`, `NOT_ALLOWED`, `CAN_REQUEST`
   */
  get produceAudio() {
    return this.canProduceAudio;
  }
  /**
   * The `canProduceAudio` shows permissions for enabling audio.
   * There possible values are `ALLOWED`, `NOT_ALLOWED`, `CAN_REQUEST`
   */
  get canProduceAudio() {
    var n;
    const r = (n = d(this, N).media.audio.canProduce) != null ? n : ce.media.audio.canProduce;
    return this.stageEnabled && (d(this, Fe) === "ACCEPTED_TO_JOIN_STAGE" || d(this, Fe) === "ON_STAGE") && r === L.CanRequest ? L.Allowed : this.stageEnabled && (d(this, Fe) === "OFF_STAGE" || d(this, Fe) === "REQUESTED_TO_JOIN_STAGE") && r === L.Allowed ? L.NotAllowed : r;
  }
  /**
   * The `chatPublic` shows permissions for public chat
   * there are 4 permissions
   * `canSend` - if true, the participant can send chat
   * `text` - if true, the participant can send text
   * `files` - if true, the participant can send files
   */
  get chatPublic() {
    var r, n, i;
    return (i = (n = (r = d(this, N)) == null ? void 0 : r.chat) == null ? void 0 : n.public) != null ? i : ce.chat.public;
  }
  /**
   * The `chatPrivate` shows permissions for public chat
   * there are 4 permissions
   * `canSend` - if true, the participant can send private chat
   * `text` - if true, the participant can send text as private chat
   * `files` - if true, the participant can send files as private chat
   * `canReceive` - (optional) if true, the participant can receive private chat
   */
  get chatPrivate() {
    var r, n, i;
    return (i = (n = (r = d(this, N)) == null ? void 0 : r.chat) == null ? void 0 : n.private) != null ? i : ce.chat.private;
  }
  get chatChannel() {
    var r, n, i;
    return (i = (n = (r = d(this, N)) == null ? void 0 : r.chat) == null ? void 0 : n.channel) != null ? i : ce.chat.channel;
  }
  get chatMessage() {
    var r, n, i;
    return (i = (n = (r = d(this, N)) == null ? void 0 : r.chat) == null ? void 0 : n.message) != null ? i : ce.chat.message;
  }
  get connectedMeetings() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.connectedMeetings) != null ? n : ce == null ? void 0 : ce.connectedMeetings;
  }
  /**
   * The `hiddenParticipant` returns boolean value.
   * If `true`, participant is hidden.
   */
  get hiddenParticipant() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.hiddenParticipant) != null ? n : ce.hiddenParticipant;
  }
  /**
   * The `showParticipantList` returns boolean value.
   * If `true`, participant list can be shown to the participant.
   */
  get showParticipantList() {
    var r;
    return (r = d(this, N).showParticipantList) != null ? r : ce.showParticipantList;
  }
  /**
   * @deprecated in favour of `canChangeParticipantPermissions`
   * The `canChangeParticipantRole` returns boolean value.
   * If `true`, allow changing the participants' role.
   */
  get canChangeParticipantRole() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.canChangeParticipantPermissions) != null ? n : ce.canChangeParticipantPermissions;
  }
  /**
   * The `canChangeParticipantPermissions` returns boolean value.
   * If `true`, allow changing the participants' permissions.
   */
  get canChangeParticipantPermissions() {
    var r, n;
    return (n = (r = d(this, N)) == null ? void 0 : r.canChangeParticipantPermissions) != null ? n : ce.canChangeParticipantPermissions;
  }
  /**
   * @deprecated
   * The `canChangeTheme` returns boolean value.
   * If `true`, the participant can change the meeting theme.
   */
  // eslint-disable-next-line class-methods-use-this
  get canChangeTheme() {
    return !1;
  }
  /**
   * @deprecated in favour of individual production settings
   * The `canPresent` returns boolean value.
   * If `true`, the participant can become a presentor.
   */
  get canPresent() {
    return d(this, N).media.audio.canProduce === L.Allowed || d(this, N).media.video.canProduce === L.Allowed || d(this, N).media.screenshare.canProduce === L.Allowed;
  }
  /**
   * @deprecated Use `acceptStageRequests` instead.
   */
  get acceptPresentRequests() {
    return this.acceptStageRequests;
  }
  get canEditDisplayName() {
    var r;
    return (r = d(this, N).canEditDisplayName) != null ? r : !1;
  }
  /**
   * @deprecated DyteSelf.config.maxScreenShareCount
   */
  // eslint-disable-next-line class-methods-use-this
  get maxScreenShareCount() {
    return 1;
  }
  // eslint-disable-next-line class-methods-use-this
  get isRecorder() {
    return d(this, N).isRecorder;
  }
  get canSpotlight() {
    return d(this, N).canSpotlight;
  }
  /** Livestream */
  get canLivestream() {
    return d(this, N).canLivestream;
  }
  get transcriptionEnabled() {
    return d(this, N).transcriptionEnabled;
  }
  // eslint-disable-next-line class-methods-use-this
  get isV2() {
    return !0;
  }
};
let Go = Vs;
N = new WeakMap(), $n = new WeakMap(), ki = new WeakMap(), Fe = new WeakMap(), Fs = new WeakMap();
const ND = yt(
  _c()
);
var at, rn, Un;
const Bs = class {
  constructor(e) {
    b(this, at, void 0);
    b(this, rn, void 0);
    b(this, Un, void 0);
    if (!e)
      throw new w("Could not load preset.");
    y(this, at, e.config), y(this, rn, e.ui || yt(_c().ui)), y(this, Un, e.permissions.plugins.config);
  }
  static fromResponse(e) {
    return new Bs(e);
  }
  static default() {
    return new Bs(ND);
  }
  /**
   * @deprecated
   * The `setupScreen` represents the setup screen for the meeting.
   */
  get setupScreen() {
    return {
      isEnabled: !0
    };
  }
  /**
   * @deprecated
   * The `waitingRoom` contains the properties to show a layout when
   * the participant is in waiting to join the meeting.
   */
  get waitingRoom() {
    return {
      isEnabled: !0
    };
  }
  /**
   * @deprecated
   * The `controlBar` contains the properties to show the meeting control bar with
   * various action buttons for the meeting.
   * The `elements` key contains the various action buttons.
   */
  get controlBar() {
    return {
      isEnabled: !0,
      elements: {
        chat: !0,
        fullscreen: !0,
        invite: !1,
        layout: !1,
        participants: !0,
        plugins: !0,
        polls: !0,
        reactions: !1,
        screenshare: !0
      }
    };
  }
  /**
   * @deprecated
   * The `header` contains the properties to show the meeting header with various elements.
   * The `elements` key contains the following properties
   * `logo` - string value representing the public URL for the logo
   * `timer` - boolean value suggesting if the timer should be shown
   * `title` - boolean value suggesting if the meeting title should be shown
   * `participantCount` - boolean value suggesting if the participant count shuld be shown
   * `changeLayout` - boolean value suggesting if the participant can change layout
   */
  get header() {
    return {
      isEnabled: !0,
      elements: {
        logo: d(this, rn).designTokens.logo,
        timer: !0,
        title: !0,
        participantCount: !0,
        changeLayout: !1
      }
    };
  }
  /**
   * @deprecated
   * The `pipMode` property returns a boolean value
   * If true, picture-in-picture mode is enabled for the participant.
   */
  get pipMode() {
    return !0;
  }
  /**
   * The `viewType` tells the type of the meeting
   * possible values are: GROUP_CALL| LIVESTREAM | CHAT | AUDIO_ROOM
   */
  get viewType() {
    return d(this, at).viewType;
  }
  /**
   * The `maxVideoStreams` contains the maximum video
   * streams for mobile and desktop
   */
  get maxVideoStreams() {
    return d(this, at).maxVideoStreams;
  }
  /**
   * The `maxScreenShareCount` contains the maximum
   * possible concurrent screen shares
   */
  get maxScreenShareCount() {
    return d(this, at).maxScreenshareCount;
  }
  /**
   * @deprecated in favour of permissions.plugins.config
   */
  get plugins() {
    return [];
  }
  /**
   * The `disabledPlugins` property returns id of all disabled plugins
   */
  get disabledPlugins() {
    return Object.keys(d(this, Un)).filter((e) => d(this, Un)[e].disabled);
  }
  get designTokens() {
    return d(this, rn).designTokens;
  }
  get configDiff() {
    return d(this, rn).configDiff;
  }
  get mediaConstraints() {
    var e, r, n, i, s, a, o, c, u, h, f, g, E, R, I, S, k, O, W, C, te, J, Ee, We;
    return {
      audio: {
        enableStereo: (i = (n = (r = (e = d(this, at)) == null ? void 0 : e.media) == null ? void 0 : r.audio) == null ? void 0 : n.enableStereo) != null ? i : Xe.audio.enableStereo,
        enableHighBitrate: (c = (o = (a = (s = d(this, at)) == null ? void 0 : s.media) == null ? void 0 : a.audio) == null ? void 0 : o.enableHighBitrate) != null ? c : Xe.audio.enableHighBitrate
      },
      video: {
        quality: (g = (f = (h = (u = d(this, at)) == null ? void 0 : u.media) == null ? void 0 : h.video) == null ? void 0 : f.quality) != null ? g : Xe.video.quality,
        frameRate: (S = (I = (R = (E = d(this, at)) == null ? void 0 : E.media) == null ? void 0 : R.video) == null ? void 0 : I.frameRate) != null ? S : Xe.video.frameRate
      },
      screenshare: {
        quality: (C = (W = (O = (k = d(this, at)) == null ? void 0 : k.media) == null ? void 0 : O.screenshare) == null ? void 0 : W.quality) != null ? C : Xe.screenshare.quality,
        frameRate: (We = (Ee = (J = (te = d(this, at)) == null ? void 0 : te.media) == null ? void 0 : J.screenshare) == null ? void 0 : Ee.frameRate) != null ? We : Xe.screenshare.frameRate
      }
    };
  }
  get isV2() {
    return !0;
  }
};
let qo = Bs;
at = new WeakMap(), rn = new WeakMap(), Un = new WeakMap();
function Zr(t) {
  var e, r, n, i, s, a, o, c, u, h, f, g, E;
  return t ? {
    media: {
      audio: {
        enabled: t.audioEnabled,
        trackId: (e = t.audioTrack) == null ? void 0 : e.id,
        permission: "mediaPermissions" in t ? (r = t.mediaPermissions) == null ? void 0 : r.audio : null
      },
      video: {
        enabled: t.videoEnabled,
        trackId: (n = t.videoTrack) == null ? void 0 : n.id,
        permission: "mediaPermissions" in t ? (i = t.mediaPermissions) == null ? void 0 : i.video : null
      },
      screenshare: {
        enabled: t.screenShareEnabled,
        permission: "mediaPermissions" in t ? (s = t.mediaPermissions) == null ? void 0 : s.screenshare : null,
        audio: {
          enabled: (o = (a = t.screenShareTracks) == null ? void 0 : a.audio) == null ? void 0 : o.enabled,
          trackId: (u = (c = t.screenShareTracks) == null ? void 0 : c.audio) == null ? void 0 : u.id
        },
        video: {
          enabled: (f = (h = t.screenShareTracks) == null ? void 0 : h.video) == null ? void 0 : f.enabled,
          trackId: (E = (g = t.screenShareTracks) == null ? void 0 : g.video) == null ? void 0 : E.id
        }
      }
    }
  } : {};
}
const xD = [
  "virtual",
  "emulator",
  "krisp",
  "solstice conference",
  "teams",
  "manycam",
  "blackHole"
];
function nl(t) {
  const e = t.label.toLowerCase();
  return fe._bowser.getOSName() === "macOS" && e.includes("iphone") ? (m.log("isVirtualDevice::ignore_macos_continuity"), !0) : xD.some(
    (r) => e.includes(r)
  );
}
const nr = {
  setItem: (t, e) => {
    try {
      localStorage.setItem(t, e);
    } catch (r) {
      m.error("LocalStorage::setItem::crashed", {
        error: r,
        localStorage: { key: t, value: e }
      });
    }
  },
  getItem: (t) => {
    try {
      return localStorage.getItem(t);
    } catch (e) {
      m.error("LocalStorage::getItem::crashed", {
        error: e,
        localStorage: { key: t }
      });
    }
    return null;
  }
}, LD = (t = 0) => new Promise((e) => setTimeout(e, t)), $D = (t, e, r) => {
  const n = typeof r == "number" ? r : 250, i = t.createMediaStreamSource(e), s = t.createAnalyser();
  s.fftSize = 2048, i.connect(s);
  const a = new Uint8Array(s.fftSize);
  let o = !1;
  setTimeout(() => {
    o = !0;
  }, n);
  function c() {
    return o ? Promise.resolve(!0) : (s.getByteTimeDomainData(a), a.some((u) => u !== 128 && u !== 0) ? Promise.resolve(!1) : LD().then(c));
  }
  return c().then(
    (u) => (i.disconnect(), u),
    (u) => {
      throw i.disconnect(), u;
    }
  );
}, UD = typeof AudioContext != "undefined" ? AudioContext : null;
class od {
  constructor(e) {
    _(this, "_AudioContext");
    _(this, "audioContext");
    _(this, "_audioContextRefContainers");
    const r = Y({ AudioContext: UD }, e);
    Object.defineProperties(this, {
      _AudioContext: {
        value: r.AudioContext
      },
      audioContext: {
        value: null,
        writable: !0
      },
      _audioContextRefContainers: {
        value: /* @__PURE__ */ new Set()
      },
      AudioContextProvider: {
        enumerable: !0,
        value: od
      }
    });
  }
  getOrCreate(e) {
    if (!this._audioContextRefContainers.has(e) && (this._audioContextRefContainers.add(e), this._AudioContext && !this.audioContext))
      try {
        this.audioContext = new this._AudioContext();
      } catch (r) {
      }
    return this.audioContext;
  }
  release(e) {
    this._audioContextRefContainers.has(e) && (this._audioContextRefContainers.delete(e), !this._audioContextRefContainers.size && this.audioContext && (this.audioContext.close(), this.audioContext = null));
  }
}
const il = new od(), FD = 3, VD = 250;
function BD(t) {
  const e = {}, r = il.getOrCreate(
    e
  );
  let n = FD;
  function i() {
    return n -= 1, $D(r, t.srcObject, VD).then((s) => s ? n > 0 ? i() : !0 : !1).catch(() => !0);
  }
  return i().finally(() => {
    il.release(e);
  });
}
function Ds(t) {
  return p(this, null, function* () {
    const e = new Audio(), r = new MediaStream();
    r.addTrack(t), e.srcObject = r;
    let n = !1;
    try {
      const i = e.play();
      i && (yield i), n = yield BD(e), n && m.info("checkIfAudioTrackIsSilent::silence_detected");
    } catch (i) {
      m.error("checkIfAudioTrackIsSilent::failed_to_detect_silence", {
        error: i
      });
    } finally {
      e.pause(), e.remove();
    }
    return n;
  });
}
function GD(t, e) {
  return p(this, null, function* () {
    if (!(t != null && t.length))
      return e;
    const r = new AudioContext(), n = yield Promise.all(
      t == null ? void 0 : t.map((a) => a(r))
    ), i = r.createMediaStreamSource(
      new MediaStream([e])
    ), s = r.createMediaStreamDestination();
    try {
      let a = i;
      for (let o = 0; o < n.length; o += 1)
        a.connect(n[o]), a = n[o];
      a.connect(s);
    } catch (a) {
      return m.error("getTransformedAudioTrack::middleware_execution_failed", {
        error: a
      }), e;
    }
    return s.stream.getAudioTracks()[0];
  });
}
var qD = Object.defineProperty, HD = Object.getOwnPropertyDescriptor, WD = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? HD(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && qD(e, r, i), i;
};
let Ho = class extends Rr {
  /**
   * Allows creation of an instance of BaseMediaHandler with a track.
   * We initialize it with a track when we want to enable streams on init.
   * @param mediaInterface
   * @param mediaTrack
   */
  constructor(e, r, n) {
    super();
    _(this, "constructorName", this.constructor.name);
    // Will be set in case user has explicity used Self.setDevice
    // to set the device.
    _(this, "userSelectedDevice");
    _(this, "mediaInterface");
    _(this, "isNonPreferredDevice");
    _(this, "_mediaTrack");
    _(this, "transformedMediaTrack");
    _(this, "middlewares", []);
    _(this, "currentDevice");
    this.mediaInterface = e, r && this.setMediaTrack(r), this.userSelectedDevice = void 0, this.isNonPreferredDevice = n, this.onTrackEnded = this.onTrackEnded.bind(this), this.onTrackMuted = this.onTrackMuted.bind(this);
  }
  /**
   * NOTE(roerohan): DO NOT use this.#mediaTrack anywhere else,
   * except for these 3 functions below.
   */
  /**
   * Cleans up all acquired tracks.
   */
  disableTrack() {
    var e, r;
    this.removeMediaTrackListeners(), (e = this._mediaTrack) == null || e.stop(), this._mediaTrack = void 0, (r = this.transformedMediaTrack) == null || r.stop(), this.transformedMediaTrack = void 0;
  }
  get mediaTrack() {
    return this._mediaTrack;
  }
  setMediaTrack(e) {
    return p(this, null, function* () {
      const r = (n) => {
        m.error(`${this.constructorName}.setMediaTrack.error`, {
          error: n
        });
      };
      try {
        this.disableTrack();
      } catch (n) {
        r(n);
      }
      this._mediaTrack = yield this.conditionallyChangeTrack(e), yield this.setTransformedTrack();
      try {
        this.addMediaTrackListeners(), yield this.setCurrentDevice();
      } catch (n) {
        r(n);
      }
    });
  }
  /**
   * Represents current audio/video state according to track status
   */
  get trackEnabled() {
    return !!this.mediaTrack && this.mediaTrack.readyState === "live" && this.mediaTrack.enabled;
  }
  /**
   * Mutes track if it's present, DOES NOT STOP IT!
   * Only used for audio streams
   */
  muteTrack() {
    if (!this.mediaTrack) {
      m.warn(
        "BaseMediaHandler.muteTrack Tried muting with no track present"
      );
      return;
    }
    this.transformedMediaTrack && (this.transformedMediaTrack.enabled = !1), this.mediaTrack.enabled = !1;
  }
  /**
   * If track is present and not enabled, we enable it.
   * If no track is present we set one up.
   */
  unmuteTrack() {
    return p(this, null, function* () {
      try {
        this.mediaTrack ? this.mediaTrack.enabled = !0 : yield this.enableTrack(!1);
      } catch (e) {
        throw m.error(`${this.constructorName}.unmuteTrack.error`, {
          error: e
        }), this.disableTrack(), new w("Failed to unmute track");
      }
    });
  }
  /**
   * Called after every track switch, maintains local state of current
   * selected device for this particular stream.
   */
  setCurrentDevice() {
    return p(this, null, function* () {
      var e;
      if (!this.mediaTrack) {
        this.currentDevice = void 0;
        return;
      }
      ((e = this.currentDevice) == null ? void 0 : e.deviceId) !== this.mediaTrack.getSettings().deviceId && (this.currentDevice = yield this.mediaInterface.getDevice(
        this.mediaTrack.getSettings().deviceId
      ));
    });
  }
  /**
   * Middleware Utility
   */
  addMiddleware(e) {
    return p(this, null, function* () {
      if (fe.isWebKitBased() && !ae.hasFeature(oe.ALLOW_SAFARI_MEDIA_MIDDLEWARES))
        return {
          success: !1,
          message: "Middlewares are not supported in this WebKit engine based browser."
        };
      if (this.middlewares.includes(e))
        return {
          success: !1,
          message: "This middleware has been applied, already. Skipping."
        };
      try {
        return this.middlewares.push(e), this.trackEnabled && (yield this.setTransformedTrack()), { success: !0, message: "Successfully added the middleware." };
      } catch (r) {
        return m.error("While adding middleware", { error: r }), this.removeMiddleware(e), { success: !1, message: r == null ? void 0 : r.message };
      }
    });
  }
  removeMiddleware(e) {
    return p(this, null, function* () {
      const r = this.middlewares.indexOf(e, 0);
      if (r > -1)
        try {
          return this.middlewares.splice(r, 1), yield this.setTransformedTrack(!0), {
            success: !0,
            message: "Successfully removed the middleware."
          };
        } catch (n) {
          return m.error("While removing middleware", { error: n }), { success: !1, message: n == null ? void 0 : n.message };
        }
      return {
        success: !1,
        message: "No such middleware was found. Skipping."
      };
    });
  }
  addMediaTrackListeners() {
    var e, r, n;
    this.mediaTrack && (m.info(
      `${this.constructorName}.addMediaTrackListeners for deviceId ${(r = (e = this.mediaTrack) == null ? void 0 : e.getSettings()) == null ? void 0 : r.deviceId} of type ${(n = this.mediaTrack) == null ? void 0 : n.kind}`
    ), this.mediaTrack.addEventListener("ended", this.onTrackEnded), this.mediaTrack.addEventListener("mute", this.onTrackMuted));
  }
  removeMediaTrackListeners() {
    var e, r, n;
    this.mediaTrack && (m.info(
      `${this.constructorName}.removeMediaTrackListeners for deviceId ${(r = (e = this.mediaTrack) == null ? void 0 : e.getSettings()) == null ? void 0 : r.deviceId} of type ${(n = this.mediaTrack) == null ? void 0 : n.kind}`
    ), m.info(`${this.constructorName}.removeMediaTrackListeners`), this.mediaTrack.removeEventListener("ended", this.onTrackEnded), this.mediaTrack.removeEventListener("mute", this.onTrackMuted));
  }
};
Ho = WD([
  $e((t) => {
    throw new w(t.message, "1600");
  })
], Ho);
const Mp = Ho;
var jD = Object.defineProperty, KD = Object.getOwnPropertyDescriptor, cd = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? KD(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && jD(e, r, i), i;
};
const fo = "[Dyte]nonSilentDeviceLabels";
class Ia extends Mp {
  setDevice(e) {
    return p(this, null, function* () {
      if (!e)
        throw m.warn("AudioMediaHandler.setDevice No device received"), new w("No device received!", "1603");
      if (e.kind !== "audioinput")
        throw m.warn("AudioMediaHandler.setDevice Received non audio device"), new w(
          "Non audio device received while setting device!",
          "1603"
        );
      try {
        const r = this.trackEnabled;
        this.userSelectedDevice = e.deviceId, yield this.setMediaTrack(
          yield this.mediaInterface.getAudioTrack(
            !r,
            e.deviceId
          )
        );
      } catch (r) {
        throw m.error("AudioMediaHandler.setDevice.error", {
          error: r
        }), this.disableTrack(), new w(r.message, "1604");
      }
    });
  }
  enableTrack(e) {
    return p(this, null, function* () {
      if (this.trackEnabled) {
        m.warn("AudioMediaHandler.enableTrack Track already enabled!");
        return;
      }
      const r = yield this.mediaInterface.getAudioTrack(
        e,
        this.userSelectedDevice
      );
      yield this.setMediaTrack(r);
    });
  }
  setTransformedTrack(e) {
    return p(this, null, function* () {
      var r;
      if (!e && !((r = this.middlewares) != null && r.length)) {
        this.transformedMediaTrack = this.mediaTrack;
        return;
      }
      try {
        this.transformedMediaTrack = yield GD(
          this.middlewares,
          this.mediaTrack
        ), this.emit("trackChanged");
      } catch (n) {
        m.error("AudioMediaHandler.setTransformedTrack", {
          error: n
        }), this.transformedMediaTrack = this.mediaTrack;
      }
    });
  }
  onTrackEnded() {
    return p(this, null, function* () {
      m.info("AudioMediaHandler.TrackEnded"), this.emit("trackEnded");
      const e = this.mediaTrack.enabled;
      this.disableTrack(), yield this.enableTrack(!e), yield this.setTransformedTrack(), this.emit("trackChanged");
    });
  }
  onTrackMuted() {
    m.info("AudioMediaHandler.TrackMuted"), this.emit("trackMuted");
  }
  conditionallyChangeTrack(e) {
    return p(this, null, function* () {
      var o;
      if (!e || this.userSelectedDevice)
        return e;
      let r = e;
      const n = yield this.mediaInterface.getAudioInputDevices(), i = this.isNonPreferredDevice ? n.filter((c) => c && !this.isNonPreferredDevice(c)) : n;
      if (!(i != null && i.length))
        return r;
      i.find(
        (c) => c.deviceId === e.getSettings().deviceId
      ) || (r.stop(), m.info("localmediahandler::setupstreams::found_audio_non_preferred"), r = yield this.mediaInterface.getAudioTrack(
        !1,
        i[0].deviceId
      ));
      const s = JSON.parse(
        nr.getItem(fo)
      );
      if (s != null && s.devices.some(
        (c) => c.label === r.label
      ))
        return r;
      if (!(yield Ds(r))) {
        const c = (o = s == null ? void 0 : s.devices.concat({
          label: r.label
        })) != null ? o : [{ label: r.label }];
        return nr.setItem(fo, JSON.stringify({
          devices: c
        })), r;
      }
      m.info("AudioMediaHandler.conditionallyChangeTrack.DetectedSilentTrack");
      const a = r.getSettings().deviceId;
      return i.filter((c) => c.deviceId !== a).some((c) => p(this, null, function* () {
        if (r = yield this.mediaInterface.getAudioTrack(
          !1,
          c.deviceId
        ), !(yield Ds(r))) {
          const u = s.devices.concat({
            label: r.label
          });
          return nr.setItem(fo, JSON.stringify({
            devices: u
          })), m.info("AudioMediaHandler.conditionallyChangeTrack.SuccesfullyChangedTrack"), !0;
        }
        return m.info("AudioMediaHandler.conditionallyChangeTrack.AnotherSilentTrackFound"), !1;
      })), r;
    });
  }
}
cd([
  v.trace("AudioMediaHandler.setTransformedTrack")
], Ia.prototype, "setTransformedTrack", 1);
cd([
  v.trace("AudioMediaHandler.onTrackEnded")
], Ia.prototype, "onTrackEnded", 1);
cd([
  v.trace("AudioMediaHandler.conditionallyChangeTrack")
], Ia.prototype, "conditionallyChangeTrack", 1);
let po = class extends Error {
  constructor(r, n, i) {
    super(n);
    _(this, "constraints");
    _(this, "name");
    this.name = r, this.constraints = i;
  }
};
function Pa(t, e, r) {
  if (fe.isChromiumBased()) {
    if (e === "NotAllowedError")
      return r.indexOf("by system") > 0 ? "SYSTEM_DENIED" : t === "screenshare" ? "CANCELED" : "DENIED";
    if (e === "NotReadableError")
      return "COULD_NOT_START";
  } else if (fe.isSafari()) {
    if (e === "NotAllowedError")
      return "DENIED";
  } else if (fe.isFirefox()) {
    if (e === "NotFoundError" || e === "NotReadableError")
      return "SYSTEM_DENIED";
    if (e === "NotAllowedError")
      return "DENIED";
    if (e === "AbortError")
      return "COULD_NOT_START";
  }
  return "COULD_NOT_START";
}
class JD {
  constructor() {
    _(this, "permissions");
    this.permissions = {
      audio: "NOT_REQUESTED",
      video: "NOT_REQUESTED",
      screenshare: "NOT_REQUESTED"
    };
  }
  getAudioInputDevices() {
    return p(this, null, function* () {
      return (yield this.getAvailableDevices()).filter((r) => r.kind === "audioinput");
    });
  }
  getVideoInputDevices() {
    return p(this, null, function* () {
      return (yield this.getAvailableDevices()).filter((r) => r.kind === "videoinput");
    });
  }
  getAudioOutputDevices() {
    return p(this, null, function* () {
      return (yield this.getAvailableDevices()).filter((r) => r.kind === "audiooutput");
    });
  }
}
var YD = Object.defineProperty, zD = Object.getOwnPropertyDescriptor, xt = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? zD(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && YD(e, r, i), i;
}, nn, Fn, $t, yl;
let pt = (yl = class extends JD {
  constructor(e) {
    super();
    /**
     * Only used for recognising device change
     */
    b(this, nn, void 0);
    b(this, Fn, void 0);
    b(this, $t, void 0);
    y(this, $t, new Op(e)), y(this, Fn, new AbortController()), this.getAvailableDevices();
  }
  get constraintsBuilder() {
    return d(this, $t);
  }
  destruct() {
    return p(this, null, function* () {
      var e;
      (e = d(this, Fn)) == null || e.abort();
    });
  }
  handlePermissionErrors(e, r) {
    const n = Pa(e, r.name, r.message);
    this.permissions[e] = n, D.emit(P.MEDIA_PERMISSION_ERROR, {
      message: n,
      constraints: r.constraints,
      kind: e
    });
  }
  getAudioAndVideoTrack() {
    return p(this, null, function* () {
      const e = {
        audio: d(this, $t).getAudioConstraints().audio,
        video: d(this, $t).getVideoConstraints().video
      };
      try {
        m.info("getUserMediaWithoutTimeout::requesting_user_media", {
          constraints: JSON.stringify(e)
        });
        const r = yield navigator.mediaDevices.getUserMedia(
          e
        );
        m.info("getUserMediaWithoutTimeout::received_user_media", {
          constraints: JSON.stringify(e)
        });
        const n = r.getAudioTracks()[0];
        let i = r.getVideoTracks()[0];
        if (this.permissions.audio = "ACCEPTED", this.permissions.video = "ACCEPTED", ae.hasFeature(oe.OBS_QUALITY) && i.label.includes("OBS Virtual")) {
          const o = (yield this.getVideoInputDevices()).find((c) => c.label.includes("OBS Virtual"));
          i = yield this.getVideoTrack(o.deviceId);
        }
        return D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.audio,
          kind: "audio"
        }), D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.video,
          kind: "video"
        }), { audioTrack: n, videoTrack: i };
      } catch (r) {
        throw m.error("WebMediaInterface.getAudioAndVideoTrack", { error: r }), new w("Couldnt fetch audio and video track");
      }
    });
  }
  getAudioTrack(e, r) {
    return p(this, null, function* () {
      const n = d(this, $t).getAudioConstraints(r);
      try {
        m.info("getUserMediaWithoutTimeout::requesting_user_media", {
          constraints: JSON.stringify(n)
        });
        const i = (yield navigator.mediaDevices.getUserMedia(n)).getAudioTracks()[0];
        return m.info("getUserMediaWithoutTimeout::received_user_media", {
          constraints: JSON.stringify(n)
        }), i.enabled = !e, this.permissions.audio = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.audio,
          kind: "audio"
        }), i;
      } catch (i) {
        throw this.handlePermissionErrors(
          "audio",
          new po(i.name, i.message, n)
        ), new w(i.message, "1601");
      }
    });
  }
  getScreenShareTracks() {
    return p(this, null, function* () {
      const e = d(this, $t).getScreenShareConstraints();
      try {
        m.info("getDisplayMediaWithoutTimeout::requesting_display_media", {
          constraints: JSON.stringify(e)
        });
        const r = yield navigator.mediaDevices.getDisplayMedia(
          e
        );
        return m.info("getDisplayMediaWithoutTimeout::received_display_media", {
          constraints: JSON.stringify(e)
        }), this.permissions.screenshare = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.screenshare,
          kind: "screenshare"
        }), {
          audioTrack: r.getAudioTracks()[0],
          videoTrack: r.getVideoTracks()[0]
        };
      } catch (r) {
        throw this.handlePermissionErrors(
          "screenshare",
          new po(r.name, r.message, e)
        ), m.error(
          "WebMediaInterface.getScreenShareTracks Error while fetching screenshare tracks",
          { error: r }
        ), new w("Couldnt fetch screen share tracks");
      }
    });
  }
  getCurrentDeviceLabel(e) {
    return p(this, null, function* () {
      const r = yield this.getDevice(e || "default");
      return r == null ? void 0 : r.label;
    });
  }
  getVideoTrack(e) {
    return p(this, null, function* () {
      const r = ae.hasFeature(oe.OBS_QUALITY), n = yield this.getCurrentDeviceLabel(e), i = n && n.includes("OBS Virtual"), { video: s } = d(this, $t).getVideoConstraints(e);
      let a = {};
      r && i && typeof s != "boolean" ? a = {
        deviceId: s.deviceId
      } : a = s;
      try {
        const o = (yield navigator.mediaDevices.getUserMedia({ video: a })).getVideoTracks()[0];
        if (r && i && typeof s != "boolean" && typeof s.width == "object") {
          const { width: c, height: u } = o.getSettings(), { ideal: h } = s.width;
          o.applyConstraints({
            width: { ideal: h },
            height: { ideal: Math.floor(u * h / c) },
            frameRate: s.frameRate
          });
        }
        return this.permissions.video = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.video,
          kind: "video"
        }), o;
      } catch (o) {
        throw this.handlePermissionErrors(
          "video",
          new po(o.name, o.message, a)
        ), m.error(
          "WebMediaInterface.getVideoTrack Error while fetching video track",
          { error: o }
        ), new w("Couldnt fetch video track");
      }
    });
  }
  getAvailableDevices() {
    return p(this, null, function* () {
      try {
        return yield navigator.mediaDevices.enumerateDevices();
      } catch (e) {
        throw m.error("enumerate_devices_failed", {
          error: e
        }), new w("Failed to get available devices");
      }
    });
  }
  getAvailableDevicesByKind(e) {
    return p(this, null, function* () {
      try {
        return (yield navigator.mediaDevices.enumerateDevices()).filter(
          ({ kind: r }) => e === r
        );
      } catch (r) {
        throw m.error("enumerate_devices_failed", {
          error: r
        }), new w("Failed to get available devices by kind");
      }
    });
  }
  getDevice(e) {
    return p(this, null, function* () {
      try {
        return (yield navigator.mediaDevices.enumerateDevices()).filter((n) => n.deviceId === e)[0];
      } catch (r) {
        throw m.error("enumerate_devices_failed", {
          error: r
        }), new w("Failed to get device");
      }
    });
  }
  onDeviceChange(e) {
    return p(this, null, function* () {
      var r;
      if (!((r = d(this, nn)) != null && r.length)) {
        const n = yield this.getAvailableDevices();
        n != null && n.length && (y(this, nn, n), e(null, {
          added: n,
          removed: []
        }, !0));
      }
      fe.supportsDeviceChangeEvent() && navigator.mediaDevices.addEventListener(
        "devicechange",
        va((n) => p(this, null, function* () {
          var u, h;
          const i = d(this, nn), s = new Set(
            i.map((f) => f.deviceId)
          ), a = yield this.getAvailableDevices(), o = new Set(
            a.map((f) => f.deviceId)
          ), c = {
            added: a.filter(
              (f) => !s.has(f.deviceId)
            ),
            removed: i.filter(
              (f) => !o.has(f.deviceId)
            )
          };
          y(this, nn, a), ((u = c.added) != null && u.length || (h = c.removed) != null && h.length) && e(n, c, !1);
        }), 100),
        { signal: d(this, Fn).signal }
      );
    });
  }
}, nn = new WeakMap(), Fn = new WeakMap(), $t = new WeakMap(), yl);
xt([
  v.trace("WebMediaInterface.destruct")
], pt.prototype, "destruct", 1);
xt([
  v.trace("WebMediaInterface.handlePermissionErrors")
], pt.prototype, "handlePermissionErrors", 1);
xt([
  v.trace("WebMediaInterface.getAudioAndVideoTrack")
], pt.prototype, "getAudioAndVideoTrack", 1);
xt([
  v.trace("WebMediaInterface.getAudioTrack")
], pt.prototype, "getAudioTrack", 1);
xt([
  v.trace("WebMediaInterface.getScreenShareTracks")
], pt.prototype, "getScreenShareTracks", 1);
xt([
  v.trace("WebMediaInterface.getVideoTrack")
], pt.prototype, "getVideoTrack", 1);
xt([
  v.trace("WebMediaInterface.getAvailableDevices")
], pt.prototype, "getAvailableDevices", 1);
xt([
  v.trace("WebMediaInterface.getAvailableDevicesByKind")
], pt.prototype, "getAvailableDevicesByKind", 1);
xt([
  v.trace("WebMediaInterface.getDevice")
], pt.prototype, "getDevice", 1);
xt([
  v.trace("WebMediaInterface.onDeviceChange")
], pt.prototype, "onDeviceChange", 1);
pt = xt([
  $e((t) => {
    throw new w(t.message, "1600");
  })
], pt);
const dd = pt;
var Vn;
class XD {
  constructor(e) {
    b(this, Vn, void 0);
    _(this, "currentDevice");
    y(this, Vn, e);
  }
  setupSpeaker(e) {
    return p(this, null, function* () {
      var n, i;
      if (!(d(this, Vn) instanceof dd))
        return;
      let r = e;
      if (e || ([r] = yield d(this, Vn).getAvailableDevicesByKind(
        "audiooutput"
      )), !r)
        throw new w("No speaker found");
      ((n = this.currentDevice) == null ? void 0 : n.deviceId) !== r.deviceId && ((i = this.currentDevice) != null || (this.currentDevice = r), document.querySelectorAll("audio").forEach((s) => p(this, null, function* () {
        if (typeof s.sinkId != "undefined" && this.currentDevice.deviceId && s.sinkId !== this.currentDevice.deviceId)
          try {
            yield s.setSinkId(this.currentDevice.deviceId);
          } catch (a) {
          }
      })));
    });
  }
}
Vn = new WeakMap();
class QD extends Rr {
  constructor(r) {
    super();
    _(this, "mediaInterface");
    _(this, "audioMediaTrack");
    _(this, "videoMediaTrack");
    this.mediaInterface = r;
  }
  get trackEnabled() {
    return !!this.videoMediaTrack;
  }
  enableScreenShare() {
    return p(this, null, function* () {
      var i, s;
      const { audioTrack: r, videoTrack: n } = yield this.mediaInterface.getScreenShareTracks();
      this.audioMediaTrack = r, this.videoMediaTrack = n, this.addMediaTrackListeners(), ((s = (i = this.mediaInterface) == null ? void 0 : i.permissions) == null ? void 0 : s.screenshare) !== "ACCEPTED" && this.mediaInterface.permissions && (this.mediaInterface.permissions.screenshare = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
        message: this.mediaInterface.permissions.screenshare,
        kind: "screenshare"
      }));
    });
  }
  disableScreenShare() {
    var r, n;
    this.removeMediaTrackListeners(), (r = this.audioMediaTrack) == null || r.stop(), (n = this.videoMediaTrack) == null || n.stop(), this.videoMediaTrack = void 0, this.audioMediaTrack = void 0;
  }
  updateConstraints(r) {
    return p(this, null, function* () {
      if (!this.videoMediaTrack)
        throw new w("No media track enabled!");
      const n = this.mediaInterface;
      if (!n.constraintsBuilder)
        throw new w("update constraints not supported for non web clients", "1100");
      try {
        this.videoMediaTrack.applyConstraints(
          n.constraintsBuilder.getUpdatedVideoConstraints(r)
        ), this.addMediaTrackListeners();
      } catch (i) {
        m.error("ScreenShareHandler.updateConstraints.error", {
          error: i
        });
      }
    });
  }
  addMediaTrackListeners() {
    var r;
    (r = this.videoMediaTrack) == null || r.addEventListener(
      "ended",
      this.onTrackEnded.bind(this)
    );
  }
  removeMediaTrackListeners() {
    var r;
    (r = this.videoMediaTrack) == null || r.removeEventListener("ended", this.onTrackEnded);
  }
  onTrackEnded() {
    this.emit("trackEnded");
  }
}
var sn;
class ZD {
  constructor() {
    b(this, sn, void 0);
  }
  terminateMiddlewareWebWorker() {
    if (d(this, sn))
      try {
        Es.clearInterval(d(this, sn)), y(this, sn, void 0);
      } catch (e) {
        m.debug("WorkerTimers::terminateMiddlewareWebWorker::failed");
      }
  }
  getTransformedVideoTrack(e, r) {
    return p(this, null, function* () {
      if (!(e != null && e.length))
        return r;
      const n = yield Promise.all(
        e == null ? void 0 : e.map((h) => h())
      ), i = new MediaStream();
      i.addTrack(r);
      const s = document.createElement("canvas"), a = s.getContext("2d"), o = document.createElement("video");
      o.srcObject = i, o.autoplay = !0, this.terminateMiddlewareWebWorker();
      const c = () => p(this, null, function* () {
        if (r.enabled === !1 || r.readyState === "ended") {
          this.terminateMiddlewareWebWorker(), o.remove(), s.remove();
          return;
        }
        try {
          a.drawImage(o, 0, 0);
          for (let h = 0; h < n.length; h += 1)
            yield n[h](
              s,
              a
            );
        } catch (h) {
          m.error(
            "getTransformedVideoTrack::middleware_execution_failed",
            { error: h }
          );
        }
      });
      try {
        o.play();
      } catch (h) {
      }
      return o.addEventListener(
        "play",
        () => {
          s.width = o.width || r.getSettings().width, s.height = o.width || r.getSettings().height, y(this, sn, Es.setInterval(
            c,
            50
          ));
        },
        !1
      ), s.captureStream().getVideoTracks()[0];
    });
  }
}
sn = new WeakMap();
var eO = Object.defineProperty, tO = Object.getOwnPropertyDescriptor, ud = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? tO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && eO(e, r, i), i;
}, Bn;
class Da extends Mp {
  constructor(r, n, i) {
    super(r, n, i);
    b(this, Bn, void 0);
    y(this, Bn, new ZD());
  }
  setDevice(r) {
    return p(this, null, function* () {
      if (!r)
        throw m.warn("VideoMediaHandler.setDevice No device received"), new w("No device received!");
      if (r.kind !== "videoinput")
        throw m.warn("VideoMediaHandler.setDevice Received non video device", {
          devices: [r]
        }), new w(
          "Non video device received while setting video device!"
        );
      if (this.userSelectedDevice = r.deviceId, !(this.mediaTrack && this.mediaTrack.enabled)) {
        m.warn(
          "VideoMediaHandler.setDevice Tried switching device with video disabled",
          {
            devices: [r]
          }
        ), this.currentDevice = r;
        return;
      }
      try {
        yield this.setMediaTrack(
          yield this.mediaInterface.getVideoTrack(this.userSelectedDevice)
        );
      } catch (n) {
        throw m.error("VideoMediaHandler.setDevice.error", {
          error: n
        }), this.disableTrack(), new w("Failed to change device");
      }
    });
  }
  enableTrack() {
    return p(this, null, function* () {
      if (this.trackEnabled) {
        m.warn("VideoMediaHandler.enableTrack Track already enabled!");
        return;
      }
      yield this.setMediaTrack(
        yield this.mediaInterface.getVideoTrack(this.userSelectedDevice)
      );
    });
  }
  setTransformedTrack(r) {
    return p(this, null, function* () {
      var n;
      if (!r && !((n = this.middlewares) != null && n.length)) {
        this.transformedMediaTrack = this.mediaTrack;
        return;
      }
      try {
        this.transformedMediaTrack = yield d(this, Bn).getTransformedVideoTrack(
          this.middlewares,
          this.mediaTrack
        ), this.emit("trackChanged");
      } catch (i) {
        m.error("VideoMediaHandler.setTransformedTrack", {
          error: i
        }), this.transformedMediaTrack = this.mediaTrack;
      }
    });
  }
  updateConstraints(r) {
    return p(this, null, function* () {
      if (!this._mediaTrack)
        throw new w("No media track enabled!");
      const n = this.mediaInterface;
      if (!n.constraintsBuilder)
        throw new w("update constraints not supported for non web clients", "1100");
      try {
        this._mediaTrack.applyConstraints(
          n.constraintsBuilder.getUpdatedVideoConstraints(r)
        ), yield this.setTransformedTrack(), this.addMediaTrackListeners(), yield this.setCurrentDevice();
      } catch (i) {
        m.error("VideoMediaHandler.updateConstraints.error", {
          error: i
        });
      }
    });
  }
  terminateMiddlewareWebWorker() {
    d(this, Bn).terminateMiddlewareWebWorker();
  }
  onTrackEnded() {
    return p(this, null, function* () {
      m.info("VideoMediaHandler.TrackEnded"), this.disableTrack(), this.emit("trackEnded");
    });
  }
  onTrackMuted() {
    m.info("VideoMediaHandler.TrackMuted"), this.emit("trackMuted");
  }
  conditionallyChangeTrack(r) {
    return p(this, null, function* () {
      if (!r || this.userSelectedDevice)
        return r;
      let n = r;
      const i = yield this.mediaInterface.getVideoInputDevices(), s = this.isNonPreferredDevice ? i.filter((a) => !this.isNonPreferredDevice(a)) : i;
      return !(s != null && s.length) || window.FAST_DYTE || s.find(
        (a) => a.deviceId === r.getSettings().deviceId
      ) || (n.stop(), m.info("localmediahandler::setupstreams::found_video_non_preferred"), n = yield this.mediaInterface.getVideoTrack(
        s[0].deviceId
      )), n;
    });
  }
}
Bn = new WeakMap();
ud([
  v.trace("VideoMediaHandler.setTransformedTrack")
], Da.prototype, "setTransformedTrack", 1);
ud([
  v.trace("VideoMediaHandler.onTrackEnded")
], Da.prototype, "onTrackEnded", 1);
ud([
  v.trace("VideoMediaHandler.conditionallyChangeTrack")
], Da.prototype, "conditionallyChangeTrack", 1);
var rO = Object.defineProperty, nO = Object.getOwnPropertyDescriptor, gt = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? nO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && rO(e, r, i), i;
}, ke, Ne, Ie, Mr, Tt, Ci;
class nt extends Rr {
  constructor(r, n = nl, i = !0) {
    super();
    b(this, ke, void 0);
    b(this, Ne, void 0);
    b(this, Ie, void 0);
    b(this, Mr, void 0);
    b(this, Tt, void 0);
    b(this, Ci, void 0);
    _(this, "audioUpdateInProgress");
    _(this, "videoUpdateInProgress");
    this.audioUpdateInProgress = !1, this.videoUpdateInProgress = !1, y(this, ke, new dd(r)), y(this, Ne, new Ia(
      d(this, ke),
      void 0,
      n
    )), y(this, Ie, new Da(
      d(this, ke),
      void 0,
      n
    )), y(this, Tt, new QD(
      d(this, ke)
    )), y(this, Mr, new XD(
      d(this, ke)
    )), y(this, Ci, i), d(this, Ne).on("trackMuted", this.onAudioTrackMuted.bind(this)), d(this, Ne).on(
      "trackChanged",
      this.onAudioTrackChanged.bind(this)
    ), d(this, Ie).on(
      "trackChanged",
      this.onVideoTrackChanged.bind(this)
    ), d(this, Ie).on("trackEnded", this.onVideoTrackEnded.bind(this)), d(this, Tt).on(
      "trackEnded",
      this.onScreenShareEnded.bind(this)
    ), this.onVisibilityChange = this.onVisibilityChange.bind(this), document.addEventListener("visibilitychange", this.onVisibilityChange);
  }
  // eslint-disable-next-line class-methods-use-this
  onVisibilityChange() {
  }
  // eslint-disable-next-line class-methods-use-this
  repopulateAvailableDevices() {
    return p(this, null, function* () {
      return !0;
    });
  }
  setupStreams(i) {
    return p(this, arguments, function* ({
      audio: r,
      video: n
    }) {
      let s, a;
      if (r && n)
        try {
          const o = yield d(this, ke).getAudioAndVideoTrack();
          s = o.audioTrack, a = o.videoTrack;
        } catch (o) {
          m.error(
            "LocalMediaHandler::init::Failed to get audio video tracks",
            {
              error: o
            }
          );
        }
      if (!s && r)
        try {
          s = yield d(this, ke).getAudioTrack(!1);
        } catch (o) {
          m.error("LocalMediaHandler::init::Failed to get audio track", {
            error: o
          });
        }
      if (!a && n)
        try {
          a = yield d(this, ke).getVideoTrack();
        } catch (o) {
          m.error("LocalMediaHandler::init::Failed to get video track", {
            error: o
          });
        }
      yield d(this, Ne).setMediaTrack(s), yield d(this, Ie).setMediaTrack(a);
      try {
        yield d(this, Mr).setupSpeaker();
      } catch (o) {
      }
      d(this, ke).onDeviceChange(
        (o, c, u) => {
          this.onDeviceChange(c, u);
        }
      );
    });
  }
  getCurrentDevices() {
    return {
      audio: d(this, Ne).currentDevice,
      video: d(this, Ie).currentDevice,
      speaker: d(this, Mr).currentDevice
    };
  }
  get permissions() {
    return d(this, ke).permissions;
  }
  getAllDevices() {
    return d(this, ke).getAvailableDevices();
  }
  getDeviceById(r, n) {
    return d(this, ke).getDevice(r);
  }
  /**
   * Audio Input Handler
   */
  onAudioTrackMuted() {
    this.emit("AUDIO_TRACK_SILENT");
  }
  onAudioTrackChanged() {
    this.emit("AUDIO_TRACK_CHANGE");
  }
  get rawAudioTrack() {
    return d(this, Ne).mediaTrack;
  }
  get audioTrack() {
    return d(this, Ne).transformedMediaTrack;
  }
  get audioEnabled() {
    return d(this, Ne).trackEnabled;
  }
  enableAudio() {
    return p(this, null, function* () {
      if (!this.audioUpdateInProgress) {
        this.audioUpdateInProgress = !0;
        try {
          yield d(this, Ne).unmuteTrack();
        } finally {
          this.audioUpdateInProgress = !1;
        }
      }
    });
  }
  disableAudio() {
    d(this, Ne).muteTrack();
  }
  getAudioDevices() {
    return d(this, ke).getAudioInputDevices();
  }
  setAudioDevice(r) {
    return p(this, null, function* () {
      yield d(this, Ne).setDevice(r), this.emit("AUDIO_TRACK_CHANGE"), this.emit("DEVICE_CHANGE", { device: r });
    });
  }
  /**
   * Audio Output Handler
   */
  setupSpeaker() {
    return d(this, Mr).setupSpeaker();
  }
  setSpeakerDevice(r) {
    return p(this, null, function* () {
      yield d(this, Mr).setupSpeaker(r), this.emit("DEVICE_CHANGE", { device: r });
    });
  }
  /**
   * Video Handler
   */
  onVideoTrackChanged() {
    this.emit("VIDEO_TRACK_CHANGE");
  }
  onVideoTrackEnded() {
    this.emit("VIDEO_TRACK_CHANGE");
  }
  get rawVideoTrack() {
    return d(this, Ie).mediaTrack;
  }
  get videoTrack() {
    return d(this, Ie).transformedMediaTrack;
  }
  get videoEnabled() {
    return d(this, Ie).trackEnabled;
  }
  enableVideo() {
    return p(this, null, function* () {
      if (!this.videoUpdateInProgress) {
        this.videoUpdateInProgress = !0;
        try {
          yield d(this, Ie).unmuteTrack();
        } finally {
          this.videoUpdateInProgress = !1;
        }
      }
    });
  }
  disableVideo() {
    d(this, Ie).disableTrack();
  }
  getVideoDevices() {
    return d(this, ke).getVideoInputDevices();
  }
  setVideoDevice(r) {
    return p(this, null, function* () {
      yield d(this, Ie).setDevice(r), this.emit("VIDEO_TRACK_CHANGE"), this.emit("DEVICE_CHANGE", { device: r });
    });
  }
  updateVideoConstraints(r) {
    return p(this, null, function* () {
      yield d(this, Ie).updateConstraints(r);
    });
  }
  /**
   * Screen Share Handler
   */
  onScreenShareEnded() {
    this.emit("SCREENSHARE_ENDED");
  }
  get screenShareTracks() {
    return {
      audio: d(this, Tt).audioMediaTrack,
      video: d(this, Tt).videoMediaTrack
    };
  }
  get screenShareEnabled() {
    return d(this, Tt).trackEnabled;
  }
  enableScreenShare() {
    return p(this, null, function* () {
      yield d(this, Tt).enableScreenShare();
    });
  }
  disableScreenShare() {
    return p(this, null, function* () {
      d(this, Tt).disableScreenShare();
    });
  }
  updateScreenshareConstraints(r) {
    return p(this, null, function* () {
      yield d(this, Tt).updateConstraints(r);
    });
  }
  getSpeakerDevices() {
    return d(this, ke).getAudioOutputDevices();
  }
  /**
   * Middleware Utility
   */
  addAudioMiddleware(r) {
    return d(this, Ne).addMiddleware(r);
  }
  removeAudioMiddleware(r) {
    return d(this, Ne).removeMiddleware(r);
  }
  addVideoMiddleware(r) {
    return d(this, Ie).addMiddleware(r);
  }
  removeVideoMiddleware(r) {
    return d(this, Ie).removeMiddleware(r);
  }
  destruct() {
    d(this, Ne).disableTrack(), d(this, Ie).disableTrack(), d(this, Ie).terminateMiddlewareWebWorker(), d(this, Tt).disableScreenShare(), d(this, ke).destruct();
  }
  onDeviceChange(r, n) {
    return p(this, null, function* () {
      var s;
      const i = yield d(this, ke).getAvailableDevices();
      m.info("repopulated_full_device_list", {
        devices: JSON.stringify(i)
      }), this.emit("DEVICE_LIST_UPDATED", r), !(n || !d(this, Ci)) && ((s = r == null ? void 0 : r.added) == null || s.forEach((a) => p(this, null, function* () {
        var o;
        a && !nl(a) && (a.kind === "audioinput" && ((o = this.audioTrack) == null ? void 0 : o.enabled) === !0 ? yield this.setAudioDevice(a) : a.kind === "audiooutput" && (yield this.setSpeakerDevice(a)));
      })));
    });
  }
  /**
   * Backward Compatibility
   */
  removeAllTracks() {
    this.destruct();
  }
  removeDocumentEventListeners() {
    return p(this, null, function* () {
      document.removeEventListener("visibilitychange", this.onVisibilityChange);
    });
  }
}
ke = new WeakMap(), Ne = new WeakMap(), Ie = new WeakMap(), Mr = new WeakMap(), Tt = new WeakMap(), Ci = new WeakMap();
gt([
  v.trace("MediaHandler.setupStreams")
], nt.prototype, "setupStreams", 1);
gt([
  v.trace("MediaHandler.enableAudio")
], nt.prototype, "enableAudio", 1);
gt([
  v.trace("MediaHandler.disableAudio")
], nt.prototype, "disableAudio", 1);
gt([
  v.trace("MediaHandler.setAudioDevice")
], nt.prototype, "setAudioDevice", 1);
gt([
  v.trace("MediaHandler.enableVideo")
], nt.prototype, "enableVideo", 1);
gt([
  v.trace("MediaHandler.disableVideo")
], nt.prototype, "disableVideo", 1);
gt([
  v.trace("MediaHandler.setVideoDevice")
], nt.prototype, "setVideoDevice", 1);
gt([
  v.trace("MediaHandler.updateVideoConstraints")
], nt.prototype, "updateVideoConstraints", 1);
gt([
  v.trace("MediaHandler.enableScreenShare")
], nt.prototype, "enableScreenShare", 1);
gt([
  v.trace("MediaHandler.disableScreenShare")
], nt.prototype, "disableScreenShare", 1);
gt([
  v.trace("MediaHandler.updateScreenshareConstraints")
], nt.prototype, "updateScreenshareConstraints", 1);
gt([
  v.trace("MediaHandler.destruct")
], nt.prototype, "destruct", 1);
gt([
  v.trace("MediaHandler.onDeviceChange")
], nt.prototype, "onDeviceChange", 1);
class iO extends Error {
  constructor(r, n) {
    super(r);
    _(this, "code");
    this.code = n;
  }
}
class On extends Error {
  constructor(r, n, i) {
    super(n);
    _(this, "constraints");
    _(this, "name");
    this.name = r, this.constraints = i;
  }
}
var sO = Object.defineProperty, aO = Object.getOwnPropertyDescriptor, Sr = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? aO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && sO(e, r, i), i;
};
const mo = {
  port: void 0
}, oO = [
  "virtual",
  "emulator",
  "krisp",
  "solstice conference",
  "teams",
  "manycam",
  "blackHole"
];
function Qr(t) {
  const e = t.label.toLowerCase();
  return fe._bowser.getOSName() === "macOS" && e.includes("iphone") ? (m.log("isVirtualDevice::ignore_macos_continuity"), !0) : oO.some(
    (r) => e.includes(r)
  );
}
var ar, Gn, Al;
const Cr = (Al = class {
  constructor(t) {
    b(this, ar, void 0);
    b(this, Gn, void 0);
    y(this, ar, t), y(this, Gn, new AbortController());
  }
  static init() {
    return p(this, null, function* () {
      let t = [];
      return Cr.isDeviceListAvailable() ? (t = yield Cr.enumerateDevices(), m.info("initial_full_device_list", {
        devices: JSON.stringify(t)
      })) : m.error(
        "UnsupportedMediaAPI::navigator.mediaDevices.enumerateDevices",
        {
          debuggingHint: "Try checking meetingMetadata.visitedUrl. It should be running on localhost/127.0.0.1 or HTTPS, if not, there would be issues."
        }
      ), new Cr(t);
    });
  }
  destruct() {
    return p(this, null, function* () {
      var t;
      (t = d(this, Gn)) == null || t.abort();
    });
  }
  static isDeviceListAvailable() {
    return !!(navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);
  }
  static enumerateDevices() {
    try {
      return navigator.mediaDevices.enumerateDevices();
    } catch (t) {
      return m.error("enumerate_devices_failed", {
        error: t
      }), Promise.resolve([]);
    }
  }
  static getAudioConstraints(t) {
    const e = {}, {
      disableAP: r = !1,
      disableAEC: n = !1,
      disableNS: i = !1,
      disableAGC: s = !1,
      disableHPF: a = !1
    } = t.audioOptions || {};
    if (fe.isFirefox() || fe.isWebKitBased())
      e.audio = {
        deviceId: t.audioDeviceId,
        autoGainControl: !s && !r,
        echoCancellation: !n && !r,
        noiseSuppression: !i && !r
      };
    else {
      if (typeof e.audio == "boolean")
        return e;
      e.audio = {}, e.audio.optional = [
        t.audioDeviceId ? { sourceId: t.audioDeviceId } : { sourceId: "default" },
        { echoCancellation: !n && !r },
        { googEchoCancellation: !n && !r },
        { googAutoGainControl: !s && !r },
        { googNoiseSuppression: !i && !r },
        { googHighpassFilter: !a && !r },
        { googNoiseSuppression2: !i && !r },
        { googEchoCancellation2: !n && !r },
        { googAutoGainControl2: !s && !r }
      ];
    }
    return e;
  }
  static getVideoConstraints(t) {
    const e = {}, {
      videoDeviceId: r,
      videoTrackConstraints: n,
      facingMode: i = "user",
      frameRate: s = { ideal: 24, max: 30 }
    } = t;
    return e.video = n || Vo.vga, typeof e.video == "boolean" || (r && (e.video.deviceId = { exact: r }), e.video.facingMode = i, e.video.frameRate = s), e;
  }
  static getUserMediaWithTimeout() {
    return p(this, arguments, function* (t = {}, e = 0) {
      try {
        if (m.info("getUserMediaWithTimeout::requesting_user_media", {
          timeout: e,
          constraints: JSON.stringify(t)
        }), !e) {
          const n = yield navigator.mediaDevices.getUserMedia(
            t
          );
          return m.info("getUserMediaWithTimeout::received_user_media", {
            timeout: e,
            constraints: JSON.stringify(t)
          }), n;
        }
        const r = yield Promise.race([
          navigator.mediaDevices.getUserMedia(t),
          new Promise((n, i) => {
            setTimeout(
              () => i(
                new iO(
                  "Get user media timed out",
                  "ERR_GUM_TIMEOUT"
                )
              ),
              e
            );
          })
        ]);
        return m.info("getUserMediaWithTimeout::received_user_media", {
          timeout: e,
          constraints: JSON.stringify(t)
        }), r;
      } catch (r) {
        throw m.error(
          "getUserMediaWithTimeout::failed_to_access_local_media",
          {
            error: r,
            constraints: JSON.stringify(t)
          }
        ), m.error("Failed to get access to local media.", {
          error: r,
          constraints: JSON.stringify(t)
        }), new On(r.name, r.message, t);
      }
    });
  }
  static getAudioTrack(t) {
    return p(this, null, function* () {
      return (yield Cr.getUserMediaWithTimeout(
        t
      )).getAudioTracks()[0];
    });
  }
  static getVideoTrack(t) {
    return p(this, null, function* () {
      return (yield Cr.getUserMediaWithTimeout(
        t
      )).getVideoTracks()[0];
    });
  }
  static getScreenShareTracks(t) {
    return p(this, null, function* () {
      var s, a;
      let e = ae.hasFeature(
        oe.EXTENSION_HACK
      ), r = null;
      if (e)
        try {
          mo.port = window.chrome.runtime.connect(
            "nkeimhogjdpnpccoofpliimaahmaaome",
            { name: "chooseDesktopMedia" }
          );
        } catch (o) {
          v.addLogInCurrentSpan("error", "Extension connect error"), e = !1;
        }
      e && (r = yield new Promise((o) => {
        const c = setTimeout(() => o(void 0), 12e3);
        mo.port.onMessage.addListener((u) => p(this, null, function* () {
          if (u.value.streamId) {
            const { streamId: h } = u.value;
            clearTimeout(c), o(h);
          }
        })), mo.port.postMessage({
          method: "chooseDesktopMedia",
          sources: ["screen"]
        });
      }));
      let n;
      return r ? (v.addLogInCurrentSpan(
        "error",
        "Acquiring extension screenshare track"
      ), n = yield navigator.mediaDevices.getUserMedia({
        audio: !1,
        video: {
          mandatory: {
            maxWidth: 1920,
            maxHeight: 1080,
            chromeMediaSource: "desktop",
            chromeMediaSourceId: r
          },
          optional: [
            {
              maxFrameRate: parseInt(
                (s = ae.getValue(
                  oe.VAL_MAX_FRAMERATE_EXT
                )) != null ? s : "12",
                10
              )
            },
            {
              minFrameRate: parseInt(
                (a = ae.getValue(
                  oe.VAL_MIN_FRAMERATE_EXT
                )) != null ? a : "8",
                10
              )
            }
          ]
        }
      }), v.addLogInCurrentSpan(
        "error",
        "Acquired extension screenshare track"
      )) : n = yield navigator.mediaDevices.getDisplayMedia(
        t
      ), {
        video: n.getVideoTracks()[0],
        audio: n.getAudioTracks()[0]
      };
    });
  }
  static getAudioAndVideoTrack(t) {
    return p(this, null, function* () {
      const e = yield Cr.getUserMediaWithTimeout(
        t
      ), r = e.getAudioTracks()[0], n = e.getVideoTracks()[0];
      return {
        audioTrack: r,
        videoTrack: n
      };
    });
  }
  onDeviceChange(t) {
    fe.supportsDeviceChangeEvent() && navigator.mediaDevices.addEventListener(
      "devicechange",
      va((e) => p(this, null, function* () {
        const r = this.availableDevices, n = new Set(
          r.map((o) => o.deviceId)
        );
        yield this.repopulateAvailableDevices();
        const i = this.availableDevices, s = new Set(
          i.map((o) => o.deviceId)
        ), a = {
          added: i.filter(
            (o) => !n.has(o.deviceId)
          ),
          removed: r.filter(
            (o) => !s.has(o.deviceId)
          )
        };
        this.repopulateAvailableDevices().then(
          () => t(e, a)
        );
      }), 100),
      { signal: d(this, Gn).signal }
    );
  }
  repopulateAvailableDevices() {
    return p(this, null, function* () {
      let t = yield Cr.enumerateDevices();
      t = t.map((r) => r.toJSON()), !Wc(
        _p(t, d(this, ar), Uf)
      ) && (y(this, ar, t), m.info("repopulated_full_device_list", {
        devices: JSON.stringify(t)
      }));
    });
  }
  get availableDevices() {
    return d(this, ar);
  }
  getAvailableDevicesByKind(t) {
    return d(this, ar).filter((e) => e.kind === t);
  }
  getDeviceById(t, e) {
    return d(this, ar).find(
      (r) => r.deviceId === t && r.kind === e
    );
  }
  /**
   * Returns all audio input devices (microphone devices).
   */
  getAudioDevices() {
    return this.getAvailableDevicesByKind("audioinput").sort((t, e) => {
      const r = Qr(t) ? 0 : 1;
      return (Qr(e) ? 0 : 1) - r;
    });
  }
  /**
   * Returns all video input devices.
   */
  getVideoDevices() {
    return this.getAvailableDevicesByKind("videoinput").sort((t, e) => {
      const r = Qr(t) ? 0 : 1;
      return (Qr(e) ? 0 : 1) - r;
    });
  }
  /**
   * Returns all audio output devices (speaker devices).
   */
  getSpeakerDevices() {
    return this.getAvailableDevicesByKind("audiooutput").sort((t, e) => {
      const r = Qr(t) ? 0 : 1;
      return (Qr(e) ? 0 : 1) - r;
    });
  }
}, ar = new WeakMap(), Gn = new WeakMap(), Al);
let Pe = Cr;
Sr([
  v.trace("LocalMediaUtils.onDeviceChange")
], Pe.prototype, "onDeviceChange", 1);
Sr([
  v.trace("LocalMediaUtils.repopulateAvailableDevices")
], Pe.prototype, "repopulateAvailableDevices", 1);
Sr([
  v.trace("LocalMediaUtils.isDeviceListAvailable")
], Pe, "isDeviceListAvailable", 1);
Sr([
  v.trace("LocalMediaUtils.enumerateDevices")
], Pe, "enumerateDevices", 1);
Sr([
  v.trace("LocalMediaUtils.getUserMediaWithTimeout")
], Pe, "getUserMediaWithTimeout", 1);
Sr([
  v.trace("LocalMediaUtils.getAudioTrack")
], Pe, "getAudioTrack", 1);
Sr([
  v.trace("LocalMediaUtils.getVideoTrack")
], Pe, "getVideoTrack", 1);
Sr([
  v.trace("LocalMediaUtils.getScreenShareTracks")
], Pe, "getScreenShareTracks", 1);
Sr([
  v.trace("LocalMediaUtils.getAudioAndVideoTrack")
], Pe, "getAudioAndVideoTrack", 1);
var cO = Object.defineProperty, dO = Object.getOwnPropertyDescriptor, ci = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? dO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && cO(e, r, i), i;
}, Ae, an;
class An {
  constructor(e) {
    b(this, Ae, void 0);
    _(this, "audioMiddlewares", []);
    _(this, "videoMiddlewares", []);
    b(this, an, void 0);
    y(this, Ae, e);
  }
  terminateMiddlewareWebWorker() {
    if (d(this, an))
      try {
        Es.clearInterval(d(this, an)), y(this, an, void 0);
      } catch (e) {
        m.debug("WorkerTimers::terminateMiddlewareWebWorker::failed");
      }
  }
  getTransformedVideoTrack(e) {
    return p(this, null, function* () {
      var u, h;
      if (!((u = this.videoMiddlewares) != null && u.length))
        return e;
      const r = yield Promise.all(
        (h = this.videoMiddlewares) == null ? void 0 : h.map((f) => f())
      ), n = new MediaStream();
      n.addTrack(e);
      const i = document.createElement("canvas"), s = i.getContext("2d"), a = document.createElement("video");
      a.srcObject = n, a.autoplay = !0, this.terminateMiddlewareWebWorker();
      const o = () => p(this, null, function* () {
        if (!d(this, Ae).videoEnabled || e.readyState === "ended") {
          this.terminateMiddlewareWebWorker(), a.remove(), i.remove();
          return;
        }
        try {
          s.drawImage(a, 0, 0);
          for (let f = 0; f < r.length; f += 1)
            yield r[f](
              i,
              s
            );
        } catch (f) {
          m.error(
            "getTransformedVideoTrack::middleware_execution_failed",
            { error: f }
          );
        }
      });
      try {
        a.play();
      } catch (f) {
      }
      return a.addEventListener(
        "play",
        () => {
          i.width = a.width || e.getSettings().width, i.height = a.width || e.getSettings().height, y(this, an, Es.setInterval(
            o,
            50
          ));
        },
        !1
      ), i.captureStream().getVideoTracks()[0];
    });
  }
  addVideoMiddleware(e) {
    return p(this, null, function* () {
      return fe.isWebKitBased() && !ae.hasFeature(oe.ALLOW_SAFARI_MEDIA_MIDDLEWARES) ? {
        success: !1,
        message: "Video middlewares are not supported in this WebKit engine based browser."
      } : this.videoMiddlewares.includes(e) ? {
        success: !0,
        message: "This video middleware has been applied, already. Skipping."
      } : (this.videoMiddlewares.push(e), d(this, Ae).videoEnabled ? (d(this, Ae).setVideoTrack(
        yield this.getTransformedVideoTrack(
          d(this, Ae).rawVideoTrack
        )
      ), d(this, Ae).emit("VIDEO_TRACK_CHANGE"), {
        success: !0,
        message: "Successfully applied the video middleware."
      }) : {
        success: !0,
        message: "Successfully added the video middleware. It will be applied automatically once webcam is turned on."
      });
    });
  }
  removeVideoMiddleware(e) {
    return p(this, null, function* () {
      const r = this.videoMiddlewares.indexOf(e, 0);
      return r > -1 ? (this.videoMiddlewares.splice(r, 1), d(this, Ae).videoEnabled && (d(this, Ae).setVideoTrack(
        yield this.getTransformedVideoTrack(
          d(this, Ae).rawVideoTrack
        )
      ), d(this, Ae).emit("VIDEO_TRACK_CHANGE")), {
        success: !0,
        message: "Successfully removed the video middleware."
      }) : {
        success: !0,
        message: "No such video middleware was found. Skipping."
      };
    });
  }
  getTransformedAudioTrack(e) {
    return p(this, null, function* () {
      var a, o;
      if (!((a = this.audioMiddlewares) != null && a.length))
        return e;
      const r = new AudioContext(), n = yield Promise.all(
        (o = this.audioMiddlewares) == null ? void 0 : o.map(
          (c) => c(r)
        )
      ), i = r.createMediaStreamSource(
        new MediaStream([e])
      ), s = r.createMediaStreamDestination();
      try {
        let c = i;
        for (let u = 0; u < n.length; u += 1)
          c.connect(n[u]), c = n[u];
        c.connect(s);
      } catch (c) {
        return m.error(
          "getTransformedAudioTrack::middleware_execution_failed",
          { error: c }
        ), e;
      }
      return s.stream.getAudioTracks()[0];
    });
  }
  addAudioMiddleware(e) {
    return p(this, null, function* () {
      return fe.isWebKitBased() && !ae.hasFeature(oe.ALLOW_SAFARI_MEDIA_MIDDLEWARES) ? {
        success: !1,
        message: "Audio middlewares are not supported in this WebKit engine based browser."
      } : this.audioMiddlewares.includes(e) ? {
        success: !0,
        message: "This audio middleware has been applied, already. Skipping."
      } : (this.audioMiddlewares.push(e), d(this, Ae).audioEnabled ? (d(this, Ae).setAudioTrack(
        yield this.getTransformedAudioTrack(
          d(this, Ae).rawAudioTrack
        )
      ), d(this, Ae).emit("AUDIO_TRACK_CHANGE"), {
        success: !0,
        message: "Successfully applied the audio middleware."
      }) : {
        success: !0,
        message: "Successfully added the audio middleware. It will be applied automatically once mic is turned on."
      });
    });
  }
  removeAudioMiddleware(e) {
    return p(this, null, function* () {
      const r = this.audioMiddlewares.indexOf(e, 0);
      return r > -1 ? (this.audioMiddlewares.splice(r, 1), d(this, Ae).audioEnabled && (d(this, Ae).setAudioTrack(
        yield this.getTransformedAudioTrack(
          d(this, Ae).rawAudioTrack
        )
      ), d(this, Ae).emit("AUDIO_TRACK_CHANGE")), {
        success: !0,
        message: "Successfully removed the audio middleware."
      }) : {
        success: !0,
        message: "No such audio middleware was found. Skipping."
      };
    });
  }
}
Ae = new WeakMap(), an = new WeakMap();
ci([
  v.trace("MediaMiddlewareUtils.getTransformedVideoTrack")
], An.prototype, "getTransformedVideoTrack", 1);
ci([
  v.trace("MediaMiddlewareUtils.addVideoMiddleware")
], An.prototype, "addVideoMiddleware", 1);
ci([
  v.trace("MediaMiddlewareUtils.removeVideoMiddleware")
], An.prototype, "removeVideoMiddleware", 1);
ci([
  v.trace("MediaMiddlewareUtils.getTransformedAudioTrack")
], An.prototype, "getTransformedAudioTrack", 1);
ci([
  v.trace("MediaMiddlewareUtils.addAudioMiddleware")
], An.prototype, "addAudioMiddleware", 1);
ci([
  v.trace("MediaMiddlewareUtils.removeAudioMiddleware")
], An.prototype, "removeAudioMiddleware", 1);
const Mn = class {
  constructor() {
    _(this, "mediaPermissionEvent");
    this.mediaPermissionEvent = !0;
  }
  static getInstance() {
    return Mn.instance || (Mn.instance = new Mn()), Mn.instance;
  }
  get shouldEmitMediaPermissionEvent() {
    return this.mediaPermissionEvent;
  }
  setEmitMediaPermissionEvent(e) {
    this.mediaPermissionEvent = e;
  }
};
let gs = Mn;
_(gs, "instance");
const ss = gs.getInstance(), uO = {
  lowVolumeThreshold: -40,
  // dBFS
  clipThreshold: 1,
  // dB
  silentThreshold: 1 / 1987,
  // dB
  delay: 500,
  // ms
  media: "audio"
};
var Ii, on, Gs, Np, Pi, Wo;
const Ed = class {
  constructor(e) {
    //	Private methodds
    b(this, Gs);
    b(this, Pi);
    _(this, "analyser");
    _(this, "silentThreshold");
    _(this, "lowVolumeThreshold");
    _(this, "clipThreshold");
    _(this, "delay");
    _(this, "audioContext");
    _(this, "audioSource");
    _(this, "metadata", {});
    _(this, "analysing");
    _(this, "track");
    b(this, Ii, void 0);
    b(this, on, void 0);
    const {
      lowVolumeThreshold: r,
      silentThreshold: n,
      clipThreshold: i,
      delay: s,
      media: a
    } = Y(Y({}, uO), e);
    this.lowVolumeThreshold = r, this.silentThreshold = n, this.clipThreshold = i, this.delay = s, this.analysing = !1, y(this, on, a);
  }
  setTrack(e) {
    if (!e)
      return;
    this.track = e.clone();
    const r = window.AudioContext || window.webkitAudioContext;
    if (this.audioContext = new r(), this.analyser = this.audioContext.createAnalyser(), d(this, on) === "screenshare") {
      D.emit(P.SCREENSHARE_AUDIO_TRACK_CREATED);
      return;
    }
    D.emit(P.AUDIO_TRACK_CREATED);
  }
  getTrackMetadata() {
    if (!this.track)
      return null;
    switch (this.metadata.label = this.track.label, this.metadata.channelCountMode = this.analyser.channelCountMode, this.metadata.channelCount = this.analyser.channelCount, this.metadata.channelInterpretation = this.analyser.channelInterpretation, this.metadata.outputs = this.analyser.numberOfOutputs, this.analyser.numberOfOutputs) {
      case 1:
        this.metadata.channelType = "MONO";
        break;
      case 2:
        this.metadata.channelType = "STEREO";
        break;
      case 4:
        this.metadata.channelType = "QUAD";
        break;
    }
    return this.metadata;
  }
  startTrackAnalysis() {
    return p(this, null, function* () {
      if (!this.track || this.analysing)
        return !1;
      try {
        return yield this.audioContext.resume(), yield j(this, Gs, Np).call(this), this.analysing = !0, !0;
      } catch (e) {
        return m.error(e), !1;
      }
    });
  }
  stopTrackAnalysis() {
    this.analysing && (this.analysing = !1, clearTimeout(d(this, Ii)));
  }
  cleanup() {
    var e, r, n, i, s;
    if (this.stopTrackAnalysis(), (e = this.analyser) == null || e.disconnect(), (r = this.audioSource) == null || r.disconnect(this.analyser), (n = this.audioSource) == null || n.disconnect(), (i = this.audioContext) == null || i.close(), this.audioContext = void 0, this.analyser = void 0, this.audioSource = void 0, (s = this.track) == null || s.stop(), this.track = void 0, d(this, on) === "screenshare") {
      D.emit(P.SCREENSHARE_AUDIO_TRACK_CLOSED);
      return;
    }
    D.emit(P.AUDIO_TRACK_CLOSED);
  }
  static dbFS(e) {
    const r = 20 * (Math.log(e) / Math.log(10));
    return Math.round(r * 10) / 10;
  }
};
let Os = Ed;
Ii = new WeakMap(), on = new WeakMap(), Gs = new WeakSet(), Np = function() {
  return p(this, null, function* () {
    try {
      const e = new MediaStream();
      e.addTrack(this.track), this.audioSource = this.audioContext.createMediaStreamSource(e), this.audioSource.connect(this.analyser), yield new Promise((r) => {
        window.requestAnimationFrame(() => {
          j(this, Pi, Wo).call(this), r(!0);
        });
      });
    } catch (e) {
      m.error(e);
    }
  });
}, Pi = new WeakSet(), Wo = function() {
  const e = new Float32Array(this.analyser.fftSize);
  this.analyser.getFloatTimeDomainData(e);
  let r = 0;
  for (const a of e)
    r += a * a;
  const n = Math.sqrt(r / e.length), i = Ed.dbFS(n), s = {
    volume: n,
    lowVolume: i < this.lowVolumeThreshold,
    silence: n < this.silentThreshold,
    clip: n > this.clipThreshold,
    timestamp: new Date().getTime()
  };
  d(this, on) === "screenshare" ? D.emit(
    P.SCREENSHARE_AUDIO_TRACK_ANALYSIS,
    s
  ) : D.emit(P.AUDIO_TRACK_ANALYSIS, s), y(this, Ii, setTimeout(() => {
    window.requestAnimationFrame(j(this, Pi, Wo).bind(this));
  }, this.delay));
};
const rr = new Os(), Ti = new Os({ media: "screenshare" }), pi = {}, Lt = {
  /**
   * Lock a method to prevent concurrency
   * @param config - configuration for the lock
   * @param config.methodName - config.methodName Name of method to expose in logs
   *	and to the user (if necessary).
   * @param config.lockName - Unique string to differentiate the method from others.
   * @param config.timeout - Release lock in given milliseconds if method doesn't get resolved.
   *
   *	Do not use common function names such as joinRoom as the lockName,
   *	instead use filename.functionname, if a suitable name couldn't be found.
   * @returns locked instance.
   *
   * It will throw error with name `UnsupportedConcurrentMethodExecution`,
   *	if lock couldn't be acquired.
   *
   * Note:
   *	Make sure that the methodName is explanatory on its own, if exposed to end users.
   * Eg: `meeting.joinRoom` is a much better choice than `joinRoom`.
   */
  executeWithLock({
    methodName: t,
    lockName: e,
    timeout: r
  }) {
    return (n, i, s) => {
      const a = s.value;
      return s.value = function(...c) {
        if (pi[e]) {
          const f = new Error(
            `Unsupported concurrent calls on Dyte method: ${t}.`
          );
          throw f.name = "UnsupportedConcurrentMethodExecution", m.error("DyteLocker::UnsupportedConcurrentMethodExecution", {
            error: {
              stack: f.stack
            },
            dyteLocker: {
              methodName: t,
              lockName: e
            }
          }), f;
        }
        pi[e] = !0;
        const u = setTimeout(
          () => delete pi[e],
          r
        ), h = a.apply(this, c);
        return Promise.resolve(h).then(() => {
          delete pi[e], clearTimeout(u);
        }).catch(() => {
          delete pi[e], clearTimeout(u);
        }), h;
      }, s;
    };
  }
};
var lO = Object.defineProperty, hO = Object.getOwnPropertyDescriptor, ie = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? hO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && lO(e, r, i), i;
}, z, Nr, Rl;
const xp = (Rl = class extends ta {
  constructor(e, r) {
    super();
    b(this, z, void 0);
    b(this, Nr, void 0);
    _(this, "mediaMiddlewareUtils");
    _(this, "audioTrack");
    _(this, "rawAudioTrack");
    _(this, "videoTrack");
    _(this, "rawVideoTrack");
    _(this, "screenShareTracks");
    _(this, "audioEnabled");
    _(this, "videoEnabled");
    _(this, "screenShareEnabled");
    _(this, "currentDevices");
    _(this, "permissions");
    _(this, "audioUpdateInProgress");
    _(this, "videoUpdateInProgress");
    _(this, "screenShareUpdateInProgress");
    _(this, "initialSetupComplete", !1);
    // eslint-disable-next-line class-methods-use-this
    _(this, "isDeprecated", () => !0);
    y(this, z, e), y(this, Nr, new Op(r)), this.audioEnabled = !0, this.videoEnabled = !0, this.audioUpdateInProgress = !1, this.videoUpdateInProgress = !1, this.screenShareUpdateInProgress = !1, this.screenShareEnabled = !1, this.permissions = {
      audio: "NOT_REQUESTED",
      video: "NOT_REQUESTED",
      screenshare: "NOT_REQUESTED"
    }, this.screenShareTracks = {
      audio: void 0,
      video: void 0
    }, this.currentDevices = {
      audio: void 0,
      video: void 0,
      speaker: void 0
    }, d(this, z).onDeviceChange(
      (n, i) => {
        this.onDeviceChange(i, !1), this.emit("DEVICE_LIST_UPDATED", i);
      }
    ), this.conditionallyRestartAudio = this.conditionallyRestartAudio.bind(this), this.conditionallyRestartVideo = this.conditionallyRestartVideo.bind(this), this.onVisibilityChange = this.onVisibilityChange.bind(this), document.addEventListener("visibilitychange", this.onVisibilityChange), this.on("AUDIO_TRACK_CHANGE", () => {
      this.notifyIfTrackSilent();
    }), D.on(P.PRODUCER_TRACK_ENDED, ({ kind: n }) => {
      n === "mic" && this.conditionallyRestartAudio(), n === "webcam" && this.conditionallyRestartVideo();
    });
  }
  handlePermissionErrors(e, r) {
    const n = Pa(e, r.name, r.message);
    this.permissions[e] = n, D.emit(P.MEDIA_PERMISSION_ERROR, {
      message: n,
      constraints: r.constraints,
      kind: e
    });
  }
  repopulateAvailableDevices() {
    return p(this, null, function* () {
      return d(this, z).repopulateAvailableDevices();
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onVisibilityChange(e) {
    document.visibilityState === "visible" && (fe.isMobile() && this.conditionallyRestartAudio(), this.conditionallyRestartVideo());
  }
  conditionallyRestartAudio(e) {
    return p(this, null, function* () {
      var n, i;
      yield new Promise((s) => setTimeout(s, 50)), m.info("performingCheck::shouldReacquireAudioTrack", {
        actions: { trackRobustness: { eventType: e == null ? void 0 : e.type } }
      });
      const r = yield this.shouldReacquireTrack("audio");
      m.info("performedCheck::shouldReacquireAudioTrack", {
        actions: {
          trackRobustness: {
            reacquireTrack: r
          }
        }
      }), r && (m.info("reacquiring_audio_track"), this.removeMediaStreamTrackListeners(this.rawAudioTrack), fe.isChromiumBased() && (yield d(this, z).repopulateAvailableDevices()), yield this.setupAudioStream((i = (n = this.currentDevices) == null ? void 0 : n.audio) == null ? void 0 : i.deviceId), this.addMediaStreamTrackListeners(this.rawAudioTrack), this.emit("AUDIO_TRACK_CHANGE"));
    });
  }
  conditionallyRestartVideo(e) {
    return p(this, null, function* () {
      var n, i;
      yield new Promise((s) => setTimeout(s, 50)), m.info("performingCheck::shouldReacquireVideoTrack", {
        actions: { trackRobustness: { eventType: e == null ? void 0 : e.type } }
      });
      const r = yield this.shouldReacquireTrack("video");
      m.info("performedCheck::shouldReacquireVideoTrack", {
        actions: {
          trackRobustness: {
            reacquireTrack: r
          }
        }
      }), r && (m.info("reacquiring_video_track"), this.removeMediaStreamTrackListeners(this.rawVideoTrack), yield d(this, z).repopulateAvailableDevices(), yield this.setupVideoStream((i = (n = this.currentDevices) == null ? void 0 : n.video) == null ? void 0 : i.deviceId), this.addMediaStreamTrackListeners(this.rawVideoTrack), this.emit("VIDEO_TRACK_CHANGE"));
    });
  }
  shouldReacquireTrack(e) {
    return p(this, null, function* () {
      if (e === "audio") {
        if (this.audioUpdateInProgress || !this.audioEnabled)
          return !1;
        if (!this.rawAudioTrack || !this.audioTrack)
          return !0;
        const s = this.rawAudioTrack.muted || this.audioTrack.muted;
        return (this.rawAudioTrack.readyState === "ended" || this.audioTrack.readyState === "ended") && this.audioEnabled || s;
      }
      if (this.videoUpdateInProgress || !this.videoEnabled)
        return !1;
      if (!this.rawVideoTrack || !this.videoTrack)
        return !0;
      const r = this.rawVideoTrack.muted || this.videoTrack.muted, i = (this.rawVideoTrack.readyState === "ended" || this.videoTrack.readyState === "ended") && this.videoEnabled;
      return document.visibilityState === "visible" && (i || r);
    });
  }
  // eslint-disable-next-line class-methods-use-this
  onAudioUnmute(e) {
    m.info("audio_track_unmuted", {
      actions: {
        trackRobustness: {
          eventType: e == null ? void 0 : e.type
        }
      }
    });
  }
  // eslint-disable-next-line class-methods-use-this
  onVideoUnmute(e) {
    m.info("video_track_unmuted", {
      actions: {
        trackRobustness: {
          eventType: e == null ? void 0 : e.type
        }
      }
    });
  }
  removeMediaStreamTrackListeners(e) {
    if (m.info(`Removing ${e.kind} listerners`), !e)
      return;
    const r = e.kind === "audio" ? this.conditionallyRestartAudio : this.conditionallyRestartVideo;
    return e.removeEventListener("ended", r), e.removeEventListener("mute", r), e.removeEventListener(
      "unmute",
      e.kind === "audio" ? this.onAudioUnmute : this.onVideoUnmute
    ), e;
  }
  addMediaStreamTrackListeners(e) {
    if (!e)
      return null;
    m.info(`adding_${e.kind}_stream_listerners`);
    const r = e.kind === "audio", n = r ? this.conditionallyRestartAudio : this.conditionallyRestartVideo;
    return e.addEventListener("ended", () => p(this, null, function* () {
      yield n();
      const i = r ? this.audioEnabled : this.videoEnabled, s = r ? this.audioTrack : this.videoTrack, a = r ? "FORCE_MUTE_AUDIO" : "FORCE_MUTE_VIDEO";
      i && !(s && s.readyState === "live" && s.enabled) && (m.info(
        `LocalMediaHandler::trackEnded::Failed to restart ${e.kind} track`
      ), this.emit(a));
    })), e.addEventListener("mute", n), e.addEventListener(
      "unmute",
      r ? this.onAudioUnmute : this.onVideoUnmute
    ), e;
  }
  /**
   * NOTE(callmetarush): Emits AUDIO_TRACK_SILENT
   * If audio is enabled and current track is silent
   */
  notifyIfTrackSilent() {
    return p(this, null, function* () {
      var e, r, n, i, s, a;
      this.audioEnabled && this.audioTrack && this.audioTrack.readyState !== "ended" && this.audioTrack.enabled && (yield Ds(this.audioTrack)) === !0 && (m.info("LocalMediaHandler:notifyIfTrackSilent:TrackSilent", {
        media: {
          audio: {
            enabled: this.audioEnabled,
            deviceId: (r = (e = this.audioTrack) == null ? void 0 : e.getSettings()) == null ? void 0 : r.deviceId,
            permission: (n = this.permissions) == null ? void 0 : n.audio,
            deviceName: (s = (i = this.currentDevices) == null ? void 0 : i.audio) == null ? void 0 : s.label,
            trackId: (a = this.audioTrack) == null ? void 0 : a.id
          }
        }
      }), this.emit("AUDIO_TRACK_SILENT"));
    });
  }
  setupAudioStream(e, r = !0) {
    return p(this, null, function* () {
      var n, i, s;
      if (!this.audioUpdateInProgress)
        try {
          this.audioUpdateInProgress = !0;
          const a = d(this, z).getAudioDevices();
          if (!a.length)
            throw this.audioEnabled = !1, new On("COULD_NOT_START", "No audio devices", {});
          let o = e;
          (!o || !a.find((u) => u.deviceId === o)) && (o = yield this.getPreferredDeviceId("AUDIO"), m.debug("setupAudioStream::AUDIO::getPreferredDeviceId", {
            preferredDevice: {
              preferredDeviceId: o,
              kind: "audio"
            }
          }));
          const c = Pe.getAudioConstraints({
            audioDeviceId: o
          });
          r && ((n = this.rawAudioTrack) == null || n.stop(), (i = this.audioTrack) == null || i.stop()), this.rawAudioTrack = yield Pe.getAudioTrack(
            c
          ), o = this.rawAudioTrack.getSettings().deviceId, ((s = this.currentDevices.audio) == null ? void 0 : s.deviceId) !== o && (this.currentDevices.audio = d(this, z).getDeviceById(
            o,
            "audioinput"
          ), this.emit("DEVICE_CHANGE", {
            device: this.currentDevices.audio
          })), this.rawAudioTrack.enabled = this.audioEnabled, this.setAudioTrack(
            yield this.mediaMiddlewareUtils.getTransformedAudioTrack(
              this.rawAudioTrack
            )
          ), this.addMediaStreamTrackListeners(this.rawAudioTrack), yield d(this, z).repopulateAvailableDevices(), this.permissions.audio = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
            message: this.permissions.audio,
            kind: "audio"
          }), o && nr.setItem("lastUsedAudioDeviceId", o);
        } catch (a) {
          this.handlePermissionErrors("audio", a);
        } finally {
          this.audioUpdateInProgress = !1;
        }
    });
  }
  getPreferredDeviceId(e) {
    return p(this, null, function* () {
      var n, i;
      let r;
      if (e === "AUDIO") {
        const s = d(this, z).getAudioDevices(), a = nr.getItem(
          "lastUsedAudioDeviceId"
        );
        m.debug("getPreferredDeviceId::lastUsedAudioDeviceId", {
          preferredDevice: {
            lastUsedPreferredDeviceId: a,
            kind: "audio"
          }
        });
        let o;
        a && (o = s.find(
          (c) => c.deviceId === a
        )), o ? r = a : ae.hasFeature(
          oe.REMOVE_OPERATIONAL_MIC
        ) || (r = (yield this.getOperationalMicDeviceId()).deviceId), r || (r = (n = s[0]) == null ? void 0 : n.deviceId);
      }
      if (e === "VIDEO") {
        const s = nr.getItem(
          "lastUsedVideoDeviceId"
        );
        m.debug("getPreferredDeviceId::lastUsedVideoDeviceId", {
          preferredDevice: {
            kind: "video",
            lastUsedPreferredDeviceId: s
          }
        });
        const a = d(this, z).getVideoDevices();
        let o;
        s && (o = a.find(
          (c) => c.deviceId === s
        )), o ? r = s : r = (yield this.getOperationalWebcamDeviceId()).deviceId, r || (r = (i = a[0]) == null ? void 0 : i.deviceId);
      }
      return r;
    });
  }
  setupVideoStream(e, r = !0) {
    return p(this, null, function* () {
      var n, i;
      if (!this.videoUpdateInProgress)
        try {
          this.videoUpdateInProgress = !0;
          const s = d(this, z).getVideoDevices();
          if (!s.length)
            throw this.videoEnabled = !1, new On("COULD_NOT_START", "No video devices", {});
          let a = e;
          if ((!a || !s.find((o) => o.deviceId === a)) && (a = yield this.getPreferredDeviceId("VIDEO"), m.debug("setupVideoStream::VIDEO::getPreferredDeviceId", {
            preferredDevice: {
              preferredDeviceId: a,
              kind: "video"
            }
          })), r && ((n = this.videoTrack) == null || n.stop()), this.videoEnabled) {
            const o = d(this, Nr).getVideoConstraints(a);
            this.rawVideoTrack = yield Pe.getVideoTrack(
              o
            ), a = this.rawVideoTrack.getSettings().deviceId, this.setVideoTrack(
              yield this.mediaMiddlewareUtils.getTransformedVideoTrack(
                this.rawVideoTrack
              )
            ), this.addMediaStreamTrackListeners(this.rawVideoTrack);
          }
          yield d(this, z).repopulateAvailableDevices(), ((i = this.currentDevices.video) == null ? void 0 : i.deviceId) !== a && (this.currentDevices.video = d(this, z).getDeviceById(
            a,
            "videoinput"
          ), this.emit("DEVICE_CHANGE", {
            device: this.currentDevices.video
          })), this.permissions.video = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
            message: this.permissions.video,
            kind: "video"
          }), a && nr.setItem("lastUsedVideoDeviceId", a);
        } catch (s) {
          this.handlePermissionErrors("video", s);
        } finally {
          this.videoUpdateInProgress = !1;
        }
    });
  }
  setupScreenShareStreams() {
    return p(this, null, function* () {
      if (this.screenShareUpdateInProgress)
        return;
      const e = d(this, Nr).getScreenShareConstraints();
      ae.hasFeature(
        oe.SCREENSHARE_MAX_DIMENSIONS
      ) && (e.video.width.max = window.screen.width, e.video.height.max = window.screen.height);
      try {
        this.screenShareUpdateInProgress = !0;
        const r = yield Pe.getScreenShareTracks(
          e
        );
        this.setScreenShareTracks(r);
      } catch (r) {
        throw this.handlePermissionErrors(
          "screenshare",
          new On(r.name, r.message, e)
        ), new w(r.message);
      } finally {
        this.screenShareUpdateInProgress = !1;
      }
    });
  }
  setupSpeaker(e) {
    return p(this, null, function* () {
      var i;
      const r = d(this, z).getSpeakerDevices();
      if (!r.length)
        return;
      const n = e != null ? e : r[0].deviceId;
      ((i = this.currentDevices.speaker) == null ? void 0 : i.deviceId) !== n && (this.currentDevices.speaker = d(this, z).getDeviceById(
        n,
        "audiooutput"
      ), this.emit("DEVICE_CHANGE", {
        device: this.currentDevices.speaker
      })), document.querySelectorAll("audio").forEach((s) => p(this, null, function* () {
        if (typeof s.sinkId != "undefined" && this.currentDevices.speaker.deviceId && s.sinkId !== this.currentDevices.speaker.deviceId)
          try {
            yield s.setSinkId(
              this.currentDevices.speaker.deviceId
            );
          } catch (a) {
          }
      }));
    });
  }
  getOperationalWebcamDeviceId() {
    return p(this, null, function* () {
      const e = d(this, z).getVideoDevices();
      if (!e.length)
        return { isOperational: !1, deviceId: null };
      ss.setEmitMediaPermissionEvent(!1);
      const r = [], n = yield e.reduce(
        (i, s) => p(this, null, function* () {
          const a = yield i;
          if (a !== null)
            return a;
          const o = d(this, Nr).getVideoConstraints(
            s.deviceId
          );
          try {
            return (yield Pe.getVideoTrack(
              o
            )).stop(), s.deviceId;
          } catch (c) {
            m.error(
              "getOperationalWebcamDeviceId::could_not_acquire_video_device",
              { error: c, constraints: o }
            ), r.push({ exception: c, constraints: o });
          }
          return a;
        }),
        Promise.resolve(null)
      );
      if (ss.setEmitMediaPermissionEvent(!0), !n && r.length > 0 && r.length === e.length) {
        const { exception: i, constraints: s } = r[0];
        throw new On(
          i.name,
          i.message,
          s
        );
      }
      return n ? { isOperational: !0, deviceId: n } : { isOperational: !1, deviceId: e[0].deviceId };
    });
  }
  getOperationalMicDeviceId() {
    return p(this, null, function* () {
      const e = d(this, z).getAudioDevices();
      if (!e.length)
        return { isOperational: !1, deviceId: null };
      const r = [];
      ss.setEmitMediaPermissionEvent(!1);
      const n = yield e.reduce(
        (i, s) => p(this, null, function* () {
          const a = yield i;
          if (a !== null)
            return a;
          const o = Pe.getAudioConstraints({
            audioDeviceId: s.deviceId
          });
          try {
            const c = yield Pe.getAudioTrack(
              o
            ), u = yield Ds(c);
            if (c == null || c.stop(), !u)
              return s;
          } catch (c) {
            m.error(
              "getOperationalMicDeviceId::could_not_acquire_audio_device",
              { error: c, constraints: o }
            ), r.push({ exception: c, constraints: o });
          }
          return a;
        }),
        Promise.resolve(null)
      );
      if (ss.setEmitMediaPermissionEvent(!0), !n && r.length > 0 && r.length === e.length) {
        const { exception: i, constraints: s } = r[0];
        throw new On(
          i.name,
          i.message,
          s
        );
      }
      return n ? { isOperational: !0, deviceId: n.deviceId } : { isOperational: !1, deviceId: e[0].deviceId };
    });
  }
  setupStreams(n) {
    return p(this, arguments, function* ({
      audio: e,
      video: r
    }) {
      var s;
      const i = {};
      this.currentDevices || (this.currentDevices = {
        audio: void 0,
        video: void 0,
        speaker: void 0
      });
      try {
        if (e && !this.audioUpdateInProgress && d(this, z).getAudioDevices().length !== 0) {
          const u = yield this.getPreferredDeviceId("AUDIO");
          m.info("setupStreams::AUDIO::getPreferredDeviceId", {
            preferredDevice: {
              preferredDeviceId: u,
              kind: "audio"
            }
          });
          const h = Pe.getAudioConstraints({
            audioDeviceId: u
          });
          i.audio = h.audio;
        }
        if (r && !this.videoUpdateInProgress && d(this, z).getVideoDevices().length !== 0) {
          const u = yield this.getPreferredDeviceId("VIDEO");
          m.info("setupStreams::VIDEO::getPreferredDeviceId", {
            preferredDevice: {
              preferredDeviceId: u,
              kind: "video"
            }
          });
          const h = d(this, Nr).getVideoConstraints(u);
          i.video = h.video;
        }
        if (((s = Object.keys(i)) == null ? void 0 : s.length) === 0) {
          this.audioEnabled = e != null ? e : this.audioEnabled, this.videoEnabled = r != null ? r : this.videoEnabled, this.audioUpdateInProgress = !1, this.videoUpdateInProgress = !1, this.initialSetupComplete = !0;
          return;
        }
        const { audioTrack: a, videoTrack: o } = yield Pe.getAudioAndVideoTrack(i);
        e && a && (this.audioTrack = a, this.rawAudioTrack = a, this.permissions.audio = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.audio,
          kind: "audio"
        }), this.currentDevices.audio = d(this, z).getDeviceById(
          a.getSettings().deviceId,
          "audioinput"
        ), nr.setItem(
          "lastUsedAudioDeviceId",
          a.getSettings().deviceId
        )), r && o && (this.videoTrack = o, this.rawVideoTrack = o, this.permissions.video = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.video,
          kind: "video"
        }), this.currentDevices.video = d(this, z).getDeviceById(
          o.getSettings().deviceId,
          "videoinput"
        ), nr.setItem(
          "lastUsedVideoDeviceId",
          o.getSettings().deviceId
        )), yield d(this, z).repopulateAvailableDevices();
      } catch (a) {
        a.name === "NotAllowedError" && (e && (yield this.setupAudioStream()), r && (yield this.setupVideoStream()));
      }
      this.audioEnabled = !!this.audioTrack, this.videoEnabled = !!this.videoTrack, this.screenShareEnabled = !1, this.audioUpdateInProgress = !1, this.videoUpdateInProgress = !1, this.initialSetupComplete = !0, yield this.setupSpeaker();
    });
  }
  stopAudioTrack() {
    var e, r;
    this.audioUpdateInProgress || (this.audioUpdateInProgress = !0, (e = this.audioTrack) == null || e.stop(), (r = this.rawAudioTrack) == null || r.stop(), this.audioEnabled = !1, this.audioUpdateInProgress = !1);
  }
  stopVideoTrack() {
    var e, r;
    this.videoUpdateInProgress || (this.videoUpdateInProgress = !0, (e = this.videoTrack) == null || e.stop(), (r = this.rawVideoTrack) == null || r.stop(), this.videoEnabled = !1, this.videoUpdateInProgress = !1);
  }
  stopScreenShareTracks(e = {}) {
    var i, s, a, o;
    if (this.screenShareUpdateInProgress)
      return;
    this.screenShareUpdateInProgress = !0;
    const { audio: r = !0, video: n = !0 } = e;
    r && ((s = (i = this.screenShareTracks) == null ? void 0 : i.audio) == null || s.stop()), n && ((o = (a = this.screenShareTracks) == null ? void 0 : a.video) == null || o.stop()), this.screenShareEnabled = !1, this.screenShareUpdateInProgress = !1;
  }
  removeAudioTrack() {
    this.stopAudioTrack(), this.audioTrack = void 0, this.rawAudioTrack = void 0, ae.hasFeature(oe.TROUBLESHOOTING) && rr.cleanup();
  }
  removeVideoTrack() {
    this.stopVideoTrack(), this.videoTrack = void 0, this.rawVideoTrack = void 0;
  }
  removeScreenShareTracks(e) {
    var r;
    (r = this.screenShareTracks.video) == null || r.removeEventListener(
      "ended",
      this.onScreenShareEnded
    ), this.stopScreenShareTracks(e), this.screenShareTracks = {
      audio: void 0,
      video: void 0
    };
  }
  removeAllTracks() {
    this.removeAudioTrack(), this.removeVideoTrack(), this.removeScreenShareTracks({
      audio: !!this.screenShareTracks.audio,
      video: !!this.screenShareTracks.video
    });
  }
  setAudioTrack(e) {
    e !== this.audioTrack && (e === void 0 && this.stopAudioTrack(), this.audioTrack = e, this.audioTrack && (this.audioTrack.enabled = this.audioEnabled));
  }
  setVideoTrack(e) {
    e !== this.videoTrack && (e === void 0 && this.stopVideoTrack(), this.videoTrack = e);
  }
  setScreenShareTracks(e) {
    var i;
    const { audio: r, video: n } = e;
    (!r || !n) && this.stopScreenShareTracks({ audio: !!r, video: !!n }), this.screenShareTracks = e, (i = this.screenShareTracks.video) == null || i.addEventListener(
      "ended",
      this.onScreenShareEnded.bind(this)
    );
  }
  onScreenShareEnded() {
    this.emit("SCREENSHARE_ENDED");
  }
  disableAudio() {
    this.audioEnabled = !1, this.audioTrack && (this.audioTrack.enabled = this.audioEnabled), this.rawAudioTrack && (this.rawAudioTrack.enabled = this.audioEnabled);
  }
  enableAudio() {
    return p(this, null, function* () {
      var e;
      if (this.permissions.audio === "DENIED") {
        this.audioEnabled = !1;
        return;
      }
      try {
        if ((!this.audioTrack || this.audioTrack.readyState === "ended") && (yield this.setupAudioStream((e = this.currentDevices.audio) == null ? void 0 : e.deviceId)), !this.audioTrack || !this.rawAudioTrack) {
          this.audioEnabled = !1, m.error(
            "LocalMediaHandler::enableAudio:Setting up audio stream failed while enabling audio",
            {
              debuggingHint: "Refer to SelfController::mediaPermissionError log."
            }
          );
          return;
        }
        this.audioEnabled = !0;
      } catch (r) {
        this.audioEnabled = !1, this.audioTrack = void 0, this.rawAudioTrack = void 0, m.error("LocalMediaHandler::enableAudio", { error: r }, !0);
      }
      this.audioTrack && (this.audioTrack.enabled = !0), this.rawAudioTrack && (this.rawAudioTrack.enabled = !0), !(this.permissions.audio === "ACCEPTED" || !this.audioEnabled) && (this.permissions.audio = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
        message: this.permissions.audio,
        kind: "audio"
      }));
    });
  }
  toggleAudio() {
    return p(this, null, function* () {
      var e;
      if (this.permissions.audio === "DENIED") {
        this.audioEnabled = !1;
        return;
      }
      try {
        if ((!this.audioTrack || this.audioTrack.readyState === "ended") && (yield this.setupAudioStream((e = this.currentDevices.audio) == null ? void 0 : e.deviceId)), !this.audioTrack || !this.rawAudioTrack) {
          this.audioEnabled = !1;
          return;
        }
        this.audioEnabled = !this.audioEnabled;
      } catch (r) {
        this.audioEnabled = !1, m.error("LocalMediaHandler::toggleAudio", { error: r }, !0);
      }
      this.audioTrack && (this.audioTrack.enabled = this.audioEnabled), this.rawAudioTrack && (this.rawAudioTrack.enabled = this.audioEnabled);
    });
  }
  toggleVideo() {
    return p(this, null, function* () {
      var e;
      if (this.permissions.video === "DENIED") {
        this.videoEnabled = !1;
        return;
      }
      if (this.videoEnabled) {
        this.removeVideoTrack();
        return;
      }
      this.videoEnabled = !0;
      try {
        yield this.setupVideoStream((e = this.currentDevices.video) == null ? void 0 : e.deviceId);
      } catch (r) {
        this.videoEnabled = !1;
      }
      this.videoTrack && (this.videoTrack.enabled = this.videoEnabled), this.rawVideoTrack && (this.rawVideoTrack.enabled = this.videoEnabled), !(this.permissions.video === "ACCEPTED" || !this.videoEnabled) && (this.permissions.video = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
        message: this.permissions.video,
        kind: "video"
      }));
    });
  }
  toggleScreenShare() {
    return p(this, null, function* () {
      if (this.screenShareEnabled) {
        this.removeScreenShareTracks({
          audio: !!this.screenShareTracks.audio,
          video: !!this.screenShareTracks.video
        });
        return;
      }
      try {
        if (yield this.setupScreenShareStreams(), this.screenShareEnabled = !0, this.permissions.screenshare === "ACCEPTED")
          return;
        this.permissions.screenshare = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
          message: this.permissions.screenshare,
          kind: "screenshare"
        });
      } catch (e) {
        this.screenShareEnabled = !1;
      }
    });
  }
  getAllDevices() {
    return d(this, z).availableDevices;
  }
  getDeviceById(e, r) {
    return d(this, z).getDeviceById(e, r);
  }
  getAudioDevices() {
    return d(this, z).getAudioDevices();
  }
  getVideoDevices() {
    return d(this, z).getVideoDevices();
  }
  getSpeakerDevices() {
    return d(this, z).getSpeakerDevices();
  }
  onDeviceChange(e, r) {
    return p(this, null, function* () {
      var n, i;
      this.initialSetupComplete && ((n = e == null ? void 0 : e.added) == null || n.forEach((s) => p(this, null, function* () {
        s && (r || !Qr(s)) && (s.kind === "audioinput" ? (yield this.setupAudioStream(s.deviceId), this.emit("AUDIO_TRACK_CHANGE")) : s.kind === "videoinput" && this.videoEnabled ? (yield this.setupVideoStream(s.deviceId), this.emit("VIDEO_TRACK_CHANGE")) : s.kind === "audiooutput" && (yield this.setupSpeaker(s.deviceId)));
      })), (i = e == null ? void 0 : e.removed) == null || i.forEach((s) => p(this, null, function* () {
        var a, o, c;
        s && ((s.kind === "audioinput" && !this.audioEnabled || s.kind === "videoinput" && !this.videoEnabled || ae.hasFeature(oe.DEVICE_REMOVE_EXP) || !fe.isChromiumBased()) && (s.kind === "audioinput" && s.deviceId === ((a = this.currentDevices.audio) == null ? void 0 : a.deviceId) ? (yield this.setupAudioStream(), this.emit("AUDIO_TRACK_CHANGE")) : s.kind === "videoinput" && s.deviceId === ((o = this.currentDevices.video) == null ? void 0 : o.deviceId) && (yield this.setupVideoStream(), this.emit("VIDEO_TRACK_CHANGE"))), s.kind === "audiooutput" && s.deviceId === ((c = this.currentDevices.speaker) == null ? void 0 : c.deviceId) && (yield this.setupSpeaker()));
      })));
    });
  }
  static init(e) {
    return p(this, null, function* () {
      const r = yield Pe.init(), n = new xp(
        r,
        e
      ), i = new An(n);
      return n.mediaMiddlewareUtils = i, n;
    });
  }
  emit(e, ...r) {
    return super.emit(e, ...r);
  }
  on(e, r) {
    return super.on(e, r);
  }
  removeDocumentEventListeners() {
    return p(this, null, function* () {
      document.removeEventListener("visibilitychange", this.onVisibilityChange);
    });
  }
  /**
   * NOTE(callmetarush): Compatibility with Local media refactor
   */
  addAudioMiddleware(e) {
    return this.mediaMiddlewareUtils.addAudioMiddleware(e);
  }
  removeAudioMiddleware(e) {
    return this.mediaMiddlewareUtils.removeAudioMiddleware(e);
  }
  addVideoMiddleware(e) {
    return this.mediaMiddlewareUtils.addVideoMiddleware(e);
  }
  removeVideoMiddleware(e) {
    return this.mediaMiddlewareUtils.removeVideoMiddleware(e);
  }
  enableVideo() {
    return p(this, null, function* () {
      yield this.toggleVideo();
    });
  }
  disableVideo() {
    return p(this, null, function* () {
      yield this.toggleVideo();
    });
  }
  enableScreenShare() {
    return p(this, null, function* () {
      yield this.toggleScreenShare();
    });
  }
  disableScreenShare() {
    return p(this, null, function* () {
      yield this.toggleScreenShare();
    });
  }
  getCurrentDevices() {
    return this.currentDevices;
  }
  destruct() {
    this.mediaMiddlewareUtils.terminateMiddlewareWebWorker(), d(this, z).destruct(), this.removeAllTracks(), this.removeAllListeners();
  }
}, z = new WeakMap(), Nr = new WeakMap(), Rl);
let re = xp;
ie([
  Lt.executeWithLock({
    methodName: "oldLocalMediaHandler.conditionallyRestartAudio",
    lockName: "oldLocalMediaHandler.conditionallyRestartAudio",
    timeout: 3e3
  })
], re.prototype, "conditionallyRestartAudio", 1);
ie([
  Lt.executeWithLock({
    methodName: "oldLocalMediaHandler.conditionallyRestartVideo",
    lockName: "oldLocalMediaHandler.conditionallyRestartVideo",
    timeout: 3e3
  })
], re.prototype, "conditionallyRestartVideo", 1);
ie([
  v.trace("OldMediaHandler.shouldReacquireTrack")
], re.prototype, "shouldReacquireTrack", 1);
ie([
  v.trace("OldMediaHandler.removeMediaStreamTrackListeners")
], re.prototype, "removeMediaStreamTrackListeners", 1);
ie([
  v.trace("OldMediaHandler.addMediaStreamTrackListeners")
], re.prototype, "addMediaStreamTrackListeners", 1);
ie([
  v.trace("OldMediaHandler.setupAudioStream")
], re.prototype, "setupAudioStream", 1);
ie([
  v.trace("OldMediaHandler.getPreferredDeviceId")
], re.prototype, "getPreferredDeviceId", 1);
ie([
  v.trace("OldMediaHandler.setupVideoStream")
], re.prototype, "setupVideoStream", 1);
ie([
  v.trace("OldMediaHandler.setupScreenShareStreams")
], re.prototype, "setupScreenShareStreams", 1);
ie([
  v.trace("OldMediaHandler.setupSpeaker")
], re.prototype, "setupSpeaker", 1);
ie([
  v.trace("OldMediaHandler.getOperationalWebcamDeviceId")
], re.prototype, "getOperationalWebcamDeviceId", 1);
ie([
  v.trace("OldMediaHandler.getOperationalMicDeviceId")
], re.prototype, "getOperationalMicDeviceId", 1);
ie([
  v.trace("OldMediaHandler.setupStreams")
], re.prototype, "setupStreams", 1);
ie([
  v.trace("OldMediaHandler.stopAudioTrack")
], re.prototype, "stopAudioTrack", 1);
ie([
  v.trace("OldMediaHandler.stopVideoTrack")
], re.prototype, "stopVideoTrack", 1);
ie([
  v.trace("OldMediaHandler.stopScreenShareTracks")
], re.prototype, "stopScreenShareTracks", 1);
ie([
  v.trace("OldMediaHandler.removeAudioTrack")
], re.prototype, "removeAudioTrack", 1);
ie([
  v.trace("OldMediaHandler.removeVideoTrack")
], re.prototype, "removeVideoTrack", 1);
ie([
  v.trace("OldMediaHandler.removeScreenShareTracks")
], re.prototype, "removeScreenShareTracks", 1);
ie([
  v.trace("OldMediaHandler.removeAllTracks")
], re.prototype, "removeAllTracks", 1);
ie([
  v.trace("OldMediaHandler.setAudioTrack")
], re.prototype, "setAudioTrack", 1);
ie([
  v.trace("OldMediaHandler.setVideoTrack")
], re.prototype, "setVideoTrack", 1);
ie([
  v.trace("OldMediaHandler.setScreenShareTracks")
], re.prototype, "setScreenShareTracks", 1);
ie([
  v.trace("OldMediaHandler::disableAudio")
], re.prototype, "disableAudio", 1);
ie([
  v.trace("OldMediaHandler::enableAudio")
], re.prototype, "enableAudio", 1);
ie([
  v.trace("OldMediaHandler.toggleAudio")
], re.prototype, "toggleAudio", 1);
ie([
  v.trace("OldMediaHandler.toggleVideo")
], re.prototype, "toggleVideo", 1);
ie([
  v.trace("OldMediaHandler.toggleScreenShare")
], re.prototype, "toggleScreenShare", 1);
class Lp extends mt {
  constructor() {
    super(...arguments);
    _(this, "localMediaHandler");
  }
  updatePermission() {
    return p(this, null, function* () {
      var c, u;
      const r = (h, f) => {
        this.mediaPermissions[h] = f;
        const g = { message: this.mediaPermissions[h], kind: h };
        f === "DENIED" ? D.emit(P.MEDIA_PERMISSION_ERROR, g) : D.emit(P.MEDIA_PERMISSION_UPDATE, g);
      };
      if (fe.getName() === "firefox")
        return;
      const n = "microphone", i = "camera", s = yield (c = navigator == null ? void 0 : navigator.permissions) == null ? void 0 : c.query({ name: n }), a = yield (u = navigator == null ? void 0 : navigator.permissions) == null ? void 0 : u.query({
        name: i
      }), o = (h, f) => {
        switch (f) {
          case "granted":
            r(h, "ACCEPTED");
            break;
          case "denied":
            r(h, "DENIED");
            break;
          case "prompt":
            r(h, "NOT_REQUESTED");
            break;
        }
        this.localMediaHandler.repopulateAvailableDevices();
      };
      s && (s.onchange = () => o("audio", s.state)), a && (a.onchange = () => o("video", a.state));
    });
  }
  init() {
    return p(this, arguments, function* (r = {}, n = !1) {
      var i, s, a, o;
      if (fe.init(), !this.localMediaHandler)
        try {
          let c = !0;
          if (G.defaults.mediaHandler)
            c = !1, this.localMediaHandler = G.defaults.mediaHandler.localMediaHandler;
          else if (navigator.RNLocalMediaHandlerImpl) {
            const { RNLocalMediaHandlerImpl: u } = navigator;
            this.localMediaHandler = yield u.init();
          } else
            ae.hasFeature(
              oe.NEW_LOCAL_MEDIA_HANDLER
            ) || window.FAST_DYTE ? this.localMediaHandler = new nt(
              r.constraints,
              (i = G == null ? void 0 : G.defaults) == null ? void 0 : i.isNonPreferredDevice,
              (s = G == null ? void 0 : G.defaults) == null ? void 0 : s.autoSwitchAudioDevice
            ) : this.localMediaHandler = yield re.init(
              r.constraints
            );
          if (D.on(
            P.MEDIA_PERMISSION_UPDATE,
            (u) => p(this, null, function* () {
              if (u.message === "ACCEPTED") {
                const h = this.getCurrentDevices(), f = yield this.getAudioDevices(), g = yield this.getVideoDevices(), E = yield this.getSpeakerDevices(), R = ae.hasFeature(
                  oe.NEW_LOCAL_MEDIA_HANDLER
                );
                switch (u == null ? void 0 : u.kind) {
                  case "audio":
                    !h.audio && f.length > 0 && (R || this.setDevice(f[0])), !h.speaker && E.length > 0 && (R || this.setDevice(E[0]));
                    break;
                  case "video":
                    !h.video && g.length > 0 && (R || this.setDevice(g[0]));
                    break;
                  default:
                    break;
                }
              }
              if (u.message === "NOT_REQUESTED")
                switch (u == null ? void 0 : u.kind) {
                  case "audio":
                    this.rawAudioTrack && this.disableAudio();
                    break;
                  case "video":
                    this.rawVideoTrack && this.disableVideo();
                    break;
                  default:
                    break;
                }
              this.emit("mediaPermissionUpdate", u);
            })
          ), D.on(
            P.MEDIA_PERMISSION_ERROR,
            (u) => p(this, null, function* () {
              const { kind: h, message: f } = u;
              h === "audio" ? this.disableAudio() : h === "video" ? this.disableVideo() : h === "screenshare" && this.disableScreenShare(), m.error("SelfController::mediaPermissionError", {
                error: { message: u.message },
                constraints: u.constraints,
                mediaPermissionsErrors: {
                  kind: h,
                  message: f
                }
              }), this.emit("mediaPermissionError", u), this.emit("mediaPermissionUpdate", { message: f, kind: h });
            })
          ), c) {
            const u = this.localMediaHandler.setupStreams({
              video: (a = r == null ? void 0 : r.video) != null ? a : !0,
              audio: (o = r == null ? void 0 : r.audio) != null ? o : !0
            });
            n || (yield u);
          }
        } catch (c) {
          m.error("DyteSelf::init::Failed To Setup Streams", {
            error: { name: c.name, message: c.message }
          });
        }
    });
  }
  /**
   * Returns the `audioTrack`.
   */
  get audioTrack() {
    return this.localMediaHandler.audioTrack;
  }
  /**
   * Returns the `rawAudioTrack` having no middleware executed on it.
   */
  get rawAudioTrack() {
    return this.localMediaHandler.rawAudioTrack;
  }
  /**
   * Returns the current audio and video permissions given by the user.
   * 'ACCEPTED' if the user has given permission to use the media.
   * 'CANCELED' if the user has canceled the screenshare.
   * 'DENIED' if the user has denied permission to use the media.
   * 'SYS_DENIED' if the user's system has denied permission to use the media.
   * 'UNAVAILABLE' if the media is not available (or being used by a different application).
   */
  get mediaPermissions() {
    return this.localMediaHandler.permissions;
  }
  /**
   * Adds the audio middleware to be executed on the raw audio stream.
   * If there are more than 1 audio middlewares,
   * they will be executed in the sequence they were added in.
   * If you want the sequence to be altered, please remove all previous middlewares and re-add.
   */
  addAudioMiddleware(r) {
    return p(this, null, function* () {
      return this.localMediaHandler.addAudioMiddleware(r);
    });
  }
  /**
   * Removes the audio middleware, if it is there.
   */
  removeAudioMiddleware(r) {
    return p(this, null, function* () {
      return this.localMediaHandler.removeAudioMiddleware(r);
    });
  }
  /**
   * Returns the `videoTrack`.
   */
  get videoTrack() {
    return this.localMediaHandler.videoTrack;
  }
  /**
   * Returns the `videoTrack` having no middleware executed on it.
   */
  get rawVideoTrack() {
    return this.localMediaHandler.rawVideoTrack;
  }
  /**
   * Adds the video middleware to be executed on the raw video stream.
   * If there are more than 1 video middlewares,
   * they will be executed in the sequence they were added in.
   * If you want the sequence to be altered, please remove all previous middlewares and re-add.
   */
  addVideoMiddleware(r) {
    return p(this, null, function* () {
      return this.localMediaHandler.addVideoMiddleware(r);
    });
  }
  /**
   * Removes the video middleware, if it is there.
   */
  removeVideoMiddleware(r) {
    return p(this, null, function* () {
      return this.localMediaHandler.removeVideoMiddleware(r);
    });
  }
  /**
   * Returns the screen share tracks.
   */
  get screenShareTracks() {
    return this.localMediaHandler.screenShareTracks;
  }
  /**
   * Returns true if audio is enabled.
   */
  get audioEnabled() {
    return this.localMediaHandler.audioEnabled;
  }
  /**
   * Returns true if video is enabled.
   */
  get videoEnabled() {
    return this.localMediaHandler.videoEnabled;
  }
  /**
   * Returns true if screen share is enabled.
   */
  get screenShareEnabled() {
    return this.localMediaHandler.screenShareEnabled;
  }
  enableAudio() {
    return p(this, null, function* () {
      yield this.localMediaHandler.enableAudio(), this.emit("audioUpdate", {
        audioEnabled: this.audioEnabled,
        audioTrack: this.audioTrack
      });
    });
  }
  enableVideo() {
    return p(this, null, function* () {
      yield this.localMediaHandler.enableVideo(), this.emit("videoUpdate", {
        videoEnabled: this.videoEnabled,
        videoTrack: this.videoTrack
      });
    });
  }
  disableAudio() {
    return p(this, null, function* () {
      this.localMediaHandler.disableAudio(), this.emit("audioUpdate", {
        audioEnabled: this.audioEnabled,
        audioTrack: this.audioTrack
      });
    });
  }
  disableVideo() {
    return p(this, null, function* () {
      yield this.localMediaHandler.disableVideo(), this.emit("videoUpdate", {
        videoEnabled: this.videoEnabled,
        videoTrack: this.videoTrack
      });
    });
  }
  // eslint-disable-next-line class-methods-use-this
  disableScreenShare() {
    return p(this, null, function* () {
    });
  }
  /**
   * Returns the media devices currently being used.
   */
  getCurrentDevices() {
    return this.localMediaHandler.getCurrentDevices();
  }
  /**
   * Returns the local participant's audio devices.
   */
  getAudioDevices() {
    return p(this, null, function* () {
      return yield this.localMediaHandler.getAudioDevices();
    });
  }
  /**
   * Returns the local participant's video devices.
   */
  getVideoDevices() {
    return p(this, null, function* () {
      return yield this.localMediaHandler.getVideoDevices();
    });
  }
  /**
   * Returns the local participant's speaker devices.
   */
  getSpeakerDevices() {
    return p(this, null, function* () {
      return yield this.localMediaHandler.getSpeakerDevices();
    });
  }
  /**
   * Returns the local participant's device, indexed by ID and kind.
   * @param deviceId The ID of the device.
   * @param kind The kind of the device: audio, video, or speaker.
   */
  getDeviceById(r, n) {
    let i;
    return n === "audio" ? i = "audioinput" : n === "video" ? i = "videoinput" : n === "speaker" && (i = "audiooutput"), this.localMediaHandler.getDeviceById(r, i);
  }
  /**
   * Change the current media device that is being used by the local participant.
   * @param device The device that is to be used. A device of the same `kind` will be replaced.
   * the primary stream.
   */
  setDevice(r) {
    return p(this, null, function* () {
      const n = {
        added: [r],
        removed: []
      };
      if ("isDeprecated" in this.localMediaHandler) {
        yield this.localMediaHandler.onDeviceChange(n, !0);
        return;
      }
      switch (r.kind) {
        case "audioinput":
          try {
            yield this.localMediaHandler.setAudioDevice(r);
          } catch (i) {
          } finally {
            this.emit("audioUpdate", {
              audioEnabled: this.audioEnabled,
              audioTrack: this.audioTrack
            });
          }
          break;
        case "audiooutput":
          yield this.localMediaHandler.setSpeakerDevice(r);
          break;
        case "videoinput":
          try {
            yield this.localMediaHandler.setVideoDevice(r);
          } catch (i) {
          } finally {
            this.emit("videoUpdate", {
              videoEnabled: this.videoEnabled,
              videoTrack: this.videoTrack
            });
          }
          break;
      }
      this.emit("deviceUpdate", {
        device: r
      });
    });
  }
}
const fO = {
  nonBlackPixelLumaThreshold: 20,
  identicalFrameSsimThreshold: 0.985,
  media: "video"
};
var Di, xr, cn, Oi, jo, qs, $p, Hs, Up, Ws, Fp, Mi, Ko, js, Vp;
const Nn = class {
  constructor(e) {
    // Private methods
    b(this, Oi);
    b(this, qs);
    b(this, Hs);
    _(this, "metadata", {});
    _(this, "video");
    _(this, "canvas");
    _(this, "nonBlackPixelLumaThreshold");
    _(this, "identicalFrameSsimThreshold");
    _(this, "previousFrame", new Uint8ClampedArray());
    b(this, Di, void 0);
    _(this, "track");
    _(this, "analysing");
    b(this, xr, void 0);
    b(this, cn, void 0);
    _(this, "preview");
    const { nonBlackPixelLumaThreshold: r, identicalFrameSsimThreshold: n, media: i } = Y(Y({}, fO), e);
    this.nonBlackPixelLumaThreshold = r, this.identicalFrameSsimThreshold = n, this.analysing = !1, y(this, xr, i), this.preview = !1;
  }
  setTrack(e) {
    var i, s, a;
    (i = this.track) == null || i.stop(), this.track = e;
    const { height: r, width: n } = (a = (s = this.track) == null ? void 0 : s.getConstraints()) != null ? a : {};
    if (this.metadata.resolution = [n, r], d(this, xr) === "screenshare") {
      D.emit(P.SCREENSHARE_VIDEO_TRACK_CREATED);
      return;
    }
    D.emit(P.VIDEO_TRACK_CREATED);
  }
  getTrackMetadata() {
    return this.track ? (this.metadata.label = this.track.label, this.metadata) : null;
  }
  startTrackAnalysis() {
    return p(this, null, function* () {
      var e;
      return !this.track || this.analysing ? !1 : (!this.video && !((e = this.video) != null && e.src) && (y(this, cn, new MediaStream()), d(this, cn).addTrack(this.track), this.video = document.createElement("video"), this.canvas = document.createElement("canvas"), this.video.setAttribute("autoplay", ""), this.video.setAttribute("muted", ""), [this.video.width, this.video.height] = this.metadata.resolution, this.video.srcObject = d(this, cn)), window.requestAnimationFrame(j(this, Oi, jo).bind(this)), this.analysing = !0, !0);
    });
  }
  stopTrackAnalysis() {
    this.analysing && (this.analysing = !1, clearTimeout(d(this, Di)));
  }
  cleanup() {
    var e;
    if (this.stopTrackAnalysis(), (e = this.track) == null || e.stop(), this.track = void 0, y(this, cn, void 0), this.video && (this.video.srcObject = void 0, this.video = void 0), this.canvas = void 0, this.previousFrame = new Uint8ClampedArray(), d(this, xr) === "screenshare") {
      D.emit(P.SCREENSHARE_VIDEO_TRACK_CLOSED);
      return;
    }
    D.emit(P.VIDEO_TRACK_CLOSED);
  }
};
let en = Nn;
Di = new WeakMap(), xr = new WeakMap(), cn = new WeakMap(), Oi = new WeakSet(), jo = function() {
  var e;
  try {
    const r = j(this, qs, $p).call(this), n = j(this, Hs, Up).call(this, r.data, r.data.length), i = j(e = Nn, Ws, Fp).call(e, this.previousFrame, r.data);
    this.previousFrame = r.data;
    const s = {
      isBlackFrame: n,
      videoScore: i,
      isFrozenFrame: i > this.identicalFrameSsimThreshold,
      timestamp: new Date().getTime()
    };
    d(this, xr) === "screenshare" ? D.emit(
      P.SCREENSHARE_VIDEO_TRACK_ANALYSIS,
      s
    ) : D.emit(P.VIDEO_TRACK_ANALYSIS, s), y(this, Di, setTimeout(() => {
      this.track && window.requestAnimationFrame(j(this, Oi, jo).bind(this));
    }, 3e3));
  } catch (r) {
    d(this, xr) === "screenshare" ? D.emit(P.SCREENSHARE_VIDEO_TRACK_ANALYSIS_ERROR) : D.emit(P.VIDEO_TRACK_ANALYSIS_ERROR);
  }
}, qs = new WeakSet(), $p = function() {
  var r, n;
  this.canvas.width = (r = this.video) == null ? void 0 : r.width, this.canvas.height = (n = this.video) == null ? void 0 : n.height;
  const e = this.canvas.getContext("2d", { willReadFrequently: !0 });
  return e.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height), e.getImageData(0, 0, this.canvas.width, this.canvas.height);
}, Hs = new WeakSet(), Up = function(e, r) {
  const n = this.nonBlackPixelLumaThreshold;
  let i = 0;
  for (let s = 4; s < r; s += 4)
    if (i += 0.21 * e[s] + 0.72 * e[s + 1] + 0.07 * e[s + 2], i > n * (s / 4))
      return !1;
  return !0;
}, Ws = new WeakSet(), Fp = function(e, r) {
  var te, J, Ee;
  if (e.length !== r.length)
    return 0;
  const n = 0.01, i = 0.03, s = 255, a = n * s * (n * s), o = i * s * (i * s), c = o / 2, u = j(te = Nn, Mi, Ko).call(te, e), h = u.mean, f = u.variance, g = Math.sqrt(f), E = j(J = Nn, Mi, Ko).call(J, r), R = E.mean, I = E.variance, S = Math.sqrt(I), k = j(Ee = Nn, js, Vp).call(Ee, e, r, h, R), O = (2 * h * R + a) / (h * h + R * R + a), W = (k + c) / (g * S + c), C = (2 * g * S + o) / (f + I + o);
  return O * C * W;
}, Mi = new WeakSet(), Ko = function(e) {
  let r = 0, n;
  for (n = 0; n < e.length; n++)
    r += e[n];
  const i = r / (e.length - 1);
  let s = 0;
  for (n = 1; n < e.length; n++)
    s = e[n - 1] - i, r += e[n] + s * s;
  return { mean: i, variance: r / e.length };
}, js = new WeakSet(), Vp = function(e, r, n, i) {
  let s = 0;
  for (let a = 0; a < e.length; a += 1)
    s += (e[a] - n) * (r[a] - i);
  return s / e.length;
}, b(en, Ws), b(en, Mi), b(en, js);
const _t = new en(), vi = new en({ media: "screenshare" });
var pO = Object.defineProperty, mO = Object.getOwnPropertyDescriptor, Ce = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? mO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && pO(e, r, i), i;
}, Dr = /* @__PURE__ */ ((t) => (t.OFF_STAGE = "OFF_STAGE", t.REQUESTED_TO_JOIN_STAGE = "REQUESTED_TO_JOIN_STAGE", t.ACCEPTED_TO_JOIN_STAGE = "ACCEPTED_TO_JOIN_STAGE", t.ON_STAGE = "ON_STAGE", t))(Dr || {}), qn, Ut, Hn, dn, Sl;
let ve = (Sl = class extends Lp {
  constructor(e, r, n, i, s) {
    var a;
    super();
    _(this, "id");
    _(this, "name");
    _(this, "picture");
    _(this, "customParticipantId");
    _(this, "waitlistStatus");
    b(this, qn, void 0);
    b(this, Ut, void 0);
    b(this, Hn, void 0);
    _(this, "role");
    _(this, "userId");
    _(this, "organizationId");
    _(this, "supportsRemoteControl", !1);
    _(this, "device");
    b(this, dn, void 0);
    /* Name of the preset used to join the meeting */
    _(this, "presetName");
    /**
     * Returns the current state of room
     * init - Inital State
     * joined - User is in the meeting
     * waitlisted - User is in the waitlist state
     * rejected - User's was in the waiting room, but the entry was rejected
     * kicked - A priveleged user removed the user from the meeting
     * left - User left the meeting
     * ended - The meeting was ended
     */
    _(this, "roomState", "init");
    /**
     * Returns true if the local participant has joined the meeting.
     */
    _(this, "roomJoined", !1);
    this.id = e, this.userId = r.id, this.name = r.name, this.picture = r.picture, this.customParticipantId = (a = r.customParticipantId) != null ? a : r.clientSpecificId, this.waitlistStatus = "none", y(this, Ut, n), y(this, qn, i), y(this, Hn, !1), this.organizationId = r.organizationId, this.supportsRemoteControl = fe.isElectron(), this.device = fe.getDeviceInfo(), this.presetName = s, i.viewType !== ct.Chat && this.updatePermission();
  }
  /**
   * @deprecated
   * Use `customParticipantId` instead
   */
  get clientSpecificId() {
    return this.customParticipantId;
  }
  get stageStatus() {
    return d(this, dn);
  }
  static __init__() {
    return p(this, null, function* () {
      var h, f, g, E, R;
      const e = (f = (h = G.defaults) == null ? void 0 : h.audio) != null ? f : !0, r = (E = (g = G.defaults) == null ? void 0 : g.video) != null ? E : !0, n = ot(), i = {
        id: ot(),
        name: gi.person.fullName(),
        email: "",
        picture: gi.image.avatar(),
        loggedIn: !0,
        scope: ["test"],
        clientSpecificId: "mock_self",
        customParticipantId: "mock_self",
        organizationId: ot()
      }, s = Go.default(ct.GroupCall, !1), a = qo.default(), o = "group_call_host", c = new ve(n, i, s, a, o);
      if (a.viewType === ct.Chat)
        return c;
      const u = OD(a.mediaConstraints);
      return Gf(u, (R = G.defaults) == null ? void 0 : R.mediaConfiguration), yield c.init(
        {
          audio: e,
          video: r,
          constraints: u
        },
        !1
      ), c.setupEvents(), c;
    });
  }
  setupEvents() {
    D.on(P.ROOM_NODE_CONNECTED, (n) => p(this, [n], function* ({ wasDisconnected: e, wasJoinAttempted: r }) {
      e && (yield this.resetSelf(r));
    })), D.onAsync(P.SET_STAGE_STATUS, (e) => p(this, null, function* () {
      switch (y(this, dn, e), e) {
        case "ACCEPTED_TO_JOIN_STAGE":
          this.emit("joinStageRequestAccepted");
          break;
        case "REQUESTED_TO_JOIN_STAGE":
          this.emit("peerRequestToJoinStage");
          break;
        case "OFF_STAGE":
          this.emit("stageLeft");
          break;
      }
    })), D.on(P.STOPPED_PRESENTING, () => {
      this.localMediaHandler.destruct(), this.setWebinarStageStatus(
        "OFF_STAGE"
        /* OFF_STAGE */
      ), this.emit("stageLeft");
    }), this.localMediaHandler.on("AUDIO_TRACK_CHANGE", () => p(this, null, function* () {
      D.emit(P.AUDIO_TRACK_CHANGED), m.info("DyteSelf::setupEvents::AUDIO_TRACK_CHANGE", Y({}, Zr(this))), this.emit("audioUpdate", {
        audioEnabled: this.audioEnabled,
        audioTrack: this.audioTrack
      });
    })), this.localMediaHandler.on("VIDEO_TRACK_CHANGE", () => p(this, null, function* () {
      D.emit(P.VIDEO_TRACK_CHANGED), m.info("DyteSelf::setupEvents::VIDEO_TRACK_CHANGE", Y({}, Zr(this))), this.roomJoined && this.rawVideoTrack === void 0 ? (m.info("DyteSelf::VIDEO_TRACK_CHANGE::Forcing_disable_video"), this.disableVideo()) : this.videoEnabled && this.roomJoined, this.emit("videoUpdate", {
        videoEnabled: this.videoEnabled,
        videoTrack: this.videoTrack
      });
    })), this.localMediaHandler.on(
      "DEVICE_CHANGE",
      (r) => p(this, [r], function* ({ device: e }) {
        this.emit("deviceUpdate", {
          device: e
        });
      })
    ), this.localMediaHandler.on("DEVICE_LIST_UPDATED", (e) => {
      this.emit("deviceListUpdate", e);
    }), this.localMediaHandler.on("SCREENSHARE_TRACK_CHANGE", () => p(this, null, function* () {
      if (D.emit(P.SCREENSHARE_TRACK_CHANGED), !this.roomJoined) {
        m.error(
          "DyteSelf.SCREENSHARE_TRACK_CHANGE.LocalMediaInitialized_WithoutRoomNode"
        );
        return;
      }
      m.info("DyteSelf::setupEvents::SCREENSHARE_TRACK_CHANGE", Y({}, Zr(this))), this.emit("screenShareUpdate", {
        screenShareEnabled: this.screenShareEnabled,
        screenShareTracks: this.screenShareTracks
      });
    })), this.localMediaHandler.on("SCREENSHARE_ENDED", () => p(this, null, function* () {
      yield this.disableScreenShare(), m.info("DyteSelf::setupEvents::SCREENSHARE_ENDED", Y({}, Zr(this)));
    })), this.localMediaHandler.on("AUDIO_TRACK_SILENT", () => {
    }), this.localMediaHandler.on("FORCE_MUTE_AUDIO", () => {
      this.disableAudio();
    });
  }
  /**
   * Returns the current permission given to the user for the meeting.
   */
  get permissions() {
    return d(this, Ut);
  }
  /**
   * @deprecated use 'config'
   * Returns suggested theme for the meeting.
   */
  get suggestedTheme() {
    return d(this, qn);
  }
  /**
   * Returns configuration for the meeting.
   */
  get config() {
    return d(this, qn);
  }
  /**
   * The name of the user can be set by calling this method.
   * This will get reflected to other participants ONLY if
   * this method is called before the room is joined.
   * @param name Name of the user.
   */
  setName(e) {
    if (!e)
      throw new w("Name cannot be empty.");
    this.name = e;
  }
  setupTracks() {
    return p(this, arguments, function* (e = {}) {
      var r, n;
      return e.forceReset && this.localMediaHandler.removeAllTracks(), this.localMediaHandler.setupStreams({
        video: (r = e.video) != null ? r : !0,
        audio: (n = e.audio) != null ? n : !0
      });
    });
  }
  resetSelf(e) {
    return p(this, null, function* () {
    });
  }
  destructMediaHandler() {
    return p(this, null, function* () {
      return this.localMediaHandler.destruct();
    });
  }
  removeDocumentEventListeners() {
    return p(this, null, function* () {
      return this.localMediaHandler.removeDocumentEventListeners();
    });
  }
  enableAudio() {
    return p(this, null, function* () {
      if (this.permissions.canProduceAudio !== Xr.notAllowed && !(d(this, Ut).canProduceAudio === Xr.canRequest && (this.stageStatus === "OFF_STAGE" || this.stageStatus === "REQUESTED_TO_JOIN_STAGE")) && !this.audioEnabled && (yield this.localMediaHandler.enableAudio(), !(this.roomJoined && (this.permissions.mediaRoomType !== "HIVE" || this.stageStatus === "ON_STAGE") && (this.audioTrack, !this.audioEnabled)))) {
        this.emit("audioUpdate", {
          audioEnabled: this.audioEnabled,
          audioTrack: this.audioTrack
        });
        try {
          rr.setTrack(this.rawAudioTrack);
        } catch (e) {
          m.error("Troubleshooter::micTest::Error while setting track", {
            error: e
          });
        }
      }
    });
  }
  enableVideo() {
    return p(this, null, function* () {
      var e;
      if (d(this, Ut).canProduceVideo !== Xr.notAllowed && !(d(this, Ut).canProduceVideo === Xr.canRequest && (this.stageStatus === "OFF_STAGE" || this.stageStatus === "REQUESTED_TO_JOIN_STAGE")) && !this.videoEnabled) {
        yield this.localMediaHandler.enableVideo(), this.roomJoined && (this.permissions.mediaRoomType !== "HIVE" || this.stageStatus), this.emit("videoUpdate", {
          videoEnabled: this.videoEnabled,
          videoTrack: this.videoTrack
        }), m.info("DyteSelf.enableVideo", Y({}, Zr(this)));
        try {
          _t.setTrack((e = this.videoTrack) == null ? void 0 : e.clone());
        } catch (r) {
          m.error("Troubleshooter::camTest::Error while setting track", {
            error: r
          });
        }
      }
    });
  }
  updateVideoConstraints(e) {
    return p(this, null, function* () {
      if (!this.localMediaHandler.updateVideoConstraints)
        throw new w("Unsupported");
      yield this.localMediaHandler.updateVideoConstraints(e);
    });
  }
  enableScreenShare() {
    return p(this, null, function* () {
      var e;
      if (!this.roomJoined)
        throw new w("Can`t enable screenshare without joining room");
      if (d(this, Ut).canProduceScreenshare !== Xr.notAllowed && !(d(this, Ut).canProduceScreenshare === Xr.canRequest && (this.stageStatus === "OFF_STAGE" || this.stageStatus === "REQUESTED_TO_JOIN_STAGE")) && !this.screenShareEnabled) {
        if (yield this.localMediaHandler.enableScreenShare(), this.screenShareTracks.audio || this.screenShareTracks.video, this.emit("screenShareUpdate", {
          screenShareEnabled: this.screenShareEnabled,
          screenShareTracks: this.screenShareTracks
        }), this.screenShareTracks.audio)
          try {
            Ti.setTrack(this.screenShareTracks.audio);
          } catch (r) {
            m.error("Troubleshooter::screenshareMicTest::Error while setting track", {
              error: r
            });
          }
        if (this.screenShareTracks.video)
          try {
            vi.setTrack((e = this.screenShareTracks.video) == null ? void 0 : e.clone());
          } catch (r) {
            m.error("Troubleshooter::screenshareCamTest::Error while setting track", {
              error: r
            });
          }
      }
    });
  }
  updateScreenshareConstraints(e) {
    return p(this, null, function* () {
      if (!this.localMediaHandler.updateScreenshareConstraints)
        throw new w("Unsupported");
      yield this.localMediaHandler.updateScreenshareConstraints(e);
    });
  }
  disableAudio() {
    return p(this, null, function* () {
      this.audioEnabled && (this.localMediaHandler.disableAudio(), this.roomJoined, this.emit("audioUpdate", {
        audioEnabled: this.audioEnabled,
        audioTrack: this.audioTrack
      }));
    });
  }
  disableVideo() {
    return p(this, null, function* () {
      this.videoEnabled && (yield this.localMediaHandler.disableVideo(), this.roomJoined, !("isDeprecated" in this.localMediaHandler && this.mediaPermissions.video !== "ACCEPTED") && (this.emit("videoUpdate", {
        videoEnabled: this.videoEnabled,
        videoTrack: this.videoTrack
      }), _t.preview || _t.cleanup()));
    });
  }
  disableScreenShare() {
    return p(this, null, function* () {
      this.screenShareEnabled && (yield this.localMediaHandler.disableScreenShare(), this.roomJoined, this.emit("screenShareUpdate", {
        screenShareEnabled: this.screenShareEnabled,
        screenShareTracks: this.screenShareTracks
      }), vi.cleanup(), Ti.cleanup());
    });
  }
  /**
   * Returns all media devices accessible by the local participant.
   */
  getAllDevices() {
    return this.localMediaHandler.getAllDevices();
  }
  /**
   * @access private
   * Not for external use.
   */
  setIsPinned(e, r = !0) {
    y(this, Hn, e);
    const n = e ? "pinned" : "unpinned";
    r && this.emit(n, this);
  }
  /**
   * Returns true if the current user is pinned.
   */
  get isPinned() {
    return d(this, Hn);
  }
  /**
   * @deprecated
   * Denotes the user's current stage status.
   * Use `self.stageStatus` instead.
   * */
  get webinarStageStatus() {
    return d(this, dn);
  }
  /**
   * Returns `self.id` if user has permission
   * to pin participants.
   */
  pin() {
    return p(this, null, function* () {
      if (!this.roomJoined)
        throw new w("Can`t pin participants without joining room");
    });
  }
  /**
   * Returns `self.id` if user has permission
   * to unpin participants.
   */
  unpin() {
    return p(this, null, function* () {
      if (!this.roomJoined)
        throw new w("Can`t unpin participants without joining room");
    });
  }
  setDevice(e) {
    return p(this, null, function* () {
      var i, s, a;
      if (!e)
        throw new w("No device selected");
      const r = {
        added: [e],
        removed: []
      }, n = this.getCurrentDevices();
      if (e.deviceId && (((i = n == null ? void 0 : n.audio) == null ? void 0 : i.deviceId) === e.deviceId || ((s = n == null ? void 0 : n.video) == null ? void 0 : s.deviceId) === e.deviceId || ((a = n == null ? void 0 : n.speaker) == null ? void 0 : a.deviceId) === e.deviceId) && m.warn("DyteSelf.setDevice.setting_to_in_use_device", { devices: [e] }), "isDeprecated" in this.localMediaHandler) {
        yield this.localMediaHandler.onDeviceChange(r, !0);
        return;
      }
      switch (e.kind) {
        case "audioinput":
          try {
            yield this.localMediaHandler.setAudioDevice(e);
          } catch (o) {
            this.roomJoined, this.emit("audioUpdate", {
              audioEnabled: this.audioEnabled,
              audioTrack: this.audioTrack
            });
          }
          break;
        case "audiooutput":
          yield this.localMediaHandler.setSpeakerDevice(e);
          break;
        case "videoinput":
          try {
            yield this.localMediaHandler.setVideoDevice(e);
          } catch (o) {
            this.roomJoined, this.emit("videoUpdate", {
              videoEnabled: this.videoEnabled,
              videoTrack: this.videoTrack
            });
          }
          break;
      }
    });
  }
  cleanUpTracks() {
    var e, r, n, i;
    (e = this.audioTrack) == null || e.stop(), (r = this.rawAudioTrack) == null || r.stop(), (n = this.videoTrack) == null || n.stop(), (i = this.rawVideoTrack) == null || i.stop();
  }
  requestToJoinStage() {
    return p(this, null, function* () {
      D.emitAsync(P.REQUEST_TO_JOIN_STAGE);
    });
  }
  withdrawRequestToJoinStage() {
    return p(this, null, function* () {
      D.emitAsync(P.WITHDRAW_REQUEST_TO_JOIN_STAGE);
    });
  }
  leaveStage() {
    return p(this, null, function* () {
      D.emitAsync(P.LEAVE_STAGE);
    });
  }
  joinStage() {
    return p(this, null, function* () {
      D.emitAsync(P.JOIN_STAGE);
    });
  }
  /**
   * @deprecated
   * Use `stage.setStatus(StageStatus)` instead.
   */
  setWebinarStageStatus(e) {
    switch (y(this, dn, e), D.emit(P.SET_WEBINAR_STAGE_STATUS, e), e) {
      case "ACCEPTED_TO_JOIN_STAGE":
        this.emit("joinStageRequestAccepted");
        break;
      case "REQUESTED_TO_JOIN_STAGE":
        this.emit("peerRequestToJoinStage");
        break;
      case "OFF_STAGE":
        this.emit("stageLeft");
        break;
    }
  }
  disablePreview() {
    return p(this, null, function* () {
      return this;
    });
  }
}, qn = new WeakMap(), Ut = new WeakMap(), Hn = new WeakMap(), dn = new WeakMap(), Sl);
Ce([
  v.trace("DyteSelf.setupEvents")
], ve.prototype, "setupEvents", 1);
Ce([
  v.trace("DyteSelf.setupTracks")
], ve.prototype, "setupTracks", 1);
Ce([
  v.trace("DyteSelf.resetSelf")
], ve.prototype, "resetSelf", 1);
Ce([
  v.trace("DyteSelf.destructMediaHandler")
], ve.prototype, "destructMediaHandler", 1);
Ce([
  v.trace("DyteSelf.removeDocumentEventListeners")
], ve.prototype, "removeDocumentEventListeners", 1);
Ce([
  Lt.executeWithLock({
    methodName: "meeting.self.enableAudio",
    lockName: "DyteSelf.toggleAudio",
    timeout: 3e3
  }),
  v.trace("DyteSelf.enableAudio")
], ve.prototype, "enableAudio", 1);
Ce([
  Lt.executeWithLock({
    methodName: "meeting.self.enableVideo",
    lockName: "DyteSelf.toggleVideo",
    timeout: 3e3
  }),
  v.trace("DyteSelf.enableVideo")
], ve.prototype, "enableVideo", 1);
Ce([
  v.trace("DyteSelf.updateVideoConstraints")
], ve.prototype, "updateVideoConstraints", 1);
Ce([
  v.trace("DyteSelf.enableScreenShare"),
  Lt.executeWithLock({
    methodName: "meeting.self.enableScreenShare",
    lockName: "DyteSelf.toggleScreenShare",
    timeout: 3e3
  })
], ve.prototype, "enableScreenShare", 1);
Ce([
  v.trace("DyteSelf.updateScreenshareConstraints")
], ve.prototype, "updateScreenshareConstraints", 1);
Ce([
  Lt.executeWithLock({
    methodName: "meeting.self.disableAudio",
    lockName: "DyteSelf.toggleAudio",
    timeout: 3e3
  }),
  v.trace("DyteSelf.disableAudio")
], ve.prototype, "disableAudio", 1);
Ce([
  Lt.executeWithLock({
    methodName: "meeting.self.disableVideo",
    lockName: "DyteSelf.toggleVideo",
    timeout: 3e3
  }),
  v.trace("DyteSelf.disableVideo")
], ve.prototype, "disableVideo", 1);
Ce([
  Lt.executeWithLock({
    methodName: "meeting.self.disableScreenShare",
    lockName: "DyteSelf.toggleScreenShare",
    timeout: 3e3
  }),
  v.trace("DyteSelf.disableScreenShare")
], ve.prototype, "disableScreenShare", 1);
Ce([
  v.trace("DyteSelf.setDevice")
], ve.prototype, "setDevice", 1);
Ce([
  v.trace("DyteSelf.requestToJoinStage")
], ve.prototype, "requestToJoinStage", 1);
Ce([
  v.trace("DyteSelf.withdrawRequestToJoinStage")
], ve.prototype, "withdrawRequestToJoinStage", 1);
Ce([
  v.trace("DyteSelf.leaveStage")
], ve.prototype, "leaveStage", 1);
Ce([
  v.trace("DyteSelf.joinStage")
], ve.prototype, "joinStage", 1);
Ce([
  v.trace("DyteSelf.deprecated.disablePreview")
], ve.prototype, "disablePreview", 1);
ve = Ce([
  $e((t) => {
    throw new w(t.message, "1100");
  })
], ve);
var gO = Object.defineProperty, _O = Object.getOwnPropertyDescriptor, br = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? _O(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && gO(e, r, i), i;
}, Wn, un, Ft, bl;
let Mt = (bl = class extends mt {
  constructor(e, r) {
    super();
    /**
     * The peer ID of the participant.
     * The participants are indexed by this ID in the participant map.
     */
    _(this, "id");
    /**
     * The user ID of the participant.
     */
    _(this, "userId");
    /**
     * The name of the participant.
     */
    _(this, "name");
    /**
     * The picture of the participant.
     */
    _(this, "picture");
    _(this, "isHost");
    /**
     * The custom id of the participant set during Add Participant REST API
     */
    _(this, "customParticipantId");
    _(this, "flags");
    /**
     * The device configuration of the participant.
     */
    _(this, "device");
    /**
     * The participant's video track.
     */
    _(this, "videoTrack");
    /**
     * The participant's audio track.
     */
    _(this, "audioTrack");
    /**
     * The participant's screenshare video and audio track.
     */
    _(this, "screenShareTracks");
    /**
     * This is true if the participant's video is enabled.
     */
    _(this, "videoEnabled");
    /**
     * This is true if the participant's audio is enabled.
     */
    _(this, "audioEnabled");
    /**
     * This is true if the participant is screensharing.
     */
    _(this, "screenShareEnabled");
    /**
     * producers created by participant
     */
    _(this, "producers");
    /**
     * This is true if the participant is pinned.
     */
    b(this, Wn, void 0);
    /**
     * This is true if the dyte participant supports remote control.
     */
    _(this, "supportsRemoteControl", !1);
    /**
     * Represents the participants current stage status
     */
    b(this, un, void 0);
    /**
     * The preset of the participant.
     */
    _(this, "presetName");
    b(this, Ft, void 0);
    const {
      id: n,
      userId: i,
      displayName: s,
      device: a,
      picture: o,
      isHost: c,
      flags: u,
      clientSpecificId: h,
      stageStatus: f,
      customParticipantId: g,
      audioMuted: E,
      audioTrack: R,
      videoEnabled: I = !1,
      videoTrack: S,
      producers: k,
      metadata: O
    } = e;
    this.id = n, this.userId = i, this.name = s, this.device = a, this.picture = o, this.isHost = c, this.flags = u, y(this, un, f != null ? f : Dr.ON_STAGE), this.customParticipantId = g != null ? g : h, this.audioEnabled = !E, this.audioTrack = R, this.videoEnabled = I, this.videoTrack = S, this.screenShareTracks = {
      audio: void 0,
      video: void 0
    }, this.producers = k != null ? k : [], this.presetName = O == null ? void 0 : O.preset_name, y(this, Wn, !1), y(this, Ft, r), this.setupEvents();
  }
  /**
   * @deprecated
   * Use `customParticipantId`
   */
  get clientSpecificId() {
    return this.customParticipantId;
  }
  // eslint-disable-next-line class-methods-use-this
  // get #roomNodeClient() {
  // 	return getRoomNodeClient();
  // }
  /**
   * @deprecated
   * Denotes the participants's current stage status.
   * Use `participant.stageStatus` instead.
   *  */
  get webinarStageStatus() {
    return d(this, un);
  }
  /** Denotes the participants's current stage status. */
  get stageStatus() {
    return d(this, un);
  }
  /**
   * Returns true if the local participant has joined the meeting.
   */
  get roomJoined() {
    return d(this, Ft).roomJoined;
  }
  setVideoEnabled(e, r = !0) {
    this.videoEnabled = e, r && (m.info("DyteParticipant::setVideoEnabled::videoUpdate", Y({}, Zr(this))), this.emit("videoUpdate", {
      videoEnabled: this.videoEnabled,
      videoTrack: this.videoTrack
    }));
  }
  setAudioEnabled(e, r = !0) {
    this.audioEnabled = e, r && (m.info("DyteParticipant::setAudioEnabled::audioUpdate", Y({}, Zr(this))), this.emit("audioUpdate", {
      audioEnabled: this.audioEnabled,
      audioTrack: this.audioTrack
    }));
  }
  setScreenShareEnabled(e, r = !0) {
    this.screenShareEnabled = e, r && this.emit("screenShareUpdate", {
      screenShareEnabled: this.screenShareEnabled,
      screenShareTracks: this.screenShareTracks
    });
  }
  setupEvents() {
    D.onAsync(
      P.UPDATE_PEER_STAGE_STATUS,
      (n) => p(this, [n], function* ({ id: e, status: r }) {
        e === this.id && r !== this.stageStatus && this.setStageStatus(r);
      })
    );
  }
  /**
   * Returns `participant.id` if user has permission
   * to pin participants.
   */
  pin() {
    return p(this, null, function* () {
      if (!this.roomJoined)
        throw new w("Can`t pin participant without joining room");
      if (!d(this, Ft).permissions.pinParticipant)
        throw new w("You do not have permission to pin participants.");
    });
  }
  /**
   * Returns `participant.id` if user has permission
   * to unpin participants.
   */
  unpin() {
    return p(this, null, function* () {
      if (!this.roomJoined)
        throw new w("Can`t unpin participant without joining room");
      if (!d(this, Ft).permissions.pinParticipant)
        throw new w("You do not have permission to unpin participants.");
    });
  }
  /**
   * @access private
   * Not for external use
   */
  setIsPinned(e, r = !0) {
    y(this, Wn, e);
    const n = e ? "pinned" : "unpinned";
    r && this.emit(n, this);
  }
  disableAudio() {
    return p(this, null, function* () {
      const e = this.id;
      if (m.info("DyteParticipant::disable_audio", {
        dyteParticipant: { id: e }
      }), !this.roomJoined)
        throw new w(
          "Can`t disable participant audio without joining room"
        );
      if (!d(this, Ft).permissions.canDisableParticipantAudio)
        throw m.error("DyteParticipant::unauthorized_disable_audio", {
          dyteParticipant: { id: e }
        }), new w(
          "Unauthorized: User does not have permission to disable participant audio."
        );
    });
  }
  kick() {
    return p(this, null, function* () {
      const e = this.id;
      if (m.info("DyteParticipant::kick", {
        dyteParticipant: { id: e }
      }), !this.roomJoined)
        throw new w("Can`t kick participant without joining room");
      if (d(this, Ft).permissions.kickParticipant) {
        yield D.emitAsync(P.KICK_PEER, {
          peerId: e
        });
        return;
      }
      throw m.error("DyteParticipant::unauthorized_kick", {
        dyteParticipant: { id: e }
      }), new w(
        "Unauthorized: User does not have permission to kick participants."
      );
    });
  }
  disableVideo() {
    return p(this, null, function* () {
      const e = this.id;
      if (m.info("DyteParticipant::disable_video", {
        dyteParticipant: { id: e }
      }), !this.roomJoined)
        throw new w(
          "Can`t disable participant video without joining room"
        );
      if (!d(this, Ft).permissions.canDisableParticipantVideo)
        throw m.error("DyteParticipant::unauthorized_disable_video", {
          dyteParticipant: { id: e }
        }), new w(
          "Unauthorized: User does not have permission to disable participant video."
        );
    });
  }
  acceptJoinStageRequest() {
    return p(this, null, function* () {
      D.emitAsync(P.ACCEPT_JOIN_STAGE_REQUEST, {
        userId: this.userId
      });
    });
  }
  rejectRequestToJoinStage() {
    return p(this, null, function* () {
      D.emitAsync(P.REJECT_REQUEST_TO_JOIN_STAGE, {
        userId: this.userId
      });
    });
  }
  getPermissions() {
    return p(this, null, function* () {
      return {};
    });
  }
  removeFromStage() {
    return p(this, null, function* () {
      D.emitAsync(P.REMOVE_FROM_STAGE, {
        userId: this.userId
      });
    });
  }
  setStageStatus(e) {
    y(this, un, e);
    let r;
    e === Dr.OFF_STAGE && (r = "peerStoppedPresenting"), e === Dr.ON_STAGE && (r = "peerStartedPresenting"), e === Dr.ACCEPTED_TO_JOIN_STAGE && (r = "peerAcceptedToJoinStage"), e === Dr.REQUESTED_TO_JOIN_STAGE && (D.emit(P.NEW_STAGE_REQUEST, { count: 1 }), r = "peerRequestToJoinStage"), r && this.emit(r, this), this.emit("stageStatusUpdate", this);
  }
  /** @deprecated */
  setWebinarStageStatus(e) {
    this.setStageStatus(e);
  }
  /**
   * Returns true if the participant is pinned.
   */
  get isPinned() {
    return d(this, Wn);
  }
}, Wn = new WeakMap(), un = new WeakMap(), Ft = new WeakMap(), bl);
br([
  v.trace("DyteParticipant.disableAudio")
], Mt.prototype, "disableAudio", 1);
br([
  v.trace("DyteParticipant.kick")
], Mt.prototype, "kick", 1);
br([
  v.trace("DyteParticipant.disableVideo")
], Mt.prototype, "disableVideo", 1);
br([
  v.trace("DyteParticipant.acceptJoinStageRequest")
], Mt.prototype, "acceptJoinStageRequest", 1);
br([
  v.trace("DyteParticipant.rejectRequestToJoinStage")
], Mt.prototype, "rejectRequestToJoinStage", 1);
br([
  v.trace("DyteParticipant.getPermissions")
], Mt.prototype, "getPermissions", 1);
br([
  v.trace("DyteParticipant.removeFromStage")
], Mt.prototype, "removeFromStage", 1);
br([
  v.trace("DyteParticipant.setStageStatus")
], Mt.prototype, "setStageStatus", 1);
Mt = br([
  $e((t) => {
    throw new w(t.message, "1200");
  })
], Mt);
var Re, ln;
class Bp extends Map {
  constructor(r) {
    const {
      onAddEvent: n,
      onDeleteEvent: i,
      onClearEvent: s
    } = r;
    super();
    b(this, Re, void 0);
    b(this, ln, void 0);
    _(this, "onAddEvent");
    _(this, "onDeleteEvent");
    _(this, "onClearEvent");
    y(this, Re, new Rr()), this.onAddEvent = n, this.onDeleteEvent = i, this.onClearEvent = s, y(this, ln, /* @__PURE__ */ new Map());
  }
  emit(r, ...n) {
    return d(this, Re).emit(r, ...n);
  }
  on(r, n) {
    return d(this, Re).on(r, n);
  }
  addListener(r, n) {
    return d(this, Re).addListener(r, n);
  }
  off(r, n) {
    return d(this, Re).off(r, n);
  }
  once(r, n) {
    return d(this, Re).once(r, n);
  }
  prependListener(r, n) {
    return d(this, Re).prependListener(r, n);
  }
  prependOnceListener(r, n) {
    return d(this, Re).prependOnceListener(r, n);
  }
  removeListener(r, n) {
    return d(this, Re).removeListener(r, n);
  }
  removeAllListeners(r) {
    return d(this, Re).removeAllListeners(r);
  }
  listeners(r) {
    return d(this, Re).listeners(r);
  }
  listenerCount(r) {
    return d(this, Re).listenerCount(r);
  }
  getMaxListeners() {
    return d(this, Re).getMaxListeners();
  }
  setMaxListeners(r) {
    return d(this, Re).setMaxListeners(r);
  }
  eventNames() {
    return d(this, Re).eventNames();
  }
  add(r, n = !0) {
    return this.set(r.id, r, n);
  }
  set(r, n, i = !0) {
    const s = super.set(r, n), a = (o, ...c) => {
      this.emit(o, n, ...c);
    };
    return d(this, ln).set(r, a), n.on("*", a), i && d(this, Re).emit(this.onAddEvent, n), s;
  }
  delete(r, n = !0, i = !1) {
    const s = this.get(r);
    if (!s)
      return !1;
    s.removeListener("*", d(this, ln).get(r));
    const a = super.delete(r);
    return i && s.removeAllListeners(), n && d(this, Re).emit(this.onDeleteEvent, s), a;
  }
  clear(r = !0, n = !1) {
    this.forEach((s) => {
      s.removeListener("*", d(this, ln).get(s.id)), n && s.removeAllListeners();
    });
    const i = super.clear();
    return r && d(this, Re).emit(this.onClearEvent), i;
  }
  toArray() {
    return Array.from(this.values());
  }
}
Re = new WeakMap(), ln = new WeakMap();
class as extends Bp {
  constructor(e) {
    const {
      onAddEvent: r = "participantJoined",
      onDeleteEvent: n = "participantLeft",
      onClearEvent: i = "participantsCleared"
    } = e != null ? e : {};
    super({
      onAddEvent: r,
      onDeleteEvent: n,
      onClearEvent: i
    });
  }
  add(e, r = !0) {
    return this.has(e.id) && Object.is(this.get(e.id), e) === !1 && this.delete(e.id), super.add(e, r);
  }
  clear(e = !0, r = !1) {
    return super.clear(e, r);
  }
  delete(e, r = !0, n = !1) {
    return super.delete(e, r, n);
  }
}
class TO {
  constructor() {
    _(this, "_orderedArray");
    _(this, "_map");
    this._map = /* @__PURE__ */ new Map(), this._orderedArray = [];
  }
  add(e, r) {
    if (!this._map.has(e))
      return this._map.set(e, { peerId: e, priority: r }), this._orderedArray.splice(Math.max(r - 1, 0), 0, e), this.index(e);
    const n = this.index(e);
    this.delete(e);
    const i = this.add(e, r);
    return n !== i ? (m.info(
      "DyteSelectedPeer::add()::new_position_for_active_speaker",
      {
        selectedPeer: {
          oldIndex: n,
          newIndex: i
        }
      }
    ), i) : -1;
  }
  delete(e) {
    if (this._map.has(e)) {
      const r = this.index(e);
      this._map.delete(e), this._orderedArray.splice(r, 1);
    }
  }
  index(e) {
    return this._map.has(e) ? this._orderedArray.indexOf(e) : -1;
  }
  [Symbol.iterator]() {
    return this._orderedArray[Symbol.iterator]();
  }
}
class vO {
  constructor() {
    _(this, "_activeSpeakerPeers");
    _(this, "_compulsoryPeers");
    this._activeSpeakerPeers = new TO(), this._compulsoryPeers = /* @__PURE__ */ new Set();
  }
  add(e, r) {
    if (r < 0)
      return this._compulsoryPeers.add(e), 0;
    if (this.compulsoryPeers.includes(e) && (r > 0 || r === 246267631)) {
      if (m.info("DyteSelectedPeer::removing_compulsory_peer", {
        selectedPeer: {
          peerId: e
        }
      }), this._removeFromCompulsoryPeer(e), r === 246267631)
        return -1;
    } else if (r === 229490415)
      return this.delete(e), -1;
    return this._activeSpeakerPeers.add(e, r);
  }
  delete(e) {
    m.info("DyteSelectedPeer::deleting_peer_from_selectedPeer", {
      selectedPeer: {
        peerId: e
      }
    }), this._removeFromCompulsoryPeer(e), this._activeSpeakerPeers.delete(e);
  }
  index(e) {
    return this._activeSpeakerPeers.index(e);
  }
  get peers() {
    return Array.from(new Set(this.compulsoryPeers.concat(this.activeSpeakerPeers)));
  }
  get compulsoryPeers() {
    return Array.from(this._compulsoryPeers.values());
  }
  get peerPriorities() {
    return Array.from(this._activeSpeakerPeers).map((e, r) => r);
  }
  get activeSpeakerPeers() {
    return Array.from(this._activeSpeakerPeers);
  }
  _removeFromCompulsoryPeer(e) {
    this._compulsoryPeers.delete(e);
  }
}
var Lr;
class EO extends Rr {
  constructor() {
    super();
    b(this, Lr, void 0);
    y(this, Lr, /* @__PURE__ */ new Map());
  }
  /**
   * @private
   */
  __set(r, n) {
    return d(this, Lr).set(r, n);
  }
  /**
   * @private
   */
  __clear() {
    return d(this, Lr).clear();
  }
  get(r) {
    return d(this, Lr).get(r);
  }
  toArray() {
    return Array.from(d(this, Lr).values());
  }
}
Lr = new WeakMap();
const wO = {
  setup_screen: { is_enabled: !1 },
  alone_here: { is_enabled: !1 },
  waiting_room: { is_enabled: !1, enable_preview: !0 },
  control_bar: {
    is_enabled: !0,
    elements: {
      plugins: !0,
      screenshare: !0,
      invite: !1,
      participants: !0,
      chat: !0,
      reactions: !1,
      polls: !0,
      fullscreen: !0,
      layout: !0
    }
  },
  header: {
    is_enabled: !0,
    elements: {
      logo: "",
      timer: !0,
      title: !0,
      participant_count: !0,
      change_layout: !0
    }
  },
  pip_mode: !0,
  auto_tune: !0,
  grid: {
    multi: { max_video_count: 9, video_fit: "cover" },
    single: { max_video_count: 6, video_fit: "cover" },
    default_view: "MULTI"
  },
  colors: {
    primary: "#2160FD",
    secondary: "#1A1A1A",
    text: "#EEEEEE",
    background: "#1A1A1A",
    text_primary: "#EEEEEE",
    video_background: "#1A1A1A"
  },
  controls: { pip_toggle: !1 },
  plugins: []
}, yO = yt(
  wO
);
var xe, jn, Kn, Ni, xi;
const Ks = class {
  constructor(e) {
    b(this, xe, void 0);
    b(this, jn, void 0);
    b(this, Kn, void 0);
    b(this, Ni, void 0);
    b(this, xi, []);
    if (!e)
      throw new w("Could not load preset theme.");
    y(this, xe, e), y(this, jn, 1), y(this, Kn, ct.GroupCall);
  }
  static fromResponse(e) {
    return new Ks(e);
  }
  static default() {
    return new Ks(yO);
  }
  configFromPermissions(e) {
    var r, n, i, s, a, o, c, u, h, f, g, E;
    y(this, jn, e.maxScreenshareCount || 1), y(this, Kn, e.viewType), y(this, Ni, {
      audio: {
        enableHighBitrate: !1,
        enableStereo: !1
      },
      video: {
        quality: (i = (n = (r = e == null ? void 0 : e.produce) == null ? void 0 : r.video) == null ? void 0 : n.quality) != null ? i : Xe.video.quality,
        frameRate: (o = (a = (s = e == null ? void 0 : e.produce) == null ? void 0 : s.video) == null ? void 0 : a.frameRate) != null ? o : Xe.video.frameRate
      },
      screenshare: {
        quality: (h = (u = (c = e == null ? void 0 : e.produce) == null ? void 0 : c.screenshare) == null ? void 0 : u.quality) != null ? h : Xe.screenshare.quality,
        frameRate: (E = (g = (f = e == null ? void 0 : e.produce) == null ? void 0 : f.screenshare) == null ? void 0 : g.frameRate) != null ? E : Xe.screenshare.frameRate
      }
    });
  }
  setDisabledPlugins(e) {
    const r = d(this, xe).plugins;
    r && r.length > 0 && y(this, xi, e.filter(
      (n) => !r.includes(n)
    ));
  }
  /**
   * @deprecated
   * The `setupScreen` represents the setup screen for the meeting.
   */
  get setupScreen() {
    return d(this, xe).setupScreen;
  }
  /**
   * The `aloneHere` contains the properties to show a layout when
   * the participant is alone in the meeting.
   */
  get aloneHere() {
    return d(this, xe).aloneHere;
  }
  /**
   * The `waitingRoom` contains the properties to show a layout when
   * the participant is in waiting to join the meeting.
   */
  get waitingRoom() {
    return d(this, xe).waitingRoom;
  }
  /**
   * @deprecated
   * The `controlBar` contains the properties to show the meeting control bar with
   * various action buttons for the meeting.
   * The `elements` key contains the various action buttons.
   */
  get controlBar() {
    return d(this, xe).controlBar;
  }
  /**
   * The `header` contains the properties to show the meeting header with various elements.
   * The `elements` key contains the following properties
   * `logo` - string value representing the public URL for the logo
   * `timer` - boolean value suggesting if the timer should be shown
   * `title` - boolean value suggesting if the meeting title should be shown
   * `participantCount` - boolean value suggesting if the participant count shuld be shown
   * `changeLayout` - boolean value suggesting if the participant can change layout
   */
  get header() {
    return d(this, xe).header;
  }
  /**
   * The `pipMode` property returns a boolean value
   * If true, picture-in-picture mode is enabled for the participant.
   */
  get pipMode() {
    var e;
    return ((e = d(this, xe).controls) == null ? void 0 : e.pipToggle) || d(this, xe).pipMode;
  }
  /**
   * The `viewType` tells the type of the meeting
   * possible values are: GROUP_CALL| LIVESTREAM | CHAT | AUDIO_ROOM
   */
  get viewType() {
    return d(this, Kn);
  }
  /**
   * @deprecated
   * The `autoTune` property returns a boolean value
   * If true, force the participant's video to be in compatibility mode.
   */
  get autoTune() {
    return d(this, xe).autoTune;
  }
  /**
   * The `grid` contains the properties to show participant grid for the meeting.
   * `defaultView` key points to the view type, possible values are `MULTI`, `SINGLE`
   * `multi` and `single` keys contain the following preferences to show grid layout.
   * `maxVideoCount` - number of participants to show in the grid.
   * `videoFit` - string value suggesting how to align the video content.
   */
  get grid() {
    return d(this, xe).grid;
  }
  /**
   * The `maxVideoStreams` contains the maximum video
   * streams for mobile and desktop
   */
  get maxVideoStreams() {
    return {
      mobile: this.grid.multi.maxVideoCount > 6 ? 6 : this.grid.multi.maxVideoCount,
      desktop: this.grid.multi.maxVideoCount
    };
  }
  /**
   * The `maxScreenShareCount` contains the maximum
   * possible concurrent screen shares
   */
  get maxScreenShareCount() {
    return d(this, jn);
  }
  get colors() {
    return d(this, xe).colors;
  }
  get controls() {
    return d(this, xe).controls;
  }
  get plugins() {
    return d(this, xe).plugins;
  }
  /**
   * The `disabledPlugins` property returns id of all disabled plugins
   */
  get disabledPlugins() {
    return d(this, xi);
  }
  get mediaConstraints() {
    return d(this, Ni);
  }
  // eslint-disable-next-line class-methods-use-this
  get isV2() {
    return !1;
  }
};
let Jo = Ks;
xe = new WeakMap(), jn = new WeakMap(), Kn = new WeakMap(), Ni = new WeakMap(), xi = new WeakMap();
function AO(t, e = 2) {
  return t.replace(/[^\u00BF-\u1FFF\u2C00-\uD7FF\w\s]/g, "").trim().split(/\s+/).slice(0, e).map((i) => i.charAt(0)).join("").toUpperCase();
}
const sl = 1080, al = 1920, RO = (t, e, r, n, i, s) => {
  let a = 0.5, o = 0.5;
  const c = i, u = s, h = Math.min(r / c, n / u);
  let f = c * h, g = u * h, E, R, I, S, k = 1;
  return f < r && (k = r / f), Math.abs(k - 1) < 1e-14 && g < n && (k = n / g), f *= k, g *= k, I = c / (f / r), S = u / (g / n), E = (c - I) * a, R = (u - S) * o, E < 0 && (E = 0), R < 0 && (R = 0), I > c && (I = c), S > u && (S = u), [E, R, I, S, t, e, r, n];
};
var Ct, Ve, or, pe, Vt, cr, vt, me;
class SO extends mt {
  constructor(r) {
    var n, i, s, a, o, c, u, h;
    super();
    b(this, Ct, void 0);
    b(this, Ve, void 0);
    b(this, or, void 0);
    b(this, pe, {
      height: sl,
      width: al
    });
    b(this, Vt, {
      brand: "#2160FD",
      background: "#141414",
      videoBackground: "#191919",
      textOnBrand: "#EEEEEE"
    });
    b(this, cr, void 0);
    b(this, vt, {});
    b(this, me, void 0);
    _(this, "cleanupEventListeners", () => {
      d(this, me).removeListener("stageJoined", this.enablePipMediaControls), d(this, me).removeListener("stageLeft", this.unmountEvents), d(this, me).removeListener("videoUpdate", this.onSelfVideoUpdateListener), d(this, me).removeListener("audioUpdate", this.onSelfAudioUpdateListener), d(this, me).removeListener("roomLeft", this.disable);
    });
    _(this, "enablePipMediaControls", () => {
      this.mountAudioEvents(), this.mountVideoEvents();
    });
    _(this, "onSelfVideoUpdateListener", ({ videoEnabled: r }) => {
      this.updateMediaSession("CAMERA", r);
    });
    _(this, "onSelfAudioUpdateListener", ({ audioEnabled: r }) => {
      this.updateMediaSession("MIC", r);
    });
    _(this, "eventCallback", (r) => {
      r === "CAMERA" && (d(this, me).videoEnabled ? d(this, me).disableVideo() : d(this, me).enableVideo(), this.emit("cameraToggled")), r === "MIC" && (d(this, me).audioEnabled ? d(this, me).disableAudio() : d(this, me).enableAudio(), this.emit("micToggled")), r === "END" && (D.emit(P.PIP_HANGUP), this.cleanupEventListeners(), this.emit("hangup"), this.cleanup());
    });
    _(this, "unmountEvents", () => {
      navigator.mediaSession === void 0 || navigator.mediaSession.setCameraActive === void 0 || (navigator.mediaSession.setActionHandler("togglemicrophone", void 0), navigator.mediaSession.setActionHandler("togglecamera", void 0));
    });
    _(this, "animate", () => {
      d(this, vt) !== void 0 && this.paintCanvas(), d(this, cr) !== void 0 && y(this, cr, requestAnimationFrame(() => this.animate()));
    });
    /**
        * Disable PiP
        */
    _(this, "disable", () => {
      this.cleanupEventListeners(), cancelAnimationFrame(d(this, cr)), document.body.removeChild(d(this, Ve)), y(this, cr, void 0), document.exitPictureInPicture();
    });
    if (y(this, me, r), r.config.isV2 === !0)
      y(this, Vt, {
        brand: r.config.designTokens.colors.brand[500],
        background: r.config.designTokens.colors.background[1e3],
        videoBackground: r.config.designTokens.colors.videoBg,
        textOnBrand: r.config.designTokens.colors.textOnBrand
      });
    else if (r.config.isV2 === !1) {
      const f = Jo.default();
      y(this, Vt, {
        brand: (i = (n = r.config.colors) == null ? void 0 : n.primary) != null ? i : f.colors.primary,
        background: (a = (s = r.config.colors) == null ? void 0 : s.background) != null ? a : f.colors.background,
        videoBackground: (c = (o = r.config.colors) == null ? void 0 : o.videoBackground) != null ? c : f.colors.videoBackground,
        textOnBrand: (h = (u = r.config.colors) == null ? void 0 : u.textPrimary) != null ? h : f.colors.textPrimary
      });
    }
  }
  createVideoContainer() {
    y(this, Ve, document.createElement("div")), d(this, Ve).style.width = "0.1px", d(this, Ve).style.height = "0.1px", d(this, Ve).style.overflow = "hidden", d(this, Ve).style.position = "absolute", d(this, Ve).style.bottom = "0", d(this, Ve).style.right = "0", d(this, Ve).style.opacity = "0", d(this, Ve).appendChild(d(this, or));
  }
  setupEventListeners() {
    d(this, me).addListener("stageJoined", this.enablePipMediaControls), d(this, me).addListener("stageLeft", this.unmountEvents), d(this, me).addListener("videoUpdate", this.onSelfVideoUpdateListener), d(this, me).addListener("audioUpdate", this.onSelfAudioUpdateListener), d(this, me).addListener("roomLeft", this.disable);
  }
  // private handlePipMediaControls = (status: StageStatus) => {
  // 	if (status === 'ON_STAGE') this.enablePipMediaControls();
  // 	else this.unmountEvents();
  // };
  createCanvas() {
    const r = document.createElement("canvas");
    r.height = d(this, pe).height, r.width = d(this, pe).width, y(this, Ct, r);
  }
  setupMediaSessionEvents() {
    navigator.mediaSession === void 0 || navigator.mediaSession.setCameraActive === void 0 || (navigator.mediaSession.setActionHandler("hangup", () => {
      this.eventCallback("END");
    }), this.mountAudioEvents(), this.mountVideoEvents());
  }
  mountAudioEvents() {
    navigator.mediaSession === void 0 || navigator.mediaSession.setMicrophoneActive === void 0 || d(this, me).permissions.canProduceAudio && navigator.mediaSession.setActionHandler("togglemicrophone", () => {
      this.eventCallback("MIC");
    });
  }
  mountVideoEvents() {
    navigator.mediaSession === void 0 || navigator.mediaSession.setCameraActive === void 0 || d(this, me).permissions.canProduceVideo && navigator.mediaSession.setActionHandler("togglecamera", () => {
      this.eventCallback("CAMERA");
    });
  }
  getSources() {
    const r = Object.values(d(this, vt)), n = r.filter((i) => i.pinned);
    return n.length === 1 ? n : r;
  }
  drawEmptyTile(r, n, i, s, a) {
    if (d(this, Ct) === void 0)
      return;
    const o = d(this, Ct).getContext("2d"), c = d(this, Ct).width, u = 4, h = 4, f = n - u * 2, g = i - u * 2, E = Math.floor(c / f), R = Math.floor(r / E), S = r % E * (f + u) + u, k = R * (g + u) + u;
    o.fillStyle = d(this, Vt).videoBackground, o.strokeStyle = d(this, Vt).brand, o.beginPath(), o.moveTo(S + h, k), o.arcTo(S + f, k, S + f, k + h, h), o.arcTo(
      S + f,
      k + g,
      S + f - h,
      k + g,
      h
    ), o.arcTo(S, k + g, S, k + g - h, h), o.arcTo(S, k, S + h, k, h), o.closePath(), o.fill(), o.stroke();
    const O = f / 6, W = f / 2 + S, C = g / 2 + k;
    if (o.save(), (s || a) && (o.beginPath(), o.arc(W, C, O, 0, Math.PI * 2), o.fillStyle = d(this, Vt).brand, o.fill()), s && (o.fillStyle = d(this, Vt).textOnBrand, o.font = `${O / 2}px sans-serif`, o.textAlign = "center", o.textBaseline = "middle", o.fillText(s, W, C)), a) {
      const te = new Image();
      te.src = a, te.onload = () => {
        o.drawImage(
          te,
          W - O,
          C - O,
          O * 2,
          O * 2
        ), o.restore();
      };
    }
  }
  drawGrid(r, n, i) {
    if (d(this, Ct) === void 0)
      return;
    const s = d(this, Ct).getContext("2d");
    s.fillStyle = d(this, Vt).background, s.fillRect(0, 0, d(this, pe).width, d(this, pe).height);
    const a = this.getSources();
    let o = 0, c = 0;
    for (; o < d(this, pe).height - 5; ) {
      let u = 0;
      for (; u < d(this, pe).width - 5 && c < i; ) {
        const h = a[c].element;
        if (a[c].enabled) {
          const [f, g, E, R, I, S, k, O] = RO(
            u,
            o,
            r,
            n,
            h.videoWidth,
            h.videoHeight
          );
          s.drawImage(h, f, g, E, R, I, S, k, O);
        } else
          this.drawEmptyTile(c, r, n, a[c].displayText);
        c += 1, u += r;
      }
      o += n;
    }
  }
  calcGridElemSize(r) {
    switch (r) {
      case 0:
      case 1:
        return [d(this, pe).width, d(this, pe).height];
      case 2:
        return [Math.floor(d(this, pe).width / 2), d(this, pe).height];
      case 3:
      case 4:
        return [Math.floor(d(this, pe).width / 2), Math.floor(d(this, pe).height / 2)];
      case 5:
      case 6:
        return [Math.floor(d(this, pe).width / 3), Math.floor(d(this, pe).height / 2)];
      case 7:
      case 8:
      case 9:
        return [Math.floor(d(this, pe).width / 3), Math.floor(d(this, pe).height / 3)];
      default:
        return [Math.floor(d(this, pe).width / 3), Math.floor(d(this, pe).height / 2)];
    }
  }
  paintCanvas() {
    const r = this.getSources().length, [n, i] = this.calcGridElemSize(r);
    this.drawGrid(n, i, r);
  }
  isSupported() {
    return !!window.chrome && document.pictureInPictureEnabled;
  }
  get isActive() {
    return document.pictureInPictureElement !== null;
  }
  cleanup() {
    if (this.isSupported() && document.exitPictureInPicture !== void 0 && document.pictureInPictureElement !== null && document.exitPictureInPicture(), d(this, Ve))
      try {
        document.body.removeChild(d(this, Ve));
      } catch (r) {
      }
    this.removeAllSources(), y(this, Ct, void 0), y(this, or, void 0), y(this, cr, void 0);
  }
  /**
      * Initialize PiP and prepare sources
      */
  init({ height: r, width: n } = {}) {
    this.createCanvas(), this.setupMediaSessionEvents();
    const i = document.createElement("video");
    y(this, pe, {
      height: r != null ? r : sl,
      width: n != null ? n : al
    }), i.height = d(this, pe).height, i.width = d(this, pe).width, i.autoplay = !0, i.muted = !0, i.srcObject = d(this, Ct).captureStream(24), y(this, or, i), d(this, or).onloadedmetadata = () => {
      try {
        this.emit("pipStarted"), d(this, or).onleavepictureinpicture = () => {
          this.emit("pipEnded");
        };
      } catch (s) {
        this.emit("pipEnded");
      }
    }, this.createVideoContainer(), this.paintCanvas();
  }
  updateMediaSession(r, n) {
    navigator.mediaSession !== void 0 && (r === "CAMERA" && navigator.mediaSession.setCameraActive !== void 0 && navigator.mediaSession.setCameraActive(n), r === "MIC" && navigator.mediaSession.setMicrophoneActive !== void 0 && navigator.mediaSession.setMicrophoneActive(n));
  }
  enableSource(r) {
    d(this, vt)[r] !== void 0 && (d(this, vt)[r].enabled = !0);
  }
  disableSource(r) {
    d(this, vt)[r] !== void 0 && (d(this, vt)[r].enabled = !1);
  }
  /**
   * Add a video source from the participant grid
   * @param {string} id id for the source (ex. participant id)
   * @param {HTMLVideoElement} element HTMLVideoElement for the video source
   * @param {boolean} enabled if source is enabled
   * @param {?string} [displayText] two character display text
   */
  addSource(r, n, i, s = !1, a = void 0) {
    s && this.removePinnedSource(), d(this, vt)[r] = {
      id: r,
      element: n,
      enabled: i,
      pinned: s,
      displayText: a ? AO(a) : void 0
    };
  }
  /**
      * Remove the video source for the participant
      * @param id id for the source (ex. participant id)
      */
  removeSource(r) {
    delete d(this, vt)[r];
  }
  /**
      * Remove the pinned source
      * @param id id for the source (ex. participant id)
      */
  removePinnedSource() {
    const [r] = this.getSources();
    r && this.removeSource(r.id);
  }
  /**
      * Remove all sources
      */
  removeAllSources() {
    y(this, vt, {});
  }
  /**
      * Enable PiP
      */
  enable() {
    this.setupEventListeners(), this.updateMediaSession("CAMERA", d(this, me).videoEnabled), this.updateMediaSession("MIC", d(this, me).audioEnabled), document.body.appendChild(d(this, Ve)), y(this, cr, requestAnimationFrame(() => this.animate())), d(this, or).requestPictureInPicture();
  }
}
Ct = new WeakMap(), Ve = new WeakMap(), or = new WeakMap(), pe = new WeakMap(), Vt = new WeakMap(), cr = new WeakMap(), vt = new WeakMap(), me = new WeakMap();
var bO = Object.defineProperty, kO = Object.getOwnPropertyDescriptor, it = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? kO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && bO(e, r, i), i;
}, dr, kl;
let qe = (kl = class extends mt {
  /**
   * This constructs a new DyteParticipant object and maintains
   * the maps of active/joined/waitlisted/pinned/selectedPeers maps.
   * @param self : DyteSelf
   */
  constructor(e, r) {
    var n;
    super();
    /**
     * Returns a list of participants waiting to join the meeting.
     */
    _(this, "waitlisted");
    /**
     * Returns a list of all participants in the meeting.
     */
    _(this, "joined");
    /**
     * Returns a list of participants whose streams are currently consumed.
     */
    _(this, "active");
    /**
     * Returns a list of participants who have been pinned.
     */
    _(this, "pinned");
    /**
     * Returns all added participants irrespective of whether they are currently
     * in the meeting or not
     */
    _(this, "all");
    /**
     * Return the controls for Picture-in-Picture
     */
    _(this, "pip");
    b(this, dr, void 0);
    /**
     * Indicates whether the meeting is in 'ACTIVE_GRID' mode or 'PAGINATED' mode.
     *
     * In 'ACTIVE_GRID' mode, participants are populated in the participants.active map
     * dynamically. The participants present in the map will keep changing when other
     * participants unmute their audio or turn on their videos.
     *
     * In 'PAGINATED' mode, participants are populated in the participants.active map
     * just once, and the participants in the map will only change if the page number is
     * changed by the user using setPage(page).
     */
    _(this, "viewMode");
    /**
     * This indicates the current page that has been set by the user in PAGINATED mode.
     * If the meeting is in ACTIVE_GRID mode, this value will be 0.
     */
    _(this, "currentPage");
    /**
     * This stores the `participantId` of the last participant who spoke in the meeting.
     */
    _(this, "lastActiveSpeaker");
    /**
     * Keeps a list of all participants who have been present in the selected peers list.
     */
    _(this, "selectedPeers");
    y(this, dr, e), this.waitlisted = new as(), this.joined = new as(), this.active = new as(), this.pinned = new as(), this.all = new EO(), this.selectedPeers = new vO(), this.viewMode = "ACTIVE_GRID", this.currentPage = 0, ((n = r == null ? void 0 : r.pip) == null || n) && (this.pip = new SO(e));
  }
  /**
   * Returns true if the local participant has joined the meeting.
   */
  get roomJoined() {
    return d(this, dr).roomJoined;
  }
  /**
   * Returns the number of participants who are joined in the meeting.
   */
  get count() {
    return this.joined.size;
  }
  /**
   * Returns the maximum number of participants that can be present in
   * the active map.
   */
  get maxActiveParticipantsCount() {
    return 6;
  }
  /**
   * Returns the number of pages that are available in the meeting in PAGINATED mode.
   * If the meeting is in ACTIVE_GRID mode, this value will be 0.
   */
  get pageCount() {
    if (this.viewMode === "PAGINATED") {
      const e = this.joined.toArray().filter((r) => r.stageStatus === "ON_STAGE");
      return Math.ceil(e.length / this.maxActiveParticipantsCount);
    }
    return 0;
  }
  /**
   * Accepts requests from waitlisted participants if user
   * has appropriate permissions.
   * @param id peerId or userId of the waitlisted participant.
   */
  acceptWaitingRoomRequest(e) {
    var r, n;
    (n = (r = this.waitlisted.get(e)) == null ? void 0 : r.userId) != null;
  }
  /**
   * We need a new event for socket service events
   * since if we send them all together, sequence of events
   * can be unreliable
   */
  acceptAllWaitingRoomRequest(e) {
    return p(this, null, function* () {
      e.map((r) => {
        var n, i;
        return (i = (n = this.waitlisted.get(r)) == null ? void 0 : n.userId) != null ? i : r;
      });
    });
  }
  /**
   * Rejects requests from waitlisted participants if user
   * has appropriate permissions.
   * @param id participantId of the waitlisted participant.
   */
  rejectWaitingRoomRequest(e) {
    return p(this, null, function* () {
    });
  }
  setViewMode(e) {
    return p(this, null, function* () {
      if (m.info("DyteParticipants::set_view_mode", {
        pageNavigation: {
          viewMode: e,
          currentPage: this.currentPage,
          pageCount: this.pageCount,
          maxActiveParticipantsCount: this.maxActiveParticipantsCount
        }
      }), !["ACTIVE_GRID", "PAGINATED"].includes(e))
        throw m.error("DyteParticipants::setViewMode::invalid_view_mode", {
          pageNavigation: {
            viewMode: e,
            currentPage: this.currentPage,
            pageCount: this.pageCount,
            maxActiveParticipantsCount: this.maxActiveParticipantsCount
          }
        }), new w(
          `Invalid view mode: ${e}. Try ACTIVE_GRID or PAGINATED.`
        );
      if (this.viewMode === e) {
        m.info(
          "DyteParticipants::setViewMode::view_mode_same_as_previous",
          {
            pageNavigation: {
              viewMode: e,
              currentPage: this.currentPage,
              pageCount: this.pageCount,
              maxActiveParticipantsCount: this.maxActiveParticipantsCount
            }
          }
        );
        return;
      }
      if (this.viewMode = e, e === "PAGINATED") {
        this.currentPage = 1;
        const r = [];
        D.emit(P.GET_PAGE, { peerIds: r });
      } else
        e === "ACTIVE_GRID" && (this.currentPage = 0);
      this.emit("viewModeChanged", {
        viewMode: e,
        currentPage: this.currentPage,
        pageCount: this.pageCount
      });
    });
  }
  // NOTE(itzmanish): hive systems specific code
  getPeerIdsForCurrentPage() {
    m.info("DyteParticipants::getPeerIdsForCurrentPage()", {
      pageNavigation: {
        viewMode: this.viewMode,
        currentPage: this.currentPage,
        pageCount: this.pageCount,
        maxActiveParticipantsCount: this.maxActiveParticipantsCount
      }
    });
    const { compulsoryPeers: e } = this.selectedPeers, r = e.filter(
      (o) => this.joined.has(o)
    ), n = Array.from(this.pinned.keys()).filter(
      (o) => !r.includes(o)
    ), i = Array.from(this.joined.toArray().filter((o) => o.stageStatus === "ON_STAGE").map((o) => o.id)), s = Math.max(
      (this.currentPage - 1) * (this.maxActiveParticipantsCount - r.length - n.length)
    ), a = this.currentPage * (this.maxActiveParticipantsCount - r.length - n.length);
    return r.concat(n, i.slice(s, a));
  }
  setPage(e) {
    return p(this, null, function* () {
      if (m.info("DyteParticipants::set_page", {
        pageNavigation: {
          settingPage: e,
          viewMode: this.viewMode,
          currentPage: this.currentPage,
          pageCount: this.pageCount,
          maxActiveParticipantsCount: this.maxActiveParticipantsCount
        }
      }), this.viewMode !== "PAGINATED")
        return;
      if (!Number.isInteger(e))
        throw m.error("DyteParticipants::invalid_page_number", {
          pageNavigation: {
            settingPage: e,
            viewMode: this.viewMode,
            currentPage: this.currentPage,
            pageCount: this.pageCount,
            maxActiveParticipantsCount: this.maxActiveParticipantsCount
          }
        }), new w(`Invalid page: ${e}. Page must be an integer.`);
      if (e < 1 || e > this.pageCount)
        throw m.error("DyteParticipants::invalid_page_number", {
          pageNavigation: {
            settingPage: e,
            viewMode: this.viewMode,
            currentPage: this.currentPage,
            pageCount: this.pageCount,
            maxActiveParticipantsCount: this.maxActiveParticipantsCount
          }
        }), new w(
          `Invalid page: ${e}. Page must be greater than 0 and less than or equal to ${this.pageCount}.`
        );
      this.currentPage = e;
      const r = [];
      D.emit(P.GET_PAGE, { peerIds: r }), this.emit("pageChanged", {
        viewMode: this.viewMode,
        currentPage: this.currentPage,
        pageCount: this.pageCount
      });
    });
  }
  disableAllAudio(e) {
    return p(this, null, function* () {
      if (m.info("DyteParticipants::disable_all_audio", {
        actions: { disableAllAudio: { allowUnmute: e } }
      }), !this.roomJoined)
        throw new w("Can`t disable all audio without joining room");
      if (!d(this, dr).permissions.canAllowParticipantAudio)
        throw m.error("DyteParticipants::unauthorized_disable_all_audio", {
          actions: { disableAllAudio: { allowUnmute: e } }
        }), new w(
          "Unauthorized: User does not have permission to disable peer audio."
        );
    });
  }
  disableAllVideo() {
    return p(this, null, function* () {
      if (m.info("DyteParticipants::disable_all_video"), !this.roomJoined)
        throw new w("Can`t disable all video without joining room");
      if (!d(this, dr).permissions.canAllowParticipantVideo)
        throw m.error("DyteParticipants::unauthorized_disable_all_video"), new w(
          "Unauthorized: User does not have permission to disable peer video."
        );
    });
  }
  disableAudio(e) {
    return p(this, null, function* () {
      this.joined.get(e).disableAudio();
    });
  }
  disableVideo(e) {
    return p(this, null, function* () {
      this.joined.get(e).disableVideo();
    });
  }
  kick(e) {
    return p(this, null, function* () {
      yield D.emitAsync(P.KICK_PEER, {
        peerId: e
      });
    });
  }
  kickAll() {
    return p(this, null, function* () {
      if (m.info("DyteParticipants::kick_all"), !this.roomJoined)
        throw new w("Can`t kick all without joining room");
      if (!d(this, dr).permissions.kickParticipant)
        throw m.error("DyteParticipants::unauthorized_kick_all"), new w(
          "Unauthorized: User does not have permission to kick peers."
        );
    });
  }
  broadcastMessage(e, r, n) {
    return p(this, null, function* () {
      if (m.info("DyteParticipants::broadcastMessage"), !this.roomJoined)
        throw new w("Can`t broadcast message without joining room");
      if (!(e != null && e.trim()))
        throw new w("`type` must be a non-empty string.");
    });
  }
  acceptAllRequestToJoinStageRequests(e) {
    return p(this, null, function* () {
      D.emitAsync(P.ACCEPT_ALL_REQUESTS_TO_JOIN_STAGE, {
        data: e
      });
    });
  }
  getAllJoinedPeers(e, r, n) {
    return p(this, null, function* () {
      return [];
    });
  }
  updatePermissions(e, r) {
    return p(this, null, function* () {
      const n = this.joined.toArray().filter((i) => e.includes(i.id)).map((i) => i.userId);
      [...new Set(n)];
    });
  }
  getAllPeersInRoom() {
    return p(this, null, function* () {
      return [];
    });
  }
  setMockParticipantCount(e, r) {
    return p(this, null, function* () {
      const n = e - this.joined.size;
      if (n > 0)
        for (let s = 0; s < n; s++) {
          const a = new Mt({
            id: ot(),
            displayName: gi.person.fullName(),
            picture: gi.image.avatar(),
            clientSpecificId: gi.string.alphanumeric(6),
            audioMuted: !0,
            isHost: !1,
            userId: ot(),
            audioTrack: void 0,
            videoTrack: void 0,
            videoEnabled: !1,
            flags: {}
          }, d(this, dr));
          this.joined.add(a);
        }
      else
        this.joined.toArray().reverse().forEach((s, a) => {
          a < n && this.joined.delete(s.id);
        });
      r - this.active.size > 0 ? this.joined.toArray().forEach((s, a) => {
        a < n && this.active.add(s);
      }) : this.active.toArray().reverse().forEach((s, a) => {
        a < n && this.active.delete(s.id);
      });
    });
  }
}, dr = new WeakMap(), kl);
it([
  v.trace("DyteParticipants.setViewMode")
], qe.prototype, "setViewMode", 1);
it([
  v.trace("DyteParticipants.setPage")
], qe.prototype, "setPage", 1);
it([
  v.trace("DyteParticipants.disableAllAudio")
], qe.prototype, "disableAllAudio", 1);
it([
  v.trace("DyteParticipants.disableAllVideo")
], qe.prototype, "disableAllVideo", 1);
it([
  v.trace("DyteParticipants.disablePeerAudio")
], qe.prototype, "disableAudio", 1);
it([
  v.trace("DyteParticipants.disablePeerVideo")
], qe.prototype, "disableVideo", 1);
it([
  v.trace("DyteParticipants.kickPeer")
], qe.prototype, "kick", 1);
it([
  v.trace("DyteParticipants.kickAll")
], qe.prototype, "kickAll", 1);
it([
  v.trace("DyteParticipants.broadcastMessage")
], qe.prototype, "broadcastMessage", 1);
it([
  v.trace("DyteParticipants.acceptAllRequestToJoinStageRequests")
], qe.prototype, "acceptAllRequestToJoinStageRequests", 1);
it([
  v.trace("DyteParticipants.getAllJoinedPeers")
], qe.prototype, "getAllJoinedPeers", 1);
it([
  v.trace("DyteParticipant.updatePermissions")
], qe.prototype, "updatePermissions", 1);
it([
  v.trace("DyteParticipants.getAllPeersInRoom")
], qe.prototype, "getAllPeersInRoom", 1);
qe = it([
  $e((t) => {
    throw new w(t.message, "1200");
  })
], qe);
class ol extends Bp {
  constructor() {
    super({
      onAddEvent: "pluginAdded",
      onDeleteEvent: "pluginDeleted"
    });
  }
  add(e, r = !0) {
    return super.add(e, r);
  }
  delete(e, r = !0, n = !1) {
    return super.delete(e, r, n);
  }
}
var CO = Object.defineProperty, IO = Object.getOwnPropertyDescriptor, PO = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? IO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && CO(e, r, i), i;
};
let Yo = class {
  constructor() {
    /**
     * All plugins accessible by the current user.
     */
    _(this, "all");
    /**
     * All plugins that are currently enabled in the room.
     */
    _(this, "active");
    this.all = new ol(), this.active = new ol();
  }
};
Yo = PO([
  $e((t) => {
    throw new w(t.message, "0600");
  })
], Yo);
const Qe = {
  isV2AuthToken: !1,
  meetingId: null,
  overrides: {},
  roomNodeOptions: void 0
}, mi = {
  baseURL: "http://localhost:5000",
  createdAt: "2021-08-05T10:49:56.602Z",
  description: "Develop plugins locally",
  id: "09259e3b-7be8-46f6-9801-106bf1866e1c",
  name: "Localhost Dev",
  organizationId: "4ad15a19-80e2-4105-bf43-48039fd2963e",
  picture: "https://dyte-uploads.s3.ap-south-1.amazonaws.com/dyte.png",
  private: !1,
  published: !0,
  staggered: !1,
  tags: ["#localhost", "#dev"],
  type: "self_hosted",
  updatedAt: "2021-08-05T10:50:07.681Z"
};
function DO(t, e) {
  if (e) {
    Qe.isV2AuthToken = !1;
    return;
  }
  try {
    const { meetingId: r } = JSON.parse(atob(t.split(".")[1]));
    if (!r)
      throw Error(`Received V1 auth token ${t}`);
    Qe.isV2AuthToken = !0, Qe.meetingId = r;
  } catch (r) {
    throw m.error(
      "constants::setIsV2AuthToken",
      {
        error: r,
        debuggingHint: `Unable to decode auth token: ${t}`
      },
      !0
    ), new w("Invalid auth token");
  }
}
function OO(t) {
  Qe.overrides = t;
}
const MO = 3, NO = 30, xO = 8e3;
class LO {
  constructor(e) {
    _(this, "ipInfo");
    _(this, "axios");
    _(this, "requests");
    _(this, "roomName");
    _(this, "roomUUID");
    _(this, "peerId");
    _(this, "authToken");
    _(this, "organizationId");
    _(this, "iceServers");
    _(this, "pluginInformation");
    _(this, "userDetails");
    _(this, "roomDetails");
    const {
      timeout: r = xO,
      retry: n = MO,
      retryDelay: i = NO,
      baseURL: s = "https://api.cluster.dyte.in",
      authToken: a,
      cachedUserDetails: o
    } = e || {};
    this.iceServers = o == null ? void 0 : o.iceServers, this.pluginInformation = o == null ? void 0 : o.pluginInformation, this.userDetails = o == null ? void 0 : o.userDetails, this.roomDetails = o == null ? void 0 : o.roomDetails, this.requests = Ro.create({
      baseURL: s,
      responseType: "json",
      timeout: r,
      retry: n,
      retryDelay: i
    }), this.axios = Ro, this.setAuthToken(a, { bearer: !0 }), this.requests.interceptors.request.use(
      (c) => (v.injectContext(this.requests.defaults.headers.common), c),
      (c) => p(this, null, function* () {
        m.error("xhr::axios", {
          debuggingHint: "otelRequestInterceptor failed.",
          error: c
        });
      })
    ), this.requests.interceptors.response.use(
      (c) => {
        try {
          c.config.url !== v.logsEndpoint && m.debug("xhr::axios", {
            // Note(ravindra-dyte): Do not Log entire data, log what is needed
            networkCall: {
              status: c.status,
              statusText: c.statusText,
              baseURL: c.config.baseURL,
              url: c.config.url,
              method: c.config.method
            }
          });
        } catch (u) {
          console.error("xhr::dyte", {
            error: "responseInterceptorFailed",
            err: u,
            response: c
          });
        }
        return c;
      },
      (c) => p(this, null, function* () {
        var u;
        try {
          if (!c)
            return Promise.reject(new Error("Unknown error occurred"));
          c && c.config && ((u = c.config) == null ? void 0 : u.url) !== v.logsEndpoint && m.error("xhr::axios", {
            error: c,
            networkCall: {
              status: c.status,
              statusText: c.statusText,
              baseURL: c.config.baseURL,
              url: c.config.url,
              retries: c.config.retry,
              method: c.config.method,
              isOnline: navigator.onLine ? "online" : "offline"
            }
          });
          const {
            config: h,
            message: f
          } = c;
          return h && f && h.retry !== void 0 && h.retry > 0 && (f.includes("timeout") || f.includes("Network Error")) ? (h.retry -= 1, this.requests(h)) : Promise.reject(c);
        } catch (h) {
          return console.error("xhr::dyte", {
            error: "responseInterceptorFailed",
            err: h,
            responseError: c
          }), Promise.reject(h);
        }
      })
    );
  }
  setAuthToken(e, r) {
    const { bearer: n } = r || {};
    this.authToken = e, this.requests.defaults.headers.common.Authorization = n ? `Bearer ${e}` : e;
  }
  setHeader(e, r) {
    this.requests.defaults.headers.common[e] = r;
  }
  setRoomName(e) {
    this.roomName = e;
  }
  setRoomUUID(e) {
    this.roomUUID = e;
  }
  setPeerId(e) {
    this.peerId = e;
  }
  setOrganizationId(e) {
    this.organizationId = e;
  }
}
var $O = Object.defineProperty, UO = Object.getOwnPropertyDescriptor, Gp = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? UO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && $O(e, r, i), i;
};
class Oa extends LO {
  constructor(e) {
    super(e), this.setHeader("x-dyte-web-core-version", wp);
  }
  getIPDetails(r) {
    return p(this, arguments, function* ({ peerId: e }) {
    });
  }
  getICEServers() {
    return p(this, null, function* () {
      if (this.iceServers)
        return this.iceServers;
      const { success: e, iceServers: r } = (yield this.requests.get("/iceservers")).data;
      if (e)
        return r;
    });
  }
  getPlugins(e) {
    return p(this, null, function* () {
      var s, a, o, c, u, h, f;
      if (this.pluginInformation)
        return this.pluginInformation;
      let { plugins: r } = (yield this.requests.get("/v2/plugins/user")).data.data;
      const n = ((a = (s = ae.getValue(oe.V1_PLUGINS)) == null ? void 0 : s.toString()) == null ? void 0 : a.split(",")) || [], i = r.reduce(
        (g, E) => (g[n.includes(E.id) ? "v1" : "v2"].push(E), g),
        { v1: [], v2: [] }
      );
      return e ? r = i.v2 : r = i.v1, (u = (c = (o = G.modules) == null ? void 0 : o.devTools) == null ? void 0 : c.plugins) != null && u.length && ((f = (h = G.modules) == null ? void 0 : h.devTools) == null || f.plugins.forEach((g) => {
        var R, I, S;
        const E = Ue(Y({}, mi), {
          tags: [...mi.tags]
        });
        E.baseURL = `http://localhost:${g.port}`, E.name = g.name, E.picture = (R = g.picture) != null ? R : mi.picture, E.description = (I = g.description) != null ? I : mi.description, E.staggered = (S = g.staggered) != null ? S : mi.staggered, E.createdAt = new Date().toISOString(), E.updatedAt = new Date().toISOString(), E.id = g.id, E.organizationId = this.organizationId, r.push(E);
      })), r;
    });
  }
  getPluginDetails(e) {
    return p(this, null, function* () {
      const { plugin: r } = (yield this.requests.get(`/v2/plugins/view/${e}`)).data.data;
      return r;
    });
  }
  getPluginConfig(e) {
    return p(this, null, function* () {
      return (yield this.axios.get(`${e}/dyte-config.json`)).data;
    });
  }
  authorizePlugin(e) {
    return p(this, null, function* () {
      const r = {
        peerId: this.peerId
      };
      Qe.isV2AuthToken || (r.roomName = this.roomName);
      const { token: n } = (yield this.requests.post(`/v2/plugins/authorize/${e}`, r)).data.data;
      return n;
    });
  }
  getPresignedUrls(e, r) {
    return p(this, null, function* () {
      const n = {
        roomUUID: this.roomUUID,
        filename: e
      };
      ae.hasFeature(oe.FEAT_CHAT_SDK) && (n.viewType = r);
      const { getLocation: i, putLocation: s } = (yield this.requests.post("/v1/meetings/genPreSignedUploadUrl", n)).data.data;
      return {
        getLocation: i,
        putLocation: s
      };
    });
  }
  uploadFile(e, r) {
    return p(this, null, function* () {
      if (navigator.isReactNative && "uri" in e)
        try {
          yield fetch(r, {
            method: "PUT",
            headers: {
              "Content-Type": "application/octet-stream"
            },
            body: {
              uri: e.uri,
              name: e.name
            }
          });
        } catch (n) {
          m.error(`sendFileMessage::${n}`);
        }
      else
        yield this.axios.put(r, e, {
          headers: {
            "Content-Type": e.type
          }
        });
    });
  }
}
Gp([
  v.trace("APIClient.getIPDetails")
], Oa.prototype, "getIPDetails", 1);
Gp([
  v.trace("APIClient.getICEServers")
], Oa.prototype, "getICEServers", 1);
var FO = Object.defineProperty, VO = Object.getOwnPropertyDescriptor, Zt = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? VO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && FO(e, r, i), i;
};
class er extends Oa {
  // eslint-disable-next-line class-methods-use-this
  startLivestreaming() {
    return p(this, null, function* () {
      var r, n;
      return (n = (r = (yield this.requests.post(
        `/v2/meetings/${Qe.meetingId}/livestreams`
      )).data) == null ? void 0 : r.data) == null ? void 0 : n.playback_url;
    });
  }
  // eslint-disable-next-line class-methods-use-this
  stopLivestreaming() {
    return p(this, null, function* () {
      return this.requests.post(
        `/v2/meetings/${Qe.meetingId}/active-livestream/stop`
      );
    });
  }
  getActiveLivestream() {
    return p(this, null, function* () {
      const { playbackUrl: e, status: r } = yt(
        (yield this.requests.get(
          `/v2/meetings/${Qe.meetingId}/active-livestream`
        )).data.data
      );
      return { status: r, playbackUrl: e };
    });
  }
  getUserDetails() {
    return p(this, null, function* () {
      if (this.userDetails)
        return this.userDetails;
      const e = (yield this.requests.get("v2/internals/participant-details")).data.data;
      return yt(e);
    });
  }
  getUserPreset() {
    throw new Error("getUserPreset does not exist for v2");
  }
  startRecording(e, r) {
    return p(this, null, function* () {
      return (yield this.requests.post("/v2/recordings", Ue(Y({}, Dp(e)), {
        meeting_id: Qe.meetingId,
        allow_multiple_recordings: !!r
      }))).data.data.id;
    });
  }
  updateRecording(e, r) {
    return p(this, null, function* () {
      return this.requests.put(`v2/recordings/${e}`, {
        action: r
      });
    });
  }
  getActiveRecording() {
    return p(this, null, function* () {
      const { status: e, id: r } = (yield this.requests.get(
        `v2/recordings/active-recording/${Qe.meetingId}`
      )).data.data;
      return { status: e, id: r };
    });
  }
  getActiveTranscript() {
    return p(this, null, function* () {
      const { transcript_download_url: e } = (yield this.requests.get(
        `v2/meetings/${Qe.meetingId}/active-transcript`
      )).data.data;
      try {
        return { transcript: (yield this.axios.get(e)).data };
      } catch (r) {
        throw new w("Cant fetch transcript s3 url");
      }
    });
  }
  getRoomNodeData(r) {
    return p(this, arguments, function* ({ peerId: e }) {
      if (this.roomDetails)
        return this.roomDetails;
      const n = yield this.getIPDetails({ peerId: e });
      this.ipInfo = n;
      const { roomNodeLink: i, title: s, useHiveMedia: a } = yt(
        (yield this.requests.post("v2/internals/rooms", {
          ip_information: n
        })).data.data
      );
      return {
        roomNodeUrl: i,
        meetingTitle: s,
        useHiveMedia: a != null ? a : !1
      };
    });
  }
}
Zt([
  v.trace("APIClient.startLivestreaming")
], er.prototype, "startLivestreaming", 1);
Zt([
  v.trace("APIClient.stopLivestreaming")
], er.prototype, "stopLivestreaming", 1);
Zt([
  v.trace("APIClient.getActiveLivestream")
], er.prototype, "getActiveLivestream", 1);
Zt([
  v.trace("APIClient.getUserDetails")
], er.prototype, "getUserDetails", 1);
Zt([
  v.trace("APIClient.getUserPreset")
], er.prototype, "getUserPreset", 1);
Zt([
  v.trace("APIClient.startRecording")
], er.prototype, "startRecording", 1);
Zt([
  v.trace("APIClient.stopRecording")
], er.prototype, "updateRecording", 1);
Zt([
  v.trace("APIClient.getActiveRecording")
], er.prototype, "getActiveRecording", 1);
Zt([
  v.trace("APIClient.getActiveTranscript")
], er.prototype, "getActiveTranscript", 1);
Zt([
  v.trace("APIClient.getRoomNodeData")
], er.prototype, "getRoomNodeData", 1);
var BO = Object.defineProperty, GO = Object.getOwnPropertyDescriptor, Rn = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? GO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && BO(e, r, i), i;
};
class Sn extends Oa {
  startLivestreaming() {
    throw new Error("Method not implemented.");
  }
  stopLivestreaming() {
    throw new Error("Method not implemented.");
  }
  getActiveLivestream() {
    throw new Error("Method not implemented.");
  }
  getUserDetails() {
    return p(this, null, function* () {
      const { user: e } = (yield this.requests.get("/auth/basicUserDetails")).data;
      return e;
    });
  }
  getUserPreset(e) {
    return p(this, null, function* () {
      const { preset: r } = (yield this.requests.post("/v1/userpreset", {
        roomName: e,
        authToken: this.authToken,
        // TODO: remove the hardcoded version and clientType params
        clientType: "CLIENT_APP",
        version: "0.5.0"
      })).data.data;
      return yt(r);
    });
  }
  startRecording(e) {
    return p(this, null, function* () {
      const r = yield this.requests.post(
        `/v1/organizations/${this.organizationId}/rooms/${this.roomName}/recording`,
        e
      );
      if (r.status !== 201)
        throw new Error("Recording failed to start");
      return r.data.data.recording.id;
    });
  }
  updateRecording(e, r) {
    return p(this, null, function* () {
      if (r !== "stop")
        return;
      if ((yield this.requests.put(
        `/v1/organizations/${this.organizationId}/rooms/${this.roomName}/recordings/${e}`,
        { recordingAction: "stop" }
      )).status !== 201)
        throw new Error("Recording failed to stop");
    });
  }
  getActiveRecording() {
    return p(this, null, function* () {
      return this.organizationId ? (yield this.requests.get(
        `/v1/organizations/${this.organizationId}/rooms/${this.roomName}/active-recording?limit=50`
      )).data.data.recording : {};
    });
  }
  getActiveTranscript() {
    return p(this, null, function* () {
      return m.error("getActiveTranscript does not work in v1 meeting"), { transcript: "" };
    });
  }
  getRoomNodeData(n) {
    return p(this, arguments, function* ({
      roomName: e,
      peerId: r
    }) {
      const i = `
				query Session($roomName: String!, $password: String, $ipInformation: String) {
						session(roomName: $roomName, password: $password) {
							title,
							roomNodeLink(ipInformation: $ipInformation),
							useHiveMedia,
							roomName,
							password
						}
					}
				`, s = yield this.getIPDetails({ peerId: r });
      this.ipInfo = s;
      const { roomNodeLink: a, title: o, useHiveMedia: c } = (yield this.requests.post("/graphql", {
        query: i,
        variables: { roomName: e, ipInformation: JSON.stringify(s) }
      })).data.data.session;
      return {
        roomNodeUrl: a,
        meetingTitle: o,
        useHiveMedia: c != null ? c : !1
      };
    });
  }
}
Rn([
  v.trace("APIClientV1.getUserDetails")
], Sn.prototype, "getUserDetails", 1);
Rn([
  v.trace("APIClientV1.getUserPreset")
], Sn.prototype, "getUserPreset", 1);
Rn([
  v.trace("APIClientV1.startRecording")
], Sn.prototype, "startRecording", 1);
Rn([
  v.trace("APIClientV1.updateRecording")
], Sn.prototype, "updateRecording", 1);
Rn([
  v.trace("APIClientV1.getActiveRecording")
], Sn.prototype, "getActiveRecording", 1);
Rn([
  v.trace("APIClient.getActiveTranscript")
], Sn.prototype, "getActiveTranscript", 1);
Rn([
  v.trace("APIClientV1.getRoomNodeData")
], Sn.prototype, "getRoomNodeData", 1);
let qO;
function Qn() {
  return qO;
}
function HO(t, e) {
  return `<blockquote>${e.replace(/<blockquote>[.\s\S]*<\/blockquote>\n\n/m, "")}</blockquote>

${t}`;
}
var WO = Object.defineProperty, jO = Object.getOwnPropertyDescriptor, He = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? jO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && WO(e, r, i), i;
};
const cl = (t) => new Promise((e, r) => {
  const n = new FileReader();
  n.readAsDataURL(t), n.onload = () => e(n.result), n.onerror = r;
}), KO = ["text", "image", "file", "custom", "poll"];
var U, Js, Cl;
let Oe = (Cl = class extends mt {
  constructor(e, r) {
    super();
    /**
     * An array of chat messages.
     */
    _(this, "messages");
    /**
     * An Array of all available channels.
     */
    _(this, "channels", []);
    b(this, U, void 0);
    b(this, Js, void 0);
    y(this, U, e), y(this, Js, r), this.messages = [];
  }
  /**
   * Returns true if the local participant has joined the meeting.
   */
  get roomJoined() {
    return d(this, U).roomJoined;
  }
  sendMessageInternal(s, a, o) {
    return p(this, arguments, function* (e, r, n, i = {}) {
      switch (e.type) {
        case "text": {
          const c = i.replyTo && i.replyTo.type === "text" ? HO(e.message, i.replyTo.message) : e.message;
          yield this.sendTextMessageInternal(c, r, n);
          break;
        }
        case "image":
          yield this.sendImageMessageInternal(e.image, r, n);
          break;
        case "file":
          yield this.sendFileMessageInternal(e.file, r, n);
          break;
        default:
          m.error("sendMessage::message_type_not_supported", {
            dyteChat: { messageType: e.type }
          });
          break;
      }
    });
  }
  sendTextMessageInternal(e, r, n) {
    return p(this, null, function* () {
      var s, a, o, c, u, h;
      if (r && r.length > 0) {
        if (!((s = d(this, U).permissions) != null && s.chatPrivate.canSend) || !((a = d(this, U).permissions) != null && a.chatPrivate.text))
          throw m.error("sendTextMessage::private_chat_permission_denied"), new w("Could not send message to private chat.", "0501");
      } else if (!((c = (o = d(this, U).permissions) == null ? void 0 : o.chatPublic) != null && c.canSend) || !((h = (u = d(this, U).permissions) == null ? void 0 : u.chatPublic) != null && h.text))
        throw m.error("sendTextMessage::public_chat_permission_denied"), new w("Could not send message to public chat.", "0501");
      if (!e)
        throw m.error("sendTextMessage::message_can_not_be_empty"), new w("Message can not be empty.", "0502");
      if (n)
        return;
      if (r !== void 0 && r.length > 0) {
        m.error("sendTextMessage::private_chat_unsupported");
        return;
      }
      const i = {
        id: ot(),
        userId: d(this, U).userId,
        displayName: d(this, U).name,
        message: e,
        type: "text",
        time: new Date()
      };
      this.messages.push(i), this.emit("chatUpdate", {
        action: "add",
        message: i,
        messages: this.messages
      });
    });
  }
  sendImageMessageInternal(e, r, n) {
    return p(this, null, function* () {
      var s, a, o, c, u, h;
      if (r && r.length > 0) {
        if (!((s = d(this, U).permissions) != null && s.chatPrivate.canSend) || !((a = d(this, U).permissions) != null && a.chatPrivate.files)) {
          m.error("sendImageMessage::private_chat_permission_denied");
          return;
        }
      } else if (!((c = (o = d(this, U).permissions) == null ? void 0 : o.chatPublic) != null && c.canSend) || !((h = (u = d(this, U).permissions) == null ? void 0 : u.chatPublic) != null && h.files)) {
        m.error("sendImageMessage::permission_denied");
        return;
      }
      if (!e) {
        m.error("sendImageMessage::required_argument_image_can_not_be_empty");
        return;
      }
      if (!["image/gif", "image/jpeg", "image/png"].includes(e.type)) {
        m.error("sendImageMessage::image_type_not_supported", { dyteChat: { imageType: e.type } });
        return;
      }
      try {
        if (n)
          return;
        if (r !== void 0 && r.length > 0) {
          m.error("sendImageMessage::private_chat_unsupported");
          return;
        }
        const f = yield cl(e), g = {
          userId: d(this, U).userId,
          displayName: d(this, U).name,
          type: "image",
          link: f,
          time: new Date(),
          id: ot()
        };
        if (this.messages.push(g), this.emit("chatUpdate", {
          action: "add",
          message: g,
          messages: this.messages
        }), !this.roomJoined)
          throw m.error("DyteChat.sendImageMessage.RoomNodeClientSocketUsed_WithoutRoomJoin"), new w("Can`t sendImageMessage without joining room");
      } catch (f) {
        throw new w("Error sending image message.");
      }
    });
  }
  sendFileMessageInternal(e, r, n) {
    return p(this, null, function* () {
      var i, s, a, o, c, u;
      if (r && r.length > 0) {
        if (!((i = d(this, U).permissions) != null && i.chatPrivate.canSend) || !((s = d(this, U).permissions) != null && s.chatPrivate.files)) {
          m.error("sendFileMessage::private_chat_permission_denied");
          return;
        }
      } else if (!((o = (a = d(this, U).permissions) == null ? void 0 : a.chatPublic) != null && o.canSend) || !((u = (c = d(this, U).permissions) == null ? void 0 : c.chatPublic) != null && u.files)) {
        m.error("sendFileMessage::permission_denied");
        return;
      }
      if (!e) {
        m.error("sendFileMessage::required_argument_file_can_not_be_empty");
        return;
      }
      try {
        if (n)
          return;
        if (r !== void 0 && r.length > 0) {
          m.error("sendFileMessage::private_chat_unsupported");
          return;
        }
        const h = yield cl(e), f = {
          id: ot(),
          userId: d(this, U).userId,
          displayName: d(this, U).name,
          type: "file",
          link: h,
          name: e.name,
          size: "size" in e ? e.size : 0,
          time: new Date()
        };
        this.messages.push(f), this.emit("chatUpdate", {
          action: "add",
          message: f,
          messages: this.messages
        });
      } catch (h) {
        throw new w("Error sending file message.");
      }
    });
  }
  sendTextMessage(e, r) {
    return p(this, null, function* () {
      return this.sendTextMessageInternal(e, r);
    });
  }
  sendCustomMessage(e, r) {
    return p(this, null, function* () {
      var s, a, o, c, u, h, f, g, E, R, I, S, k, O, W;
      if (r && r.length > 0) {
        if (!((s = d(this, U).permissions) != null && s.chatPrivate.canSend) || !((a = d(this, U).permissions) != null && a.chatPrivate.files) || !((o = d(this, U).permissions) != null && o.chatPrivate.text)) {
          m.error("sendCustomMessage::private_chat_permission_denied");
          return;
        }
      } else if (!((u = (c = d(this, U).permissions) == null ? void 0 : c.chatPublic) != null && u.canSend) || !((f = (h = d(this, U).permissions) == null ? void 0 : h.chatPublic) != null && f.files) || !((E = (g = d(this, U).permissions) == null ? void 0 : g.chatPublic) != null && E.text)) {
        m.error("sendCustomMessage::permission_denied");
        return;
      }
      const n = (C) => p(this, null, function* () {
        try {
          if (typeof C == "string")
            return C;
          const te = Qn(), { getLocation: J, putLocation: Ee } = yield te.getPresignedUrls(
            C.name,
            d(this, U).config.viewType
          );
          return yield te.uploadFile(C, Ee), J;
        } catch (te) {
          throw new w("Error sending image message.");
        }
      }), i = Ue(Y({}, e), {
        files: yield Promise.all((I = (R = e.files) != null ? R : []) == null ? void 0 : I.map((C) => n(C))),
        images: yield Promise.all((k = (S = e.images) != null ? S : []) == null ? void 0 : k.map((C) => p(this, null, function* () {
          return n(C);
        }))),
        videos: yield Promise.all((W = (O = e.videos) != null ? O : []) == null ? void 0 : W.map((C) => p(this, null, function* () {
          return n(C);
        })))
      });
      if (r !== void 0 && r.length > 0) {
        m.error("sendCustomMessage::private_chat_unsupported");
        return;
      }
      if (!this.roomJoined)
        throw m.error("DyteChat.sendCustomMessage.RoomNodeClientSocketUsed_WithoutRoomJoin"), new w("Can`t sendCustomMessage without joining room");
      Ue(Y({
        userId: d(this, U).userId,
        displayName: d(this, U).name
      }, i), {
        type: KO.indexOf(
          "custom"
          /* custom */
        ),
        time: +new Date()
      });
    });
  }
  sendImageMessage(e, r) {
    return p(this, null, function* () {
      return this.sendImageMessageInternal(e, r);
    });
  }
  sendFileMessage(e, r) {
    return p(this, null, function* () {
      return this.sendFileMessageInternal(e, r);
    });
  }
  sendMessage(e, r) {
    return p(this, null, function* () {
      return this.sendMessageInternal(e, r);
    });
  }
  editTextMessage(e, r, n) {
    return p(this, null, function* () {
      var i, s, a, o, c, u;
      if (((s = (i = d(this, U).permissions) == null ? void 0 : i.chatMessage) == null ? void 0 : s.canEdit) === "NONE")
        throw new w("Not permitted to edit messages", "0501");
      if (!((o = (a = d(this, U).permissions) == null ? void 0 : a.chatPublic) != null && o.canSend) || !((u = (c = d(this, U).permissions) == null ? void 0 : c.chatPublic) != null && u.text)) {
        m.error("editTextMessage::permission_denied");
        return;
      }
      r || m.error("editTextMessage::message_can_not_be_empty");
    });
  }
  editImageMessage(e, r, n) {
    return p(this, null, function* () {
      var s, a, o, c;
      if (!((a = (s = d(this, U).permissions) == null ? void 0 : s.chatPublic) != null && a.canSend) || !((c = (o = d(this, U).permissions) == null ? void 0 : o.chatPublic) != null && c.files)) {
        m.error("editImageMessage::permission_denied");
        return;
      }
      if (!r) {
        m.error("editImageMessage::required_argument_image_can_not_be_empty");
        return;
      }
      if (!["image/gif", "image/jpeg", "image/png"].includes(r.type)) {
        m.error("sendImageMessage::image_type_not_supported", {
          dyteChat: { imageType: r.type }
        });
        return;
      }
    });
  }
  editFileMessage(e, r, n) {
    return p(this, null, function* () {
      var i, s, a, o;
      if (!((s = (i = d(this, U).permissions) == null ? void 0 : i.chatPublic) != null && s.canSend) || !((o = (a = d(this, U).permissions) == null ? void 0 : a.chatPublic) != null && o.files)) {
        m.error("sendFileMessage::permission_denied");
        return;
      }
      if (!r) {
        m.error("sendFileMessage::required_argument_file_can_not_be_empty");
        return;
      }
    });
  }
  editMessage(e, r, n) {
    return p(this, null, function* () {
      switch (r.type) {
        case "text": {
          this.editTextMessage(e, r.message, n);
          break;
        }
        case "image": {
          this.editImageMessage(e, r.image, n);
          break;
        }
        case "file": {
          this.editFileMessage(e, r.file, n);
          break;
        }
        default: {
          m.error("editMessage::message_type_not_supported", {
            dyteChat: { messageType: r.type }
          });
          break;
        }
      }
    });
  }
  deleteMessage(e, r) {
    return p(this, null, function* () {
      var n, i;
      if (((i = (n = d(this, U).permissions) == null ? void 0 : n.chatMessage) == null ? void 0 : i.canDelete) === "NONE")
        throw new w("Not permitted to delete messages", "0501");
    });
  }
  /**
   * Returns an array of messages sent by a specific userId.
   * @param userId The user id of the user that sent the message.
   */
  getMessagesByUser(e) {
    return this.messages.filter((r) => r.userId === e);
  }
  /**
   * Returns an array of 'text', 'image' or 'file' messages.
   * @param type 'text', 'image', or 'file'.
   */
  getMessagesByType(e) {
    return this.messages.filter((r) => r.type === e);
  }
  /**
   * Pins a chat message
   * @param id ID of the message to be pinned
   */
  pin(e) {
    return p(this, null, function* () {
      if (!this.roomJoined)
        throw new w("Can`t pin message without joining room");
      if (!d(this, U).permissions.pinParticipant)
        throw new w("You do not have permission to pin messages.");
    });
  }
  /**
   * Unpins a chat message
   * @param id ID of the message to be unpinned
   */
  unpin(e) {
    return p(this, null, function* () {
      if (!this.roomJoined)
        throw new w("Can`t unpin message without joining room");
      if (!d(this, U).permissions.pinParticipant)
        throw new w("You do not have permission to unpin messages.");
    });
  }
  /**
   * Gets chat messages in a paginated manner
   */
  getMessages(e, r, n, i = 0, s = void 0) {
    return p(this, null, function* () {
      return {
        messages: [],
        next: ""
      };
    });
  }
  createChannel(i, s) {
    return p(this, arguments, function* (e, r, n = {}) {
      var o;
      const a = (o = d(this, U).permissions) == null ? void 0 : o.chatChannel;
      if (a) {
        if (a.canCreate === "NONE")
          throw new w("Not permitted to create channels", "0501");
        if (n.visibility === "public" && !(a.canCreate === "PUBLIC" || a.canCreate === "ALL"))
          throw new w("Not permitted to create public channels", "0501");
        if (n.visibility === "private" && !(a.canCreate === "PRIVATE" || a.canCreate === "ALL"))
          throw new w("Not permitted to create private channels", "0501");
      }
      if (!e || e.trim().length === 0)
        throw new w("channel name cannot be empty.", "0510");
      return [.../* @__PURE__ */ new Set([...r, d(this, U).userId])], {};
    });
  }
  updateChannel(e, r) {
    var s, a, o, c, u;
    const n = this.channels.find((h) => h.id === e), i = (s = d(this, U).permissions) == null ? void 0 : s.chatChannel;
    if (i) {
      if (i.canUpdate === "NONE")
        throw new w("Not permitted to update channels", "0501");
      if (n.visibility === "public" && !(i.canUpdate === "PUBLIC" || i.canUpdate === "ALL"))
        throw new w("Not permitted to update public channels", "0501");
      if (n.visibility === "private" && !(i.canUpdate === "PRIVATE" || i.canUpdate === "ALL"))
        throw new w("Not permitted to update private channels", "0501");
    }
    return (a = r.memberIds) != null || n.memberIds, (o = r.displayName) != null || n.displayName, (c = r.displayPictureUrl) != null || n.displayPictureUrl, (u = r.visibility) != null || n.visibility, {};
  }
  sendMessageToChannel(i, s) {
    return p(this, arguments, function* (e, r, n = {}) {
      return this.sendMessageInternal(e, null, r, n);
    });
  }
  getChannelMembers(e) {
    return p(this, null, function* () {
      return [];
    });
  }
  searchMessages(n) {
    return p(this, arguments, function* (e, r = {}) {
      if (!ae.hasFeature(oe.FEAT_CHAT_SDK_SEARCH))
        throw new w("searchMessages is temporarily disabled!");
      return [];
    });
  }
  markLastReadMessage(e, r) {
    return p(this, null, function* () {
    });
  }
  /**
   * Returns an array of pinned messages.
   */
  get pinned() {
    return this.messages.filter((e) => e.pinned);
  }
}, U = new WeakMap(), Js = new WeakMap(), Cl);
He([
  v.trace("DyteChat.sendTextMessage")
], Oe.prototype, "sendTextMessage", 1);
He([
  v.trace("DyteChat.sendImageMessage")
], Oe.prototype, "sendImageMessage", 1);
He([
  v.trace("DyteChat.sendFileMessage")
], Oe.prototype, "sendFileMessage", 1);
He([
  v.trace("DyteChat.sendMessage")
], Oe.prototype, "sendMessage", 1);
He([
  v.trace("DyteChat.editTextMessage")
], Oe.prototype, "editTextMessage", 1);
He([
  v.trace("DyteChat.editImageMessage")
], Oe.prototype, "editImageMessage", 1);
He([
  v.trace("DyteChat.editFileMessage")
], Oe.prototype, "editFileMessage", 1);
He([
  v.trace("DyteChat.editMessage")
], Oe.prototype, "editMessage", 1);
He([
  v.trace("DyteChat.deleteMessage")
], Oe.prototype, "deleteMessage", 1);
He([
  v.trace("DyteChat.createChannel")
], Oe.prototype, "createChannel", 1);
He([
  v.trace("DyteChat.updateChannel")
], Oe.prototype, "updateChannel", 1);
He([
  v.trace("DyteChat.sendMessageToChannel")
], Oe.prototype, "sendMessageToChannel", 1);
He([
  v.trace("DyteChat.getChannelMembers")
], Oe.prototype, "getChannelMembers", 1);
He([
  v.trace("DyteChat.searchMessages")
], Oe.prototype, "searchMessages", 1);
He([
  v.trace("DyteChat.markLastReadMessage")
], Oe.prototype, "markLastReadMessage", 1);
Oe = He([
  $e((t) => {
    throw new w(t.message, "0500");
  })
], Oe);
var JO = Object.defineProperty, YO = Object.getOwnPropertyDescriptor, zO = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? YO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && JO(e, r, i), i;
}, Bt, Il;
let zo = (Il = class extends mt {
  // readonly #pollSocketHandler: PollSocketHandler;
  // readonly #socketServerName: PollSocketServerName;
  constructor(e) {
    super();
    /**
     * An array of poll items.
     */
    _(this, "items");
    b(this, Bt, void 0);
    y(this, Bt, e), this.items = [];
  }
  // eslint-disable-next-line class-methods-use-this
  // get #roomNodeClient() {
  // 	return getRoomNodeClient();
  // }
  /**
   * Returns true if the local participant has joined the meeting.
   */
  get roomJoined() {
    return d(this, Bt).roomJoined === !0;
  }
  /**
   * Creates a poll in the meeting.
   * @param question The question that is to be voted for.
   * @param options The options of the poll.
   * @param anonymous If true, the poll votes are anonymous.
   * @param hideVotes If true, the votes on the poll are hidden.
   */
  create(e, r, n = !1, i = !1) {
    return p(this, null, function* () {
      if (d(this, Bt).config.viewType !== "LIVESTREAM" && !this.roomJoined)
        throw new w("Can't create polls without joining room");
      if (!d(this, Bt).permissions.polls.canCreate) {
        m.error("DytePolls::create::permission_denied");
        return;
      }
      if (!e || !r) {
        m.error("DytePolls::question_and_options_can_not_be_empty", {
          dytePolls: {
            hasQuestion: !!e,
            optionsLength: r == null ? void 0 : r.length
          }
        });
        return;
      }
      if (r.length < 2) {
        m.error("DytePolls::there_must_be_at_least_two_options", {
          dytePolls: { hasQuestion: !!e, optionsLength: r.length }
        });
        return;
      }
      const s = {
        question: e,
        options: r.map((a) => ({
          text: a,
          votes: [],
          count: 0
        })),
        id: ot(),
        voted: [],
        anonymous: n,
        hideVotes: i,
        createdBy: d(this, Bt).name,
        createdByUserId: d(this, Bt).userId
      };
      this.items.push(s);
    });
  }
  /**
   * Casts a vote on an existing poll.
   * @param pollId The ID of the poll that is to be voted on.
   * @param index The index of the option.
   */
  vote(e, r) {
    return p(this, null, function* () {
      if (!d(this, Bt).permissions.polls.canVote) {
        m.error("DytePolls::vote::permission_denied");
        return;
      }
      console.log();
    });
  }
}, Bt = new WeakMap(), Il);
zo = zO([
  $e((t) => {
    throw new w(t.message, "0700");
  })
], zo);
var XO = Object.defineProperty, QO = Object.getOwnPropertyDescriptor, es = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? QO(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && XO(e, r, i), i;
}, Jn, Yn, _s, Pl;
let Tn = (Pl = class extends mt {
  constructor(e) {
    super();
    b(this, Yn);
    b(this, Jn, void 0);
    _(this, "recordingPeerIds", []);
    _(this, "recordings", []);
    y(this, Jn, e);
  }
  get recordingState() {
    return this.recordings.some((e) => e.state === "RECORDING") ? "RECORDING" : this.recordings.some((e) => e.state === "PAUSED") ? "PAUSED" : this.recordings.some((e) => e.state === "STARTING") ? "STARTING" : this.recordings.some((e) => e.state === "STOPPING") ? "STOPPING" : "IDLE";
  }
  updateRecordings(e) {
    this.recordings = e, this.emit("recordingUpdate", this.recordingState);
  }
  start(e) {
    return p(this, null, function* () {
      if (!d(this, Jn).permissions.canRecord)
        throw m.error("DyteRecording::start::permission_denied"), new w("User does not have permission to start recording");
      if ((e == null ? void 0 : e.allowMultiple) !== !0 && (this.recordingState === "STARTING" || this.recordingState === "RECORDING" || this.recordingState === "STOPPING"))
        throw m.error("DyteRecording::start::recording_in_progress", {
          recording: {
            state: this.recordingState
          }
        }), new w(
          `Cant start recording, recordingState irregular: ${this.recordingState}`
        );
      try {
        const r = Qn(), { recording: n = {} } = G.defaults, i = yield r.startRecording(n, e == null ? void 0 : e.allowMultiple);
        this.updateRecordings([...this.recordings, {
          id: i,
          state: "STARTING"
        }]);
      } catch (r) {
        throw m.error("DyteRecording::stop::recording_failed_to_start", {
          error: r
        }), new w("Error while starting recording");
      }
    });
  }
  stop(e) {
    return p(this, null, function* () {
      yield j(this, Yn, _s).call(this, "stop", ["RECORDING", "PAUSED"], e);
    });
  }
  pause(e) {
    return p(this, null, function* () {
      yield j(this, Yn, _s).call(this, "pause", ["RECORDING"], e);
    });
  }
  resume(e) {
    return p(this, null, function* () {
      yield j(this, Yn, _s).call(this, "resume", ["PAUSED"], e);
    });
  }
}, Jn = new WeakMap(), Yn = new WeakSet(), _s = function(e, r, n) {
  return p(this, null, function* () {
    if (!d(this, Jn).permissions.canRecord)
      throw m.error("DyteRecording::stop::permission_denied"), new w("User does not have permission to stop recording");
    let i = [];
    if (n !== void 0) {
      const s = this.recordings.find((a) => a.id === n);
      if (s === void 0)
        throw new w("Could not find the specified recording");
      if (r.includes(s.state)) {
        m.error("DyteRecording::stop::recording_not_in_expected_state", {
          recording: {
            state: s.state
          }
        });
        return;
      }
      i.push(s);
    } else
      i = this.recordings.filter((s) => r.includes(s.state));
    i.forEach((s) => p(this, null, function* () {
      const a = s.state;
      e === "stop" && (s.state = "STOPPING", this.emit("recordingUpdate", "STOPPING"));
      try {
        yield Qn().updateRecording(s.id, e);
      } catch (o) {
        throw m.error("DyteRecording::stop::recording_failed_to_stop", {
          error: o
        }), s.state !== a && (s.state = a, this.emit("recordingUpdate", a)), new w("Error while stopping recording");
      }
    }));
  });
}, Pl);
es([
  v.trace("DyteRecording.start")
], Tn.prototype, "start", 1);
es([
  v.trace("DyteRecording.stop")
], Tn.prototype, "stop", 1);
es([
  v.trace("DyteRecording.stop")
], Tn.prototype, "pause", 1);
es([
  v.trace("DyteRecording.stop")
], Tn.prototype, "resume", 1);
Tn = es([
  $e((t) => {
    throw new w(t.message, "1000");
  })
], Tn);
class qp {
  static hasFeature(e) {
    return !1;
  }
  static getFeatureValue(e) {
    return "";
  }
  static getAllFeatures() {
    return {};
  }
}
class ld {
  constructor(e, r) {
    _(this, "logger");
    _(this, "features");
    _(this, "browserSpecs");
    this.logger = e, this.features = r, this.browserSpecs = fe;
  }
  static init() {
    return new ld(m, qp);
  }
}
var ZO = Object.defineProperty, eM = Object.getOwnPropertyDescriptor, Hp = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? eM(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && ZO(e, r, i), i;
}, zn;
class hd extends mt {
  constructor(r) {
    super();
    b(this, zn, void 0);
    _(this, "state", "IDLE");
    _(this, "playbackUrl");
    _(this, "viewerCount");
    y(this, zn, r), this.viewerCount = 0;
  }
  setLivestreamState(r) {
    const n = this.state;
    this.state = r, n !== r && this.emitCurrentLivestreamState();
  }
  emitCurrentLivestreamState() {
    this.emit("livestreamUpdate", this.state);
  }
  start() {
    return p(this, null, function* () {
      if (!d(this, zn).permissions.canLivestream)
        throw m.error("DyteLivestream::start::permission_denied"), new w(
          "User does not have permission to start livestreaming"
        );
      this.setLivestreamState("STARTING");
      try {
        const n = yield Qn().startLivestreaming();
        this.playbackUrl = n;
      } catch (r) {
        throw m.error("DyteRecording::stop::livestream_failed_to_start", {
          error: r
        }), this.setLivestreamState("IDLE"), new w("Error while starting livestream");
      }
    });
  }
  stop() {
    return p(this, null, function* () {
      if (!d(this, zn).permissions.canLivestream)
        throw m.error("DyteLivestream::stop::permission_denied"), new w(
          "User does not have permission to stop livestreaming"
        );
      if (this.state !== "LIVESTREAMING")
        throw m.error("DyteLivestream::stop::inconsistent_state"), new w("Livestream not started yet");
      try {
        this.setLivestreamState("STOPPING"), yield Qn().stopLivestreaming();
      } catch (r) {
        throw m.error("DyteLivestream::stop::livestream_failed_to_stop", {
          error: r
        }), this.setLivestreamState("STOPPING"), new w("Error while stopping livestream");
      }
    });
  }
}
zn = new WeakMap();
Hp([
  v.trace("livestream.start")
], hd.prototype, "start", 1);
Hp([
  v.trace("livestream.stop")
], hd.prototype, "stop", 1);
var tM = Object.defineProperty, rM = Object.getOwnPropertyDescriptor, bn = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? rM(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && tM(e, r, i), i;
}, K, Li, Ys, Gt, It, tr, $i, Xo;
class Jr extends mt {
  constructor(r, n, i) {
    super();
    b(this, It);
    /**
     * @access private
     * This is an internal (and temporary) permission check that is used across dyteStage.
     * @returns boolean
     */
    b(this, $i);
    b(this, K, void 0);
    b(this, Li, void 0);
    b(this, Ys, void 0);
    b(this, Gt, void 0);
    _(this, "status", "ON_STAGE");
    _(this, "getSocketStageRequests", () => p(this, null, function* () {
    }));
    y(this, K, r), y(this, Li, n), y(this, Ys, i), y(this, Gt, []), this.setupEvents();
  }
  setupEvents() {
    d(this, K).permissions.acceptStageRequests && d(this, K).permissions.stageEnabled && this.getSocketStageRequests(), D.onAsync(P.GET_STAGE_REQUESTS, (r) => p(this, null, function* () {
      y(this, Gt, r);
    })), D.onAsync(
      P.UPDATE_STAGE_REQUESTS,
      (i) => p(this, [i], function* ({ request: r, add: n }) {
        n ? y(this, Gt, [...d(this, Gt), r]) : y(this, Gt, d(this, Gt).filter((s) => s.peerId !== r.peerId));
      })
    );
  }
  getAccessRequests() {
    if (!d(this, K).permissions.stageEnabled)
      throw m.error("DyteStage::stage_disabled"), new w("Stage is disabled");
    if (!d(this, K).permissions.acceptStageRequests)
      throw m.error("DyteStage::get_access_request::permission_denied"), new w("You do not have permission to perform this action/");
    return j(this, $i, Xo).call(this) ? { stageRequests: d(this, Gt) } : { stageRequests: d(this, Li).joined.toArray().filter(
      (n) => n.stageStatus === Dr.REQUESTED_TO_JOIN_STAGE
    ).map((n) => ({
      displayName: n.name,
      userId: n.userId,
      peerId: n.id
    })) };
  }
  requestAccess() {
    return p(this, null, function* () {
      if (!d(this, K).permissions.stageEnabled)
        throw m.error("DyteStage::stage_disabled"), new w("Stage is disabled");
      if (this.status !== "OFF_STAGE")
        throw new w(
          `Unable to request access you are currently ${this.status}`
        );
      if (j(this, $i, Xo).call(this)) {
        if (d(this, K).permissions.stageAccess === L.Allowed) {
          j(this, It, tr).call(this, "ACCEPTED_TO_JOIN_STAGE");
          return;
        }
        j(this, It, tr).call(this, "REQUESTED_TO_JOIN_STAGE");
      } else {
        if (!d(this, K).roomJoined)
          throw new w("Can`t request to join stage without joining room");
        if (d(this, K).permissions.stageAccess === L.Allowed) {
          j(this, It, tr).call(this, "ACCEPTED_TO_JOIN_STAGE");
          return;
        }
        if (d(this, K).permissions.stageAccess === L.NotAllowed)
          throw m.error("DyteStage::requestGoToStage::permission_denied"), new w("User does not have permission to go on stage");
        if (this.status !== "OFF_STAGE")
          return;
        try {
          j(this, It, tr).call(this, "REQUESTED_TO_JOIN_STAGE");
        } catch (r) {
          j(this, It, tr).call(this, "OFF_STAGE");
        }
      }
    });
  }
  cancelRequestAccess() {
    return p(this, null, function* () {
      if (!d(this, K).permissions.stageEnabled)
        throw m.error("DyteStage::stage_disabled"), new w("Stage is disabled");
      if (!d(this, K).roomJoined)
        throw new w("Can`t request to join stage without joining room");
      d(this, K).stageStatus === Dr.REQUESTED_TO_JOIN_STAGE && j(this, It, tr).call(this, "OFF_STAGE");
    });
  }
  grantAccess(r) {
    if (!d(this, K).permissions.stageEnabled)
      throw m.error("DyteStage::stage_disabled"), new w("Stage is disabled");
    if (!d(this, K).permissions.acceptStageRequests)
      throw m.error("DyteStage::grant_access::permission_denied"), new w("You do not have permission to perform this action/");
    if (!d(this, K).roomJoined)
      throw new w(
        "Can`t rejectRequestToJoinStage for participant without joining room"
      );
  }
  denyAccess(r) {
    if (!d(this, K).permissions.stageEnabled)
      throw m.error("DyteStage::stage_disabled"), new w("Stage is disabled");
    if (!d(this, K).permissions.acceptStageRequests)
      throw m.error("DyteStage::deny_access::permission_denied"), new w("You do not have permission to perform this action/");
    if (!d(this, K).roomJoined)
      throw new w(
        "Can`t rejectRequestToJoinStage for participant without joining room"
      );
  }
  join() {
    return p(this, null, function* () {
      if (this.status === "ON_STAGE")
        throw new w("You are already on stage.");
      if (d(this, K).permissions.stageAccess !== L.Allowed && this.status !== "ACCEPTED_TO_JOIN_STAGE")
        throw new w(
          `Unable to join stage you are currently ${this.status}`
        );
      if (!d(this, K).roomJoined)
        throw new w("Can`t join stage without joining room");
      d(this, K).emit("stageJoined"), j(this, It, tr).call(this, "ON_STAGE");
    });
  }
  leave() {
    return p(this, null, function* () {
      if (!d(this, K).permissions.stageEnabled)
        throw m.error("DyteStage::stage_disabled"), new w("Stage is disabled");
      if (!d(this, K).roomJoined)
        throw new w("Can`t leave stage without joining room");
      yield d(this, K).disableScreenShare(), yield d(this, K).disableAudio(), yield d(this, K).disableVideo(), j(this, It, tr).call(this, "OFF_STAGE");
    });
  }
  /**
   * Method to kick a user off the stage
   *
   * `permissions.acceptStageRequests` privilege required
   */
  kick(r) {
    return p(this, null, function* () {
      if (!d(this, K).permissions.stageEnabled)
        throw m.error("DyteStage::stage_disabled"), new w("Stage is disabled");
      if (!d(this, K).permissions.acceptStageRequests)
        throw m.error("DyteStage::kick::permission_denied"), new w("You do not have permissions for kick");
      if (!d(this, K).roomJoined)
        throw new w(
          "Can`t kick participant without joining room"
        );
    });
  }
}
K = new WeakMap(), Li = new WeakMap(), Ys = new WeakMap(), Gt = new WeakMap(), It = new WeakSet(), tr = function(r) {
  return p(this, null, function* () {
    this.status !== r && (this.status = r, yield D.emitAsync(P.SET_STAGE_STATUS, r), this.emit("stageStatusUpdate", r));
  });
}, $i = new WeakSet(), Xo = function() {
  return !1;
};
bn([
  v.trace("DyteStage.getStageRequests")
], Jr.prototype, "getAccessRequests", 1);
bn([
  v.trace("DyteStage.requestAccess")
], Jr.prototype, "requestAccess", 1);
bn([
  v.trace("DyteStage.cancelRequestAccess")
], Jr.prototype, "cancelRequestAccess", 1);
bn([
  v.trace("DyteStage.grantAccess")
], Jr.prototype, "grantAccess", 1);
bn([
  v.trace("DyteStage.denyAccess")
], Jr.prototype, "denyAccess", 1);
bn([
  v.trace("DyteStage.joinStage")
], Jr.prototype, "join", 1);
bn([
  v.trace("DyteStage.leaveStage")
], Jr.prototype, "leave", 1);
var ur, Ui, lr, Fi, Qo;
class nM extends Rr {
  constructor(r, n) {
    super();
    b(this, Fi);
    b(this, ur, void 0);
    b(this, Ui, void 0);
    b(this, lr, void 0);
    y(this, ur, r), y(this, lr, !1), y(this, Ui, n);
  }
  get mediaPermission() {
    return d(this, ur).mediaPermissions.audio;
  }
  getTrackMetadata(r = !1) {
    return p(this, null, function* () {
      if (!rr.track) {
        if (!r)
          return null;
        const n = yield j(this, Fi, Qo).call(this);
        rr.setTrack(n);
      }
      return rr.getTrackMetadata();
    });
  }
  startTrackAnalysis(r = !1) {
    return p(this, null, function* () {
      if (d(this, lr))
        return !0;
      y(this, lr, !0);
      let n = yield rr.startTrackAnalysis();
      if (!n && r) {
        const i = yield j(this, Fi, Qo).call(this);
        rr.setTrack(i), n = yield rr.startTrackAnalysis();
      }
      return n || y(this, lr, !1), n;
    });
  }
  stopTrackAnalysis() {
    return d(this, lr) && (y(this, lr, !1), rr.stopTrackAnalysis()), !0;
  }
}
ur = new WeakMap(), Ui = new WeakMap(), lr = new WeakMap(), Fi = new WeakSet(), Qo = function() {
  return p(this, null, function* () {
    var r;
    try {
      const n = d(this, ur).getCurrentDevices(), i = (r = n == null ? void 0 : n.audio) == null ? void 0 : r.deviceId, s = yield d(this, Ui).getAudioTrack(!1, i);
      return d(this, ur).mediaPermissions.audio = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
        message: d(this, ur).mediaPermissions.audio,
        kind: "audio"
      }), s;
    } catch (n) {
      const i = Pa(
        "audio",
        n.name,
        n.message
      );
      throw d(this, ur).mediaPermissions.audio = i, D.emit(P.MEDIA_PERMISSION_ERROR, {
        message: i,
        constraints: n.constraints,
        kind: "audio"
      }), new w("Failed to fetch audio track", "1700");
    }
  });
};
var zs, Wp, Xs, jp, Vi, Zo;
const Qs = class {
  constructor(e = 1e3) {
    b(this, zs);
    b(this, Xs);
    _(this, "sendTransport");
    _(this, "recvTransport");
    _(this, "collectStpStats");
    _(this, "collectRtpStats");
    _(this, "pingInterval");
    this.pingInterval = e;
  }
  initSendTransport(e) {
    this.sendTransport = e, D.emit(P.SEND_TRANSPORT_CREATED);
  }
  initRecvTransport(e) {
    this.recvTransport = e, D.emit(P.RECV_TRANSPORT_CREATED);
  }
  collectSendTransportStats() {
    return !this.sendTransport || this.collectStpStats ? !1 : (this.collectStpStats = setInterval(
      j(this, zs, Wp).bind(this),
      this.pingInterval
    ), !0);
  }
  collectRecvTransportStats() {
    return !this.recvTransport || this.collectRtpStats ? !1 : (this.collectRtpStats = setInterval(
      j(this, Xs, jp).bind(this),
      this.pingInterval
    ), !0);
  }
  stopStatsCollection(e) {
    return e === "send" ? (clearInterval(this.collectStpStats), this.collectStpStats = void 0, !0) : e === "receive" ? (clearInterval(this.collectRtpStats), this.collectRtpStats = void 0, !0) : !1;
  }
  cleanup(e) {
    this.stopStatsCollection(e), e === "send" ? (this.sendTransport = void 0, this.collectStpStats = void 0, D.emit(P.SEND_TRANSPORT_CLOSED)) : (this.recvTransport = void 0, this.collectRtpStats = void 0, D.emit(P.RECV_TRANSPORT_CLOSED));
  }
};
let Ts = Qs;
zs = new WeakSet(), Wp = function() {
  this.sendTransport || this.stopStatsCollection("send"), this.sendTransport.getStats().then((e) => {
    var r;
    return j(r = Qs, Vi, Zo).call(r, e, "send");
  });
}, Xs = new WeakSet(), jp = function() {
  this.recvTransport || this.stopStatsCollection("receive"), this.recvTransport.getStats().then((e) => {
    var r;
    return j(r = Qs, Vi, Zo).call(r, e, "receive");
  });
}, Vi = new WeakSet(), Zo = function(e, r) {
  e.forEach((n) => {
    n.type === "candidate-pair" && D.emit(P.CANDIDATE_PEER_UPDATE, Ue(Y({}, n), {
      transport: r
    })), n.type === "inbound-rtp" && D.emit(P.INBOUND_RTP_UPDATE, Ue(Y({}, n), {
      transport: r
    })), n.type === "outbound-rtp" && D.emit(P.OUTBOUND_RTP_UPDATE, Ue(Y({}, n), {
      transport: r
    }));
  });
}, b(Ts, Vi);
const os = new Ts();
var $r;
class iM extends Rr {
  constructor() {
    super();
    b(this, $r, void 0);
    y(this, $r, !1);
  }
  getNetworkMetadata() {
    return p(this, null, function* () {
      return {};
    });
  }
  startNetworkAnalysis() {
    return y(this, $r, os.collectSendTransportStats() && os.collectRecvTransportStats()), d(this, $r);
  }
  stopNetworkAnalysis() {
    return y(this, $r, !(os.stopStatsCollection("send") && os.stopStatsCollection("receive"))), d(this, $r);
  }
}
$r = new WeakMap();
var hn, ze;
class sM extends Rr {
  constructor(r) {
    super();
    b(this, hn, void 0);
    b(this, ze, void 0);
    y(this, hn, r), y(this, ze, {
      audio: !1,
      video: !1
    });
  }
  get mediaPermission() {
    return d(this, hn).mediaPermissions.screenshare;
  }
  getAudioTrackMetaData() {
    var r;
    return (r = d(this, hn).screenShareTracks) != null && r.audio ? Ti.getTrackMetadata() : null;
  }
  getVideoTrackMetaData() {
    var r;
    return (r = d(this, hn).screenShareTracks) != null && r.video ? vi.getTrackMetadata() : null;
  }
  startAudioTrackAnalysis() {
    return p(this, null, function* () {
      if (d(this, ze).audio)
        return !0;
      const r = yield Ti.startTrackAnalysis();
      return d(this, ze).audio = r, d(this, ze).audio;
    });
  }
  startVideoTrackAnalysis() {
    return p(this, null, function* () {
      if (d(this, ze).video)
        return !0;
      const r = yield vi.startTrackAnalysis();
      return d(this, ze).video = r, d(this, ze).video;
    });
  }
  stopAudioTrackAnalysis() {
    return d(this, ze) && (d(this, ze).audio = !1, Ti.stopTrackAnalysis()), !0;
  }
  stopVideoTrackAnalysis() {
    return d(this, ze) && (d(this, ze).video = !1, vi.stopTrackAnalysis()), !0;
  }
}
hn = new WeakMap(), ze = new WeakMap();
var qt, Bi, Ht, hr, Zs, Kp;
class aM extends Rr {
  constructor(r, n) {
    super();
    b(this, Zs);
    b(this, qt, void 0);
    b(this, Bi, void 0);
    b(this, Ht, void 0);
    b(this, hr, void 0);
    _(this, "preview");
    y(this, qt, r), y(this, Bi, n), y(this, Ht, !1), y(this, hr, !1);
  }
  get mediaPermission() {
    return d(this, qt).mediaPermissions.video;
  }
  getTrackMetadata() {
    return d(this, qt).videoTrack ? null : _t.getTrackMetadata();
  }
  startTrackAnalysis() {
    return p(this, arguments, function* ({ preview: r } = { preview: !1 }) {
      return d(this, Ht) ? !0 : (yield _t.startTrackAnalysis()) ? ((r || this.preview) && y(this, hr, !0), y(this, Ht, !0), !0) : !1;
    });
  }
  stopTrackAnalysis() {
    d(this, Ht) && (_t.stopTrackAnalysis(), y(this, Ht, !1), d(this, hr) && y(this, hr, !1));
  }
  startPreview() {
    return p(this, null, function* () {
      let { track: r } = _t;
      return r || (r = yield j(this, Zs, Kp).call(this)), this.preview || (_t.setTrack(r), this.preview = !0, _t.preview = !0), r;
    });
  }
  stopPreview() {
    d(this, Ht) && d(this, hr) && this.stopTrackAnalysis(), this.preview = !1, _t.preview = !1, _t.cleanup();
  }
  cleanup() {
    d(this, Ht) && d(this, hr) && this.stopTrackAnalysis(), this.preview = !1, _t.preview = !1;
  }
}
qt = new WeakMap(), Bi = new WeakMap(), Ht = new WeakMap(), hr = new WeakMap(), Zs = new WeakSet(), Kp = function() {
  return p(this, null, function* () {
    var r;
    try {
      const n = d(this, qt).getCurrentDevices(), i = (r = n == null ? void 0 : n.video) == null ? void 0 : r.deviceId, s = yield d(this, Bi).getVideoTrack(i);
      return d(this, qt).mediaPermissions.video = "ACCEPTED", D.emit(P.MEDIA_PERMISSION_UPDATE, {
        message: d(this, qt).mediaPermissions.video,
        kind: "video"
      }), s;
    } catch (n) {
      const i = Pa(
        "video",
        n.name,
        n.message
      );
      throw d(this, qt).mediaPermissions.video = i, D.emit(P.MEDIA_PERMISSION_ERROR, {
        message: i,
        constraints: n.constraints,
        kind: "video"
      }), new w("Failed to fetch video track", "1700");
    }
  });
};
class oM {
  constructor(e) {
    _(this, "audio");
    _(this, "video");
    _(this, "screenshare");
    _(this, "network");
    const r = new dd();
    this.audio = new nM(e, r), this.video = new aM(e, r), this.screenshare = new sM(e), this.network = new iM();
  }
}
function cM(t) {
  let e = "", r = [""];
  const n = [r];
  let i = 0, s = 0, a = !0, o;
  for (o of t)
    o === '"' ? (a && o === e && (r[i] += o), a = !a) : o === "," && a ? o = r[++i] = "" : o === `
` && a ? (e === "\r" && (r[i] = r[i].slice(0, -1)), r = n[++s] = [o = ""], i = 0) : r[i] += o, e = o;
  return n;
}
var dM = Object.defineProperty, uM = Object.getOwnPropertyDescriptor, fd = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? uM(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && dM(e, r, i), i;
};
let Ur = class extends mt {
  constructor() {
    super();
    _(this, "transcripts");
    this.transcripts = [];
  }
  static init(e) {
    return p(this, null, function* () {
      const r = new Ur();
      try {
        e && (yield r.getActiveTranscript());
      } catch (n) {
        m.error("Error fetching active transcriptions ", n);
      }
      return r;
    });
  }
  /**
  * Parse a single line transcript
  */
  static parseTranscript(e) {
    try {
      if (!e)
        return;
      const [[
        r,
        n,
        i,
        s,
        a,
        o
      ]] = cM(e);
      return {
        id: ot(),
        name: a,
        peerId: n,
        userId: i,
        customParticipantId: s,
        transcript: o,
        isPartialTranscript: !1,
        date: new Date(parseInt(r, 10) * 1e3)
      };
    } catch (r) {
      m.error(`Failed to parse transcript: ${e}`, r);
      return;
    }
  }
  /**
  * Parse a multi-line transcript
  */
  static parseTranscripts(e) {
    return e ? e.split(`
`).map(Ur.parseTranscript).filter(Boolean) : [];
  }
  getActiveTranscript() {
    return p(this, null, function* () {
      try {
        const e = Qn(), { transcript: r } = yield e.getActiveTranscript();
        this.transcripts = Ur.parseTranscripts(r);
      } catch (e) {
      }
    });
  }
  onTranscript(e) {
    return p(this, null, function* () {
      this.transcripts.push(e), this.emit("transcript", e);
    });
  }
};
fd([
  v.trace("DyteAi.getActiveTranscript")
], Ur.prototype, "getActiveTranscript", 1);
fd([
  v.trace("DyteAi.onTranscript")
], Ur.prototype, "onTranscript", 1);
Ur = fd([
  $e((t) => {
    throw new w(t.message, "0000");
  })
], Ur);
function pd(t) {
  let e = typeof t;
  if (e == "object") {
    if (Array.isArray(t))
      return "array";
    if (t === null)
      return "null";
  }
  return e;
}
function lM(t) {
  return t !== null && typeof t == "object" && !Array.isArray(t);
}
let fr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), Ma = [];
for (let t = 0; t < fr.length; t++)
  Ma[fr[t].charCodeAt(0)] = t;
Ma["-".charCodeAt(0)] = fr.indexOf("+");
Ma["_".charCodeAt(0)] = fr.indexOf("/");
function hM(t) {
  let e = t.length * 3 / 4;
  t[t.length - 2] == "=" ? e -= 2 : t[t.length - 1] == "=" && (e -= 1);
  let r = new Uint8Array(e), n = 0, i = 0, s, a = 0;
  for (let o = 0; o < t.length; o++) {
    if (s = Ma[t.charCodeAt(o)], s === void 0)
      switch (t[o]) {
        case "=":
          i = 0;
        case `
`:
        case "\r":
        case "	":
        case " ":
          continue;
        default:
          throw Error("invalid base64 string.");
      }
    switch (i) {
      case 0:
        a = s, i = 1;
        break;
      case 1:
        r[n++] = a << 2 | (s & 48) >> 4, a = s, i = 2;
        break;
      case 2:
        r[n++] = (a & 15) << 4 | (s & 60) >> 2, a = s, i = 3;
        break;
      case 3:
        r[n++] = (a & 3) << 6 | s, i = 0;
        break;
    }
  }
  if (i == 1)
    throw Error("invalid base64 string.");
  return r.subarray(0, n);
}
function fM(t) {
  let e = "", r = 0, n, i = 0;
  for (let s = 0; s < t.length; s++)
    switch (n = t[s], r) {
      case 0:
        e += fr[n >> 2], i = (n & 3) << 4, r = 1;
        break;
      case 1:
        e += fr[i | n >> 4], i = (n & 15) << 2, r = 2;
        break;
      case 2:
        e += fr[i | n >> 6], e += fr[n & 63], r = 0;
        break;
    }
  return r && (e += fr[i], e += "=", r == 1 && (e += "=")), e;
}
var Ms;
(function(t) {
  t.symbol = Symbol.for("protobuf-ts/unknown"), t.onRead = (r, n, i, s, a) => {
    (e(n) ? n[t.symbol] : n[t.symbol] = []).push({ no: i, wireType: s, data: a });
  }, t.onWrite = (r, n, i) => {
    for (let { no: s, wireType: a, data: o } of t.list(n))
      i.tag(s, a).raw(o);
  }, t.list = (r, n) => {
    if (e(r)) {
      let i = r[t.symbol];
      return n ? i.filter((s) => s.no == n) : i;
    }
    return [];
  }, t.last = (r, n) => t.list(r, n).slice(-1)[0];
  const e = (r) => r && Array.isArray(r[t.symbol]);
})(Ms || (Ms = {}));
var Se;
(function(t) {
  t[t.Varint = 0] = "Varint", t[t.Bit64 = 1] = "Bit64", t[t.LengthDelimited = 2] = "LengthDelimited", t[t.StartGroup = 3] = "StartGroup", t[t.EndGroup = 4] = "EndGroup", t[t.Bit32 = 5] = "Bit32";
})(Se || (Se = {}));
function pM() {
  let t = 0, e = 0;
  for (let n = 0; n < 28; n += 7) {
    let i = this.buf[this.pos++];
    if (t |= (i & 127) << n, !(i & 128))
      return this.assertBounds(), [t, e];
  }
  let r = this.buf[this.pos++];
  if (t |= (r & 15) << 28, e = (r & 112) >> 4, !(r & 128))
    return this.assertBounds(), [t, e];
  for (let n = 3; n <= 31; n += 7) {
    let i = this.buf[this.pos++];
    if (e |= (i & 127) << n, !(i & 128))
      return this.assertBounds(), [t, e];
  }
  throw new Error("invalid varint");
}
function go(t, e, r) {
  for (let s = 0; s < 28; s = s + 7) {
    const a = t >>> s, o = !(!(a >>> 7) && e == 0), c = (o ? a | 128 : a) & 255;
    if (r.push(c), !o)
      return;
  }
  const n = t >>> 28 & 15 | (e & 7) << 4, i = !!(e >> 3);
  if (r.push((i ? n | 128 : n) & 255), !!i) {
    for (let s = 3; s < 31; s = s + 7) {
      const a = e >>> s, o = !!(a >>> 7), c = (o ? a | 128 : a) & 255;
      if (r.push(c), !o)
        return;
    }
    r.push(e >>> 31 & 1);
  }
}
const vs = (1 << 16) * (1 << 16);
function Jp(t) {
  let e = t[0] == "-";
  e && (t = t.slice(1));
  const r = 1e6;
  let n = 0, i = 0;
  function s(a, o) {
    const c = Number(t.slice(a, o));
    i *= r, n = n * r + c, n >= vs && (i = i + (n / vs | 0), n = n % vs);
  }
  return s(-24, -18), s(-18, -12), s(-12, -6), s(-6), [e, n, i];
}
function ec(t, e) {
  if (e >>> 0 <= 2097151)
    return "" + (vs * e + (t >>> 0));
  let r = t & 16777215, n = (t >>> 24 | e << 8) >>> 0 & 16777215, i = e >> 16 & 65535, s = r + n * 6777216 + i * 6710656, a = n + i * 8147497, o = i * 2, c = 1e7;
  s >= c && (a += Math.floor(s / c), s %= c), a >= c && (o += Math.floor(a / c), a %= c);
  function u(h, f) {
    let g = h ? String(h) : "";
    return f ? "0000000".slice(g.length) + g : g;
  }
  return u(
    o,
    /*needLeadingZeros=*/
    0
  ) + u(
    a,
    /*needLeadingZeros=*/
    o
  ) + // If the final 1e7 digit didn't need leading zeros, we would have
  // returned via the trivial code path at the top.
  u(
    s,
    /*needLeadingZeros=*/
    1
  );
}
function dl(t, e) {
  if (t >= 0) {
    for (; t > 127; )
      e.push(t & 127 | 128), t = t >>> 7;
    e.push(t);
  } else {
    for (let r = 0; r < 9; r++)
      e.push(t & 127 | 128), t = t >> 7;
    e.push(1);
  }
}
function mM() {
  let t = this.buf[this.pos++], e = t & 127;
  if (!(t & 128))
    return this.assertBounds(), e;
  if (t = this.buf[this.pos++], e |= (t & 127) << 7, !(t & 128))
    return this.assertBounds(), e;
  if (t = this.buf[this.pos++], e |= (t & 127) << 14, !(t & 128))
    return this.assertBounds(), e;
  if (t = this.buf[this.pos++], e |= (t & 127) << 21, !(t & 128))
    return this.assertBounds(), e;
  t = this.buf[this.pos++], e |= (t & 15) << 28;
  for (let r = 5; t & 128 && r < 10; r++)
    t = this.buf[this.pos++];
  if (t & 128)
    throw new Error("invalid varint");
  return this.assertBounds(), e >>> 0;
}
let se;
function gM() {
  const t = new DataView(new ArrayBuffer(8));
  se = globalThis.BigInt !== void 0 && typeof t.getBigInt64 == "function" && typeof t.getBigUint64 == "function" && typeof t.setBigInt64 == "function" && typeof t.setBigUint64 == "function" ? {
    MIN: BigInt("-9223372036854775808"),
    MAX: BigInt("9223372036854775807"),
    UMIN: BigInt("0"),
    UMAX: BigInt("18446744073709551615"),
    C: BigInt,
    V: t
  } : void 0;
}
gM();
function Yp(t) {
  if (!t)
    throw new Error("BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support");
}
const zp = /^-?[0-9]+$/, Ns = 4294967296, cs = 2147483648;
class Xp {
  /**
   * Create a new instance with the given bits.
   */
  constructor(e, r) {
    this.lo = e | 0, this.hi = r | 0;
  }
  /**
   * Is this instance equal to 0?
   */
  isZero() {
    return this.lo == 0 && this.hi == 0;
  }
  /**
   * Convert to a native number.
   */
  toNumber() {
    let e = this.hi * Ns + (this.lo >>> 0);
    if (!Number.isSafeInteger(e))
      throw new Error("cannot convert to safe number");
    return e;
  }
}
class Be extends Xp {
  /**
   * Create instance from a `string`, `number` or `bigint`.
   */
  static from(e) {
    if (se)
      switch (typeof e) {
        case "string":
          if (e == "0")
            return this.ZERO;
          if (e == "")
            throw new Error("string is no integer");
          e = se.C(e);
        case "number":
          if (e === 0)
            return this.ZERO;
          e = se.C(e);
        case "bigint":
          if (!e)
            return this.ZERO;
          if (e < se.UMIN)
            throw new Error("signed value for ulong");
          if (e > se.UMAX)
            throw new Error("ulong too large");
          return se.V.setBigUint64(0, e, !0), new Be(se.V.getInt32(0, !0), se.V.getInt32(4, !0));
      }
    else
      switch (typeof e) {
        case "string":
          if (e == "0")
            return this.ZERO;
          if (e = e.trim(), !zp.test(e))
            throw new Error("string is no integer");
          let [r, n, i] = Jp(e);
          if (r)
            throw new Error("signed value for ulong");
          return new Be(n, i);
        case "number":
          if (e == 0)
            return this.ZERO;
          if (!Number.isSafeInteger(e))
            throw new Error("number is no integer");
          if (e < 0)
            throw new Error("signed value for ulong");
          return new Be(e, e / Ns);
      }
    throw new Error("unknown value " + typeof e);
  }
  /**
   * Convert to decimal string.
   */
  toString() {
    return se ? this.toBigInt().toString() : ec(this.lo, this.hi);
  }
  /**
   * Convert to native bigint.
   */
  toBigInt() {
    return Yp(se), se.V.setInt32(0, this.lo, !0), se.V.setInt32(4, this.hi, !0), se.V.getBigUint64(0, !0);
  }
}
Be.ZERO = new Be(0, 0);
class ue extends Xp {
  /**
   * Create instance from a `string`, `number` or `bigint`.
   */
  static from(e) {
    if (se)
      switch (typeof e) {
        case "string":
          if (e == "0")
            return this.ZERO;
          if (e == "")
            throw new Error("string is no integer");
          e = se.C(e);
        case "number":
          if (e === 0)
            return this.ZERO;
          e = se.C(e);
        case "bigint":
          if (!e)
            return this.ZERO;
          if (e < se.MIN)
            throw new Error("signed long too small");
          if (e > se.MAX)
            throw new Error("signed long too large");
          return se.V.setBigInt64(0, e, !0), new ue(se.V.getInt32(0, !0), se.V.getInt32(4, !0));
      }
    else
      switch (typeof e) {
        case "string":
          if (e == "0")
            return this.ZERO;
          if (e = e.trim(), !zp.test(e))
            throw new Error("string is no integer");
          let [r, n, i] = Jp(e);
          if (r) {
            if (i > cs || i == cs && n != 0)
              throw new Error("signed long too small");
          } else if (i >= cs)
            throw new Error("signed long too large");
          let s = new ue(n, i);
          return r ? s.negate() : s;
        case "number":
          if (e == 0)
            return this.ZERO;
          if (!Number.isSafeInteger(e))
            throw new Error("number is no integer");
          return e > 0 ? new ue(e, e / Ns) : new ue(-e, -e / Ns).negate();
      }
    throw new Error("unknown value " + typeof e);
  }
  /**
   * Do we have a minus sign?
   */
  isNegative() {
    return (this.hi & cs) !== 0;
  }
  /**
   * Negate two's complement.
   * Invert all the bits and add one to the result.
   */
  negate() {
    let e = ~this.hi, r = this.lo;
    return r ? r = ~r + 1 : e += 1, new ue(r, e);
  }
  /**
   * Convert to decimal string.
   */
  toString() {
    if (se)
      return this.toBigInt().toString();
    if (this.isNegative()) {
      let e = this.negate();
      return "-" + ec(e.lo, e.hi);
    }
    return ec(this.lo, this.hi);
  }
  /**
   * Convert to native bigint.
   */
  toBigInt() {
    return Yp(se), se.V.setInt32(0, this.lo, !0), se.V.setInt32(4, this.hi, !0), se.V.getBigInt64(0, !0);
  }
}
ue.ZERO = new ue(0, 0);
const ul = {
  readUnknownField: !0,
  readerFactory: (t) => new TM(t)
};
function _M(t) {
  return t ? Object.assign(Object.assign({}, ul), t) : ul;
}
class TM {
  constructor(e, r) {
    this.varint64 = pM, this.uint32 = mM, this.buf = e, this.len = e.length, this.pos = 0, this.view = new DataView(e.buffer, e.byteOffset, e.byteLength), this.textDecoder = r != null ? r : new TextDecoder("utf-8", {
      fatal: !0,
      ignoreBOM: !0
    });
  }
  /**
   * Reads a tag - field number and wire type.
   */
  tag() {
    let e = this.uint32(), r = e >>> 3, n = e & 7;
    if (r <= 0 || n < 0 || n > 5)
      throw new Error("illegal tag: field no " + r + " wire type " + n);
    return [r, n];
  }
  /**
   * Skip one element on the wire and return the skipped data.
   * Supports WireType.StartGroup since v2.0.0-alpha.23.
   */
  skip(e) {
    let r = this.pos;
    switch (e) {
      case Se.Varint:
        for (; this.buf[this.pos++] & 128; )
          ;
        break;
      case Se.Bit64:
        this.pos += 4;
      case Se.Bit32:
        this.pos += 4;
        break;
      case Se.LengthDelimited:
        let n = this.uint32();
        this.pos += n;
        break;
      case Se.StartGroup:
        let i;
        for (; (i = this.tag()[1]) !== Se.EndGroup; )
          this.skip(i);
        break;
      default:
        throw new Error("cant skip wire type " + e);
    }
    return this.assertBounds(), this.buf.subarray(r, this.pos);
  }
  /**
   * Throws error if position in byte array is out of range.
   */
  assertBounds() {
    if (this.pos > this.len)
      throw new RangeError("premature EOF");
  }
  /**
   * Read a `int32` field, a signed 32 bit varint.
   */
  int32() {
    return this.uint32() | 0;
  }
  /**
   * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
   */
  sint32() {
    let e = this.uint32();
    return e >>> 1 ^ -(e & 1);
  }
  /**
   * Read a `int64` field, a signed 64-bit varint.
   */
  int64() {
    return new ue(...this.varint64());
  }
  /**
   * Read a `uint64` field, an unsigned 64-bit varint.
   */
  uint64() {
    return new Be(...this.varint64());
  }
  /**
   * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
   */
  sint64() {
    let [e, r] = this.varint64(), n = -(e & 1);
    return e = (e >>> 1 | (r & 1) << 31) ^ n, r = r >>> 1 ^ n, new ue(e, r);
  }
  /**
   * Read a `bool` field, a variant.
   */
  bool() {
    let [e, r] = this.varint64();
    return e !== 0 || r !== 0;
  }
  /**
   * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
   */
  fixed32() {
    return this.view.getUint32((this.pos += 4) - 4, !0);
  }
  /**
   * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
   */
  sfixed32() {
    return this.view.getInt32((this.pos += 4) - 4, !0);
  }
  /**
   * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
   */
  fixed64() {
    return new Be(this.sfixed32(), this.sfixed32());
  }
  /**
   * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
   */
  sfixed64() {
    return new ue(this.sfixed32(), this.sfixed32());
  }
  /**
   * Read a `float` field, 32-bit floating point number.
   */
  float() {
    return this.view.getFloat32((this.pos += 4) - 4, !0);
  }
  /**
   * Read a `double` field, a 64-bit floating point number.
   */
  double() {
    return this.view.getFloat64((this.pos += 8) - 8, !0);
  }
  /**
   * Read a `bytes` field, length-delimited arbitrary data.
   */
  bytes() {
    let e = this.uint32(), r = this.pos;
    return this.pos += e, this.assertBounds(), this.buf.subarray(r, r + e);
  }
  /**
   * Read a `string` field, length-delimited data converted to UTF-8 text.
   */
  string() {
    return this.textDecoder.decode(this.bytes());
  }
}
function X(t, e) {
  if (!t)
    throw new Error(e);
}
const vM = 34028234663852886e22, EM = -34028234663852886e22, wM = 4294967295, yM = 2147483647, AM = -2147483648;
function Ei(t) {
  if (typeof t != "number")
    throw new Error("invalid int 32: " + typeof t);
  if (!Number.isInteger(t) || t > yM || t < AM)
    throw new Error("invalid int 32: " + t);
}
function xs(t) {
  if (typeof t != "number")
    throw new Error("invalid uint 32: " + typeof t);
  if (!Number.isInteger(t) || t > wM || t < 0)
    throw new Error("invalid uint 32: " + t);
}
function md(t) {
  if (typeof t != "number")
    throw new Error("invalid float 32: " + typeof t);
  if (Number.isFinite(t) && (t > vM || t < EM))
    throw new Error("invalid float 32: " + t);
}
const ll = {
  writeUnknownFields: !0,
  writerFactory: () => new SM()
};
function RM(t) {
  return t ? Object.assign(Object.assign({}, ll), t) : ll;
}
class SM {
  constructor(e) {
    this.stack = [], this.textEncoder = e != null ? e : new TextEncoder(), this.chunks = [], this.buf = [];
  }
  /**
   * Return all bytes written and reset this writer.
   */
  finish() {
    this.chunks.push(new Uint8Array(this.buf));
    let e = 0;
    for (let i = 0; i < this.chunks.length; i++)
      e += this.chunks[i].length;
    let r = new Uint8Array(e), n = 0;
    for (let i = 0; i < this.chunks.length; i++)
      r.set(this.chunks[i], n), n += this.chunks[i].length;
    return this.chunks = [], r;
  }
  /**
   * Start a new fork for length-delimited data like a message
   * or a packed repeated field.
   *
   * Must be joined later with `join()`.
   */
  fork() {
    return this.stack.push({ chunks: this.chunks, buf: this.buf }), this.chunks = [], this.buf = [], this;
  }
  /**
   * Join the last fork. Write its length and bytes, then
   * return to the previous state.
   */
  join() {
    let e = this.finish(), r = this.stack.pop();
    if (!r)
      throw new Error("invalid state, fork stack empty");
    return this.chunks = r.chunks, this.buf = r.buf, this.uint32(e.byteLength), this.raw(e);
  }
  /**
   * Writes a tag (field number and wire type).
   *
   * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
   *
   * Generated code should compute the tag ahead of time and call `uint32()`.
   */
  tag(e, r) {
    return this.uint32((e << 3 | r) >>> 0);
  }
  /**
   * Write a chunk of raw bytes.
   */
  raw(e) {
    return this.buf.length && (this.chunks.push(new Uint8Array(this.buf)), this.buf = []), this.chunks.push(e), this;
  }
  /**
   * Write a `uint32` value, an unsigned 32 bit varint.
   */
  uint32(e) {
    for (xs(e); e > 127; )
      this.buf.push(e & 127 | 128), e = e >>> 7;
    return this.buf.push(e), this;
  }
  /**
   * Write a `int32` value, a signed 32 bit varint.
   */
  int32(e) {
    return Ei(e), dl(e, this.buf), this;
  }
  /**
   * Write a `bool` value, a variant.
   */
  bool(e) {
    return this.buf.push(e ? 1 : 0), this;
  }
  /**
   * Write a `bytes` value, length-delimited arbitrary data.
   */
  bytes(e) {
    return this.uint32(e.byteLength), this.raw(e);
  }
  /**
   * Write a `string` value, length-delimited data converted to UTF-8 text.
   */
  string(e) {
    let r = this.textEncoder.encode(e);
    return this.uint32(r.byteLength), this.raw(r);
  }
  /**
   * Write a `float` value, 32-bit floating point number.
   */
  float(e) {
    md(e);
    let r = new Uint8Array(4);
    return new DataView(r.buffer).setFloat32(0, e, !0), this.raw(r);
  }
  /**
   * Write a `double` value, a 64-bit floating point number.
   */
  double(e) {
    let r = new Uint8Array(8);
    return new DataView(r.buffer).setFloat64(0, e, !0), this.raw(r);
  }
  /**
   * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
   */
  fixed32(e) {
    xs(e);
    let r = new Uint8Array(4);
    return new DataView(r.buffer).setUint32(0, e, !0), this.raw(r);
  }
  /**
   * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
   */
  sfixed32(e) {
    Ei(e);
    let r = new Uint8Array(4);
    return new DataView(r.buffer).setInt32(0, e, !0), this.raw(r);
  }
  /**
   * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
   */
  sint32(e) {
    return Ei(e), e = (e << 1 ^ e >> 31) >>> 0, dl(e, this.buf), this;
  }
  /**
   * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
   */
  sfixed64(e) {
    let r = new Uint8Array(8), n = new DataView(r.buffer), i = ue.from(e);
    return n.setInt32(0, i.lo, !0), n.setInt32(4, i.hi, !0), this.raw(r);
  }
  /**
   * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
   */
  fixed64(e) {
    let r = new Uint8Array(8), n = new DataView(r.buffer), i = Be.from(e);
    return n.setInt32(0, i.lo, !0), n.setInt32(4, i.hi, !0), this.raw(r);
  }
  /**
   * Write a `int64` value, a signed 64-bit varint.
   */
  int64(e) {
    let r = ue.from(e);
    return go(r.lo, r.hi, this.buf), this;
  }
  /**
   * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
   */
  sint64(e) {
    let r = ue.from(e), n = r.hi >> 31, i = r.lo << 1 ^ n, s = (r.hi << 1 | r.lo >>> 31) ^ n;
    return go(i, s, this.buf), this;
  }
  /**
   * Write a `uint64` value, an unsigned 64-bit varint.
   */
  uint64(e) {
    let r = Be.from(e);
    return go(r.lo, r.hi, this.buf), this;
  }
}
const hl = {
  emitDefaultValues: !1,
  enumAsInteger: !1,
  useProtoFieldName: !1,
  prettySpaces: 0
}, fl = {
  ignoreUnknownFields: !1
};
function bM(t) {
  return t ? Object.assign(Object.assign({}, fl), t) : fl;
}
function kM(t) {
  return t ? Object.assign(Object.assign({}, hl), t) : hl;
}
const Qp = Symbol.for("protobuf-ts/message-type");
function pl(t) {
  let e = !1;
  const r = [];
  for (let n = 0; n < t.length; n++) {
    let i = t.charAt(n);
    i == "_" ? e = !0 : /\d/.test(i) ? (r.push(i), e = !0) : e ? (r.push(i.toUpperCase()), e = !1) : n == 0 ? r.push(i.toLowerCase()) : r.push(i);
  }
  return r.join("");
}
var A;
(function(t) {
  t[t.DOUBLE = 1] = "DOUBLE", t[t.FLOAT = 2] = "FLOAT", t[t.INT64 = 3] = "INT64", t[t.UINT64 = 4] = "UINT64", t[t.INT32 = 5] = "INT32", t[t.FIXED64 = 6] = "FIXED64", t[t.FIXED32 = 7] = "FIXED32", t[t.BOOL = 8] = "BOOL", t[t.STRING = 9] = "STRING", t[t.BYTES = 12] = "BYTES", t[t.UINT32 = 13] = "UINT32", t[t.SFIXED32 = 15] = "SFIXED32", t[t.SFIXED64 = 16] = "SFIXED64", t[t.SINT32 = 17] = "SINT32", t[t.SINT64 = 18] = "SINT64";
})(A || (A = {}));
var Wt;
(function(t) {
  t[t.BIGINT = 0] = "BIGINT", t[t.STRING = 1] = "STRING", t[t.NUMBER = 2] = "NUMBER";
})(Wt || (Wt = {}));
var Ls;
(function(t) {
  t[t.NO = 0] = "NO", t[t.PACKED = 1] = "PACKED", t[t.UNPACKED = 2] = "UNPACKED";
})(Ls || (Ls = {}));
function CM(t) {
  var e, r, n, i;
  return t.localName = (e = t.localName) !== null && e !== void 0 ? e : pl(t.name), t.jsonName = (r = t.jsonName) !== null && r !== void 0 ? r : pl(t.name), t.repeat = (n = t.repeat) !== null && n !== void 0 ? n : Ls.NO, t.opt = (i = t.opt) !== null && i !== void 0 ? i : t.repeat || t.oneof ? !1 : t.kind == "message", t;
}
function IM(t) {
  if (typeof t != "object" || t === null || !t.hasOwnProperty("oneofKind"))
    return !1;
  switch (typeof t.oneofKind) {
    case "string":
      return t[t.oneofKind] === void 0 ? !1 : Object.keys(t).length == 2;
    case "undefined":
      return Object.keys(t).length == 1;
    default:
      return !1;
  }
}
class PM {
  constructor(e) {
    var r;
    this.fields = (r = e.fields) !== null && r !== void 0 ? r : [];
  }
  prepare() {
    if (this.data)
      return;
    const e = [], r = [], n = [];
    for (let i of this.fields)
      if (i.oneof)
        n.includes(i.oneof) || (n.push(i.oneof), e.push(i.oneof), r.push(i.oneof));
      else
        switch (r.push(i.localName), i.kind) {
          case "scalar":
          case "enum":
            (!i.opt || i.repeat) && e.push(i.localName);
            break;
          case "message":
            i.repeat && e.push(i.localName);
            break;
          case "map":
            e.push(i.localName);
            break;
        }
    this.data = { req: e, known: r, oneofs: Object.values(n) };
  }
  /**
   * Is the argument a valid message as specified by the
   * reflection information?
   *
   * Checks all field types recursively. The `depth`
   * specifies how deep into the structure the check will be.
   *
   * With a depth of 0, only the presence of fields
   * is checked.
   *
   * With a depth of 1 or more, the field types are checked.
   *
   * With a depth of 2 or more, the members of map, repeated
   * and message fields are checked.
   *
   * Message fields will be checked recursively with depth - 1.
   *
   * The number of map entries / repeated values being checked
   * is < depth.
   */
  is(e, r, n = !1) {
    if (r < 0)
      return !0;
    if (e == null || typeof e != "object")
      return !1;
    this.prepare();
    let i = Object.keys(e), s = this.data;
    if (i.length < s.req.length || s.req.some((a) => !i.includes(a)) || !n && i.some((a) => !s.known.includes(a)))
      return !1;
    if (r < 1)
      return !0;
    for (const a of s.oneofs) {
      const o = e[a];
      if (!IM(o))
        return !1;
      if (o.oneofKind === void 0)
        continue;
      const c = this.fields.find((u) => u.localName === o.oneofKind);
      if (!c || !this.field(o[o.oneofKind], c, n, r))
        return !1;
    }
    for (const a of this.fields)
      if (a.oneof === void 0 && !this.field(e[a.localName], a, n, r))
        return !1;
    return !0;
  }
  field(e, r, n, i) {
    let s = r.repeat;
    switch (r.kind) {
      case "scalar":
        return e === void 0 ? r.opt : s ? this.scalars(e, r.T, i, r.L) : this.scalar(e, r.T, r.L);
      case "enum":
        return e === void 0 ? r.opt : s ? this.scalars(e, A.INT32, i) : this.scalar(e, A.INT32);
      case "message":
        return e === void 0 ? !0 : s ? this.messages(e, r.T(), n, i) : this.message(e, r.T(), n, i);
      case "map":
        if (typeof e != "object" || e === null)
          return !1;
        if (i < 2)
          return !0;
        if (!this.mapKeys(e, r.K, i))
          return !1;
        switch (r.V.kind) {
          case "scalar":
            return this.scalars(Object.values(e), r.V.T, i, r.V.L);
          case "enum":
            return this.scalars(Object.values(e), A.INT32, i);
          case "message":
            return this.messages(Object.values(e), r.V.T(), n, i);
        }
        break;
    }
    return !0;
  }
  message(e, r, n, i) {
    return n ? r.isAssignable(e, i) : r.is(e, i);
  }
  messages(e, r, n, i) {
    if (!Array.isArray(e))
      return !1;
    if (i < 2)
      return !0;
    if (n) {
      for (let s = 0; s < e.length && s < i; s++)
        if (!r.isAssignable(e[s], i - 1))
          return !1;
    } else
      for (let s = 0; s < e.length && s < i; s++)
        if (!r.is(e[s], i - 1))
          return !1;
    return !0;
  }
  scalar(e, r, n) {
    let i = typeof e;
    switch (r) {
      case A.UINT64:
      case A.FIXED64:
      case A.INT64:
      case A.SFIXED64:
      case A.SINT64:
        switch (n) {
          case Wt.BIGINT:
            return i == "bigint";
          case Wt.NUMBER:
            return i == "number" && !isNaN(e);
          default:
            return i == "string";
        }
      case A.BOOL:
        return i == "boolean";
      case A.STRING:
        return i == "string";
      case A.BYTES:
        return e instanceof Uint8Array;
      case A.DOUBLE:
      case A.FLOAT:
        return i == "number" && !isNaN(e);
      default:
        return i == "number" && Number.isInteger(e);
    }
  }
  scalars(e, r, n, i) {
    if (!Array.isArray(e))
      return !1;
    if (n < 2)
      return !0;
    if (Array.isArray(e)) {
      for (let s = 0; s < e.length && s < n; s++)
        if (!this.scalar(e[s], r, i))
          return !1;
    }
    return !0;
  }
  mapKeys(e, r, n) {
    let i = Object.keys(e);
    switch (r) {
      case A.INT32:
      case A.FIXED32:
      case A.SFIXED32:
      case A.SINT32:
      case A.UINT32:
        return this.scalars(i.slice(0, n).map((s) => parseInt(s)), r, n);
      case A.BOOL:
        return this.scalars(i.slice(0, n).map((s) => s == "true" ? !0 : s == "false" ? !1 : s), r, n);
      default:
        return this.scalars(i, r, n, Wt.STRING);
    }
  }
}
function Pt(t, e) {
  switch (e) {
    case Wt.BIGINT:
      return t.toBigInt();
    case Wt.NUMBER:
      return t.toNumber();
    default:
      return t.toString();
  }
}
class DM {
  constructor(e) {
    this.info = e;
  }
  prepare() {
    var e;
    if (this.fMap === void 0) {
      this.fMap = {};
      const r = (e = this.info.fields) !== null && e !== void 0 ? e : [];
      for (const n of r)
        this.fMap[n.name] = n, this.fMap[n.jsonName] = n, this.fMap[n.localName] = n;
    }
  }
  // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.
  assert(e, r, n) {
    if (!e) {
      let i = pd(n);
      throw (i == "number" || i == "boolean") && (i = n.toString()), new Error(`Cannot parse JSON ${i} for ${this.info.typeName}#${r}`);
    }
  }
  /**
   * Reads a message from canonical JSON format into the target message.
   *
   * Repeated fields are appended. Map entries are added, overwriting
   * existing keys.
   *
   * If a message field is already present, it will be merged with the
   * new data.
   */
  read(e, r, n) {
    this.prepare();
    const i = [];
    for (const [s, a] of Object.entries(e)) {
      const o = this.fMap[s];
      if (!o) {
        if (!n.ignoreUnknownFields)
          throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${s}`);
        continue;
      }
      const c = o.localName;
      let u;
      if (o.oneof) {
        if (a === null && (o.kind !== "enum" || o.T()[0] !== "google.protobuf.NullValue"))
          continue;
        if (i.includes(o.oneof))
          throw new Error(`Multiple members of the oneof group "${o.oneof}" of ${this.info.typeName} are present in JSON.`);
        i.push(o.oneof), u = r[o.oneof] = {
          oneofKind: c
        };
      } else
        u = r;
      if (o.kind == "map") {
        if (a === null)
          continue;
        this.assert(lM(a), o.name, a);
        const h = u[c];
        for (const [f, g] of Object.entries(a)) {
          this.assert(g !== null, o.name + " map value", null);
          let E;
          switch (o.V.kind) {
            case "message":
              E = o.V.T().internalJsonRead(g, n);
              break;
            case "enum":
              if (E = this.enum(o.V.T(), g, o.name, n.ignoreUnknownFields), E === !1)
                continue;
              break;
            case "scalar":
              E = this.scalar(g, o.V.T, o.V.L, o.name);
              break;
          }
          this.assert(E !== void 0, o.name + " map value", g);
          let R = f;
          o.K == A.BOOL && (R = R == "true" ? !0 : R == "false" ? !1 : R), R = this.scalar(R, o.K, Wt.STRING, o.name).toString(), h[R] = E;
        }
      } else if (o.repeat) {
        if (a === null)
          continue;
        this.assert(Array.isArray(a), o.name, a);
        const h = u[c];
        for (const f of a) {
          this.assert(f !== null, o.name, null);
          let g;
          switch (o.kind) {
            case "message":
              g = o.T().internalJsonRead(f, n);
              break;
            case "enum":
              if (g = this.enum(o.T(), f, o.name, n.ignoreUnknownFields), g === !1)
                continue;
              break;
            case "scalar":
              g = this.scalar(f, o.T, o.L, o.name);
              break;
          }
          this.assert(g !== void 0, o.name, a), h.push(g);
        }
      } else
        switch (o.kind) {
          case "message":
            if (a === null && o.T().typeName != "google.protobuf.Value") {
              this.assert(o.oneof === void 0, o.name + " (oneof member)", null);
              continue;
            }
            u[c] = o.T().internalJsonRead(a, n, u[c]);
            break;
          case "enum":
            let h = this.enum(o.T(), a, o.name, n.ignoreUnknownFields);
            if (h === !1)
              continue;
            u[c] = h;
            break;
          case "scalar":
            u[c] = this.scalar(a, o.T, o.L, o.name);
            break;
        }
    }
  }
  /**
   * Returns `false` for unrecognized string representations.
   *
   * google.protobuf.NullValue accepts only JSON `null` (or the old `"NULL_VALUE"`).
   */
  enum(e, r, n, i) {
    if (e[0] == "google.protobuf.NullValue" && X(r === null || r === "NULL_VALUE", `Unable to parse field ${this.info.typeName}#${n}, enum ${e[0]} only accepts null.`), r === null)
      return 0;
    switch (typeof r) {
      case "number":
        return X(Number.isInteger(r), `Unable to parse field ${this.info.typeName}#${n}, enum can only be integral number, got ${r}.`), r;
      case "string":
        let s = r;
        e[2] && r.substring(0, e[2].length) === e[2] && (s = r.substring(e[2].length));
        let a = e[1][s];
        return typeof a == "undefined" && i ? !1 : (X(typeof a == "number", `Unable to parse field ${this.info.typeName}#${n}, enum ${e[0]} has no value for "${r}".`), a);
    }
    X(!1, `Unable to parse field ${this.info.typeName}#${n}, cannot parse enum value from ${typeof r}".`);
  }
  scalar(e, r, n, i) {
    let s;
    try {
      switch (r) {
        case A.DOUBLE:
        case A.FLOAT:
          if (e === null)
            return 0;
          if (e === "NaN")
            return Number.NaN;
          if (e === "Infinity")
            return Number.POSITIVE_INFINITY;
          if (e === "-Infinity")
            return Number.NEGATIVE_INFINITY;
          if (e === "") {
            s = "empty string";
            break;
          }
          if (typeof e == "string" && e.trim().length !== e.length) {
            s = "extra whitespace";
            break;
          }
          if (typeof e != "string" && typeof e != "number")
            break;
          let a = Number(e);
          if (Number.isNaN(a)) {
            s = "not a number";
            break;
          }
          if (!Number.isFinite(a)) {
            s = "too large or small";
            break;
          }
          return r == A.FLOAT && md(a), a;
        case A.INT32:
        case A.FIXED32:
        case A.SFIXED32:
        case A.SINT32:
        case A.UINT32:
          if (e === null)
            return 0;
          let o;
          if (typeof e == "number" ? o = e : e === "" ? s = "empty string" : typeof e == "string" && (e.trim().length !== e.length ? s = "extra whitespace" : o = Number(e)), o === void 0)
            break;
          return r == A.UINT32 ? xs(o) : Ei(o), o;
        case A.INT64:
        case A.SFIXED64:
        case A.SINT64:
          if (e === null)
            return Pt(ue.ZERO, n);
          if (typeof e != "number" && typeof e != "string")
            break;
          return Pt(ue.from(e), n);
        case A.FIXED64:
        case A.UINT64:
          if (e === null)
            return Pt(Be.ZERO, n);
          if (typeof e != "number" && typeof e != "string")
            break;
          return Pt(Be.from(e), n);
        case A.BOOL:
          if (e === null)
            return !1;
          if (typeof e != "boolean")
            break;
          return e;
        case A.STRING:
          if (e === null)
            return "";
          if (typeof e != "string") {
            s = "extra whitespace";
            break;
          }
          try {
            encodeURIComponent(e);
          } catch (c) {
            c = "invalid UTF8";
            break;
          }
          return e;
        case A.BYTES:
          if (e === null || e === "")
            return new Uint8Array(0);
          if (typeof e != "string")
            break;
          return hM(e);
      }
    } catch (a) {
      s = a.message;
    }
    this.assert(!1, i + (s ? " - " + s : ""), e);
  }
}
class OM {
  constructor(e) {
    var r;
    this.fields = (r = e.fields) !== null && r !== void 0 ? r : [];
  }
  /**
   * Converts the message to a JSON object, based on the field descriptors.
   */
  write(e, r) {
    const n = {}, i = e;
    for (const s of this.fields) {
      if (!s.oneof) {
        let u = this.field(s, i[s.localName], r);
        u !== void 0 && (n[r.useProtoFieldName ? s.name : s.jsonName] = u);
        continue;
      }
      const a = i[s.oneof];
      if (a.oneofKind !== s.localName)
        continue;
      const o = s.kind == "scalar" || s.kind == "enum" ? Object.assign(Object.assign({}, r), { emitDefaultValues: !0 }) : r;
      let c = this.field(s, a[s.localName], o);
      X(c !== void 0), n[r.useProtoFieldName ? s.name : s.jsonName] = c;
    }
    return n;
  }
  field(e, r, n) {
    let i;
    if (e.kind == "map") {
      X(typeof r == "object" && r !== null);
      const s = {};
      switch (e.V.kind) {
        case "scalar":
          for (const [c, u] of Object.entries(r)) {
            const h = this.scalar(e.V.T, u, e.name, !1, !0);
            X(h !== void 0), s[c.toString()] = h;
          }
          break;
        case "message":
          const a = e.V.T();
          for (const [c, u] of Object.entries(r)) {
            const h = this.message(a, u, e.name, n);
            X(h !== void 0), s[c.toString()] = h;
          }
          break;
        case "enum":
          const o = e.V.T();
          for (const [c, u] of Object.entries(r)) {
            X(u === void 0 || typeof u == "number");
            const h = this.enum(o, u, e.name, !1, !0, n.enumAsInteger);
            X(h !== void 0), s[c.toString()] = h;
          }
          break;
      }
      (n.emitDefaultValues || Object.keys(s).length > 0) && (i = s);
    } else if (e.repeat) {
      X(Array.isArray(r));
      const s = [];
      switch (e.kind) {
        case "scalar":
          for (let c = 0; c < r.length; c++) {
            const u = this.scalar(e.T, r[c], e.name, e.opt, !0);
            X(u !== void 0), s.push(u);
          }
          break;
        case "enum":
          const a = e.T();
          for (let c = 0; c < r.length; c++) {
            X(r[c] === void 0 || typeof r[c] == "number");
            const u = this.enum(a, r[c], e.name, e.opt, !0, n.enumAsInteger);
            X(u !== void 0), s.push(u);
          }
          break;
        case "message":
          const o = e.T();
          for (let c = 0; c < r.length; c++) {
            const u = this.message(o, r[c], e.name, n);
            X(u !== void 0), s.push(u);
          }
          break;
      }
      (n.emitDefaultValues || s.length > 0 || n.emitDefaultValues) && (i = s);
    } else
      switch (e.kind) {
        case "scalar":
          i = this.scalar(e.T, r, e.name, e.opt, n.emitDefaultValues);
          break;
        case "enum":
          i = this.enum(e.T(), r, e.name, e.opt, n.emitDefaultValues, n.enumAsInteger);
          break;
        case "message":
          i = this.message(e.T(), r, e.name, n);
          break;
      }
    return i;
  }
  /**
   * Returns `null` as the default for google.protobuf.NullValue.
   */
  enum(e, r, n, i, s, a) {
    if (e[0] == "google.protobuf.NullValue")
      return !s && !i ? void 0 : null;
    if (r === void 0) {
      X(i);
      return;
    }
    if (!(r === 0 && !s && !i))
      return X(typeof r == "number"), X(Number.isInteger(r)), a || !e[1].hasOwnProperty(r) ? r : e[2] ? e[2] + e[1][r] : e[1][r];
  }
  message(e, r, n, i) {
    return r === void 0 ? i.emitDefaultValues ? null : void 0 : e.internalJsonWrite(r, i);
  }
  scalar(e, r, n, i, s) {
    if (r === void 0) {
      X(i);
      return;
    }
    const a = s || i;
    switch (e) {
      case A.INT32:
      case A.SFIXED32:
      case A.SINT32:
        return r === 0 ? a ? 0 : void 0 : (Ei(r), r);
      case A.FIXED32:
      case A.UINT32:
        return r === 0 ? a ? 0 : void 0 : (xs(r), r);
      case A.FLOAT:
        md(r);
      case A.DOUBLE:
        return r === 0 ? a ? 0 : void 0 : (X(typeof r == "number"), Number.isNaN(r) ? "NaN" : r === Number.POSITIVE_INFINITY ? "Infinity" : r === Number.NEGATIVE_INFINITY ? "-Infinity" : r);
      case A.STRING:
        return r === "" ? a ? "" : void 0 : (X(typeof r == "string"), r);
      case A.BOOL:
        return r === !1 ? a ? !1 : void 0 : (X(typeof r == "boolean"), r);
      case A.UINT64:
      case A.FIXED64:
        X(typeof r == "number" || typeof r == "string" || typeof r == "bigint");
        let o = Be.from(r);
        return o.isZero() && !a ? void 0 : o.toString();
      case A.INT64:
      case A.SFIXED64:
      case A.SINT64:
        X(typeof r == "number" || typeof r == "string" || typeof r == "bigint");
        let c = ue.from(r);
        return c.isZero() && !a ? void 0 : c.toString();
      case A.BYTES:
        return X(r instanceof Uint8Array), r.byteLength ? fM(r) : a ? "" : void 0;
    }
  }
}
function tc(t, e = Wt.STRING) {
  switch (t) {
    case A.BOOL:
      return !1;
    case A.UINT64:
    case A.FIXED64:
      return Pt(Be.ZERO, e);
    case A.INT64:
    case A.SFIXED64:
    case A.SINT64:
      return Pt(ue.ZERO, e);
    case A.DOUBLE:
    case A.FLOAT:
      return 0;
    case A.BYTES:
      return new Uint8Array(0);
    case A.STRING:
      return "";
    default:
      return 0;
  }
}
class MM {
  constructor(e) {
    this.info = e;
  }
  prepare() {
    var e;
    if (!this.fieldNoToField) {
      const r = (e = this.info.fields) !== null && e !== void 0 ? e : [];
      this.fieldNoToField = new Map(r.map((n) => [n.no, n]));
    }
  }
  /**
   * Reads a message from binary format into the target message.
   *
   * Repeated fields are appended. Map entries are added, overwriting
   * existing keys.
   *
   * If a message field is already present, it will be merged with the
   * new data.
   */
  read(e, r, n, i) {
    this.prepare();
    const s = i === void 0 ? e.len : e.pos + i;
    for (; e.pos < s; ) {
      const [a, o] = e.tag(), c = this.fieldNoToField.get(a);
      if (!c) {
        let g = n.readUnknownField;
        if (g == "throw")
          throw new Error(`Unknown field ${a} (wire type ${o}) for ${this.info.typeName}`);
        let E = e.skip(o);
        g !== !1 && (g === !0 ? Ms.onRead : g)(this.info.typeName, r, a, o, E);
        continue;
      }
      let u = r, h = c.repeat, f = c.localName;
      switch (c.oneof && (u = u[c.oneof], u.oneofKind !== f && (u = r[c.oneof] = {
        oneofKind: f
      })), c.kind) {
        case "scalar":
        case "enum":
          let g = c.kind == "enum" ? A.INT32 : c.T, E = c.kind == "scalar" ? c.L : void 0;
          if (h) {
            let S = u[f];
            if (o == Se.LengthDelimited && g != A.STRING && g != A.BYTES) {
              let k = e.uint32() + e.pos;
              for (; e.pos < k; )
                S.push(this.scalar(e, g, E));
            } else
              S.push(this.scalar(e, g, E));
          } else
            u[f] = this.scalar(e, g, E);
          break;
        case "message":
          if (h) {
            let S = u[f], k = c.T().internalBinaryRead(e, e.uint32(), n);
            S.push(k);
          } else
            u[f] = c.T().internalBinaryRead(e, e.uint32(), n, u[f]);
          break;
        case "map":
          let [R, I] = this.mapEntry(c, e, n);
          u[f][R] = I;
          break;
      }
    }
  }
  /**
   * Read a map field, expecting key field = 1, value field = 2
   */
  mapEntry(e, r, n) {
    let i = r.uint32(), s = r.pos + i, a, o;
    for (; r.pos < s; ) {
      let [c, u] = r.tag();
      switch (c) {
        case 1:
          e.K == A.BOOL ? a = r.bool().toString() : a = this.scalar(r, e.K, Wt.STRING);
          break;
        case 2:
          switch (e.V.kind) {
            case "scalar":
              o = this.scalar(r, e.V.T, e.V.L);
              break;
            case "enum":
              o = r.int32();
              break;
            case "message":
              o = e.V.T().internalBinaryRead(r, r.uint32(), n);
              break;
          }
          break;
        default:
          throw new Error(`Unknown field ${c} (wire type ${u}) in map entry for ${this.info.typeName}#${e.name}`);
      }
    }
    if (a === void 0) {
      let c = tc(e.K);
      a = e.K == A.BOOL ? c.toString() : c;
    }
    if (o === void 0)
      switch (e.V.kind) {
        case "scalar":
          o = tc(e.V.T, e.V.L);
          break;
        case "enum":
          o = 0;
          break;
        case "message":
          o = e.V.T().create();
          break;
      }
    return [a, o];
  }
  scalar(e, r, n) {
    switch (r) {
      case A.INT32:
        return e.int32();
      case A.STRING:
        return e.string();
      case A.BOOL:
        return e.bool();
      case A.DOUBLE:
        return e.double();
      case A.FLOAT:
        return e.float();
      case A.INT64:
        return Pt(e.int64(), n);
      case A.UINT64:
        return Pt(e.uint64(), n);
      case A.FIXED64:
        return Pt(e.fixed64(), n);
      case A.FIXED32:
        return e.fixed32();
      case A.BYTES:
        return e.bytes();
      case A.UINT32:
        return e.uint32();
      case A.SFIXED32:
        return e.sfixed32();
      case A.SFIXED64:
        return Pt(e.sfixed64(), n);
      case A.SINT32:
        return e.sint32();
      case A.SINT64:
        return Pt(e.sint64(), n);
    }
  }
}
class NM {
  constructor(e) {
    this.info = e;
  }
  prepare() {
    if (!this.fields) {
      const e = this.info.fields ? this.info.fields.concat() : [];
      this.fields = e.sort((r, n) => r.no - n.no);
    }
  }
  /**
   * Writes the message to binary format.
   */
  write(e, r, n) {
    this.prepare();
    for (const s of this.fields) {
      let a, o, c = s.repeat, u = s.localName;
      if (s.oneof) {
        const h = e[s.oneof];
        if (h.oneofKind !== u)
          continue;
        a = h[u], o = !0;
      } else
        a = e[u], o = !1;
      switch (s.kind) {
        case "scalar":
        case "enum":
          let h = s.kind == "enum" ? A.INT32 : s.T;
          if (c)
            if (X(Array.isArray(a)), c == Ls.PACKED)
              this.packed(r, h, s.no, a);
            else
              for (const f of a)
                this.scalar(r, h, s.no, f, !0);
          else
            a === void 0 ? X(s.opt) : this.scalar(r, h, s.no, a, o || s.opt);
          break;
        case "message":
          if (c) {
            X(Array.isArray(a));
            for (const f of a)
              this.message(r, n, s.T(), s.no, f);
          } else
            this.message(r, n, s.T(), s.no, a);
          break;
        case "map":
          X(typeof a == "object" && a !== null);
          for (const [f, g] of Object.entries(a))
            this.mapEntry(r, n, s, f, g);
          break;
      }
    }
    let i = n.writeUnknownFields;
    i !== !1 && (i === !0 ? Ms.onWrite : i)(this.info.typeName, e, r);
  }
  mapEntry(e, r, n, i, s) {
    e.tag(n.no, Se.LengthDelimited), e.fork();
    let a = i;
    switch (n.K) {
      case A.INT32:
      case A.FIXED32:
      case A.UINT32:
      case A.SFIXED32:
      case A.SINT32:
        a = Number.parseInt(i);
        break;
      case A.BOOL:
        X(i == "true" || i == "false"), a = i == "true";
        break;
    }
    switch (this.scalar(e, n.K, 1, a, !0), n.V.kind) {
      case "scalar":
        this.scalar(e, n.V.T, 2, s, !0);
        break;
      case "enum":
        this.scalar(e, A.INT32, 2, s, !0);
        break;
      case "message":
        this.message(e, r, n.V.T(), 2, s);
        break;
    }
    e.join();
  }
  message(e, r, n, i, s) {
    s !== void 0 && (n.internalBinaryWrite(s, e.tag(i, Se.LengthDelimited).fork(), r), e.join());
  }
  /**
   * Write a single scalar value.
   */
  scalar(e, r, n, i, s) {
    let [a, o, c] = this.scalarInfo(r, i);
    (!c || s) && (e.tag(n, a), e[o](i));
  }
  /**
   * Write an array of scalar values in packed format.
   */
  packed(e, r, n, i) {
    if (!i.length)
      return;
    X(r !== A.BYTES && r !== A.STRING), e.tag(n, Se.LengthDelimited), e.fork();
    let [, s] = this.scalarInfo(r);
    for (let a = 0; a < i.length; a++)
      e[s](i[a]);
    e.join();
  }
  /**
   * Get information for writing a scalar value.
   *
   * Returns tuple:
   * [0]: appropriate WireType
   * [1]: name of the appropriate method of IBinaryWriter
   * [2]: whether the given value is a default value
   *
   * If argument `value` is omitted, [2] is always false.
   */
  scalarInfo(e, r) {
    let n = Se.Varint, i, s = r === void 0, a = r === 0;
    switch (e) {
      case A.INT32:
        i = "int32";
        break;
      case A.STRING:
        a = s || !r.length, n = Se.LengthDelimited, i = "string";
        break;
      case A.BOOL:
        a = r === !1, i = "bool";
        break;
      case A.UINT32:
        i = "uint32";
        break;
      case A.DOUBLE:
        n = Se.Bit64, i = "double";
        break;
      case A.FLOAT:
        n = Se.Bit32, i = "float";
        break;
      case A.INT64:
        a = s || ue.from(r).isZero(), i = "int64";
        break;
      case A.UINT64:
        a = s || Be.from(r).isZero(), i = "uint64";
        break;
      case A.FIXED64:
        a = s || Be.from(r).isZero(), n = Se.Bit64, i = "fixed64";
        break;
      case A.BYTES:
        a = s || !r.byteLength, n = Se.LengthDelimited, i = "bytes";
        break;
      case A.FIXED32:
        n = Se.Bit32, i = "fixed32";
        break;
      case A.SFIXED32:
        n = Se.Bit32, i = "sfixed32";
        break;
      case A.SFIXED64:
        a = s || ue.from(r).isZero(), n = Se.Bit64, i = "sfixed64";
        break;
      case A.SINT32:
        i = "sint32";
        break;
      case A.SINT64:
        a = s || ue.from(r).isZero(), i = "sint64";
        break;
    }
    return [n, i, s || a];
  }
}
function xM(t) {
  const e = t.messagePrototype ? Object.create(t.messagePrototype) : Object.defineProperty({}, Qp, { value: t });
  for (let r of t.fields) {
    let n = r.localName;
    if (!r.opt)
      if (r.oneof)
        e[r.oneof] = { oneofKind: void 0 };
      else if (r.repeat)
        e[n] = [];
      else
        switch (r.kind) {
          case "scalar":
            e[n] = tc(r.T, r.L);
            break;
          case "enum":
            e[n] = 0;
            break;
          case "map":
            e[n] = {};
            break;
        }
  }
  return e;
}
function _o(t, e, r) {
  let n, i = r, s;
  for (let a of t.fields) {
    let o = a.localName;
    if (a.oneof) {
      const c = i[a.oneof];
      if ((c == null ? void 0 : c.oneofKind) == null)
        continue;
      if (n = c[o], s = e[a.oneof], s.oneofKind = c.oneofKind, n == null) {
        delete s[o];
        continue;
      }
    } else if (n = i[o], s = e, n == null)
      continue;
    switch (a.repeat && (s[o].length = n.length), a.kind) {
      case "scalar":
      case "enum":
        if (a.repeat)
          for (let u = 0; u < n.length; u++)
            s[o][u] = n[u];
        else
          s[o] = n;
        break;
      case "message":
        let c = a.T();
        if (a.repeat)
          for (let u = 0; u < n.length; u++)
            s[o][u] = c.create(n[u]);
        else
          s[o] === void 0 ? s[o] = c.create(n) : c.mergePartial(s[o], n);
        break;
      case "map":
        switch (a.V.kind) {
          case "scalar":
          case "enum":
            Object.assign(s[o], n);
            break;
          case "message":
            let u = a.V.T();
            for (let h of Object.keys(n))
              s[o][h] = u.create(n[h]);
            break;
        }
        break;
    }
  }
}
function LM(t, e, r) {
  if (e === r)
    return !0;
  if (!e || !r)
    return !1;
  for (let n of t.fields) {
    let i = n.localName, s = n.oneof ? e[n.oneof][i] : e[i], a = n.oneof ? r[n.oneof][i] : r[i];
    switch (n.kind) {
      case "enum":
      case "scalar":
        let o = n.kind == "enum" ? A.INT32 : n.T;
        if (!(n.repeat ? ml(o, s, a) : Zp(o, s, a)))
          return !1;
        break;
      case "map":
        if (!(n.V.kind == "message" ? gl(n.V.T(), ds(s), ds(a)) : ml(n.V.kind == "enum" ? A.INT32 : n.V.T, ds(s), ds(a))))
          return !1;
        break;
      case "message":
        let c = n.T();
        if (!(n.repeat ? gl(c, s, a) : c.equals(s, a)))
          return !1;
        break;
    }
  }
  return !0;
}
const ds = Object.values;
function Zp(t, e, r) {
  if (e === r)
    return !0;
  if (t !== A.BYTES)
    return !1;
  let n = e, i = r;
  if (n.length !== i.length)
    return !1;
  for (let s = 0; s < n.length; s++)
    if (n[s] != i[s])
      return !1;
  return !0;
}
function ml(t, e, r) {
  if (e.length !== r.length)
    return !1;
  for (let n = 0; n < e.length; n++)
    if (!Zp(t, e[n], r[n]))
      return !1;
  return !0;
}
function gl(t, e, r) {
  if (e.length !== r.length)
    return !1;
  for (let n = 0; n < e.length; n++)
    if (!t.equals(e[n], r[n]))
      return !1;
  return !0;
}
const $M = Object.getOwnPropertyDescriptors(Object.getPrototypeOf({}));
class T {
  constructor(e, r, n) {
    this.defaultCheckDepth = 16, this.typeName = e, this.fields = r.map(CM), this.options = n != null ? n : {}, this.messagePrototype = Object.create(null, Object.assign(Object.assign({}, $M), { [Qp]: { value: this } })), this.refTypeCheck = new PM(this), this.refJsonReader = new DM(this), this.refJsonWriter = new OM(this), this.refBinReader = new MM(this), this.refBinWriter = new NM(this);
  }
  create(e) {
    let r = xM(this);
    return e !== void 0 && _o(this, r, e), r;
  }
  /**
   * Clone the message.
   *
   * Unknown fields are discarded.
   */
  clone(e) {
    let r = this.create();
    return _o(this, r, e), r;
  }
  /**
   * Determines whether two message of the same type have the same field values.
   * Checks for deep equality, traversing repeated fields, oneof groups, maps
   * and messages recursively.
   * Will also return true if both messages are `undefined`.
   */
  equals(e, r) {
    return LM(this, e, r);
  }
  /**
   * Is the given value assignable to our message type
   * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
   */
  is(e, r = this.defaultCheckDepth) {
    return this.refTypeCheck.is(e, r, !1);
  }
  /**
   * Is the given value assignable to our message type,
   * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
   */
  isAssignable(e, r = this.defaultCheckDepth) {
    return this.refTypeCheck.is(e, r, !0);
  }
  /**
   * Copy partial data into the target message.
   */
  mergePartial(e, r) {
    _o(this, e, r);
  }
  /**
   * Create a new message from binary format.
   */
  fromBinary(e, r) {
    let n = _M(r);
    return this.internalBinaryRead(n.readerFactory(e), e.byteLength, n);
  }
  /**
   * Read a new message from a JSON value.
   */
  fromJson(e, r) {
    return this.internalJsonRead(e, bM(r));
  }
  /**
   * Read a new message from a JSON string.
   * This is equivalent to `T.fromJson(JSON.parse(json))`.
   */
  fromJsonString(e, r) {
    let n = JSON.parse(e);
    return this.fromJson(n, r);
  }
  /**
   * Write the message to canonical JSON value.
   */
  toJson(e, r) {
    return this.internalJsonWrite(e, kM(r));
  }
  /**
   * Convert the message to canonical JSON string.
   * This is equivalent to `JSON.stringify(T.toJson(t))`
   */
  toJsonString(e, r) {
    var n;
    let i = this.toJson(e, r);
    return JSON.stringify(i, null, (n = r == null ? void 0 : r.prettySpaces) !== null && n !== void 0 ? n : 0);
  }
  /**
   * Write the message to binary format.
   */
  toBinary(e, r) {
    let n = RM(r);
    return this.internalBinaryWrite(e, n.writerFactory(), n).finish();
  }
  /**
   * This is an internal method. If you just want to read a message from
   * JSON, use `fromJson()` or `fromJsonString()`.
   *
   * Reads JSON value and merges the fields into the target
   * according to protobuf rules. If the target is omitted,
   * a new instance is created first.
   */
  internalJsonRead(e, r, n) {
    if (e !== null && typeof e == "object" && !Array.isArray(e)) {
      let i = n != null ? n : this.create();
      return this.refJsonReader.read(e, i, r), i;
    }
    throw new Error(`Unable to parse message ${this.typeName} from JSON ${pd(e)}.`);
  }
  /**
   * This is an internal method. If you just want to write a message
   * to JSON, use `toJson()` or `toJsonString().
   *
   * Writes JSON value and returns it.
   */
  internalJsonWrite(e, r) {
    return this.refJsonWriter.write(e, r);
  }
  /**
   * This is an internal method. If you just want to write a message
   * in binary format, use `toBinary()`.
   *
   * Serializes the message in binary format and appends it to the given
   * writer. Returns passed writer.
   */
  internalBinaryWrite(e, r, n) {
    return this.refBinWriter.write(e, r, n), r;
  }
  /**
   * This is an internal method. If you just want to read a message from
   * binary data, use `fromBinary()`.
   *
   * Reads data from binary format and merges the fields into
   * the target according to protobuf rules. If the target is
   * omitted, a new instance is created first.
   */
  internalBinaryRead(e, r, n, i) {
    let s = i != null ? i : this.create();
    return this.refBinReader.read(e, s, n, r), s;
  }
}
var rc;
(function(t) {
  t[t.PUBLISHER = 0] = "PUBLISHER", t[t.SUBSCRIBER = 1] = "SUBSCRIBER";
})(rc || (rc = {}));
var nc;
(function(t) {
  t[t.AUDIO = 0] = "AUDIO", t[t.VIDEO = 1] = "VIDEO";
})(nc || (nc = {}));
class UM extends T {
  constructor() {
    super("media.Codec", []);
  }
}
new UM();
class FM extends T {
  constructor() {
    super("media.Fingerprint", [
      {
        no: 1,
        name: "algorithm",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "value",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new FM();
class VM extends T {
  constructor() {
    super("media.SessionDescription", [
      { no: 1, name: "target", kind: "enum", T: () => ["media.Target", rc] },
      {
        no: 2,
        name: "type",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "sdp",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const kr = new VM();
class BM extends T {
  constructor() {
    super("media.CreateTransportRequest", [
      {
        no: 1,
        name: "consuming",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "force_tcp",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 3, name: "description", kind: "message", T: () => kr }
    ]);
  }
}
new BM();
class GM extends T {
  constructor() {
    super("media.CreateTransportResponse", [
      {
        no: 1,
        name: "transport_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "description", kind: "message", T: () => kr },
      {
        no: 3,
        name: "transcription_enabled",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
const qM = new GM();
class HM extends T {
  constructor() {
    super("media.RenegotiateRequest", [
      {
        no: 1,
        name: "transport_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "description", kind: "message", T: () => kr }
    ]);
  }
}
new HM();
class WM extends T {
  constructor() {
    super("media.RenegotiateResponse", [
      {
        no: 1,
        name: "transport_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "description", kind: "message", T: () => kr }
    ]);
  }
}
new WM();
class jM extends T {
  constructor() {
    super("media.NestedScore", [
      {
        no: 1,
        name: "encoding_idx",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 2,
        name: "rid",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "score",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 4,
        name: "ssrc",
        kind: "scalar",
        T: 3,
        L: 0
        /*LongType.BIGINT*/
      }
    ]);
  }
}
const KM = new jM();
class JM extends T {
  constructor() {
    super("media.ProducerTrack", [
      {
        no: 1,
        name: "track_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "producer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "stream_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const YM = new JM();
class zM extends T {
  constructor() {
    super("media.ProducerEntry", [
      {
        no: 1,
        name: "producing_transport_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "producer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new zM();
class XM extends T {
  constructor() {
    super("media.ConsumerEntry", [
      {
        no: 1,
        name: "consuming_transport_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "consumer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new XM();
class QM extends T {
  constructor() {
    super("media.ProducerState", [
      {
        no: 1,
        name: "producer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "kind", kind: "enum", T: () => ["media.ProducerKind", nc] },
      {
        no: 3,
        name: "pause",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 4,
        name: "screen_share",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 5,
        name: "app_data",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const ts = new QM();
class ZM extends T {
  constructor() {
    super("media.ConsumerState", [
      {
        no: 1,
        name: "consumer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "producer_state", kind: "message", T: () => ts },
      { no: 3, name: "producer_track", kind: "message", T: () => YM }
    ]);
  }
}
const eN = new ZM();
class tN extends T {
  constructor() {
    super("media.ProducerIdToConsumerMap", [
      { no: 1, name: "map", kind: "map", K: 9, V: { kind: "message", T: () => eN } }
    ]);
  }
}
const em = new tN();
class rN extends T {
  constructor() {
    super("media.edge.GeoLocation", [
      {
        no: 1,
        name: "latitude",
        kind: "scalar",
        T: 2
        /*ScalarType.FLOAT*/
      },
      {
        no: 2,
        name: "longitude",
        kind: "scalar",
        T: 2
        /*ScalarType.FLOAT*/
      },
      {
        no: 3,
        name: "region",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const nN = new rN();
class iN extends T {
  constructor() {
    super("media.edge.PeerJoinRequest", [
      {
        no: 1,
        name: "display_name",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "prejoined",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "room_uuid",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "meeting_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "preset",
        kind: "scalar",
        opt: !0,
        T: 12
        /*ScalarType.BYTES*/
      },
      {
        no: 6,
        name: "user_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 7,
        name: "organization_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 8, name: "location", kind: "message", T: () => nN }
    ]);
  }
}
new iN();
class sN extends T {
  constructor() {
    super("media.edge.PeerJoinCompleteRequest", []);
  }
}
new sN();
class aN extends T {
  constructor() {
    super("media.edge.PeerLeaveRequest", [
      {
        no: 1,
        name: "close_room",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new aN();
class oN extends T {
  constructor() {
    super("media.edge.ConsumeMultipleProducerRequest", [
      {
        no: 1,
        name: "producer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "paused",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new oN();
class cN extends T {
  constructor() {
    super("media.edge.ConsumePeerRequest", [
      {
        no: 1,
        name: "producing_peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "paused",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "producer_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new cN();
class dN extends T {
  constructor() {
    super("media.edge.ProducerCreateRequest", [
      {
        no: 1,
        name: "kind",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "paused",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "screen_share",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 4, name: "description", kind: "message", T: () => kr },
      {
        no: 5,
        name: "msid",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "app_data",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new dN();
class uN extends T {
  constructor() {
    super("media.edge.SelectedPeersRequest", []);
  }
}
new uN();
class lN extends T {
  constructor() {
    super("media.edge.GlobalPeerPinningRequest", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new lN();
class hN extends T {
  constructor() {
    super("media.edge.ProducerToggleRequest", [
      {
        no: 1,
        name: "producer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "pause",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new hN();
class fN extends T {
  constructor() {
    super("media.edge.ConsumerToggleRequest", [
      {
        no: 1,
        name: "consumer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "pause",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new fN();
class pN extends T {
  constructor() {
    super("media.edge.ProducerCloseRequest", [
      {
        no: 1,
        name: "producer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "description", kind: "message", T: () => kr }
    ]);
  }
}
new pN();
class mN extends T {
  constructor() {
    super("media.edge.ConsumerCloseRequest", [
      {
        no: 1,
        name: "consumer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "description", kind: "message", T: () => kr }
    ]);
  }
}
new mN();
class gN extends T {
  constructor() {
    super("media.edge.KickPeerRequest", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new gN();
class _N extends T {
  constructor() {
    super("media.edge.KickAllPeersRequest", []);
  }
}
new _N();
class TN extends T {
  constructor() {
    super("media.edge.PeerDisplayNameEditRequest", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new TN();
class vN extends T {
  constructor() {
    super("media.edge.HostMediaControlForPeerRequest", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "audio",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "video",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 4,
        name: "scree_share",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new vN();
class EN extends T {
  constructor() {
    super("media.edge.HostMediaControlForAllPeerRequest", [
      {
        no: 1,
        name: "audio",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "video",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "screen_share",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new EN();
class wN extends T {
  constructor() {
    super("media.edge.GetRoomStateResponse", [
      {
        no: 1,
        name: "display_title",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "locked_mode",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "room_uuid",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "room_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "current_peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "is_recording",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 7,
        name: "recorder_participant_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 8,
        name: "pinned_peer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const yN = new wN();
class AN extends T {
  constructor() {
    super("media.edge.ErrorResponse", [
      {
        no: 1,
        name: "error_message",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "event_id",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      }
    ]);
  }
}
new AN();
class RN extends T {
  constructor() {
    super("media.edge.EmptyResponse", []);
  }
}
new RN();
class SN extends T {
  constructor() {
    super("media.edge.RoomParticipants", [
      {
        no: 1,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "producer_states", kind: "message", repeat: 1, T: () => ts },
      {
        no: 3,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "user_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const tm = new SN();
class bN extends T {
  constructor() {
    super("media.edge.SelectedPeersResponse", [
      {
        no: 1,
        name: "audio_peers",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "compulsory_peers",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const kN = new bN();
class CN extends T {
  constructor() {
    super("media.edge.SelectedPeersDiffEntry", [
      {
        no: 1,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "priority",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      }
    ]);
  }
}
const IN = new CN();
class PN extends T {
  constructor() {
    super("media.edge.SelectedPeersDiffResponse", [
      { no: 1, name: "entries", kind: "message", repeat: 1, T: () => IN }
    ]);
  }
}
new PN();
class DN extends T {
  constructor() {
    super("media.edge.PeerJoinResponse", []);
  }
}
new DN();
class ON extends T {
  constructor() {
    super("media.edge.PeerJoinCompleteResponse", [
      { no: 1, name: "room_state", kind: "message", T: () => yN },
      { no: 2, name: "participants", kind: "message", repeat: 1, T: () => tm },
      { no: 3, name: "selected_peers", kind: "message", T: () => kN },
      {
        no: 4,
        name: "max_preferred_streams",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      }
    ]);
  }
}
new ON();
class MN extends T {
  constructor() {
    super("media.edge.PeerLeaveResponse", [
      {
        no: 1,
        name: "closed",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new MN();
class NN extends T {
  constructor() {
    super("media.edge.ConsumeMultipleProducerResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 2, name: "consumer_ids_map", kind: "message", T: () => em }
    ]);
  }
}
new NN();
class xN extends T {
  constructor() {
    super("media.edge.ConsumePeerResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 2, name: "consumer_ids_map", kind: "message", T: () => em }
    ]);
  }
}
new xN();
class LN extends T {
  constructor() {
    super("media.edge.ProducerCreateResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "producer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 4, name: "description", kind: "message", T: () => kr }
    ]);
  }
}
new LN();
class $N extends T {
  constructor() {
    super("media.edge.ProducerScoreResponse", [
      {
        no: 1,
        name: "responseid",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "score", kind: "message", T: () => KM }
    ]);
  }
}
new $N();
class UN extends T {
  constructor() {
    super("media.edge.ActiveSpeakerResponse", [
      {
        no: 1,
        name: "responsepeer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "volume",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      }
    ]);
  }
}
new UN();
class FN extends T {
  constructor() {
    super("media.edge.NoActiveSpeakerResponse", []);
  }
}
new FN();
class VN extends T {
  constructor() {
    super("media.edge.ProducerToggleResponse", []);
  }
}
new VN();
class BN extends T {
  constructor() {
    super("media.edge.ConsumerToggleResponse", []);
  }
}
new BN();
class GN extends T {
  constructor() {
    super("media.edge.ProducerClosingResponse", [
      { no: 1, name: "description", kind: "message", T: () => kr }
    ]);
  }
}
new GN();
class qN extends T {
  constructor() {
    super("media.edge.ConsumerClosingResponse", []);
  }
}
new qN();
class HN extends T {
  constructor() {
    super("media.edge.GlobalPeerPinningResponse", []);
  }
}
new HN();
class WN extends T {
  constructor() {
    super("media.edge.KickPeerResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new WN();
class jN extends T {
  constructor() {
    super("media.edge.KickAllPeersResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new jN();
class KN extends T {
  constructor() {
    super("media.edge.HostMediaControlForPeerResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new KN();
class JN extends T {
  constructor() {
    super("media.edge.HostMediaControlForAllPeerResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new JN();
class YN extends T {
  constructor() {
    super("media.edge.PeerDisplayNameEditResponse", [
      {
        no: 1,
        name: "status",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new YN();
class zN extends T {
  constructor() {
    super("media.edge.PeerJoinBroadcastResponse", [
      { no: 1, name: "participant", kind: "message", T: () => tm }
    ]);
  }
}
new zN();
class XN extends T {
  constructor() {
    super("media.edge.PeerProducingTransportCreateBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "transport_details", kind: "message", T: () => qM }
    ]);
  }
}
new XN();
class QN extends T {
  constructor() {
    super("media.edge.PeerProducerCreateBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "producer_state", kind: "message", T: () => ts }
    ]);
  }
}
new QN();
class ZN extends T {
  constructor() {
    super("media.edge.PeerProducerToggleBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "producer_state", kind: "message", T: () => ts }
    ]);
  }
}
new ZN();
class ex extends T {
  constructor() {
    super("media.edge.PeerProducerCloseBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "producer_state", kind: "message", T: () => ts }
    ]);
  }
}
new ex();
class tx extends T {
  constructor() {
    super("media.edge.PeerLeaveBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new tx();
class rx extends T {
  constructor() {
    super("media.edge.GlobalPeerPinningBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new rx();
class nx extends T {
  constructor() {
    super("media.edge.GlobalPeerUnPinningBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new nx();
class ix extends T {
  constructor() {
    super("media.edge.RecordingStartedBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new ix();
class sx extends T {
  constructor() {
    super("media.edge.RecordingStoppedBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new sx();
class ax extends T {
  constructor() {
    super("media.edge.PeerDisplayNameEditBroadcastResponse", [
      {
        no: 1,
        name: "participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new ax();
class ox extends T {
  constructor() {
    super("media.edge.PeerPingRequestBroadcastResponse", [
      {
        no: 1,
        name: "password",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new ox();
class cx extends T {
  constructor() {
    super("media.edge.MediaRoomTerminationBroadcastResponse", [
      {
        no: 1,
        name: "reason",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new cx();
class dx extends T {
  constructor() {
    super("socket.ai.MeetingTranscript", [
      {
        no: 1,
        name: "meeting_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "transcript",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new dx();
class ux extends T {
  constructor() {
    super("socket.api.BaseSocketHubMessage", [
      {
        no: 1,
        name: "event",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 2,
        name: "id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "room_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "payload",
        kind: "scalar",
        T: 12
        /*ScalarType.BYTES*/
      },
      {
        no: 7,
        name: "error",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 8,
        name: "sid",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new ux();
class lx extends T {
  constructor() {
    super("socket.api.ErrorMessage", [
      {
        no: 1,
        name: "code",
        kind: "scalar",
        opt: !0,
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 2,
        name: "message",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new lx();
class hx extends T {
  constructor() {
    super("socket.preset.PollsPermissionUpdate", [
      {
        no: 1,
        name: "can_create",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "can_vote",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "can_view",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
const fx = new hx();
class px extends T {
  constructor() {
    super("socket.preset.PluginsPermissionsUpdate", [
      {
        no: 1,
        name: "can_close",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "can_start",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
const mx = new px();
class gx extends T {
  constructor() {
    super("socket.preset.PublicChatPermission", [
      {
        no: 1,
        name: "can_send",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "text",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "files",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
const _x = new gx();
class Tx extends T {
  constructor() {
    super("socket.preset.PrivateChatPermission", [
      {
        no: 1,
        name: "can_send",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 2,
        name: "can_receive",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "text",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 4,
        name: "files",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
const vx = new Tx();
class Ex extends T {
  constructor() {
    super("socket.preset.ChatPermissionUpdate", [
      { no: 1, name: "public", kind: "message", T: () => _x },
      { no: 2, name: "private", kind: "message", T: () => vx }
    ]);
  }
}
const wx = new Ex();
class yx extends T {
  constructor() {
    super("socket.preset.PresetUpdates", [
      { no: 1, name: "polls", kind: "message", T: () => fx },
      { no: 2, name: "plugins", kind: "message", T: () => mx },
      { no: 3, name: "chat", kind: "message", T: () => wx }
    ]);
  }
}
const Ax = new yx();
class Rx extends T {
  constructor() {
    super("socket.preset.ReadPeersPresetRequest", [
      {
        no: 1,
        name: "user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Rx();
class Sx extends T {
  constructor() {
    super("socket.preset.PeerPreset", [
      {
        no: 1,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "preset",
        kind: "scalar",
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
}
const bx = new Sx();
class kx extends T {
  constructor() {
    super("socket.preset.ReadPeersPresetResponse", [
      { no: 1, name: "peer_presets", kind: "message", repeat: 1, T: () => bx }
    ]);
  }
}
new kx();
class Cx extends T {
  constructor() {
    super("socket.preset.UpdatePeerPreset", [
      {
        no: 1,
        name: "user_ids",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "patch", kind: "message", T: () => Ax }
    ]);
  }
}
const rm = new Cx();
class Ix extends T {
  constructor() {
    super("socket.preset.UpdatePeersPresetRequest", [
      { no: 1, name: "update_peers_presets", kind: "message", repeat: 1, T: () => rm }
    ]);
  }
}
new Ix();
class Px extends T {
  constructor() {
    super("socket.preset.UpdatePeersPresetResponse", [
      { no: 1, name: "update_peers_presets", kind: "message", repeat: 1, T: () => rm }
    ]);
  }
}
new Px();
class Dx extends T {
  constructor() {
    super("socket.chat.ChatMessage", [
      {
        no: 1,
        name: "chat_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "pinned",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 6,
        name: "is_edited",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 7,
        name: "payload_type",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 8,
        name: "payload",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 10,
        name: "target_user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 11,
        name: "created_at",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      },
      {
        no: 12,
        name: "created_at_ms",
        kind: "scalar",
        opt: !0,
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      },
      {
        no: 13,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 14,
        name: "channel_index",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const kn = new Dx();
class Ox extends T {
  constructor() {
    super("socket.chat.GetPaginatedChatMessageRoomRequest", [
      {
        no: 1,
        name: "time_stamp",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      },
      {
        no: 2,
        name: "size",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 3,
        name: "from",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 4,
        name: "reversed",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 5,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Ox();
class Mx extends T {
  constructor() {
    super("socket.chat.GetPaginatedChatMessageRoomResponse", [
      { no: 1, name: "messages", kind: "message", repeat: 1, T: () => kn },
      {
        no: 2,
        name: "next",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new Mx();
class Nx extends T {
  constructor() {
    super("socket.chat.GetChatMessagesResponse", [
      { no: 1, name: "messages", kind: "message", repeat: 1, T: () => kn }
    ]);
  }
}
new Nx();
class xx extends T {
  constructor() {
    super("socket.chat.SendChatMessageToRoomRequest", [
      {
        no: 1,
        name: "payload_type",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 2,
        name: "payload",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new xx();
class Lx extends T {
  constructor() {
    super("socket.chat.SendChatMessageToRoomResponse", [
      { no: 1, name: "message", kind: "message", T: () => kn }
    ]);
  }
}
new Lx();
class $x extends T {
  constructor() {
    super("socket.chat.SendChatMessageToPeersRequest", [
      {
        no: 1,
        name: "peer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "payload_type",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 3,
        name: "payload",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new $x();
class Ux extends T {
  constructor() {
    super("socket.chat.SendChatMessageToPeersResponse", [
      { no: 1, name: "message", kind: "message", T: () => kn }
    ]);
  }
}
new Ux();
class Fx extends T {
  constructor() {
    super("socket.chat.SendChatMessageToChannelRequest", [
      {
        no: 1,
        name: "channel_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "payload_type",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 3,
        name: "payload",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Fx();
class Vx extends T {
  constructor() {
    super("socket.chat.SendChatMessageToChannelResponse", [
      { no: 1, name: "message", kind: "message", T: () => kn }
    ]);
  }
}
new Vx();
class Bx extends T {
  constructor() {
    super("socket.chat.EditChatMessageRequest", [
      {
        no: 1,
        name: "chat_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "payload_type",
        kind: "scalar",
        opt: !0,
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 3,
        name: "payload",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "pinned",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 5,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Bx();
class Gx extends T {
  constructor() {
    super("socket.chat.PinChatMessageRequest", [
      {
        no: 1,
        name: "chat_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "pinned",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Gx();
class qx extends T {
  constructor() {
    super("socket.chat.PinChatMessageResponse", [
      {
        no: 1,
        name: "chat_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "pinned",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 3,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new qx();
class Hx extends T {
  constructor() {
    super("socket.chat.EditChatMessageResponse", [
      { no: 1, name: "message", kind: "message", T: () => kn }
    ]);
  }
}
new Hx();
class Wx extends T {
  constructor() {
    super("socket.chat.DeleteChatMessageRequest", [
      {
        no: 1,
        name: "chat_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Wx();
class jx extends T {
  constructor() {
    super("socket.chat.DeleteChatMessageResponse", [
      {
        no: 1,
        name: "chat_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new jx();
class Kx extends T {
  constructor() {
    super("socket.chat.SearchChatMessagesRequest", [
      {
        no: 1,
        name: "time_stamp",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      },
      {
        no: 2,
        name: "size",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 3,
        name: "from",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 4,
        name: "reversed",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 5,
        name: "channel_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "search_term",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Kx();
class Jx extends T {
  constructor() {
    super("socket.chat.MarkChannelIndexAsReadRequest", [
      {
        no: 1,
        name: "channel_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "channel_index",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Jx();
class Yx extends T {
  constructor() {
    super("socket.chat.MarkChannelIndexAsReadResponse", [
      {
        no: 1,
        name: "channel_index",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Yx();
class zx extends T {
  constructor() {
    super("socket.chat.CreateChatChannelRequest", [
      {
        no: 1,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "target_user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "display_picture_url",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "visibility",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "is_direct_message",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new zx();
class Xx extends T {
  constructor() {
    super("socket.chat.UpdateChatChannelRequest", [
      {
        no: 1,
        name: "chat_channel_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "display_name",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "target_user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "display_picture_url",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "visibility",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "is_direct_message",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new Xx();
class Qx extends T {
  constructor() {
    super("socket.chat.CreateChatChannelResponse", [
      {
        no: 1,
        name: "chat_channel_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Qx();
class Zx extends T {
  constructor() {
    super("socket.chat.GetChatChannelRequest", [
      {
        no: 1,
        name: "chat_channel_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Zx();
class eL extends T {
  constructor() {
    super("socket.chat.LatestMessageAndUnreadCount", [
      { no: 1, name: "message", kind: "message", T: () => kn },
      {
        no: 2,
        name: "unread_count",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      }
    ]);
  }
}
const tL = new eL();
class rL extends T {
  constructor() {
    super("socket.chat.ChatChannel", [
      {
        no: 1,
        name: "chat_channel_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "display_picture_url",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "visibility",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "is_direct_message",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 6, name: "latest_message_and_unread_count", kind: "message", T: () => tL },
      {
        no: 7,
        name: "target_user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const nL = new rL();
class iL extends T {
  constructor() {
    super("socket.chat.GetChatChannelResponse", [
      { no: 1, name: "chat_channels", kind: "message", repeat: 1, T: () => nL }
    ]);
  }
}
new iL();
class sL extends T {
  constructor() {
    super("socket.chat.ChannelMember", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "picture",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "custom_participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const aL = new sL();
class oL extends T {
  constructor() {
    super("socket.chat.GetChatChannelMembersResponse", [
      { no: 1, name: "channel_members", kind: "message", repeat: 1, T: () => aL }
    ]);
  }
}
new oL();
var $s;
(function(t) {
  t[t.BROWSER = 0] = "BROWSER", t[t.TRACK = 1] = "TRACK", t[t.COMPOSITE = 2] = "COMPOSITE";
})($s || ($s = {}));
var Us;
(function(t) {
  t[t.UNSPECIFIED = 0] = "UNSPECIFIED", t[t.ON_STAGE = 1] = "ON_STAGE", t[t.APPROVED_STAGE = 2] = "APPROVED_STAGE", t[t.REQUESTED_STAGE = 3] = "REQUESTED_STAGE", t[t.OFF_STAGE = 4] = "OFF_STAGE";
})(Us || (Us = {}));
var _l;
(function(t) {
  t[t.NONE = 0] = "NONE", t[t.RECORDER = 1] = "RECORDER", t[t.LIVESTREAMER = 2] = "LIVESTREAMER";
})(_l || (_l = {}));
var ic;
(function(t) {
  t[t.HIVE = 0] = "HIVE", t[t.CHAT = 1] = "CHAT", t[t.PING = 2] = "PING";
})(ic || (ic = {}));
class cL extends T {
  constructor() {
    super("socket.room.PeerFlags", [
      {
        no: 1,
        name: "preset_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "recorder_type",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "hidden_participant",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
const dL = new cL();
class uL extends T {
  constructor() {
    super("socket.room.Peer", [
      {
        no: 1,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 4, name: "stage_type", kind: "enum", opt: !0, T: () => ["socket.room.StageType", Us, "STAGE_TYPE_"] },
      {
        no: 5,
        name: "custom_participant_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "preset_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 7,
        name: "display_picture_url",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 8,
        name: "waitlisted",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      { no: 9, name: "flags", kind: "message", T: () => dL }
    ]);
  }
}
const Na = new uL();
class lL extends T {
  constructor() {
    super("socket.room.PeerInfoResponse", [
      { no: 1, name: "peer", kind: "message", T: () => Na }
    ]);
  }
}
new lL();
class hL extends T {
  constructor() {
    super("socket.room.PeerStatusUpdate", [
      {
        no: 1,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "stage_type", kind: "enum", opt: !0, T: () => ["socket.room.StageType", Us, "STAGE_TYPE_"] }
    ]);
  }
}
new hL();
class fL extends T {
  constructor() {
    super("socket.room.RoomPeersInfoRequest", [
      {
        no: 1,
        name: "seach_query",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "limit",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      },
      {
        no: 3,
        name: "offset",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      }
    ]);
  }
}
new fL();
class pL extends T {
  constructor() {
    super("socket.room.RoomPeersInfoResponse", [
      { no: 1, name: "peers", kind: "message", repeat: 1, T: () => Na }
    ]);
  }
}
new pL();
class mL extends T {
  constructor() {
    super("socket.room.RoomPeerCountResponse", [
      {
        no: 1,
        name: "count",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      }
    ]);
  }
}
new mL();
class gL extends T {
  constructor() {
    super("socket.room.Room", [
      {
        no: 1,
        name: "room_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "title",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "created_at",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      },
      { no: 5, name: "active_recordings", kind: "message", repeat: 1, T: () => TL },
      {
        no: 6,
        name: "room_uuid",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const nm = new gL();
class _L extends T {
  constructor() {
    super("socket.room.ActiveRecording", [
      {
        no: 1,
        name: "recording_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 2, name: "recording_type", kind: "enum", T: () => ["common.RecordingType", $s] },
      {
        no: 3,
        name: "recording_status",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const TL = new _L();
class vL extends T {
  constructor() {
    super("socket.room.RoomInfoResponse", [
      { no: 1, name: "room", kind: "message", T: () => nm }
    ]);
  }
}
new vL();
class EL extends T {
  constructor() {
    super("socket.room.GetPeerInfoRequest", [
      {
        no: 1,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new EL();
class wL extends T {
  constructor() {
    super("socket.room.UpdatePeerInfoRequest", [
      {
        no: 1,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "display_name",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new wL();
class yL extends T {
  constructor() {
    super("socket.room.JoinRoomRequest", [
      { no: 1, name: "peer", kind: "message", T: () => Na },
      {
        no: 3,
        name: "room_uuid",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "organization_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "use_hive",
        kind: "scalar",
        opt: !0,
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 6,
        name: "preset",
        kind: "scalar",
        opt: !0,
        T: 12
        /*ScalarType.BYTES*/
      },
      { no: 7, name: "capabilities", kind: "enum", repeat: 1, T: () => ["socket.room.Capabilities", ic, "CAPABILITIES_"] },
      {
        no: 8,
        name: "timestamp",
        kind: "scalar",
        opt: !0,
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      }
    ]);
  }
}
new yL();
class AL extends T {
  constructor() {
    super("socket.room.LeaveRoomRequest", [
      { no: 1, name: "peer", kind: "message", T: () => Na },
      {
        no: 2,
        name: "timestamp",
        kind: "scalar",
        opt: !0,
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      }
    ]);
  }
}
new AL();
class RL extends T {
  constructor() {
    super("socket.room.UpdateRoomInfoRequest", [
      { no: 1, name: "room", kind: "message", T: () => nm }
    ]);
  }
}
new RL();
class SL extends T {
  constructor() {
    super("socket.room.GetConnectedRoomsDumpRequest", []);
  }
}
new SL();
class bL extends T {
  constructor() {
    super("socket.room.ServiceError", [
      {
        no: 1,
        name: "message",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "code",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const gd = new bL();
class kL extends T {
  constructor() {
    super("socket.room.ConnectedMeetingPeer", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "display_name",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "custom_participant_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "preset_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "display_picture_url",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const CL = new kL();
class IL extends T {
  constructor() {
    super("socket.room.ConnectedMeetingDump", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "title",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "participants", kind: "message", repeat: 1, T: () => CL }
    ]);
  }
}
const Tl = new IL();
class PL extends T {
  constructor() {
    super("socket.room.GetConnectedRoomsDumpResponse", [
      { no: 1, name: "parent_meeting", kind: "message", T: () => Tl },
      { no: 2, name: "meetings", kind: "message", repeat: 1, T: () => Tl }
    ]);
  }
}
const DL = new PL();
class OL extends T {
  constructor() {
    super("socket.room.CreateRoomRequestPayload", [
      {
        no: 1,
        name: "title",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const ML = new OL();
class NL extends T {
  constructor() {
    super("socket.room.CreateConnectedRoomsRequest", [
      { no: 1, name: "payloads", kind: "message", repeat: 1, T: () => ML }
    ]);
  }
}
const xL = new NL();
class LL extends T {
  constructor() {
    super("socket.room.CreateRoomResponsePayload", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "title",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "error", kind: "message", T: () => gd }
    ]);
  }
}
const $L = new LL();
class UL extends T {
  constructor() {
    super("socket.room.CreateConnectedRoomsResponse", [
      { no: 1, name: "payloads", kind: "message", repeat: 1, T: () => $L }
    ]);
  }
}
const vl = new UL();
class FL extends T {
  constructor() {
    super("socket.room.UpdateRoomRequestPayload", [
      {
        no: 1,
        name: "meeting_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "title",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const VL = new FL();
class BL extends T {
  constructor() {
    super("socket.room.UpdateConnectedRoomsRequest", [
      { no: 1, name: "payloads", kind: "message", repeat: 1, T: () => VL }
    ]);
  }
}
new BL();
class GL extends T {
  constructor() {
    super("socket.room.DisableRoomPayload", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const qL = new GL();
class HL extends T {
  constructor() {
    super("socket.room.DisableConnectedRoomsRequest", [
      { no: 1, name: "payloads", kind: "message", repeat: 1, T: () => qL }
    ]);
  }
}
const WL = new HL();
class jL extends T {
  constructor() {
    super("socket.room.DisableConnectedRoomsResponse", [
      { no: 1, name: "payloads", kind: "message", repeat: 1, T: () => YL }
    ]);
  }
}
const KL = new jL();
class JL extends T {
  constructor() {
    super("socket.room.DisableConnectedRoomPayload", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "status",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "title",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 4, name: "error", kind: "message", T: () => gd }
    ]);
  }
}
const YL = new JL();
class zL extends T {
  constructor() {
    super("socket.room.MovePeerPayload", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "preset_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const XL = new zL();
class QL extends T {
  constructor() {
    super("socket.room.MovePeersBetweenRoomsRequest", [
      {
        no: 1,
        name: "source_meeting_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "destination_meeting_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "participants", kind: "message", repeat: 1, T: () => XL }
    ]);
  }
}
const ZL = new QL();
class e$ extends T {
  constructor() {
    super("socket.room.MovedPeer", [
      {
        no: 1,
        name: "meeting_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "custom_participant_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "error", kind: "message", T: () => gd }
    ]);
  }
}
const im = new e$();
class t$ extends T {
  constructor() {
    super("socket.room.MovePeersBetweenRoomsResponse", [
      { no: 1, name: "payloads", kind: "message", repeat: 1, T: () => im }
    ]);
  }
}
new t$();
class r$ extends T {
  constructor() {
    super("socket.room.TransferPeer", [
      {
        no: 1,
        name: "meeting_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "auth_token",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const n$ = new r$();
class i$ extends T {
  constructor() {
    super("socket.room.GetAllAddedParticipantsResponse", [
      { no: 1, name: "participants", kind: "message", repeat: 1, T: () => a$ }
    ]);
  }
}
new i$();
class s$ extends T {
  constructor() {
    super("socket.room.AddedParticipant", [
      {
        no: 1,
        name: "id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "picture",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "custom_participant_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const a$ = new s$();
class o$ extends T {
  constructor() {
    super("socket.room.RemoveParticipantsRequest", [
      {
        no: 1,
        name: "peer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new o$();
class c$ extends T {
  constructor() {
    super("socket.room.BroadcastMessage", [
      {
        no: 1,
        name: "type",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "payload",
        kind: "scalar",
        T: 12
        /*ScalarType.BYTES*/
      },
      {
        no: 3,
        name: "timestamp",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      },
      {
        no: 4,
        name: "peer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new c$();
class d$ extends T {
  constructor() {
    super("socket.room.AcceptWaitingRoomRequests", [
      {
        no: 1,
        name: "user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new d$();
class u$ extends T {
  constructor() {
    super("socket.room.DenyWaitingRoomRequests", [
      {
        no: 1,
        name: "user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new u$();
class l$ extends T {
  constructor() {
    super("socket.room.WaitingRoomRequest", [
      {
        no: 1,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const h$ = new l$();
class f$ extends T {
  constructor() {
    super("socket.room.GetWaitingRoomRequests", [
      { no: 1, name: "requests", kind: "message", repeat: 1, T: () => h$ }
    ]);
  }
}
new f$();
class p$ extends T {
  constructor() {
    super("socket.room.GetRoomStageStateResponse", [
      {
        no: 1,
        name: "on_stage_peers",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "approved_stage_peers",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "requested_stage_peers",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new p$();
class m$ extends T {
  constructor() {
    super("socket.plugin.AddPluginRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "staggered",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new m$();
class g$ extends T {
  constructor() {
    super("socket.plugin.RemovePluginRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "staggered",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      }
    ]);
  }
}
new g$();
class _$ extends T {
  constructor() {
    super("socket.plugin.EnablePluginForRoomRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new _$();
class T$ extends T {
  constructor() {
    super("socket.plugin.DisablePluginForRoomRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new T$();
class v$ extends T {
  constructor() {
    super("socket.plugin.EnablePluginForPeersRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "peer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new v$();
class E$ extends T {
  constructor() {
    super("socket.plugin.DisablePluginForPeersRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "peer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new E$();
class w$ extends T {
  constructor() {
    super("socket.plugin.PluginEventToRoomRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "plugin_data",
        kind: "scalar",
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
}
new w$();
class y$ extends T {
  constructor() {
    super("socket.plugin.PluginEventToPeersRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "peer_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "plugin_data",
        kind: "scalar",
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
}
new y$();
class A$ extends T {
  constructor() {
    super("socket.plugin.StoreKeys", [
      {
        no: 1,
        name: "store_key",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "payload",
        kind: "scalar",
        opt: !0,
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
}
const _d = new A$();
class R$ extends T {
  constructor() {
    super("socket.plugin.PluginStoreInsertKeysRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "store_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "insert_keys", kind: "message", repeat: 1, T: () => _d }
    ]);
  }
}
new R$();
class S$ extends T {
  constructor() {
    super("socket.plugin.PluginStoreGetKeysRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "store_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "get_keys", kind: "message", repeat: 1, T: () => _d }
    ]);
  }
}
new S$();
class b$ extends T {
  constructor() {
    super("socket.plugin.PluginStoreDeleteKeysRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "store_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "delete_keys", kind: "message", repeat: 1, T: () => _d }
    ]);
  }
}
new b$();
class k$ extends T {
  constructor() {
    super("socket.plugin.PluginStoreDeleteRequest", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "store_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new k$();
class C$ extends T {
  constructor() {
    super("socket.plugin.EnablePluginResponse", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "enabled_by",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const I$ = new C$();
class P$ extends T {
  constructor() {
    super("socket.plugin.EnablePluginsResponse", [
      { no: 1, name: "plugins", kind: "message", repeat: 1, T: () => I$ }
    ]);
  }
}
new P$();
class D$ extends T {
  constructor() {
    super("socket.plugin.DisablePluginResponse", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "disabled_by",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new D$();
class O$ extends T {
  constructor() {
    super("socket.plugin.PluginStoreItem", [
      {
        no: 1,
        name: "timestamp",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "store_key",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "payload",
        kind: "scalar",
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
}
const M$ = new O$();
class N$ extends T {
  constructor() {
    super("socket.plugin.PluginStoreResponse", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "store_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "store_items", kind: "message", repeat: 1, T: () => M$ }
    ]);
  }
}
new N$();
class x$ extends T {
  constructor() {
    super("socket.plugin.PluginEventResponse", [
      {
        no: 1,
        name: "plugin_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "plugin_data",
        kind: "scalar",
        T: 12
        /*ScalarType.BYTES*/
      }
    ]);
  }
}
new x$();
class L$ extends T {
  constructor() {
    super("socket.livestreaming.LiveStreamingEvent", [
      {
        no: 1,
        name: "livestream_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "err_message",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "meeting_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 5,
        name: "playback_url",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "org_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 7,
        name: "room_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 8,
        name: "room_uuid",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 9,
        name: "status",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new L$();
class $$ extends T {
  constructor() {
    super("socket.livestreaming.GetStagePeersResponse", [
      {
        no: 1,
        name: "stage_peers",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new $$();
class U$ extends T {
  constructor() {
    super("socket.livestreaming.StageRequest", [
      {
        no: 1,
        name: "display_name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "peer_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const F$ = new U$();
class V$ extends T {
  constructor() {
    super("socket.livestreaming.GetStageRequestsResponse", [
      { no: 1, name: "stage_requests", kind: "message", repeat: 1, T: () => F$ }
    ]);
  }
}
new V$();
class B$ extends T {
  constructor() {
    super("socket.livestreaming.GrantStageAccessRequest", [
      {
        no: 1,
        name: "user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new B$();
class G$ extends T {
  constructor() {
    super("socket.livestreaming.DenyStageAccessRequest", [
      {
        no: 1,
        name: "user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new G$();
class q$ extends T {
  constructor() {
    super("socket.livestreaming.LeaveStageRequest", [
      {
        no: 1,
        name: "user_ids",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new q$();
class H$ extends T {
  constructor() {
    super("socket.polls.Poll", [
      {
        no: 1,
        name: "poll_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "created_by",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "created_by_user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 4,
        name: "question",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 5, name: "options", kind: "message", repeat: 1, T: () => j$ },
      {
        no: 6,
        name: "hide_votes",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 7,
        name: "anonymous",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 8,
        name: "votes",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const sm = new H$();
class W$ extends T {
  constructor() {
    super("socket.polls.PollOption", [
      {
        no: 1,
        name: "text",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "count",
        kind: "scalar",
        opt: !0,
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      },
      { no: 3, name: "votes", kind: "message", repeat: 1, T: () => J$ }
    ]);
  }
}
const j$ = new W$();
class K$ extends T {
  constructor() {
    super("socket.polls.PollVote", [
      {
        no: 1,
        name: "user_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
const J$ = new K$();
class Y$ extends T {
  constructor() {
    super("socket.polls.NewPollRequest", [
      {
        no: 1,
        name: "question",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "options",
        kind: "scalar",
        repeat: 2,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 3,
        name: "anonymous",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 4,
        name: "hide_votes",
        kind: "scalar",
        T: 8
        /*ScalarType.BOOL*/
      },
      {
        no: 5,
        name: "created_by",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: "created_by_user_id",
        kind: "scalar",
        opt: !0,
        T: 9
        /*ScalarType.STRING*/
      }
    ]);
  }
}
new Y$();
class z$ extends T {
  constructor() {
    super("socket.polls.VotePollRequest", [
      {
        no: 1,
        name: "poll_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "index",
        kind: "scalar",
        T: 4,
        L: 2
        /*LongType.NUMBER*/
      }
    ]);
  }
}
new z$();
class X$ extends T {
  constructor() {
    super("socket.polls.UpdatePollResponse", [
      { no: 1, name: "poll", kind: "message", T: () => sm }
    ]);
  }
}
new X$();
class Q$ extends T {
  constructor() {
    super("socket.polls.GetPollsResponse", [
      { no: 1, name: "polls", kind: "message", repeat: 1, T: () => sm }
    ]);
  }
}
new Q$();
class Z$ extends T {
  constructor() {
    super("socket.recording.RecordingEvent", [
      {
        no: 1,
        name: "recording_id",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      {
        no: 2,
        name: "err_message",
        kind: "scalar",
        T: 9
        /*ScalarType.STRING*/
      },
      { no: 3, name: "recording_type", kind: "enum", T: () => ["common.RecordingType", $s] }
    ]);
  }
}
new Z$();
class eU extends T {
  constructor() {
    super("google.protobuf.Timestamp", [
      {
        no: 1,
        name: "seconds",
        kind: "scalar",
        T: 3,
        L: 0
        /*LongType.BIGINT*/
      },
      {
        no: 2,
        name: "nanos",
        kind: "scalar",
        T: 5
        /*ScalarType.INT32*/
      }
    ]);
  }
  /**
   * Creates a new `Timestamp` for the current time.
   */
  now() {
    const e = this.create(), r = Date.now();
    return e.seconds = ue.from(Math.floor(r / 1e3)).toBigInt(), e.nanos = r % 1e3 * 1e6, e;
  }
  /**
   * Converts a `Timestamp` to a JavaScript Date.
   */
  toDate(e) {
    return new Date(ue.from(e.seconds).toNumber() * 1e3 + Math.ceil(e.nanos / 1e6));
  }
  /**
   * Converts a JavaScript Date to a `Timestamp`.
   */
  fromDate(e) {
    const r = this.create(), n = e.getTime();
    return r.seconds = ue.from(Math.floor(n / 1e3)).toBigInt(), r.nanos = n % 1e3 * 1e6, r;
  }
  /**
   * In JSON format, the `Timestamp` type is encoded as a string
   * in the RFC 3339 format.
   */
  internalJsonWrite(e, r) {
    let n = ue.from(e.seconds).toNumber() * 1e3;
    if (n < Date.parse("0001-01-01T00:00:00Z") || n > Date.parse("9999-12-31T23:59:59Z"))
      throw new Error("Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.");
    if (e.nanos < 0)
      throw new Error("Unable to encode invalid Timestamp to JSON. Nanos must not be negative.");
    let i = "Z";
    if (e.nanos > 0) {
      let s = (e.nanos + 1e9).toString().substring(1);
      s.substring(3) === "000000" ? i = "." + s.substring(0, 3) + "Z" : s.substring(6) === "000" ? i = "." + s.substring(0, 6) + "Z" : i = "." + s + "Z";
    }
    return new Date(n).toISOString().replace(".000Z", i);
  }
  /**
   * In JSON format, the `Timestamp` type is encoded as a string
   * in the RFC 3339 format.
   */
  internalJsonRead(e, r, n) {
    if (typeof e != "string")
      throw new Error("Unable to parse Timestamp from JSON " + pd(e) + ".");
    let i = e.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
    if (!i)
      throw new Error("Unable to parse Timestamp from JSON. Invalid format.");
    let s = Date.parse(i[1] + "-" + i[2] + "-" + i[3] + "T" + i[4] + ":" + i[5] + ":" + i[6] + (i[8] ? i[8] : "Z"));
    if (Number.isNaN(s))
      throw new Error("Unable to parse Timestamp from JSON. Invalid value.");
    if (s < Date.parse("0001-01-01T00:00:00Z") || s > Date.parse("9999-12-31T23:59:59Z"))
      throw new globalThis.Error("Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.");
    return n || (n = this.create()), n.seconds = ue.from(s / 1e3).toBigInt(), n.nanos = 0, i[7] && (n.nanos = parseInt("1" + i[7] + "0".repeat(9 - i[7].length)) - 1e9), n;
  }
}
new eU();
const tU = 0, rU = 1, nU = 2, iU = 3, sU = 4, aU = 5, oU = {
  getPeerInfo: 0,
  updatePeerInfo: 1,
  getRoomPeersInfo: 2,
  joinRoom: 3,
  leaveRoom: 4,
  getRoomInfo: 5,
  updateRoomInfo: 6,
  closeRoom: 7,
  startedLivestream: 8,
  stoppedLivestream: 9,
  erroredLivestream: 10,
  getStagePeers: 11,
  getStageRequests: 12,
  requestStageAccess: 13,
  cancelStageRequest: 14,
  grantStageAccess: 15,
  denyStageAccess: 16,
  roomPeerCount: 17,
  joinStage: 18,
  leaveStage: 19,
  // getConnectedRoomsDump returns entire dump for a breakout rooms meeting
  // This details which peer is in which meeting currently, and which is the parent meeting
  getConnectedRoomsDump: 20,
  // createConnectedRooms to create breakout rooms
  createConnectedRooms: 21,
  // deleteConnectedRooms to delete breakout rooms
  deleteConnectedRooms: 22,
  // move peers between breakout rooms
  movePeers: 23,
  // transfer peer to new room
  transferPeer: 24,
  // message sent by socket service to inform client of a participant joining a breakout room
  movedPeer: 25,
  // message sent by socket service to inform client of updates in connected rooms
  connectedRoomsUpdated: 26,
  // message sent by socket service to inform client of deletion in connected rooms
  connectedRoomsDeleted: 27,
  // get all participants that have been added to the meeting irrespective of their live status
  getAllAddedParticipants: 28,
  // broadcast api
  broadcastMessage: 29,
  kick: 30,
  kickAll: 31,
  transcript: 32,
  // waitlist events
  getWaitingRoomRequests: 33,
  acceptWaitingRoomRequests: 34,
  waitingRoomRequestAccepted: 35,
  denyWaitingRoomRequests: 36,
  waitingRoomRequestDenied: 37,
  peerStageStatusUpdate: 38,
  broadcastToPeers: 39,
  recordingStarted: 40,
  recordingStopped: 41,
  recordingPaused: 42,
  getRoomStageState: 43
}, cU = {
  getMessages: 0,
  sendMessageToRoom: 1,
  sendMessageToPeers: 2,
  editMessage: 3,
  deleteMessage: 4,
  getPaginatedMessages: 5,
  sendMessageToChannel: 6,
  searchChannelMessages: 7,
  getAllChatChannels: 8,
  markChannelIndexAsRead: 9,
  pinMessage: 10
}, dU = {
  getPlugins: 0,
  addPlugin: 1,
  enablePluginForRoom: 2,
  disablePluginForPeers: 3,
  enablePluginForPeers: 4,
  disablePluginForRoom: 5,
  removePlugin: 6,
  customPluginEventToRoom: 7,
  customPluginEventToPeers: 8,
  storeInsertKeys: 9,
  storeGetKeys: 10,
  storeDeleteKeys: 11,
  storeDelete: 12
}, uU = {
  createPoll: 0,
  getPolls: 1,
  votePoll: 2,
  updatePoll: 3
}, lU = {
  unknown: 0,
  createWebRTCTransport: 1,
  produce: 2,
  consume: 3,
  toggleProducer: 4,
  toggleConsumer: 5,
  closeProducer: 6,
  closeConsumer: 7,
  // adding some buffers for new media events.
  joinRoom: 16,
  leaveRoom: 17,
  selectedPeer: 18,
  globalPinPeer: 19,
  selfJoinComplete: 20,
  // some additional buffer for broadcast events.
  peerJoinedBroadcast: 25,
  peerLeaveBroadcast: 26,
  peerProducerCreateBroadcast: 27,
  peerProducerToggleBroadcast: 28,
  peerProducerCloseBroadcast: 29,
  globalPeerPinBroadcast: 30,
  recordingStartedBroadcast: 31,
  recordingStoppedBroadcast: 32,
  peerDisplayNameEditBroadcast: 33,
  mediaRoomTerminationBroadcastResponse: 36,
  selectedPeerDiff: 40,
  renegotiateSessionDescription: 50,
  errorResponse: 60,
  kickPeer: 90,
  kickAll: 91,
  changeDisplayName: 92,
  hostControlPeer: 93,
  hostControlAllPeers: 94
}, hU = {
  createChatChannel: 0,
  getChatChannel: 1,
  deprecatedGetAllChatChannels: 2,
  getChannelMembers: 3,
  updateChatChannel: 4
}, fU = {
  getUserPresets: 0,
  updateUserPreset: 1
};
function di(t, e) {
  return Object.keys(e).reduce((r, n) => (r[n] = (t << 16) + e[n], r), {});
}
function pU(t) {
  return Object.keys(t).reduce((e, r) => (e[r] = 16777216 | t[r], e), {});
}
const pr = di(tU, oU);
di(rU, cU);
di(
  nU,
  dU
);
di(iU, uU);
di(
  sU,
  hU
);
pU(lU);
di(
  aU,
  fU
);
const Pr = class {
  static handleConnectedRoomsDumpRaw({ payload: e }) {
    var s;
    const r = DL.fromBinary(e), n = r.meetings.map((a) => {
      var o;
      return {
        id: a.id,
        title: a.title,
        participants: (o = a.participants) != null ? o : []
      };
    });
    return {
      parentMeeting: {
        id: r.parentMeeting.id,
        title: r.parentMeeting.title,
        participants: (s = r.parentMeeting.participants) != null ? s : []
      },
      meetings: n
    };
  }
  static handleTransferPeerRaw({ payload: e }) {
    const r = n$.fromBinary(e);
    return { authToken: r.authToken, meetingId: r.meetingId };
  }
  static handleMovedPeerRaw({ payload: e }) {
    const r = im.fromBinary(e);
    return {
      meetingId: r.meetingId,
      customParticipantId: r.customParticipantId
    };
  }
  static handleConnectedRoomsUpdatedRaw({ payload: e }) {
    return vl.fromBinary(e).payloads.map((n) => ({
      id: n.id,
      title: n.title
    }));
  }
  static handleConnectedRoomsDeletedRaw({ payload: e }) {
    return KL.fromBinary(e).payloads;
  }
  static getConnectedRoomsDump() {
    return p(this, null, function* () {
      const e = yield Pr.socketService.sendMessagePromise(
        pr.getConnectedRoomsDump
      );
      return Pr.handleConnectedRoomsDumpRaw(e);
    });
  }
  static createConnectedRooms(e) {
    return p(this, null, function* () {
      const { payload: r } = yield Pr.socketService.sendMessagePromise(
        pr.createConnectedRooms,
        xL.toBinary({ payloads: e })
      );
      return vl.fromBinary(r).payloads.map((i) => ({
        id: i.id,
        title: i.title
      }));
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  static updateConnectedRooms(e) {
    return p(this, null, function* () {
    });
  }
  static disableConnectedRooms(e) {
    return p(this, null, function* () {
      const r = e.map((i) => ({ id: i })), n = yield Pr.socketService.sendMessagePromise(
        pr.deleteConnectedRooms,
        WL.toBinary({ payloads: r })
      );
      return Pr.handleConnectedRoomsDeletedRaw(
        n
      );
    });
  }
  static movePeersBetweenRooms(e) {
    return p(this, null, function* () {
      try {
        const r = yield Pr.socketService.sendMessagePromise(
          pr.movePeers,
          ZL.toBinary({
            sourceMeetingId: e.sourceMeetingId,
            destinationMeetingId: e.destinationMeetingId,
            participants: e.participants
          })
        );
        return new TextDecoder().decode(r.payload).includes("error") ? { success: !1, error: "failed to move participants" } : { success: !0 };
      } catch (r) {
        return { success: !1, error: r };
      }
    });
  }
};
let Te = Pr;
_(Te, "socketService"), _(Te, "currentMeetingId");
var Gi;
class mU extends mt {
  constructor(r) {
    super();
    b(this, Gi, void 0);
    _(this, "meetings", []);
    _(this, "parentMeeting", null);
    y(this, Gi, r.self);
  }
  get supportsConnectedMeetings() {
    return d(this, Gi).id !== "" && Qe.isV2AuthToken && ae.hasFeature(oe.CONNECTED_MEETINGS);
  }
  get isActive() {
    return this.meetings.length !== 0;
  }
  // eslint-disable-next-line class-methods-use-this
  get currentMeetingId() {
    return Te.currentMeetingId;
  }
  validateConnectedMeetingsAction() {
    if (!this.supportsConnectedMeetings)
      throw new Error(`You are not allowed to perform this action.
						Please connect with Dyte team to move you to V2 APIs & to enable connected meetings.`);
  }
  /**
   * get connected meeting state
   */
  getConnectedMeetings() {
    return p(this, null, function* () {
      return this.validateConnectedMeetingsAction(), yield Te.getConnectedRoomsDump();
    });
  }
  /**
   * create connected meetings
   */
  createMeetings(r) {
    return p(this, null, function* () {
      return this.validateConnectedMeetingsAction(), (yield Te.createConnectedRooms(
        r
      )).map((i) => ({
        id: i.id,
        title: i.title
      }));
    });
  }
  /**
   * update meeting title
   */
  updateMeetings(r) {
    return p(this, null, function* () {
      this.validateConnectedMeetingsAction(), yield Te.updateConnectedRooms(
        r.map((n) => ({ meetingId: n.id, title: n.title }))
      );
    });
  }
  /**
   * delete connected meetings
   */
  deleteMeetings(r) {
    return p(this, null, function* () {
      this.validateConnectedMeetingsAction();
      const n = this.meetings.map((s) => r.includes(s.id) && s.participants.length !== 0 ? this.moveParticipants(
        s.id,
        this.parentMeeting.id,
        s.participants.map((a) => a.id)
      ) : Promise.resolve());
      return yield Promise.all(n), yield Te.disableConnectedRooms(
        r
      );
    });
  }
  /**
   * Trigger event to move participants
   *
   * @param {string} sourceMeetingId - id of source meeting
   * @param {string} destinationMeetingId - id of destination meeting
   * @param {string[]} participantIds - list of id of the participants
   */
  moveParticipants(r, n, i) {
    return p(this, null, function* () {
      this.validateConnectedMeetingsAction();
      const s = /* @__PURE__ */ new Map();
      [
        ...this.parentMeeting.participants,
        ...this.meetings.flatMap((o) => o.participants)
      ].forEach(
        (o) => s.set(o.id, o)
      );
      const a = yield Te.movePeersBetweenRooms(
        {
          sourceMeetingId: r,
          destinationMeetingId: n,
          participants: i.map((o) => ({ id: o }))
        }
      );
      return a.success && (n === this.parentMeeting.id && (this.parentMeeting.participants = this.parentMeeting.participants.concat(
        i.map((o) => s.get(o))
      )), r === this.parentMeeting.id && (this.parentMeeting.participants = this.parentMeeting.participants.filter(
        (o) => !i.includes(o.id)
      )), this.meetings = this.meetings.map((o) => {
        if (n === o.id) {
          const c = o.participants.concat(
            i.map((u) => s.get(u))
          );
          return Ue(Y({}, o), {
            participants: c
          });
        }
        if (r === o.id) {
          const c = o.participants.filter(
            (u) => !i.includes(u.id)
          );
          return Ue(Y({}, o), {
            participants: c
          });
        }
        return o;
      })), a;
    });
  }
}
Gi = new WeakMap();
var gU = Object.defineProperty, _U = Object.getOwnPropertyDescriptor, Td = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? _U(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && gU(e, r, i), i;
}, fn, pn, To;
const Ir = (To = class {
  constructor(t, e) {
    _(this, "connectedMeetings");
    b(this, fn, void 0);
    b(this, pn, void 0);
    y(this, fn, e), this.connectedMeetings = new mU(t), this.setCurrentMeeting(t);
  }
  static init(t, e) {
    return Ir.instance || (Ir.instance = new Ir(
      t,
      e
    )), Ir.instance.connectedMeetings.supportsConnectedMeetings && (Ir.instance.setupEvents(), t.self.once(
      "roomJoined",
      () => Ir.instance.getConnectedMeetings()
    )), Ir.instance;
  }
  setCurrentMeeting(t) {
    y(this, pn, t), Te.currentMeetingId = t.meta.roomName;
  }
  getConnectedMeetings() {
    this.connectedMeetings.getConnectedMeetings();
  }
  setupEvents() {
    Te.socketService && (Te.socketService.on(
      pr.getConnectedRoomsDump,
      this.handleConnectedRoomsDump.bind(this)
    ), Te.socketService.on(
      pr.transferPeer,
      this.handleTransferPeer.bind(this)
    ), Te.socketService.on(
      pr.movedPeer,
      this.handleMovedPeer.bind(this)
    ), Te.socketService.on(
      pr.connectedRoomsUpdated,
      this.handleConnectedRoomsUpdated.bind(this)
    ), Te.socketService.on(
      pr.connectedRoomsDeleted,
      this.handleConnectedRoomsDeleted.bind(this)
    ));
  }
  // event handlers
  handleTransferPeer(t) {
    const e = Te.handleTransferPeerRaw(t);
    return this.switchMeeting(e);
  }
  switchMeeting(r) {
    return p(this, arguments, function* ({
      authToken: t,
      meetingId: e
    }) {
      if (!this.connectedMeetings.supportsConnectedMeetings)
        throw new Error(`You are not allowed to perform this action.
								Please connect with Dyte team to move you to V2 APIs & to enable connected meetings.`);
      this.connectedMeetings.emit("changingMeeting", e);
      const n = d(this, pn).self.videoEnabled;
      yield d(this, pn).leave("connected-meeting"), Te.socketService = void 0;
      const i = yield EU.init({
        authToken: t,
        baseURI: d(this, fn).baseURI,
        defaults: Ue(Y({}, d(this, fn).defaults), {
          video: n,
          audio: !1
        }),
        modules: d(this, fn).modules
      });
      i.self.setName(d(this, pn).self.name);
      try {
        yield i.join();
      } catch (s) {
        v.addLogInCurrentSpan("error", "ConnectedMeetingsController.joinRoom", { error: s });
      }
      return this.connectedMeetings.emit("meetingChanged", i), this.setCurrentMeeting(i), i;
    });
  }
  handleConnectedRoomsDump(t) {
    const e = Te.handleConnectedRoomsDumpRaw(t);
    this.connectedMeetings.meetings = e.meetings.map((r) => ({
      id: r.id,
      title: r.title,
      participants: r.participants || []
    })), this.connectedMeetings.parentMeeting = {
      id: e.parentMeeting.id,
      title: e.parentMeeting.title,
      participants: e.parentMeeting.participants
    }, this.emitStateUpdate();
  }
  // eslint-disable-next-line class-methods-use-this
  handleMovedPeer(t) {
    return Te.handleMovedPeerRaw(t);
  }
  handleConnectedRoomsUpdated(t) {
    const e = Te.handleConnectedRoomsUpdatedRaw(t), r = /* @__PURE__ */ new Map();
    this.connectedMeetings.meetings.forEach((n) => {
      r.set(n.id, n);
    }), e.forEach((n) => {
      r.has(n.id) ? r.get(n.id).title = n.title : r.set(n.id, Ue(Y({}, n), { participants: [] }));
    }), this.connectedMeetings.meetings = Array.from(r.values()), this.emitStateUpdate();
  }
  handleConnectedRoomsDeleted(t) {
    const r = Te.handleConnectedRoomsDeletedRaw(t).map((n) => n.id);
    this.connectedMeetings.meetings = this.connectedMeetings.meetings.filter(
      (n) => !r.includes(n.id)
    );
  }
  emitStateUpdate() {
    this.connectedMeetings.emit("stateUpdate", {
      meetings: this.connectedMeetings.meetings,
      parentMeeting: this.connectedMeetings.parentMeeting
    });
  }
}, fn = new WeakMap(), pn = new WeakMap(), _(To, "instance"), To);
let xa = Ir;
Td([
  v.trace("ConnectedMeetingsController.getConnectedMeetings")
], xa.prototype, "getConnectedMeetings", 1);
Td([
  v.trace("ConnectedMeetingsController.setupEvents")
], xa.prototype, "setupEvents", 1);
Td([
  v.trace("ConnectedMeetingsController.switchMeeting")
], xa.prototype, "switchMeeting", 1);
var TU = Object.defineProperty, vU = Object.getOwnPropertyDescriptor, ui = (t, e, r, n) => {
  for (var i = n > 1 ? void 0 : n ? vU(e, r) : e, s = t.length - 1, a; s >= 0; s--)
    (a = t[s]) && (i = (n ? a(e, r, i) : a(i)) || i);
  return n && i && TU(e, r, i), i;
}, qi, ea, am, vo;
let gr = (vo = class {
  constructor(e) {
    /**
     * attach the singleton controller to meeting instances
     * +-----------------------------+
     * | ConnectedMeetingsController |
     * +------+--------------+-------+
     *				|							|
     *	 +----v---+			+---v----+
     *	 |meeting1|			|meeting2|
     *	 +--------+			+--------+
     * */
    b(this, ea);
    b(this, qi, void 0);
    /**
     * The `self` object can be used to manipulate audio and video settings,
     * and other configurations for the local participant. This exposes methods
     * to enable and disable media tracks, share the user's screen, etc.
     */
    _(this, "self");
    /**
     * The `participants` object consists of 4 maps of participants,
     * `waitlisted`, `joined`, `active`, `pinned`. The maps are indexed by
     * `peerId`s, and the values are the corresponding participant objects.
     */
    _(this, "participants");
    /**
     * The `room` object stores information about the current meeting, such
     * as chat messages, polls, room name, etc.
     */
    _(this, "meta");
    /**
     * The `ai` object is used to interface with Dyte's AI features.
     * You can obtain the live meeting transcript and use other meeting AI
     * features such as summary, and agenda using this object.
     */
    _(this, "ai");
    /**
     * The `plugins` object stores information about the plugins available in
     * the current meeting. It exposes methods to activate and deactivate them.
     */
    _(this, "plugins");
    /**
     * The chat object stores the chat messages that were sent in the meeting.
     * This includes text messages, images, and files.
     */
    _(this, "chat");
    /**
     * The polls object stores the polls that were initiated in the meeting.
     * It exposes methods to create and vote on polls.
     */
    _(this, "polls");
    /**
     * The remote object stores the remote control requests for the meeting.
     * It exposes methods to request, accept and end the remote control.
     */
    _(this, "remote");
    /*
     * The recording object stores the recording state of the meeting.
     * It exposes methods to start and stop recording.
     */
    _(this, "recording");
    _(this, "livestream");
    _(this, "stage");
    _(this, "troubleshoot");
    /**
     * The __internals__ object exposes the internal tools & utilities such as features and logger
     * so that client can utilise the same to build their own feature based UI.
     * DyteLogger (__internals__.logger) can be used to send logs to Dyte's servers
     *	to inform Dyte of issues, if any, proactively.
     */
    _(this, "__internals__");
    this.self = e, this.participants = new qe(e), this.meta = new Fo(e, ct.GroupCall, "Meeting"), this.ai = new Ur(), this.plugins = new Yo(), this.chat = new Oe(e, this.participants), this.polls = new zo(e), this.recording = new Tn(e), this.livestream = new hd(e), this.stage = new Jr(e, this.participants, ct.GroupCall), this.troubleshoot = new oM(e), this.__internals__ = new ld(m, qp);
  }
  static init(e) {
    return p(this, null, function* () {
      var s, a, o, c, u, h;
      OO((s = e.overrides) != null ? s : {}), fe.init();
      const r = ot();
      if (window.__zone_symbol__DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION = !0, v.init(r, (o = (a = e.modules) == null ? void 0 : a.tracing) != null ? o : !0), m.info("DyteClient::init::options", {
        dyteClientInitOptions: Ue(Y({}, e), {
          // Storing only first and last 10 chars of authToken
          authToken: `${(c = e.authToken) == null ? void 0 : c.slice(
            0,
            10
          )}...${(u = e.authToken) == null ? void 0 : u.slice(-10)}`
        })
      }), !navigator.isReactNative && typeof window != "undefined") {
        window.addEventListener("error", (g) => {
          var E;
          !((E = g.filename) != null && E.includes("localhost")) && g.lineno !== 0 && m.error(
            "window::error",
            {
              error: g.error
            },
            !0
          );
        }), window.addEventListener(
          "unhandledrejection",
          (g) => {
            var E, R, I, S, k, O, W, C;
            m.error(
              "window::unhandledrejection",
              {
                error: g == null ? void 0 : g.reason,
                /**
                 * NOTE(ravindra-dyte):
                 * Network calls fail a lot for clients,
                 *	tracking more info to see where
                 *	*/
                networkCall: {
                  url: (R = (E = g == null ? void 0 : g.reason) == null ? void 0 : E.config) == null ? void 0 : R.url,
                  baseURL: (S = (I = g == null ? void 0 : g.reason) == null ? void 0 : I.config) == null ? void 0 : S.baseURL,
                  method: (O = (k = g == null ? void 0 : g.reason) == null ? void 0 : k.config) == null ? void 0 : O.method,
                  status: (W = g == null ? void 0 : g.reason) == null ? void 0 : W.status,
                  statusText: (C = g == null ? void 0 : g.reason) == null ? void 0 : C.statusText
                }
              },
              !0
            );
          }
        ), window.addEventListener("offline", () => {
          m.info("window::offline");
        }), window.addEventListener("online", () => {
          m.info("window::online");
        });
        const f = Y({
          chat: !0,
          participant: !0,
          plugin: !0,
          poll: !0,
          self: !0,
          meta: !0,
          permissions: !0,
          theme: !0,
          tracing: !0,
          devTools: {
            logs: !1
          },
          internals: !0,
          stage: !0,
          pip: !0
        }, e == null ? void 0 : e.modules);
        hD(Ue(Y({}, e), {
          modules: f,
          apiBase: "https://api.dyte.io"
        }));
      }
      DO(e.authToken, e.roomName), v.meetingMetadata.roomName = Qe.isV2AuthToken ? Qe.meetingId : e.roomName;
      const n = yield ve.__init__(), i = new gr(n);
      return j(h = i, ea, am).call(h, e), i;
    });
  }
  joinRoom() {
    return p(this, null, function* () {
      return this.self.roomJoined = !0, this.self.roomState = "joined", this.self.emit("roomJoined");
    });
  }
  leaveRoom(e) {
    return p(this, null, function* () {
      return this.self.roomJoined = !1, this.self.roomState = e != null ? e : "ended", this.self.emit("roomLeft", { state: e });
    });
  }
  join() {
    return p(this, null, function* () {
      return this.self.roomJoined = !0, this.self.roomState = "joined", this.self.emit("roomJoined");
    });
  }
  leave(e) {
    return p(this, null, function* () {
      return this.self.roomJoined = !1, this.self.roomState = e != null ? e : "ended", this.self.emit("roomLeft", { state: e });
    });
  }
  /**
   * The connectedMeetings object stores the connected meetings states.
   * It exposes methods to create/read/update/delete methods for connected meetings.
   */
  get connectedMeetings() {
    var e;
    return (e = d(this, qi)) == null ? void 0 : e.connectedMeetings;
  }
}, qi = new WeakMap(), ea = new WeakSet(), am = function(e) {
  y(this, qi, xa.init(
    this,
    e
  ));
}, _(vo, "DyteSelfMedia", Lp), vo);
ui([
  $e((t) => {
    throw new w(t.message, "0002");
  }),
  Lt.executeWithLock({
    methodName: "meeting.join",
    lockName: "DyteClient.join",
    timeout: 3e3
  })
], gr.prototype, "joinRoom", 1);
ui([
  $e((t) => {
    throw new w(t.message, "0003");
  })
], gr.prototype, "leaveRoom", 1);
ui([
  $e((t) => {
    throw new w(t.message, "0002");
  }),
  Lt.executeWithLock({
    methodName: "meeting.join",
    lockName: "DyteClient.join",
    timeout: 3e3
  })
], gr.prototype, "join", 1);
ui([
  $e((t) => {
    throw new w(t.message, "0003");
  })
], gr.prototype, "leave", 1);
ui([
  $e((t) => {
    throw new w(t.message, "0001");
  }),
  Lt.executeWithLock({
    methodName: "DyteClient.init",
    lockName: "DyteClient.init",
    timeout: 3e3
  })
], gr, "init", 1);
gr = ui([
  $e((t) => {
    throw new w(t.message, "0000");
  })
], gr);
const EU = gr;
export {
  EU as default
};
