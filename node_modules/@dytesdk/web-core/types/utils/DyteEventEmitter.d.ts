/// <reference types="node" />
import { EventEmitter } from 'events';
export default class DyteEventEmitter<T extends string | symbol> extends EventEmitter {
    emit(event: T, ...args: any[]): boolean;
    on(event: T, callback: (...args: any[]) => void): this;
    addListener(event: T, callback: (...args: any[]) => any): this;
    off(event: T, callback: (...args: any[]) => any): this;
    once(event: T, callback: (...args: any[]) => any): this;
    prependListener(event: T, callback: (...args: any[]) => any): this;
    prependOnceListener(event: T, callback: (...args: any[]) => any): this;
    removeListener(event: T, callback: (...args: any[]) => any): this;
    removeAllListeners(event?: T): this;
    listeners(event: T): Function[];
    listenerCount(event: T): number;
}
