import { TracerProvider, TextMapPropagator } from '@opentelemetry/api';
import { Resource } from '@opentelemetry/resources';
import { SDKRegistrationConfig, SpanExporter, SpanProcessor } from '@opentelemetry/sdk-trace-base';
import { ParentBasedSampler } from './Sampler';
import { Tracer } from './Tracer';
import { TracerConfig } from './types';
export declare type WebTracerConfig = TracerConfig;
export declare type PROPAGATOR_FACTORY = () => TextMapPropagator;
export declare type EXPORTER_FACTORY = () => SpanExporter;
export declare enum ForceFlushState {
    'resolved' = 0,
    'timeout' = 1,
    'error' = 2,
    'unresolved' = 3
}
export declare const DEFAULT_CONFIG: {
    sampler: ParentBasedSampler;
    forceFlushTimeoutMillis: number;
    generalLimits: {
        attributeValueLengthLimit: number;
        attributeCountLimit: number;
    };
    spanLimits: {
        attributeValueLengthLimit: number;
        attributeCountLimit: number;
        linkCountLimit: number;
        eventCountLimit: number;
    };
};
export declare class WebTracerProvider implements TracerProvider {
    private readonly _config;
    private readonly _registeredSpanProcessors;
    private readonly _tracers;
    activeSpanProcessor?: SpanProcessor;
    readonly resource: Resource;
    constructor(config: TracerConfig);
    getTracer(name: string, version?: string): Tracer;
    getActiveSpanProcessor(): SpanProcessor;
    register(config?: SDKRegistrationConfig): void;
    forceFlush(): Promise<void>;
    shutdown(): Promise<void>;
    protected _buildPropagatorFromEnv(): TextMapPropagator | undefined;
}
