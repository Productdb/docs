export interface OTLPExporterConfigBase {
    headers?: Record<string, string>;
    url: string;
}
export declare enum SpanKind {
    INTERNAL = 0,
    SERVER = 1,
    CLIENT = 2,
    PRODUCER = 3,
    CONSUMER = 4
}
export interface SpanStatus {
    code: SpanStatusCode;
    message?: string;
}
export declare enum SpanStatusCode {
    UNSET = 0,
    OK = 1,
    ERROR = 2
}
export interface SpanContext {
    traceId: string;
    spanId: string;
    isRemote?: boolean;
    traceFlags: number;
    traceState?: TraceState;
}
export interface SpanAttributes {
    [attributeKey: string]: SpanAttributeValue | undefined;
}
export declare type SpanAttributeValue = string | number | boolean | Array<null | undefined | string> | Array<null | undefined | number> | Array<null | undefined | boolean>;
export declare type HrTime = [number, number];
export declare type TimeInput = HrTime | number | Date;
export interface Link {
    context: SpanContext;
    attributes?: SpanAttributes;
}
export interface TimedEvent {
    time: HrTime;
    name: string;
    attributes?: SpanAttributes;
}
export declare class Resource {
    readonly attributes: ResourceAttributes;
    static readonly EMPTY: Resource;
    static empty(): Resource;
    static default(): Resource;
    constructor(attributes: ResourceAttributes);
    merge(other: Resource | null): Resource;
}
export interface TraceState {
    set(key: string, value: string): TraceState;
    unset(key: string): TraceState;
    get(key: string): string | undefined;
    serialize(): string;
}
export interface ResourceAttributes {
    [key: string]: number | string | boolean;
}
export interface InstrumentationLibrary {
    readonly name: string;
    readonly version?: string;
}
export interface ReadableSpan {
    readonly name: string;
    readonly kind: SpanKind;
    readonly spanContext: () => SpanContext;
    readonly parentSpanId?: string;
    readonly startTime: HrTime;
    readonly endTime: HrTime;
    readonly status: SpanStatus;
    readonly attributes: SpanAttributes;
    readonly links: Link[];
    readonly events: TimedEvent[];
    readonly duration: HrTime;
    readonly ended: boolean;
    readonly resource: Resource;
    readonly instrumentationLibrary: InstrumentationLibrary;
}
export declare class OTLPExporterError extends Error {
    readonly code?: number;
    readonly name: string;
    readonly data?: string;
    constructor(message?: string, code?: number, data?: string);
}
export interface ExportResult {
    code: ExportResultCode;
    error?: Error;
}
export declare enum ExportResultCode {
    SUCCESS = 0,
    FAILED = 1
}
export interface TimeOriginLegacy {
    timing: {
        fetchStart: number;
    };
}
export interface ExportServiceError {
    name: string;
    code: number;
    details: string;
    metadata: {
        [key: string]: unknown;
    };
    message: string;
    stack: string;
}
export interface IdGenerator {
    generateTraceId(): string;
    generateSpanId(): string;
}
export interface TracerConfig {
    resource?: Resource;
    idGenerator: IdGenerator;
}
export interface GeneralLimits {
    attributeValueLengthLimit?: number;
    attributeCountLimit?: number;
}
export interface SpanLimits {
    attributeValueLengthLimit?: number;
    attributeCountLimit?: number;
    linkCountLimit?: number;
    eventCountLimit?: number;
}
