import * as api from '@opentelemetry/api';
import { Tracer } from './Tracer';
import { InstrumentationLibrary, ReadableSpan, Resource, SpanAttributeValue, TimedEvent } from './types';
export declare class Span implements api.Span, ReadableSpan {
    private readonly _spanContext;
    readonly kind: api.SpanKind;
    readonly parentSpanId?: string;
    readonly attributes: api.SpanAttributes;
    readonly links: api.Link[];
    readonly events: TimedEvent[];
    readonly startTime: api.HrTime;
    readonly resource: Resource;
    readonly instrumentationLibrary: InstrumentationLibrary;
    name: string;
    status: api.SpanStatus;
    endTime: api.HrTime;
    private _ended;
    private _duration;
    private readonly _spanProcessor;
    private readonly _spanLimits;
    private readonly _attributeValueLengthLimit;
    constructor(parentTracer: Tracer, context: api.Context, spanName: string, spanContext: api.SpanContext, kind: api.SpanKind, parentSpanId?: string, links?: api.Link[], startTime?: api.TimeInput);
    spanContext(): api.SpanContext;
    setAttribute(key: string, value?: SpanAttributeValue): this;
    setAttributes(attributes: api.SpanAttributes): this;
    addEvent(name: string, attributesOrStartTime?: api.SpanAttributes | api.TimeInput, startTime?: api.TimeInput): this;
    setStatus(status: api.SpanStatus): this;
    updateName(name: string): this;
    end(endTime?: api.TimeInput): void;
    isRecording(): boolean;
    recordException(exception: api.Exception, time?: api.TimeInput): void;
    get duration(): api.HrTime;
    get ended(): boolean;
    private _isSpanEnded;
    private _truncateToLimitUtil;
    private _truncateToSize;
}
