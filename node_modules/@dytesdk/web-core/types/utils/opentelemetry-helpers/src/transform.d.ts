import { opentelemetryProto } from './export-types';
import { InstrumentationLibrary, ReadableSpan, Resource, SpanAttributes, SpanKind, SpanStatus, TimedEvent, TraceState } from './types';
export declare function groupSpansByResourceAndLibrary(spans: ReadableSpan[]): Map<Resource, Map<InstrumentationLibrary, ReadableSpan[]>>;
export declare function toOTLPExportTraceServiceRequest(spans: ReadableSpan[]): opentelemetryProto.collector.trace.v1.ExportTraceServiceRequest;
export declare function toCollectorResource(resource?: Resource, additionalAttributes?: {
    [key: string]: unknown;
}): opentelemetryProto.resource.v1.Resource;
export declare function toCollectorAttributeKeyValue(key: string, value: unknown): opentelemetryProto.common.v1.KeyValue;
export declare function toCollectorAnyValue(value: unknown): opentelemetryProto.common.v1.AnyValue;
export declare function toCollectorArrayValue(values: unknown[]): opentelemetryProto.common.v1.ArrayValue;
export declare function toCollectorKeyValueList(attributes: SpanAttributes): opentelemetryProto.common.v1.KeyValueList;
export declare function toCollectorTraceState(traceState?: TraceState): opentelemetryProto.trace.v1.Span.TraceState | undefined;
export declare const OTLP_SPAN_KIND_MAPPING: {
    0: opentelemetryProto.trace.v1.Span.SpanKind;
    1: opentelemetryProto.trace.v1.Span.SpanKind;
    2: opentelemetryProto.trace.v1.Span.SpanKind;
    3: opentelemetryProto.trace.v1.Span.SpanKind;
    4: opentelemetryProto.trace.v1.Span.SpanKind;
};
export declare function toCollectorKind(kind: SpanKind): opentelemetryProto.trace.v1.Span.SpanKind;
export declare function toCollectorAttributes(attributes: SpanAttributes): opentelemetryProto.common.v1.KeyValue[];
export declare function toCollectorEvents(timedEvents: TimedEvent[]): opentelemetryProto.trace.v1.Span.Event[];
export declare function toCollectorStatus(status: SpanStatus): opentelemetryProto.trace.v1.SpanStatus;
export declare function toCollectorSpan(span: ReadableSpan): opentelemetryProto.trace.v1.Span;
