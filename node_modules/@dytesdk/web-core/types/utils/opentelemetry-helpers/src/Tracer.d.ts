import { Context, SpanOptions } from "@opentelemetry/api";
import { Resource } from "@opentelemetry/resources";
import { GeneralLimits, SpanLimits, SpanProcessor } from "@opentelemetry/sdk-trace-base";
import { Span } from "./Span";
import { InstrumentationLibrary, TracerConfig } from "./types";
import { WebTracerProvider } from "./WebTracer";
export declare enum TraceFlags {
    NONE = 0,
    SAMPLED = 1
}
export declare class Tracer {
    private _tracerProvider;
    private readonly _sampler;
    private readonly _generalLimits;
    private readonly _spanLimits;
    private readonly _idGenerator;
    readonly resource: Resource;
    readonly instrumentationLibrary: InstrumentationLibrary;
    constructor(instrumentationLibrary: InstrumentationLibrary, config: TracerConfig, _tracerProvider: WebTracerProvider);
    startSpan(name: string, options?: SpanOptions, c?: Context): Span;
    startActiveSpan<F extends (span: Span) => ReturnType<F>>(name: string, fn: F): ReturnType<F>;
    startActiveSpan<F extends (span: Span) => ReturnType<F>>(name: string, opts: SpanOptions, fn: F): ReturnType<F>;
    startActiveSpan<F extends (span: Span) => ReturnType<F>>(name: string, opts: SpanOptions, ctx: Context, fn: F): ReturnType<F>;
    getGeneralLimits(): GeneralLimits;
    getSpanLimits(): SpanLimits;
    getActiveSpanProcessor(): SpanProcessor;
}
