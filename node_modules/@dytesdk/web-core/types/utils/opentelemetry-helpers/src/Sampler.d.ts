import { Context, Sampler, SamplingResult } from '@opentelemetry/api';
import { Link, SpanAttributes, SpanKind } from './types';
export declare class AlwaysOnSampler implements Sampler {
    shouldSample(): SamplingResult;
    toString(): string;
}
export declare enum TraceFlags {
    NONE = 0,
    SAMPLED = 1
}
export declare class AlwaysOffSampler implements Sampler {
    shouldSample(): SamplingResult;
    toString(): string;
}
export declare class ParentBasedSampler implements Sampler {
    private _root;
    private _remoteParentSampled;
    private _remoteParentNotSampled;
    private _localParentSampled;
    private _localParentNotSampled;
    constructor(config: ParentBasedSamplerConfig);
    shouldSample(context: Context, traceId: string, spanName: string, spanKind: SpanKind, attributes: SpanAttributes, links: Link[]): SamplingResult;
    toString(): string;
}
interface ParentBasedSamplerConfig {
    root: Sampler;
    remoteParentSampled?: Sampler;
    remoteParentNotSampled?: Sampler;
    localParentSampled?: Sampler;
    localParentNotSampled?: Sampler;
}
export {};
