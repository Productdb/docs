import { Baggage, BaggageEntryMetadata, Context, TextMapGetter, TextMapPropagator, TextMapSetter } from '@opentelemetry/api';
import { SpanContext } from './types';
export declare enum TraceFlags {
    NONE = 0,
    SAMPLED = 1
}
export declare const TRACE_PARENT_HEADER = "traceparent";
export declare const TRACE_STATE_HEADER = "tracestate";
export interface CompositePropagatorConfig {
    propagators?: TextMapPropagator[];
}
export declare class CompositePropagator implements TextMapPropagator {
    private readonly _propagators;
    private readonly _fields;
    constructor(config?: CompositePropagatorConfig);
    inject(context: Context, carrier: unknown, setter: TextMapSetter): void;
    extract(context: Context, carrier: unknown, getter: TextMapGetter): Context;
    fields(): string[];
}
export declare function suppressTracing(context: Context): Context;
export declare function unsuppressTracing(context: Context): Context;
export declare function isTracingSuppressed(context: Context): boolean;
export declare function parseTraceParent(traceParent: string): SpanContext | null;
export declare class W3CTraceContextPropagator implements TextMapPropagator {
    inject(context: Context, carrier: unknown, setter: TextMapSetter): void;
    extract(context: Context, carrier: unknown, getter: TextMapGetter): Context;
    fields(): string[];
}
export declare function validateKey(key: string): boolean;
export declare function validateValue(value: string): boolean;
export declare class TraceState {
    private _internalState;
    constructor(rawTraceState?: string);
    set(key: string, value: string): TraceState;
    unset(key: string): TraceState;
    get(key: string): string | undefined;
    serialize(): string;
    private _parse;
    private _keys;
    private _clone;
}
export declare const BAGGAGE_KEY_PAIR_SEPARATOR = "=";
export declare const BAGGAGE_PROPERTIES_SEPARATOR = ";";
export declare const BAGGAGE_ITEMS_SEPARATOR = ",";
export declare const BAGGAGE_HEADER = "baggage";
export declare const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;
export declare const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;
export declare const BAGGAGE_MAX_TOTAL_LENGTH = 8192;
export declare function getKeyPairs(baggage: Baggage): string[];
export declare function serializeKeyPairs(keyPairs: string[]): string;
export declare class W3CBaggagePropagator implements TextMapPropagator {
    inject(context: Context, carrier: unknown, setter: TextMapSetter): void;
    extract(context: Context, carrier: unknown, getter: TextMapGetter): Context;
    fields(): string[];
}
declare type ParsedBaggageKeyValue = {
    key: string;
    value: string;
    metadata: BaggageEntryMetadata | undefined;
};
export declare function parsePairKeyValue(entry: string): ParsedBaggageKeyValue | undefined;
export {};
