import { types as MediaSoup } from '@dyteinternals/mediasoup-client';
import { MediaProductionPermissionType } from '@dyteinternals/utils';
import { SpotlightTabType } from '../../client/DyteSpotlight';
import { DyteMediaStreamConstraints } from '../../media/LocalMediaInterfaces';
import { PRODUCERS_TYPE } from '../../roomNode/RoomNodeConfig';
import { MediaPermission } from '../media';
import createSafeToLogError from './safeToLogErrorCreator';
import type { RecordingState } from '../../client/DyteRecording';
import { WebinarStageStatus } from '../../client/DyteSelf';
import { CanProduceType } from '../../client/DytePermissionsPresetV1';
import { StageStatus } from '../../client/DyteStage';
import { DyteClientOptions } from '../../client/DyteClient';
export declare type SupportedEventSeverities = 'info' | 'error' | 'debug' | 'log' | 'warn';
export declare type LogData = {
    error?: ReturnType<typeof createSafeToLogError>;
    flags?: string | {
        [key: string]: {
            enabled: boolean;
            value: string | number | boolean;
        };
    };
    devices?: string | MediaDeviceInfo[];
    debuggingHint?: string;
    constraints?: string | DyteMediaStreamConstraints;
    timeout?: number;
    media?: {
        audio?: {
            enabled: boolean;
            deviceName?: string;
            deviceId?: string;
            trackId?: string;
            permission?: keyof typeof MediaPermission;
            canProduce?: CanProduceType | MediaProductionPermissionType;
        };
        video?: {
            enabled: boolean;
            deviceName?: string;
            deviceId?: string;
            trackId?: string;
            permission?: keyof typeof MediaPermission;
            canProduce?: CanProduceType | MediaProductionPermissionType;
        };
        screenshare?: {
            enabled: boolean;
            count?: number;
            maxAllowedCount?: number;
            permission?: keyof typeof MediaPermission;
            deviceName?: string;
            deviceId?: string;
            audio?: {
                enabled: boolean;
                trackId?: string;
            };
            video?: {
                enabled: boolean;
                trackId?: string;
            };
            canProduce?: CanProduceType | MediaProductionPermissionType;
        };
    };
    preferredDevice?: {
        kind: 'audio' | 'video';
        preferredDeviceId?: string;
        lastUsedPreferredDeviceId?: string;
    };
    mediaPermissionsErrors?: {
        kind: 'audio' | 'video' | 'screenshare';
        message: string;
        deviceId?: string;
    };
    memoize?: {
        doubleInvoked?: {
            property: string;
        };
    };
    dyteClientInitOptions?: DyteClientOptions;
    plugin?: {
        id?: string;
        storeName?: string;
    };
    roomJoined?: boolean;
    transport?: {
        id: string;
        type: 'send' | 'recv';
        status: RTCPeerConnectionState | 'reconnecting';
        lastDisconnectedTime?: string;
        lastDisconnectedTimeOffset?: number;
        durationPassed?: number;
    };
    iceRestart?: {
        status?: RTCPeerConnectionState | 'reconnecting';
        isSendTransport?: boolean;
        isRecvTransport?: boolean;
        currentAttempt?: number;
    };
    producer?: {
        id: string;
        peerId?: string;
        kind: PRODUCERS_TYPE | MediaSoup.MediaKind;
        status: 'initializing' | 'producing' | 'paused' | 'failed' | 'closed' | 'UNKNOWN';
        appData: {
            screenShare?: boolean;
            supportsRemoteControl?: boolean;
        };
    };
    consumer?: {
        id: string;
        peerId: string;
        kind: MediaSoup.MediaKind | string;
        appData?: {
            screenShare?: boolean;
            supportsRemoteControl?: boolean;
        };
        remotelyPaused: boolean;
        producerId: string;
    };
    localStorage?: {
        key?: string;
        value?: string;
    };
    spotlight?: {
        spotlighter?: {
            id?: string;
        };
        currentTab?: {
            id?: string;
            type?: SpotlightTabType;
        };
    };
    networkCall?: {
        status?: number;
        statusText?: string;
        baseURL?: string;
        url?: string;
        retries?: number;
        method?: string;
        isOnline?: string;
        ip?: any;
        timezone?: string;
    };
    dytePolls?: {
        hasQuestion?: boolean;
        optionsLength?: number;
    };
    dyteChat?: {
        imageType?: string;
        messageType?: string;
    };
    dyteParticipant?: {
        id: string;
    };
    actions?: {
        disableAllAudio?: {
            allowUnmute?: boolean;
        };
        trackRobustness?: {
            reacquireTrack?: boolean;
            eventType?: string;
        };
    };
    recording?: {
        id?: string;
        state?: RecordingState;
    };
    selectedPeer?: {
        oldIndex?: number;
        newIndex?: number;
        peerId?: string;
    };
    pageNavigation?: {
        viewMode: string;
        currentPage: number;
        pageCount: number;
        maxActiveParticipantsCount: number;
        settingPage?: number;
    };
    connectedMeetings?: {
        movement?: {
            sourceMeetingId?: string;
            destinationMeetingId?: string;
            totalParticipantsToMove?: number;
        };
    };
    webinar?: {
        stageStatus?: WebinarStageStatus;
    };
    livestream?: {
        stageStatus?: StageStatus;
    };
    moduleExists?: {
        self?: boolean;
    };
    performanceObserver?: {
        api: PerformanceEntry;
    };
    dyteLocker?: {
        methodName: string;
        lockName: string;
    };
};
