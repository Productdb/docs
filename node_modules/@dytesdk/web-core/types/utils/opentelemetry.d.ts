/// <reference types="node" />
import { Tracer } from '@opentelemetry/sdk-trace-base';
import { Span, PropagationAPI } from '@opentelemetry/api';
import type { SupportedEventSeverities, LogData as LogDataFormat } from './opentelemetry-helpers/logDataTypes';
export declare type EventSeverities = SupportedEventSeverities;
export declare type LogData = LogDataFormat;
export default class DyteTelemetry {
    static tracer: Tracer;
    static contextPropagator: PropagationAPI;
    static apiPerformanceObserver: PerformanceObserver;
    static rootSpan: Span;
    static logsCache: {
        [key: string]: any;
    }[];
    static logsProcessorTimer: NodeJS.Timer;
    static get logsEndpoint(): "https://api-silos-staging.dyte.io/otel/logs" | "https://api-silos.dyte.io/otel/logs";
    static tracingEnabled: boolean;
    static initialized: boolean;
    static readonly logsProcessingInterval = 7000;
    static logExclusionList: string[];
    static meetingMetadata: {
        peerId?: string;
        roomName?: string;
        organizationId?: string;
        sdkVersion?: string;
        deviceInfo?: object;
        visitedUrl?: string;
        userId?: string;
    };
    static init(peerId: string, enableTracing: boolean): void;
    static initPerformanceObserver(): void;
    static trace(spanName: string): (_target: Object, _propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
    static getCurrentSpan(): Span;
    static getCurrentContext(): import("@opentelemetry/api").Context;
    static getCurrentSpanName(): any;
    static injectContext(injectionReceiver: any): void;
    static addLogInCurrentSpan(eventSeverity: EventSeverities, eventName: string, metadata?: LogData, noCache?: boolean): void;
    static sendOtelLogsToNewRelic(logs: object[]): void;
    static processCachedLogs(): void;
    static destruct(): void;
}
