import SelfController, { leaveRoomState } from './SelfController';
import ParticipantController from './ParticipantController';
import MetaController from './MetaController';
import PluginController from './PluginController';
import ChatController from './ChatController';
import PollController from './PollController';
import RemoteController from './RemoteController';
import RecordingController from './RecordingController';
import SpotlightController from './SpotlightController';
import InternalsController from './InternalsController';
import LivestreamController from './LivestreamController';
import StageController from './StageController';
import { RecordingConfig } from '../api/client/BaseAPIClient';
import TroubleshooterController from './TroubleshooterController';
import DyteSelfMedia from '../client/DyteSelfMedia';
export interface Modules {
    chat?: boolean;
    participant?: boolean;
    plugin?: boolean;
    poll?: boolean;
    self?: boolean;
    meta?: boolean;
    permissions?: boolean;
    theme?: boolean;
    remoteControl?: boolean;
    connectedMeetings?: boolean;
    recording?: boolean;
    spotlight?: boolean;
    livestream?: boolean;
    tracing?: boolean;
    devTools?: {
        logs: boolean;
        plugins?: {
            id: string;
            name: string;
            port: number;
            picture?: string;
            description?: string;
            staggered?: boolean;
        }[];
    };
    stage?: boolean;
}
export interface DefaultOptions {
    video?: boolean;
    audio?: boolean;
    screenShare?: {
        displaySurface?: 'window' | 'monitor' | 'browser';
    };
    recording?: RecordingConfig;
    mediaHandler?: DyteSelfMedia;
}
export interface ControllerOptions {
    roomName?: string;
    authToken: string;
    apiBase?: string;
    defaults?: DefaultOptions;
    modules?: Modules;
    peerId?: string;
    overrides?: {
        [key: string]: boolean | string;
    };
}
export interface TokenData {
    meetingId: string;
    participantId: string;
    orgId: string;
    orgConfigId: string;
    orgRoleId: string;
    meetingConfigId?: string;
    meetingRoleId?: string;
    participantConfigId?: string;
    participantRoleId?: string;
}
export default class Controller {
    readonly apiBase: string;
    readonly chatController: ChatController;
    readonly metaController: MetaController;
    readonly participantController: ParticipantController;
    readonly pluginController: PluginController;
    readonly pollController: PollController;
    readonly remoteController: RemoteController;
    readonly selfController: SelfController;
    readonly recordingController: RecordingController;
    readonly spotlightController: SpotlightController;
    readonly livestreamController: LivestreamController;
    readonly internalsController: InternalsController;
    readonly stageController: StageController;
    readonly troubleshooterController: TroubleshooterController;
    constructor(apiBase: string, metaController: MetaController, selfController: SelfController, pluginController: PluginController, participantController: ParticipantController, chatController: ChatController, pollController: PollController, remoteController: RemoteController, recordingController: RecordingController, spotlightController: SpotlightController, internalsController: InternalsController, livestreamController: LivestreamController, stageController: StageController, troubleshooterController: TroubleshooterController);
    static init(options: ControllerOptions, peerId: string): Promise<Controller>;
    private static createSocketServiceAndRoomNodeClient;
    private static createSocketService;
    joinRoom(): Promise<void>;
    leaveRoom(state?: leaveRoomState): Promise<void>;
}
