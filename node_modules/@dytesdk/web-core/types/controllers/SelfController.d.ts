import DyteSelf, { UserDetailsResponse } from '../client/DyteSelf';
import DyteThemePresetV1, { PresetThemeV1 } from '../client/DyteThemePresetV1';
import DytePermissionsPresetV1, { PresetPermissionsV1 } from '../client/DytePermissionsPresetV1';
import SocketService from '../socketService/SocketService';
import DytePermissionsPreset from '../client/DytePermissionsPreset';
import DyteThemePreset, { PresetV2CamelCased } from '../client/DyteThemePreset';
export interface UserPresetResponseV1 {
    permissions: PresetPermissionsV1;
    theme: PresetThemeV1;
    presetName: string;
}
export interface UserDetailsResponseV2 {
    participant: UserDetailsResponse;
    preset: PresetV2CamelCased;
}
export declare type leaveRoomState = 'kicked' | 'ended' | 'left' | 'rejected' | 'connected-meeting' | 'disconnected';
export default class SelfController {
    #private;
    readonly self: DyteSelf;
    readonly authToken: string;
    readonly peerId: string;
    private roomNodeSetupInProgress;
    private get roomJoined();
    private constructor();
    static init(socketService: SocketService, userResponse: UserDetailsResponse | UserDetailsResponseV2, permissions: DytePermissionsPresetV1 | DytePermissionsPreset, theme: DyteThemePresetV1 | DyteThemePreset, presetName: string): Promise<SelfController>;
    shareMediaTracks(): Promise<void>;
    private setupEvents;
    private setupRoomNode;
    joinRoom(): Promise<void>;
    leaveRoom(state?: leaveRoomState): Promise<void>;
    private joinMediaRoom;
    private leaveMediaRoom;
    private cleanupSelf;
}
