declare const MediaStreamTrackMock: import("@vitest/spy").Mock<[], {
    kind: import("@vitest/spy").Mock<any[], any>;
    id: import("@vitest/spy").Mock<any[], any>;
    label: import("@vitest/spy").Mock<any[], any>;
    enabled: boolean;
    muted: import("@vitest/spy").Mock<any[], any>;
    onmute: import("@vitest/spy").Mock<any[], any>;
    onended: import("@vitest/spy").Mock<any[], any>;
    contentHint: import("@vitest/spy").Mock<any[], any>;
    applyConstraints: import("@vitest/spy").Mock<any[], any>;
    clone: import("@vitest/spy").Mock<any[], any>;
    getCapabilities: import("@vitest/spy").Mock<any[], any>;
    getConstraints: import("@vitest/spy").Mock<any[], any>;
    oncapturehandlechange: import("@vitest/spy").Mock<any[], any>;
    getSettings: import("@vitest/spy").Mock<any[], any>;
    addEventListener: (event: string, cb: () => Promise<void>) => void;
    removeEventListener: import("@vitest/spy").Mock<any[], any>;
    stop: import("@vitest/spy").Mock<[], void>;
    readyState: string;
    customResetReadyState: import("@vitest/spy").Mock<[], void>;
    emit: (event: 'mute' | 'ended') => Promise<void>;
}>;
export default MediaStreamTrackMock;
