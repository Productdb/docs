export declare type MicMetadata = {
    label?: string;
    channelCount?: number;
    channelCountMode?: ChannelCountMode;
    channelType?: 'MONO' | 'STEREO' | 'QUAD';
    channelInterpretation?: ChannelInterpretation;
    outputs?: number;
};
interface MicTestConfig {
    lowVolumeThreshold?: number;
    clipThreshold?: number;
    silentThreshold?: number;
    delay?: number;
    media?: 'screenshare' | 'audio';
}
export declare const defaultTestConfig: MicTestConfig;
export declare class MicTest {
    #private;
    analyser: AnalyserNode | undefined;
    silentThreshold: number;
    lowVolumeThreshold: number;
    clipThreshold: number;
    delay: number;
    audioContext: AudioContext | undefined;
    audioSource: MediaStreamAudioSourceNode | undefined;
    metadata: MicMetadata;
    analysing: boolean;
    track: MediaStreamTrack | undefined;
    constructor(testConfig?: MicTestConfig);
    setTrack(audioTrack: MediaStreamTrack | undefined): void;
    getTrackMetadata(): MicMetadata;
    startTrackAnalysis(): Promise<boolean>;
    stopTrackAnalysis(): void;
    cleanup(): void;
    static dbFS(gain: number): number;
}
declare const micTest: MicTest;
export declare const screenshareMicTest: MicTest;
export default micTest;
