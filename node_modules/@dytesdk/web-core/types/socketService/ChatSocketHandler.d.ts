import { DeleteChatMessageResponse, EditChatMessageResponse, GetPaginatedChatMessageRoomResponse, SendChatMessageToPeersResponse, SendChatMessageToRoomResponse } from '@dyte-in/proto-entities';
import SocketService from './SocketService';
export declare enum ChatMessageType {
    TEXT = 0,
    IMAGE = 1,
    FILE = 2
}
declare type ChatSocketMessage = SendChatMessageToRoomResponse | SendChatMessageToPeersResponse | EditChatMessageResponse | DeleteChatMessageResponse;
export interface SearchFilters {
    channelId?: string;
    timestamp?: number;
    size?: number;
    reversed?: boolean;
}
export interface ChatMessage {
    chatId: string;
    peerId: string;
    userId: string;
    displayName: string;
    pinned: boolean;
    isEdited: boolean;
    payloadType: number;
    payload: string;
    targetUserIds: string[];
    createdAt: number;
    createdAtMs?: number;
    channelId?: string;
}
export default class ChatSocketHandler {
    #private;
    constructor(socketService: SocketService);
    getChatMessages(): Promise<{
        id: string;
        payload: Uint8Array;
    }>;
    getChatMessagesPaginated(timeStamp: number, size: number, reversed: boolean, offset?: number, channelId?: string): Promise<GetPaginatedChatMessageRoomResponse>;
    sendMessageToRoom(message: string, messageType: ChatMessageType): void;
    sendMessageToPeers(message: string, messageType: ChatMessageType, peerIds: string[]): void;
    sendMessageToChannel(message: string, messageType: ChatMessageType, channelId: string): void;
    sendMessage(message: string, messageType: ChatMessageType, peerIds?: string[], channelId?: string): void;
    editMessage(chatId: string, message: string, payloadType: ChatMessageType, channelId?: string): Promise<ChatMessage>;
    deleteMessage(chatId: string, channelId?: string): Promise<{
        channelId?: string;
        id: string;
    }>;
    searchMessages(query: string, filters: SearchFilters): Promise<ChatMessage[]>;
    on(event: number, handler: (socketMessage: ChatSocketMessage) => void): void;
}
export {};
