import { DenyStageAccessRequest, GetStagePeersResponse, GetStageRequestsResponse } from '@dyte-in/proto-entities';
import SocketService from './SocketService';
export declare type StageSocketMessage = GetStagePeersResponse | GetStageRequestsResponse | GetStagePeersResponse | DenyStageAccessRequest;
export default class StageSocketHandler {
    #private;
    constructor(socketService: SocketService);
    getStageRequests(): Promise<GetStageRequestsResponse>;
    requestAccess(): void;
    cancelRequestAccess(): void;
    grantAccess(userIds: string[]): Promise<void>;
    denyAccess(userIds: string[]): Promise<void>;
    joinStage(): boolean;
    leaveStage(userId: string): boolean;
    kick(userIds: string[]): Promise<{
        id: string;
        payload: Uint8Array;
    }>;
    on(event: number, handler: (socketMessage: StageSocketMessage, messageId?: string) => void): void;
}
