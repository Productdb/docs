var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteLogger from '../client/internals/DyteLogger';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteTelemetry from '../utils/opentelemetry';
import AudioMediaHandler from './handlers/AudioMediaHandler';
import AudioOutputMediaHandler from './handlers/AudioOutputMediaHandler';
import ScreenShareMediaHandler from './handlers/ScreenShareHandler';
import VideoMediaHandler from './handlers/VideoMediaHandler';
import WebMediaInterface from './interface/web/WebMediaInterface';
export default class LocalMediaHandler extends DyteEventEmitter {
    #mediaInterface;
    #audioMediaHandler;
    #videoMediaHandler;
    #audioOutputMediaHandler;
    #screenShareMediaHandler;
    constructor(presetMediaConstraints) {
        super();
        this.#mediaInterface = new WebMediaInterface(presetMediaConstraints);
        this.#audioMediaHandler = new AudioMediaHandler(this.#mediaInterface);
        this.#videoMediaHandler = new VideoMediaHandler(this.#mediaInterface);
        this.#screenShareMediaHandler = new ScreenShareMediaHandler(this.#mediaInterface);
        this.#audioOutputMediaHandler = new AudioOutputMediaHandler(this.#mediaInterface);
        this.#audioMediaHandler.on('trackMuted', this.onAudioTrackMuted.bind(this));
        this.#audioMediaHandler.on('trackChanged', this.onAudioTrackChanged.bind(this));
        this.#videoMediaHandler.on('trackChanged', this.onVideoTrackChanged.bind(this));
        this.#videoMediaHandler.on('trackEnded', this.onVideoTrackEnded.bind(this));
        this.#screenShareMediaHandler.on('trackEnded', this.onScreenShareEnded.bind(this));
    }
    async setupStreams({ audio, video }) {
        let audioTrack;
        let videoTrack;
        if (audio && video) {
            try {
                const audioTrackAndVideoTrack = await this.#mediaInterface.getAudioAndVideoTrack();
                audioTrack = audioTrackAndVideoTrack.audioTrack;
                videoTrack = audioTrackAndVideoTrack.videoTrack;
            }
            catch (error) {
                DyteLogger.error('LocalMediaHandler::init::Failed to get audio video tracks', {
                    error,
                });
            }
        }
        if (!audioTrack && audio) {
            try {
                audioTrack = await this.#mediaInterface.getAudioTrack(false);
            }
            catch (error) {
                DyteLogger.error('LocalMediaHandler::init::Failed to get audio track', {
                    error,
                });
            }
        }
        if (!videoTrack && video) {
            try {
                videoTrack = await this.#mediaInterface.getVideoTrack();
            }
            catch (error) {
                DyteLogger.error('LocalMediaHandler::init::Failed to get video track', {
                    error,
                });
            }
        }
        await this.#audioMediaHandler.setMediaTrack(audioTrack);
        await this.#videoMediaHandler.setMediaTrack(videoTrack);
        try {
            await this.#audioOutputMediaHandler.setupSpeaker();
        }
        catch {
        }
    }
    getCurrentDevices() {
        return {
            audio: this.#audioMediaHandler.currentDevice,
            video: this.#videoMediaHandler.currentDevice,
            speaker: this.#audioOutputMediaHandler.currentDevice,
        };
    }
    get permissions() {
        return this.#mediaInterface.permissions;
    }
    getAllDevices() {
        return this.#mediaInterface.getAvailableDevices();
    }
    getDeviceById(deviceId, kind) {
        return this.#mediaInterface.getDevice(deviceId);
    }
    onAudioTrackMuted() {
        this.emit('AUDIO_TRACK_SILENT');
    }
    onAudioTrackChanged() {
        this.emit('AUDIO_TRACK_CHANGE');
    }
    get rawAudioTrack() {
        return this.#audioMediaHandler.mediaTrack;
    }
    get audioTrack() {
        return this.#audioMediaHandler.transformedMediaTrack;
    }
    get audioEnabled() {
        return this.#audioMediaHandler.trackEnabled;
    }
    async enableAudio() {
        await this.#audioMediaHandler.unmuteTrack();
    }
    disableAudio() {
        this.#audioMediaHandler.muteTrack();
    }
    getAudioDevices() {
        return this.#mediaInterface.getAudioInputDevices();
    }
    async setAudioDevice(device) {
        await this.#audioMediaHandler.setDevice(device);
        this.emit('AUDIO_TRACK_CHANGE');
    }
    setupSpeaker() {
        return this.#audioOutputMediaHandler.setupSpeaker();
    }
    setSpeakerDevice(device) {
        return this.#audioOutputMediaHandler.setupSpeaker(device);
    }
    onVideoTrackChanged() {
        this.emit('VIDEO_TRACK_CHANGE');
    }
    onVideoTrackEnded() {
        this.emit('VIDEO_TRACK_CHANGE');
    }
    get rawVideoTrack() {
        return this.#videoMediaHandler.mediaTrack;
    }
    get videoTrack() {
        return this.#videoMediaHandler.transformedMediaTrack;
    }
    get videoEnabled() {
        return this.#videoMediaHandler.trackEnabled;
    }
    async enableVideo() {
        await this.#videoMediaHandler.unmuteTrack();
    }
    disableVideo() {
        this.#videoMediaHandler.disableTrack();
    }
    getVideoDevices() {
        return this.#mediaInterface.getVideoInputDevices();
    }
    async setVideoDevice(device) {
        await this.#videoMediaHandler.setDevice(device);
        this.emit('VIDEO_TRACK_CHANGE');
    }
    onScreenShareEnded() {
        this.emit('SCREENSHARE_ENDED');
    }
    get screenShareTracks() {
        return {
            audio: this.#screenShareMediaHandler.audioMediaTrack,
            video: this.#screenShareMediaHandler.videoMediaTrack,
        };
    }
    get screenShareEnabled() {
        return this.#screenShareMediaHandler.trackEnabled;
    }
    async enableScreenShare() {
        await this.#screenShareMediaHandler.enableScreenShare();
    }
    async disableScreenShare() {
        this.#screenShareMediaHandler.disableScreenShare();
    }
    getSpeakerDevices() {
        return this.#mediaInterface.getAudioOutputDevices();
    }
    addAudioMiddleware(audioMiddleware) {
        return this.#audioMediaHandler.addMiddleware(audioMiddleware);
    }
    removeAudioMiddleware(audioMiddleware) {
        return this.#audioMediaHandler.removeMiddleware(audioMiddleware);
    }
    addVideoMiddleware(videoMiddleware) {
        return this.#videoMediaHandler.addMiddleware(videoMiddleware);
    }
    removeVideoMiddleware(videoMiddleware) {
        return this.#videoMediaHandler.removeMiddleware(videoMiddleware);
    }
    destruct() {
        this.#audioMediaHandler.disableTrack();
        this.#videoMediaHandler.disableTrack();
        this.#videoMediaHandler.terminateMiddlewareWebWorker();
        this.#screenShareMediaHandler.disableScreenShare();
    }
    removeAllTracks() {
        this.destruct();
    }
    async removeDocumentEventListeners() { }
}
__decorate([
    DyteTelemetry.trace('MediaHandler.setupStreams'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], LocalMediaHandler.prototype, "setupStreams", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.enableAudio'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LocalMediaHandler.prototype, "enableAudio", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.disableAudio'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], LocalMediaHandler.prototype, "disableAudio", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.setAudioDevice'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MediaDeviceInfo]),
    __metadata("design:returntype", Promise)
], LocalMediaHandler.prototype, "setAudioDevice", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.enableVideo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LocalMediaHandler.prototype, "enableVideo", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.disableVideo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], LocalMediaHandler.prototype, "disableVideo", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.setVideoDevice'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MediaDeviceInfo]),
    __metadata("design:returntype", Promise)
], LocalMediaHandler.prototype, "setVideoDevice", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.enableScreenShare'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LocalMediaHandler.prototype, "enableScreenShare", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.disableScreenShare'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LocalMediaHandler.prototype, "disableScreenShare", null);
__decorate([
    DyteTelemetry.trace('MediaHandler.destruct'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], LocalMediaHandler.prototype, "destruct", null);
