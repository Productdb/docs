import DyteEventEmitter from '../utils/DyteEventEmitter';
import { LocalMediaEvents } from '../utils/DyteEvents';
import { PresetMediaConstraints } from './interface/web/ConstraintBuilder';
import { AudioMiddleware } from './middleware/AudioMiddlewareUtils';
import { VideoMiddleware } from './middleware/VideoMiddlewareUtils';
export default class LocalMediaHandler extends DyteEventEmitter<LocalMediaEvents> {
    #private;
    constructor(presetMediaConstraints: PresetMediaConstraints);
    setupStreams({ audio, video }: {
        audio: boolean;
        video: boolean;
    }): Promise<void>;
    getCurrentDevices(): {
        audio: MediaDeviceInfo;
        video: MediaDeviceInfo;
        speaker: MediaDeviceInfo;
    };
    get permissions(): {
        audio?: import("./interface/BaseMediaInterface").MediaPermission;
        video?: import("./interface/BaseMediaInterface").MediaPermission;
        screenshare?: import("./interface/BaseMediaInterface").MediaPermission;
    };
    getAllDevices(): Promise<MediaDeviceInfo[]>;
    getDeviceById(deviceId: string, kind?: 'audioinput' | 'audiooutput' | 'videoinput'): Promise<MediaDeviceInfo>;
    private onAudioTrackMuted;
    private onAudioTrackChanged;
    get rawAudioTrack(): MediaStreamTrack;
    get audioTrack(): MediaStreamTrack;
    get audioEnabled(): boolean;
    enableAudio(): Promise<void>;
    disableAudio(): void;
    getAudioDevices(): Promise<MediaDeviceInfo[]>;
    setAudioDevice(device: MediaDeviceInfo): Promise<void>;
    setupSpeaker(): Promise<void>;
    setSpeakerDevice(device: MediaDeviceInfo): Promise<void>;
    private onVideoTrackChanged;
    private onVideoTrackEnded;
    get rawVideoTrack(): MediaStreamTrack;
    get videoTrack(): MediaStreamTrack;
    get videoEnabled(): boolean;
    enableVideo(): Promise<void>;
    disableVideo(): void;
    getVideoDevices(): Promise<MediaDeviceInfo[]>;
    setVideoDevice(device: MediaDeviceInfo): Promise<void>;
    private onScreenShareEnded;
    get screenShareTracks(): {
        audio: MediaStreamTrack;
        video: MediaStreamTrack;
    };
    get screenShareEnabled(): boolean;
    enableScreenShare(): Promise<void>;
    disableScreenShare(): Promise<void>;
    getSpeakerDevices(): Promise<MediaDeviceInfo[]>;
    addAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<import("../utils/helpers").ResponseStatus>;
    removeAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<import("../utils/helpers").ResponseStatus>;
    addVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<import("../utils/helpers").ResponseStatus>;
    removeVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<import("../utils/helpers").ResponseStatus>;
    destruct(): void;
    removeAllTracks(): void;
    removeDocumentEventListeners(): Promise<void>;
}
