import { describe, expect, it, vi, } from 'vitest';
import setupMockedWindow from '../../../../__mocks__/window';
import { VIDEO_CONSTRAINTS } from '../../../roomNode/RoomNodeConfig';
import { DEFAULT_PRESET_MEDIA_CONSTRAINTS } from './ConstraintBuilder';
import WebMediaInterface from './WebMediaInterface';
setupMockedWindow();
vi.mock('../../../browser/BrowserCapabilities');
vi.mock('./ConstraintBuilder', async () => {
    const actual = await vi.importActual('./ConstraintBuilder');
    return {
        ...actual,
        getAudioConstraints: vi.fn(() => ({ audio: {} })),
        getVideoConstraints: vi.fn(() => ({ video: {} })),
    };
});
describe('Given WebMediaInterface is initialized', () => {
    describe('When initialized without presetConstraints', () => {
        it('Then it should add defaults for the missing presetConstraints', async () => {
            const mediaInterface = new WebMediaInterface();
            await mediaInterface.getAudioAndVideoTrack();
            const defaultDimension = VIDEO_CONSTRAINTS[DEFAULT_PRESET_MEDIA_CONSTRAINTS.video.quality];
            expect(navigator.mediaDevices.getUserMedia).toHaveBeenCalledWith(expect.objectContaining({
                video: {
                    ...defaultDimension,
                    facingMode: 'user',
                    frameRate: {
                        ideal: 24,
                        max: 30,
                    },
                },
            }));
        });
    });
    describe('When initialized with presetConstraints', () => {
        it('Then it should prioritize passed presetConstraints', async () => {
            const presetConstraints = {
                video: {
                    quality: 'hd',
                    frameRate: 60,
                },
                screenshare: {
                    quality: 'full_hd',
                    frameRate: 24,
                },
            };
            const mediaInterface = new WebMediaInterface(presetConstraints);
            await mediaInterface.getAudioAndVideoTrack();
            const defaultDimension = VIDEO_CONSTRAINTS[presetConstraints.video.quality];
            expect(navigator.mediaDevices.getUserMedia).toHaveBeenCalledWith(expect.objectContaining({
                video: {
                    ...defaultDimension,
                    facingMode: 'user',
                    frameRate: {
                        ideal: 24,
                        max: 30,
                    },
                },
            }));
        });
    });
});
