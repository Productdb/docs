import { getDefaultHybridPreset, globalFlagsmith } from '@dyteinternals/utils';
import { browserSpecs } from '../../../browser/BrowserCapabilities';
import { VIDEO_CONSTRAINTS } from '../../../roomNode/RoomNodeConfig';
import { objectToCamelCase } from '../../../utils/sanitizer';
import { FlagsmithFeatureFlags } from '../../../utils/flags';
import { config } from '../../../utils/config';
const defaultHybridPreset = getDefaultHybridPreset();
export const DEFAULT_PRESET_MEDIA_CONSTRAINTS = objectToCamelCase(defaultHybridPreset.config.media);
export class ConstraintBuilder {
    #presetMediaConstraints;
    constructor(mediaConstraints) {
        this.#presetMediaConstraints = mediaConstraints ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS;
    }
    getScreenShareConstraints = () => {
        const { displaySurface } = config.defaults.screenShare ?? {};
        let video = {
            width: { max: 1920 },
            height: { max: 1080 },
            frameRate: {
                ideal: parseInt(globalFlagsmith.getValue(FlagsmithFeatureFlags.VAL_MIN_FRAMERATE) ?? '5', 10),
                max: 5,
            },
        };
        if (displaySurface !== undefined && ['monitor', 'browser', 'window'].includes(displaySurface)) {
            video = { ...video, displaySurface };
        }
        return {
            audio: true,
            video,
        };
    };
    getAudioConstraints = (audioDeviceId) => {
        const constraints = {};
        if (browserSpecs.isFirefox() || browserSpecs.isWebKitBased()) {
            constraints.audio = {
                deviceId: audioDeviceId,
                autoGainControl: true,
                echoCancellation: true,
                noiseSuppression: true,
            };
            return constraints;
        }
        constraints.audio = {};
        constraints.audio.optional = [
            audioDeviceId
                ? { sourceId: audioDeviceId }
                : { sourceId: 'default' },
            { echoCancellation: true },
            { googEchoCancellation: true },
            { googAutoGainControl: true },
            { googNoiseSuppression: true },
            { googHighpassFilter: true },
        ];
        return constraints;
    };
    getVideoConstraints = (videoDeviceId) => {
        const constraints = {};
        const defaultQuality = VIDEO_CONSTRAINTS[this.#presetMediaConstraints.video.quality];
        const defaultFrameRate = {
            ideal: 24,
            max: 30,
        };
        constraints.video = defaultQuality;
        if (videoDeviceId) {
            constraints.video.deviceId = { exact: videoDeviceId };
        }
        else {
            constraints.video.facingMode = 'user';
        }
        constraints.video.frameRate = defaultFrameRate;
        return constraints;
    };
}
