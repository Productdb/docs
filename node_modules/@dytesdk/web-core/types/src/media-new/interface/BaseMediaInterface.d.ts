export declare type MediaPermission = 'NOT_REQUESTED' | 'ACCEPTED' | 'DENIED' | 'SYSTEM_DENIED' | 'COULD_NOT_START';
declare abstract class BaseMediaInterface {
    permissions: {
        audio?: MediaPermission;
        video?: MediaPermission;
        screenshare?: MediaPermission;
    };
    constructor();
    abstract getAvailableDevices(): Promise<MediaDeviceInfo[]>;
    abstract getDevice(deviceId: string): Promise<MediaDeviceInfo>;
    getAudioInputDevices(): Promise<MediaDeviceInfo[]>;
    getVideoInputDevices(): Promise<MediaDeviceInfo[]>;
    getAudioOutputDevices(): Promise<MediaDeviceInfo[]>;
    abstract getAudioAndVideoTrack(): Promise<{
        audioTrack: MediaStreamTrack;
        videoTrack: MediaStreamTrack;
    }>;
    abstract getAudioTrack(isMutedOnInit: boolean, deviceId?: string): Promise<MediaStreamTrack | undefined>;
    abstract getVideoTrack(deviceId?: string): Promise<MediaStreamTrack | undefined>;
    abstract getScreenShareTracks(): Promise<{
        audioTrack?: MediaStreamTrack;
        videoTrack?: MediaStreamTrack;
    }>;
}
export default BaseMediaInterface;
