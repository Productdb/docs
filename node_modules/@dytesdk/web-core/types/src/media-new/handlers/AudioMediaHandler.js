var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteError from '../../client/DyteError';
import DyteLogger from '../../client/internals/DyteLogger';
import DyteTelemetry from '../../utils/opentelemetry';
import { getTransformedAudioTrack } from '../middleware/AudioMiddlewareUtils';
import BaseMediaHandler from './BaseMediaHandler';
class AudioMediaHandler extends BaseMediaHandler {
    async setDevice(device) {
        if (!device) {
            DyteLogger.warn('AudioMediaHandler.setDevice No device received');
            throw new DyteError('No device received!', '1603');
        }
        if (device.kind !== 'audioinput') {
            DyteLogger.warn('AudioMediaHandler.setDevice Received non audio device');
            throw new DyteError('Non audio device received while setting device!', '1603');
        }
        try {
            const isTrackEnabled = this.trackEnabled;
            this.userSelectedDevice = device.deviceId;
            await this.setMediaTrack(await this.mediaInterface
                .getAudioTrack(!isTrackEnabled, device.deviceId));
        }
        catch (error) {
            DyteLogger.error('AudioMediaHandler.setDevice.error', {
                error,
            });
            this.disableTrack();
            throw new DyteError(error.message, '1604');
        }
    }
    async enableTrack(isMutedOnInit) {
        if (this.trackEnabled) {
            DyteLogger.warn('AudioMediaHandler.enableTrack Track already enabled!');
            return;
        }
        const audioTrack = await this.mediaInterface.getAudioTrack(isMutedOnInit, this.userSelectedDevice);
        await this.setMediaTrack(audioTrack);
    }
    async setTransformedTrack() {
        if (!this.middlewares?.length) {
            this.transformedMediaTrack = this.mediaTrack;
            return;
        }
        try {
            this.transformedMediaTrack = await getTransformedAudioTrack(this.middlewares, this.mediaTrack);
            this.emit('trackChanged');
        }
        catch (error) {
            DyteLogger.error('AudioMediaHandler.setTransformedTrack', {
                error,
            });
            this.transformedMediaTrack = this.mediaTrack;
        }
    }
    async onTrackEnded() {
        DyteLogger.info('AudioMediaHandler.TrackEnded');
        this.emit('trackEnded');
        const wasTrackEnabled = this.mediaTrack.enabled;
        this.disableTrack();
        await this.enableTrack(!wasTrackEnabled);
        await this.setTransformedTrack();
        this.emit('trackChanged');
    }
    onTrackMuted() {
        DyteLogger.info('AudioMediaHandler.TrackMuted');
        this.emit('trackMuted');
    }
}
__decorate([
    DyteTelemetry.trace('AudioMediaHandler.setTransformedTrack'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AudioMediaHandler.prototype, "setTransformedTrack", null);
__decorate([
    DyteTelemetry.trace('AudioMediaHandler.onTrackEnded'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AudioMediaHandler.prototype, "onTrackEnded", null);
export default AudioMediaHandler;
