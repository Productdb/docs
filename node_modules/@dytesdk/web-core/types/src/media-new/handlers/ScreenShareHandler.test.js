import { beforeEach, describe, expect, test, vi, } from 'vitest';
import setupMockedWindow from '../../../__mocks__/window';
import WebMediaInterface from '../interface/web/WebMediaInterface';
import ScreenShareMediaHandler from './ScreenShareHandler';
setupMockedWindow();
vi.mock('../../utils/opentelemetry');
vi.mock('../interface/web/WebMediaInterface');
let screenShareMediaHandler;
let webMediaInterface;
let videoMediaTrack;
let audioMediaTrack;
describe('Given ScreenShareMediaHandler is initialized', () => {
    beforeEach(async () => {
        webMediaInterface = new WebMediaInterface();
        videoMediaTrack = new MediaStreamTrack();
        audioMediaTrack = new MediaStreamTrack();
        webMediaInterface.getScreenShareTracks = vi.fn().mockResolvedValue({
            audioTrack: audioMediaTrack,
            videoTrack: videoMediaTrack,
        });
        screenShareMediaHandler = new ScreenShareMediaHandler(webMediaInterface);
    });
    describe('When enableScreenShare is called', () => {
        beforeEach(async () => {
            videoMediaTrack.addEventListener = vi.fn();
            await screenShareMediaHandler.enableScreenShare();
        });
        test('Then it should return the state of videoMediaTrack in trackEnabled', () => {
            expect(screenShareMediaHandler.trackEnabled).toBe(true);
        });
        test('Then audioMediaTrack and videoMediaTrack should be set', () => {
            expect(screenShareMediaHandler.audioMediaTrack).toBe(audioMediaTrack);
            expect(screenShareMediaHandler.videoMediaTrack).toBe(videoMediaTrack);
        });
        test('Then videoMediaTrack should have listeners added', () => {
            expect(videoMediaTrack.addEventListener).toBeCalled();
        });
    });
    describe('When disableScreenShare is called', () => {
        beforeEach(async () => {
            videoMediaTrack.removeEventListener = vi.fn();
            await screenShareMediaHandler.enableScreenShare();
            screenShareMediaHandler.disableScreenShare();
        });
        test('Then it should return the state of videoMediaTrack in trackEnabled', () => {
            expect(screenShareMediaHandler.trackEnabled).toBe(false);
        });
        test('Then audioMediaTrack and videoMediaTrack should be unset', () => {
            expect(screenShareMediaHandler.audioMediaTrack).toBeUndefined();
            expect(audioMediaTrack.stop).toBeCalled();
            expect(screenShareMediaHandler.videoMediaTrack).toBeUndefined();
            expect(videoMediaTrack.stop).toBeCalled();
        });
        test('Then videoMediaTrack should have listeners removed', () => {
            expect(videoMediaTrack.removeEventListener).toBeCalled();
        });
    });
    describe('When the track is ended', () => {
        beforeEach(async () => {
            screenShareMediaHandler.emit = vi.fn();
            await screenShareMediaHandler.enableScreenShare();
            videoMediaTrack.emit('ended');
        });
        test('Then emit should be called on screenShareMediaHandler', () => {
            expect(screenShareMediaHandler.emit).toBeCalledWith('trackEnded');
        });
    });
});
