var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteError from '../../client/DyteError';
import DyteLogger from '../../client/internals/DyteLogger';
import DyteTelemetry from '../../utils/opentelemetry';
import VideoMiddlewareUtils from '../middleware/VideoMiddlewareUtils';
import BaseMediaHandler from './BaseMediaHandler';
class VideoMediaHandler extends BaseMediaHandler {
    #videoMiddlewareUtils;
    constructor(mediaInterface, mediaTrack) {
        super(mediaInterface, mediaTrack);
        this.#videoMiddlewareUtils = new VideoMiddlewareUtils();
    }
    async setDevice(device) {
        if (!device) {
            DyteLogger.warn('VideoMediaHandler.setDevice No device received');
            throw new DyteError('No device received!');
        }
        if (device.kind !== 'videoinput') {
            DyteLogger.warn('VideoMediaHandler.setDevice Received non video device', {
                devices: [device],
            });
            throw new DyteError('Non video device received while setting video device!');
        }
        this.userSelectedDevice = device.deviceId;
        if (!(this.mediaTrack && this.mediaTrack.enabled)) {
            DyteLogger.warn('VideoMediaHandler.setDevice Tried switching device with video disabled', {
                devices: [device],
            });
            this.currentDevice = device;
            return;
        }
        try {
            await this.setMediaTrack(await this.mediaInterface.getVideoTrack(this.userSelectedDevice));
        }
        catch (error) {
            DyteLogger.error('VideoMediaHandler.setDevice.error', {
                error,
            });
            this.disableTrack();
            throw new DyteError('Failed to change device');
        }
    }
    async enableTrack() {
        if (this.trackEnabled) {
            DyteLogger.warn('VideoMediaHandler.enableTrack Track already enabled!');
            return;
        }
        await this.setMediaTrack(await this.mediaInterface.getVideoTrack(this.userSelectedDevice));
    }
    async setTransformedTrack() {
        if (!this.middlewares?.length) {
            this.transformedMediaTrack = this.mediaTrack;
            return;
        }
        try {
            this.transformedMediaTrack = await this.#videoMiddlewareUtils.getTransformedVideoTrack(this.middlewares, this.mediaTrack);
            this.emit('trackChanged');
        }
        catch (error) {
            DyteLogger.error('VideoMediaHandler.setTransformedTrack', {
                error,
            });
            this.transformedMediaTrack = this.mediaTrack;
        }
    }
    terminateMiddlewareWebWorker() {
        this.#videoMiddlewareUtils.terminateMiddlewareWebWorker();
    }
    async onTrackEnded() {
        DyteLogger.info('VideoMediaHandler.TrackEnded');
        this.disableTrack();
        this.emit('trackEnded');
    }
    onTrackMuted() {
        DyteLogger.info('VideoMediaHandler.TrackMuted');
        this.emit('trackMuted');
    }
}
__decorate([
    DyteTelemetry.trace('VideoMediaHandler.setTransformedTrack'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], VideoMediaHandler.prototype, "setTransformedTrack", null);
__decorate([
    DyteTelemetry.trace('VideoMediaHandler.onTrackEnded'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], VideoMediaHandler.prototype, "onTrackEnded", null);
export default VideoMediaHandler;
