import { beforeEach, describe, expect, test, vi, } from 'vitest';
import setupMockedWindow from '../../../__mocks__/window';
import BaseMediaInterface from '../interface/BaseMediaInterface';
import WebMediaInterface from '../interface/web/WebMediaInterface';
import AudioOutputMediaHandler from './AudioOutputMediaHandler';
setupMockedWindow();
let audioOutputMediaHandler;
class TestMediaInterface extends BaseMediaInterface {
    getAudioAndVideoTrack() {
        return Promise.resolve({
            audioTrack: new MediaStreamTrack(),
            videoTrack: new MediaStreamTrack(),
        });
    }
    getAudioTrack(_isMutedOnInit, _deviceId) {
        return Promise.resolve({});
    }
    getVideoTrack(_deviceId) {
        return Promise.resolve({});
    }
    getAvailableDevices() {
        return Promise.resolve([{}]);
    }
    getDevice(deviceId) {
        return Promise.resolve({ deviceId });
    }
    getScreenShareTracks() {
        return Promise.resolve({
            audioTrack: new MediaStreamTrack(),
            videoTrack: new MediaStreamTrack(),
        });
    }
}
describe('Given AudioOutputMediaHandler is initialized', () => {
    beforeEach(() => {
        audioOutputMediaHandler = new AudioOutputMediaHandler(new WebMediaInterface());
    });
    describe('When calling setup speaker without passing a speakerDevice', () => {
        test('Then setupSpeaker should not call querySelectorAll', async () => {
            const audioOutputMediaHandler2 = new AudioOutputMediaHandler(new TestMediaInterface());
            await audioOutputMediaHandler2.setupSpeaker();
            expect(document.querySelectorAll).not.toBeCalled();
        });
        describe('When no speaker devices are found', () => {
            let err;
            beforeEach(async () => {
                navigator.mediaDevices.enumerateDevices = vi.fn(() => [{ kind: 'audioinput', deviceId: '0' }]);
                try {
                    await audioOutputMediaHandler.setupSpeaker();
                }
                catch (e) {
                    err = e;
                }
            });
            test('Then expect enumerateDevices to be called', () => {
                expect(navigator.mediaDevices.enumerateDevices).toBeCalled();
            });
            test('Expect error message to be set correctly', () => {
                expect((err.message).includes('No speaker found')).toBeTruthy();
            });
        });
        describe('When speaker devices are found', () => {
            beforeEach(async () => {
                navigator.mediaDevices.enumerateDevices = vi.fn(() => [{ kind: 'audiooutput', deviceId: '1' }]);
                await audioOutputMediaHandler.setupSpeaker();
            });
            test('Then expect enumerateDevices to be called', () => {
                expect(navigator.mediaDevices.enumerateDevices).toBeCalled();
            });
            test('Then document.querySelectorAll must be called', () => {
                expect(document.querySelectorAll).toBeCalled();
            });
        });
    });
    describe('When calling setup speaker and passing a speakerDevice', () => {
        let speakerDevice;
        let audioElems;
        beforeEach(async () => {
            audioElems = [
                { id: '1', sinkId: '10', setSinkId: vi.fn() },
                { id: '2', sinkId: '10', setSinkId: vi.fn() },
                { id: '2', sinkId: '10', setSinkId: vi.fn(() => { throw new Error('Dummy Error'); }) },
            ];
            document.querySelectorAll = vi.fn(() => audioElems);
            speakerDevice = { deviceId: '1' };
            await audioOutputMediaHandler.setupSpeaker(speakerDevice);
        });
        test('Then expect this.currentDevice to have the same deviceId as speakerDevice', () => {
            expect(audioOutputMediaHandler.currentDevice?.deviceId).toBe(speakerDevice.deviceId);
        });
        test('Then document.querySelectorAll must be called', () => {
            expect(document.querySelectorAll).toBeCalled();
        });
        test('Then setSinkId must be called on each audioElem', () => {
            audioElems.every(({ setSinkId }) => expect(setSinkId).toBeCalled());
        });
        test('Then querySelectorAll should not be called again when setting same device', async () => {
            document.querySelectorAll.mockClear();
            await audioOutputMediaHandler.setupSpeaker(speakerDevice);
            expect(document.querySelectorAll).not.toBeCalled();
        });
    });
});
