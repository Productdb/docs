import DyteEventEmitter from '../../utils/DyteEventEmitter';
import { BaseMediaHandlerEvents } from '../../utils/DyteEvents';
import { ResponseStatus } from '../../utils/helpers';
import BaseMediaInterface from '../interface/BaseMediaInterface';
import { AudioMiddleware } from '../middleware/AudioMiddlewareUtils';
import { VideoMiddleware } from '../middleware/VideoMiddlewareUtils';
declare type Middleware = AudioMiddleware | VideoMiddleware;
declare abstract class BaseMediaHandler<T extends BaseMediaInterface = BaseMediaInterface> extends DyteEventEmitter<BaseMediaHandlerEvents> {
    private constructorName;
    protected userSelectedDevice?: string;
    protected mediaInterface: T;
    _mediaTrack?: MediaStreamTrack;
    transformedMediaTrack?: MediaStreamTrack;
    middlewares: Middleware[];
    currentDevice?: MediaDeviceInfo;
    constructor(mediaInterface: T, mediaTrack?: MediaStreamTrack);
    disableTrack(): void;
    get mediaTrack(): MediaStreamTrack;
    setMediaTrack(mediaTrack: MediaStreamTrack): Promise<void>;
    get trackEnabled(): boolean;
    muteTrack(): void;
    unmuteTrack(): Promise<void>;
    protected setCurrentDevice(): Promise<void>;
    protected abstract enableTrack(isMutedOnInit: boolean): Promise<void>;
    abstract setDevice(device: MediaDeviceInfo): Promise<void>;
    abstract setTransformedTrack(): Promise<void>;
    addMiddleware<U extends Middleware = Middleware>(middleware: U): Promise<ResponseStatus>;
    removeMiddleware(middleware: Middleware): Promise<ResponseStatus>;
    protected addMediaTrackListeners(): void;
    protected removeMediaTrackListeners(): void;
    protected abstract onTrackEnded(): Promise<void>;
    protected abstract onTrackMuted(): void;
}
export default BaseMediaHandler;
