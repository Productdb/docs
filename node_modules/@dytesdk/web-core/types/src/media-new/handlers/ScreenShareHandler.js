import { SessionEvents } from '../../store/SessionEvents';
import { SessionStore } from '../../store/SessionStore';
import DyteEventEmitter from '../../utils/DyteEventEmitter';
class ScreenShareMediaHandler extends DyteEventEmitter {
    mediaInterface;
    audioMediaTrack;
    videoMediaTrack;
    constructor(mediaInterface) {
        super();
        this.mediaInterface = mediaInterface;
    }
    get trackEnabled() {
        return !!this.videoMediaTrack;
    }
    async enableScreenShare() {
        const { audioTrack, videoTrack } = await this.mediaInterface.getScreenShareTracks();
        this.audioMediaTrack = audioTrack;
        this.videoMediaTrack = videoTrack;
        this.addMediaTrackListeners();
        if (this.mediaInterface?.permissions?.screenshare === 'ACCEPTED')
            return;
        if (this.mediaInterface.permissions) {
            this.mediaInterface.permissions.screenshare = 'ACCEPTED';
            SessionStore.emit(SessionEvents.MEDIA_PERMISSION_UPDATE, {
                message: this.mediaInterface.permissions.screenshare,
                kind: 'screenshare',
            });
        }
    }
    disableScreenShare() {
        this.removeMediaTrackListeners();
        this.audioMediaTrack?.stop();
        this.videoMediaTrack?.stop();
        this.videoMediaTrack = undefined;
        this.audioMediaTrack = undefined;
    }
    addMediaTrackListeners() {
        this.videoMediaTrack?.addEventListener('ended', this.onTrackEnded.bind(this));
    }
    removeMediaTrackListeners() {
        this.videoMediaTrack?.removeEventListener('ended', this.onTrackEnded);
    }
    onTrackEnded() {
        this.emit('trackEnded');
    }
}
export default ScreenShareMediaHandler;
