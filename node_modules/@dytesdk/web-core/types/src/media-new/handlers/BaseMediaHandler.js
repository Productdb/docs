var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { browserSpecs } from '../../browser/BrowserCapabilities';
import DyteError, { CatchAll } from '../../client/DyteError';
import DyteLogger from '../../client/internals/DyteLogger';
import DyteEventEmitter from '../../utils/DyteEventEmitter';
let BaseMediaHandler = class BaseMediaHandler extends DyteEventEmitter {
    constructorName = this.constructor.name;
    userSelectedDevice;
    mediaInterface;
    _mediaTrack;
    transformedMediaTrack;
    middlewares = [];
    currentDevice;
    constructor(mediaInterface, mediaTrack) {
        super();
        this.mediaInterface = mediaInterface;
        if (mediaTrack)
            this.setMediaTrack(mediaTrack);
        this.userSelectedDevice = undefined;
        this.onTrackEnded = this.onTrackEnded.bind(this);
        this.onTrackMuted = this.onTrackMuted.bind(this);
    }
    disableTrack() {
        this.removeMediaTrackListeners();
        this._mediaTrack?.stop();
        this._mediaTrack = undefined;
        this.transformedMediaTrack?.stop();
        this.transformedMediaTrack = undefined;
    }
    get mediaTrack() {
        return this._mediaTrack;
    }
    async setMediaTrack(mediaTrack) {
        const logError = (error) => {
            DyteLogger.error(`${this.constructorName}.setMediaTrack.error`, {
                error,
            });
        };
        try {
            this.disableTrack();
        }
        catch (error) {
            logError(error);
        }
        this._mediaTrack = mediaTrack;
        await this.setTransformedTrack();
        try {
            this.addMediaTrackListeners();
            await this.setCurrentDevice();
        }
        catch (error) {
            logError(error);
        }
    }
    get trackEnabled() {
        return !!this.mediaTrack
            && this.mediaTrack.readyState === 'live'
            && this.mediaTrack.enabled;
    }
    muteTrack() {
        if (!this.mediaTrack) {
            DyteLogger.warn('BaseMediaHandler.muteTrack Tried muting with no track present');
            return;
        }
        if (this.transformedMediaTrack)
            this.transformedMediaTrack.enabled = false;
        this.mediaTrack.enabled = false;
    }
    async unmuteTrack() {
        try {
            if (!this.mediaTrack) {
                await this.enableTrack(false);
            }
            else {
                this.mediaTrack.enabled = true;
            }
        }
        catch (error) {
            DyteLogger.error(`${this.constructorName}.unmuteTrack.error`, {
                error,
            });
            this.disableTrack();
            throw new DyteError('Failed to unmute track');
        }
    }
    async setCurrentDevice() {
        if (!this.mediaTrack) {
            this.currentDevice = undefined;
            return;
        }
        if (this.currentDevice?.deviceId === this.mediaTrack.getSettings().deviceId)
            return;
        this.currentDevice = await this.mediaInterface.getDevice(this.mediaTrack.getSettings().deviceId);
    }
    async addMiddleware(middleware) {
        if (browserSpecs.isSafari()) {
            return { success: false, message: 'Middlewares are not yet supported in Safari.' };
        }
        if (this.middlewares.includes(middleware)) {
            return { success: false, message: 'This middleware has been applied, already. Skipping.' };
        }
        try {
            if (this.trackEnabled) {
                await this.setTransformedTrack();
            }
            this.middlewares.push(middleware);
            return { success: true, message: 'Successfully added the middleware.' };
        }
        catch (error) {
            DyteLogger.error('While adding middleware', { error });
            return { success: false, message: error?.message };
        }
    }
    async removeMiddleware(middleware) {
        const index = this.middlewares.indexOf(middleware, 0);
        if (index > -1) {
            try {
                await this.setTransformedTrack();
                this.middlewares.splice(index, 1);
                return { success: true, message: 'Successfully removed the middleware.' };
            }
            catch (e) {
                DyteLogger.error('While removing middleware', { error: e });
                return { success: false, message: e?.message };
            }
        }
        return { success: false, message: 'No such middleware was found. Skipping.' };
    }
    addMediaTrackListeners() {
        if (!this.mediaTrack) {
            return;
        }
        DyteLogger.info(`${this.constructorName}.addMediaTrackListeners for deviceId ${this.mediaTrack?.getSettings()?.deviceId} of type ${this.mediaTrack?.kind}`);
        this.mediaTrack.addEventListener('ended', this.onTrackEnded);
        this.mediaTrack.addEventListener('mute', this.onTrackMuted);
    }
    removeMediaTrackListeners() {
        if (!this.mediaTrack) {
            return;
        }
        DyteLogger.info(`${this.constructorName}.removeMediaTrackListeners for deviceId ${this.mediaTrack?.getSettings()?.deviceId} of type ${this.mediaTrack?.kind}`);
        DyteLogger.info(`${this.constructorName}.removeMediaTrackListeners`);
        this.mediaTrack.removeEventListener('ended', this.onTrackEnded);
        this.mediaTrack.removeEventListener('mute', this.onTrackMuted);
    }
};
BaseMediaHandler = __decorate([
    CatchAll((error) => { throw new DyteError(error.message, '1600'); }),
    __metadata("design:paramtypes", [Object, MediaStreamTrack])
], BaseMediaHandler);
export default BaseMediaHandler;
