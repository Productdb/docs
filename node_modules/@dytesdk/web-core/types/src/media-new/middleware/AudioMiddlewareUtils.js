import DyteLogger from '../../client/internals/DyteLogger';
export const getTransformedAudioTrack = async (audioMiddlewares, originalAudioTrack) => {
    if (!audioMiddlewares?.length) {
        return originalAudioTrack;
    }
    const audioContext = new AudioContext();
    const middlewares = await Promise.all(audioMiddlewares?.map((audioMiddleware) => audioMiddleware(audioContext)));
    const mediaStreamSource = audioContext
        .createMediaStreamSource(new MediaStream([originalAudioTrack]));
    const transformedStreamHolder = audioContext.createMediaStreamDestination();
    try {
        let lastMediaStreamSource = mediaStreamSource;
        for (let middlewareIndex = 0; middlewareIndex < middlewares.length; middlewareIndex += 1) {
            lastMediaStreamSource.connect(middlewares[middlewareIndex]);
            lastMediaStreamSource = middlewares[middlewareIndex];
        }
        lastMediaStreamSource.connect(transformedStreamHolder);
    }
    catch (error) {
        DyteLogger.error('getTransformedAudioTrack::middleware_execution_failed', { error });
        return originalAudioTrack;
    }
    return transformedStreamHolder.stream.getAudioTracks()[0];
};
