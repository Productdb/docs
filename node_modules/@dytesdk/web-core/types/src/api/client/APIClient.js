var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import constants from '../../utils/constants';
import DyteTelemetry from '../../utils/opentelemetry';
import { objectToCamelCase, objectToSnakeCase } from '../../utils/sanitizer';
import BaseAPIClient from './BaseAPIClient';
export default class APIClient extends BaseAPIClient {
    async startLivestreaming() {
        const response = await this.requests.post(`/v2/meetings/${constants.meetingId}/livestreams`);
        return response.data?.data?.playback_url;
    }
    async stopLivestreaming() {
        return this.requests.post(`/v2/meetings/${constants.meetingId}/active-livestream/stop`);
    }
    async getActiveLivestream() {
        const { playbackUrl, status } = objectToCamelCase((await this.requests.get(`/v2/meetings/${constants.meetingId}/active-livestream`)).data.data);
        return { status, playbackUrl };
    }
    async getUserDetails() {
        const userDetailsResponseV2 = (await this.requests.get('v2/internals/participant-details')).data.data;
        return objectToCamelCase(userDetailsResponseV2);
    }
    getUserPreset(roomName) {
        throw new Error('getUserPreset does not exist for v2');
    }
    async startRecording(config) {
        const response = await this.requests.post('/v2/recordings', {
            ...objectToSnakeCase(config),
            meeting_id: constants.meetingId,
        });
        return response.data.id;
    }
    stopRecording(recordingId) {
        return this.requests.put(`v2/recordings/${recordingId}`, { action: 'stop' });
    }
    async getActiveRecording() {
        const { status, id } = (await this.requests.get(`v2/recordings/active-recording/${constants.meetingId}`)).data.data;
        return { status, id };
    }
    async getRoomNodeData({ peerId }) {
        const ipInformation = await APIClient.getIPDetails({ peerId });
        this.ipInfo = ipInformation;
        const { roomNodeLink, title, useHiveMedia } = objectToCamelCase((await this.requests.post('v2/internals/rooms', {
            ip_information: ipInformation,
        })).data.data);
        return {
            roomNodeUrl: roomNodeLink,
            meetingTitle: title,
            useHiveMedia: useHiveMedia ?? false,
        };
    }
}
__decorate([
    DyteTelemetry.trace('APIClient.getUserDetails'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], APIClient.prototype, "getUserDetails", null);
__decorate([
    DyteTelemetry.trace('APIClient.getUserPreset'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], APIClient.prototype, "getUserPreset", null);
__decorate([
    DyteTelemetry.trace('APIClient.startRecording'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], APIClient.prototype, "startRecording", null);
__decorate([
    DyteTelemetry.trace('APIClient.stopRecording'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], APIClient.prototype, "stopRecording", null);
__decorate([
    DyteTelemetry.trace('APIClient.getActiveRecording'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], APIClient.prototype, "getActiveRecording", null);
__decorate([
    DyteTelemetry.trace('APIClient.getRoomNodeData'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], APIClient.prototype, "getRoomNodeData", null);
