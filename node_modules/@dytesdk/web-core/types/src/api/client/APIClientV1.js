var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteTelemetry from '../../utils/opentelemetry';
import { objectToCamelCase } from '../../utils/sanitizer';
import BaseAPIClient from './BaseAPIClient';
export default class APIClientV1 extends BaseAPIClient {
    startLivestreaming() {
        throw new Error('Method not implemented.');
    }
    stopLivestreaming() {
        throw new Error('Method not implemented.');
    }
    getActiveLivestream() {
        throw new Error('Method not implemented.');
    }
    async getUserDetails() {
        const { user } = (await this.requests.get('/auth/basicUserDetails')).data;
        return user;
    }
    async getUserPreset(roomName) {
        const { preset } = (await this.requests.post('/v1/userpreset', {
            roomName,
            authToken: this.authToken,
            clientType: 'CLIENT_APP',
            version: '0.5.0',
        })).data.data;
        return objectToCamelCase(preset);
    }
    async startRecording(config) {
        const response = await this.requests.post(`/v1/organizations/${this.organizationId}/rooms/${this.roomName}/recording`, config);
        if (response.status !== 201) {
            throw new Error('Recording failed to start');
        }
        return response.data.data.recording.id;
    }
    async stopRecording(recordingId) {
        const response = await this.requests.put(`/v1/organizations/${this.organizationId}/rooms/${this.roomName}/recordings/${recordingId}`, { recordingAction: 'stop' });
        if (response.status !== 201) {
            throw new Error('Recording failed to stop');
        }
    }
    async getActiveRecording() {
        if (!this.organizationId)
            return {};
        const response = await this.requests.get(`/v1/organizations/${this.organizationId}/rooms/${this.roomName}/active-recording?limit=50`);
        return response.data.data.recording;
    }
    async getRoomNodeData({ roomName, peerId }) {
        const query = `
        query Session($roomName: String!, $password: String, $ipInformation: String) {
            session(roomName: $roomName, password: $password) {
              title,
              roomNodeLink(ipInformation: $ipInformation),
              useHiveMedia,
              roomName,
              password
            }
          }
        `;
        const ipInformation = await BaseAPIClient.getIPDetails({ peerId });
        this.ipInfo = ipInformation;
        const { roomNodeLink, title, useHiveMedia } = (await this.requests.post('/graphql', {
            query,
            variables: { roomName, ipInformation: JSON.stringify(ipInformation) },
        })).data.data.session;
        return {
            roomNodeUrl: roomNodeLink,
            meetingTitle: title,
            useHiveMedia: useHiveMedia ?? false,
        };
    }
}
__decorate([
    DyteTelemetry.trace('APIClientV1.getUserDetails'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], APIClientV1.prototype, "getUserDetails", null);
__decorate([
    DyteTelemetry.trace('APIClientV1.getUserPreset'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], APIClientV1.prototype, "getUserPreset", null);
__decorate([
    DyteTelemetry.trace('APIClientV1.startRecording'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], APIClientV1.prototype, "startRecording", null);
__decorate([
    DyteTelemetry.trace('APIClientV1.stopRecording'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], APIClientV1.prototype, "stopRecording", null);
__decorate([
    DyteTelemetry.trace('APIClientV1.getActiveRecording'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], APIClientV1.prototype, "getActiveRecording", null);
__decorate([
    DyteTelemetry.trace('APIClientV1.getRoomNodeData'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], APIClientV1.prototype, "getRoomNodeData", null);
