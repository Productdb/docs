import API, { APIOptions } from '../API';
import { UserDetailsResponse } from '../../client/DyteSelf';
import { UserDetailsResponseV2, UserPresetResponseV1 } from '../../controllers/SelfController';
import { DytePluginResponse, PluginConfig } from '../../client/DytePlugin';
export interface RecordingConfig {
    fileNamePrefix?: string;
    videoConfig?: {
        height?: number;
        width?: number;
        codec?: string;
    };
}
export default abstract class BaseAPIClient extends API {
    constructor(options?: APIOptions);
    abstract getRoomNodeData({ roomName, peerId }: {
        roomName: string;
        peerId: string;
    }): Promise<{
        roomNodeUrl: string;
        meetingTitle: string;
        useHiveMedia: boolean;
    }>;
    abstract getUserDetails(): Promise<UserDetailsResponse | UserDetailsResponseV2>;
    abstract getUserPreset(roomName: string): Promise<UserPresetResponseV1>;
    abstract startRecording(config: RecordingConfig): Promise<string>;
    abstract stopRecording(recordingId: string): Promise<void>;
    abstract getActiveRecording(): Promise<{
        status: string;
        id: string;
    }>;
    abstract startLivestreaming(): Promise<string>;
    abstract stopLivestreaming(): Promise<void>;
    abstract getActiveLivestream(): Promise<{
        status: string;
        playbackUrl: string;
    }>;
    static getIPDetails({ peerId }: {
        peerId: string;
    }): Promise<any>;
    getICEServers(): Promise<RTCIceServer[]>;
    getPlugins(isSocketService: string): Promise<DytePluginResponse[]>;
    getPluginDetails(pluginId: string): Promise<DytePluginResponse>;
    getPluginConfig(pluginBaseUrl: string): Promise<PluginConfig>;
    authorizePlugin(pluginId: string): Promise<string>;
    getPresignedUrls(filename: string): Promise<{
        getLocation: any;
        putLocation: any;
    }>;
    uploadFile(file: File, url: string): Promise<void>;
}
