import { AxiosInstance, AxiosRequestConfig } from 'axios';
export interface APIOptions {
    baseURL?: string;
    authToken?: string;
    timeout?: number;
    retry?: number;
    retryDelay?: number;
}
export declare type IAxiosRequestConfig = AxiosRequestConfig & {
    retry: number;
    retryDelay: number;
};
export default class API {
    protected ipInfo: any;
    protected axios: AxiosInstance;
    protected requests: AxiosInstance;
    protected roomName: string;
    protected roomUUID: string;
    protected peerId: string;
    protected authToken: string;
    protected organizationId: string;
    constructor(options?: APIOptions);
    setAuthToken(token: string, options?: {
        bearer?: boolean;
    }): void;
    setHeader(key: string, value: string): void;
    setRoomName(name: string): void;
    setRoomUUID(id: string): void;
    setPeerId(id: string): void;
    setOrganizationId(id: string): void;
    fetchRetryExp(retry: number, url: string): Promise<void>;
}
