import { EventEmitter } from 'events';
import DyteLogger from '../client/internals/DyteLogger';
export class SessionStoreHandler extends EventEmitter {
    #eventPromises;
    #asyncListeners;
    asyncPromiseTimeout;
    constructor() {
        super();
        this.#eventPromises = new Map();
        this.#asyncListeners = new Map();
        this.asyncPromiseTimeout = 8000;
    }
    async emitAsync(event, ...args) {
        this.#eventPromises.set(event, []);
        const promises = this.#asyncListeners.get(event).map(() => new Promise((resolve) => {
            this.#eventPromises.get(event).push(resolve);
        }));
        super.emit(event, ...args);
        await Promise.race([
            Promise.all(promises),
            new Promise((_, reject) => setTimeout(() => reject(new Error('emitAsync failed to resolve.')), this.asyncPromiseTimeout)),
        ]);
        this.#eventPromises.delete(event);
    }
    onAsync(event, cb) {
        const eventPromises = this.#eventPromises;
        const listener = async (...args) => {
            try {
                await cb(...args);
            }
            catch (error) {
                DyteLogger.error('[onAsync]', { error });
            }
            const resolve = eventPromises.get(event)?.shift();
            resolve?.();
        };
        if (!this.#asyncListeners.get(event)) {
            this.#asyncListeners.set(event, []);
        }
        this.#asyncListeners.get(event).push(listener);
        return super.on(event, listener);
    }
    reset() {
        this.#eventPromises = new Map();
        this.#asyncListeners = new Map();
        super.removeAllListeners();
    }
}
export const SessionStore = new SessionStoreHandler();
