type ConsumePeerRequest = any; type ConsumerCloseRequest = any; type CreateTransportRequest = any; type CreateTransportResponse = any; type KickPeerRequest = any; type PeerDisplayNameEditRequest = any; type PeerJoinCompleteResponse = any; type ProducerCloseRequest = any; type ProducerCreateRequest = any; 
import SocketService from './SocketService';
export declare type HiveSocketMessage = CreateTransportResponse;
export default class HiveSFUSocketHandler {
    #private;
    constructor(socket: SocketService);
    joinRoom(roomUuid: string, displayName: string): Promise<Uint8Array>;
    connectTransport(request: CreateTransportRequest): Promise<{
        transportId: string;
        answer: RTCSessionDescriptionInit;
    }>;
    produce(req: ProducerCreateRequest): Promise<{
        answer: RTCSessionDescriptionInit;
        producerId: string;
    }>;
    consume(req: ConsumePeerRequest): Promise<{
        [key: string]: import("@dyte-in/proto-entities").ConsumerState;
    }>;
    closeProducer(req: ProducerCloseRequest): Promise<import("@dyte-in/proto-entities").SessionDescription>;
    closeConsumer(req: ConsumerCloseRequest): Promise<Uint8Array>;
    hostControlForPeer(peerId: string, kind: 'audio' | 'video'): Promise<boolean>;
    hostControlForAll(kind: 'audio' | 'video'): Promise<boolean>;
    kickAll(): Promise<boolean>;
    kickPeer(req: KickPeerRequest): Promise<boolean>;
    changeDisplayName(req: PeerDisplayNameEditRequest): Promise<boolean>;
    notifySelfJoinComplete(): Promise<PeerJoinCompleteResponse>;
}
