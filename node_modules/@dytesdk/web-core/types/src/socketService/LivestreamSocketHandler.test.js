import { beforeEach, describe, expect, test, vi, } from 'vitest';
type LiveStreamingEvent = any; type RoomPeerCountResponse = any; type  = any; 
import LivestreamSocketHandler from './LivestreamSocketHandler';
import { roomEvents } from './socketEvents';
import SocketService from './SocketService';
vi.mock('./SocketService');
vi.mock('../utils/opentelemetry');
const SocketServiceOptions = {
    peerId: 'd5f8620e-d3ea-47bf-b524-46709cf4eef9',
    roomName: '9c5a20f9-ca5a-4028-a630-680f8da86e57',
    authToken: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijk4YTE1NGQ1LWVkY2QtNGQ3ZC1iODYwLWUzNTU2NGQwZTY1NyIsImxvZ2dlZEluIjpmYWxzZSwiZW1haWwiOiI2ZTI0NmU2ZC03MmI3LTQ2MTItOGJhYy02ZDljZTE1MjRlNTRAYW5vbi5keXRlLmluIiwiaWF0IjoxNjc1MzM2MDAxLCJleHAiOjE2ODM5NzYwMDF9.LTq7S-1RlAh-HXCmcP_ufo0blYAShkNnt6aWoeCOfwamCsRl9B8SBdhCPaVJXGOV-mEcfTu-qfKEfH8fu24EcbCBw7NBWjqSYBG1t523TxtESpmVeKXH-stvrmIijPCjjlHCrOS_pr4FQIwjmvTqdtjJ_WpxX0UzpqgM2L84s0A',
    capabilities: ['HIVE', 'PING'],
};
let socketService;
let livestreamSocketHandler;
describe('Given LivestreamSocketHandler is initialized', () => {
    beforeEach(() => {
        socketService = new SocketService(SocketServiceOptions);
        livestreamSocketHandler = new LivestreamSocketHandler(socketService);
    });
    describe('When on is called', () => {
        test('Then roomPeerCount should have the right handler', () => {
            const callback = vi.fn();
            livestreamSocketHandler.on(roomEvents.roomPeerCount, callback);
            expect(socketService.on)
                .toBeCalledWith(roomEvents.roomPeerCount, expect.any(Function));
            socketService.emit(roomEvents.roomPeerCount, { payload: RoomPeerCountResponse.toBinary(RoomPeerCountResponse.create()) });
            expect(callback).toBeCalled();
        });
        test('Then livestreaming events should have the right handler', () => {
            const callback = vi.fn();
            livestreamSocketHandler.on(roomEvents.startedLivestream, callback);
            expect(socketService.on)
                .toBeCalledWith(roomEvents.startedLivestream, expect.any(Function));
            socketService.emit(roomEvents.startedLivestream, { payload: LiveStreamingEvent.toBinary(LiveStreamingEvent.create()) });
            expect(callback).toBeCalled();
        });
    });
});
