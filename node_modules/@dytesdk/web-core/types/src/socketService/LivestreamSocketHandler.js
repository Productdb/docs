type LiveStreamingEvent = any; type RoomPeerCountResponse = any; type  = any; 
import { roomEvents } from './socketEvents';
export var ChatMessageType;
(function (ChatMessageType) {
    ChatMessageType[ChatMessageType["TEXT"] = 0] = "TEXT";
    ChatMessageType[ChatMessageType["IMAGE"] = 1] = "IMAGE";
    ChatMessageType[ChatMessageType["FILE"] = 2] = "FILE";
})(ChatMessageType || (ChatMessageType = {}));
export default class LivestreamSocketHandler {
    #socket;
    constructor(socketService) {
        this.#socket = socketService;
    }
    on(event, handler) {
        let fromBinary;
        if (event === roomEvents.roomPeerCount) {
            fromBinary = RoomPeerCountResponse.fromBinary.bind(RoomPeerCountResponse);
        }
        else {
            fromBinary = LiveStreamingEvent.fromBinary.bind(LiveStreamingEvent);
        }
        this.#socket.on(event, ({ payload }) => {
            const socketMessage = fromBinary(payload);
            return handler(socketMessage);
        });
    }
}
