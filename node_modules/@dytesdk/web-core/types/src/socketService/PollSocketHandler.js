var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
type NewPollRequest = any; type UpdatePollResponse = any; type VotePollRequest = any; 
import DyteTelemetry from '../utils/opentelemetry';
import { pollEvents } from './socketEvents';
import DyteLogger from '../client/internals/DyteLogger';
export default class PollSocketHandler {
    #socket;
    constructor(socketService) {
        this.#socket = socketService;
    }
    getPolls() {
        return this.#socket.sendMessagePromise(pollEvents.getPolls);
    }
    createPoll(question, options, anonymous = false, hideVotes = false) {
        const req = {
            anonymous,
            hideVotes,
            question,
            options,
        };
        return this.#socket.sendMessage(pollEvents.createPoll, NewPollRequest.toBinary(req));
    }
    votePoll(id, index) {
        const req = {
            index,
            pollId: id,
        };
        return this.#socket.sendMessage(pollEvents.votePoll, VotePollRequest.toBinary(req));
    }
    on(event, handler) {
        let fromBinary;
        let defaultPollMessage;
        switch (event) {
            case pollEvents.updatePoll:
            case pollEvents.createPoll:
            case pollEvents.votePoll: {
                fromBinary = UpdatePollResponse.fromBinary.bind(UpdatePollResponse);
                defaultPollMessage = UpdatePollResponse.create();
                break;
            }
            default:
                break;
        }
        this.#socket.on(event, ({ payload }) => {
            let socketMessage = defaultPollMessage;
            try {
                socketMessage = fromBinary(payload);
            }
            catch (err) {
                DyteLogger.error('chatSocketHandler::on::binary_decode_error', { error: err });
            }
            return handler(socketMessage);
        });
    }
}
__decorate([
    DyteTelemetry.trace('PollSocketHandler.getPolls'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], PollSocketHandler.prototype, "getPolls", null);
__decorate([
    DyteTelemetry.trace('PollSocketHandler.createPoll'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Array, Boolean, Boolean]),
    __metadata("design:returntype", void 0)
], PollSocketHandler.prototype, "createPoll", null);
__decorate([
    DyteTelemetry.trace('PollSocketHandler.votePoll'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number]),
    __metadata("design:returntype", void 0)
], PollSocketHandler.prototype, "votePoll", null);
