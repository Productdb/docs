type AddPluginRequest = any; type DisablePluginForPeersRequest = any; type DisablePluginForRoomRequest = any; type DisablePluginResponse = any; type EnablePluginForPeersRequest = any; type EnablePluginForRoomRequest = any; type EnablePluginResponse = any; type EnablePluginsResponse = any; type PluginEventResponse = any; type PluginEventToPeersRequest = any; type PluginEventToRoomRequest = any; type PluginStoreDeleteKeysRequest = any; type PluginStoreDeleteRequest = any; type PluginStoreGetKeysRequest = any; type PluginStoreInsertKeysRequest = any; type PluginStoreResponse = any; type RemovePluginRequest = any; type  = any; 
import DyteLogger from '../client/internals/DyteLogger';
import { pluginEvents } from './socketEvents';
export default class PluginSocketHandler {
    #socket;
    constructor(socketService) {
        this.#socket = socketService;
    }
    addPlugin(pluginId, staggered) {
        this.#socket.sendMessage(pluginEvents.addPlugin, AddPluginRequest.toBinary({ pluginId, staggered }));
    }
    removePlugin(pluginId) {
        this.#socket.sendMessage(pluginEvents.removePlugin, RemovePluginRequest.toBinary({ pluginId, staggered: false }));
    }
    async getActivePlugins() {
        const { payload } = await this.#socket.sendMessagePromise(pluginEvents.getPlugins);
        return payload
            ? EnablePluginsResponse.fromBinary(payload)
            : { plugins: [] };
    }
    customPluginEventToRoom(pluginId, data, messageId) {
        const req = {
            pluginId,
            pluginData: new TextEncoder().encode(JSON.stringify(data)),
        };
        this.#socket.sendMessage(pluginEvents.customPluginEventToRoom, PluginEventToRoomRequest.toBinary(req), messageId);
    }
    customPluginEventToPeers(pluginId, peerIds, data, messageId) {
        const req = {
            pluginId,
            peerIds,
            pluginData: new TextEncoder().encode(JSON.stringify(data)),
        };
        this.#socket.sendMessage(pluginEvents.customPluginEventToPeers, PluginEventToPeersRequest.toBinary(req), messageId);
    }
    enablePluginForRoom(pluginId, messageId) {
        this.#socket.sendMessage(pluginEvents.enablePluginForRoom, EnablePluginForRoomRequest.toBinary({ pluginId }), messageId);
    }
    enablePluginForPeers(pluginId, peerIds, messageId) {
        this.#socket.sendMessage(pluginEvents.enablePluginForPeers, EnablePluginForPeersRequest.toBinary({ pluginId, peerIds }), messageId);
    }
    disablePluginForRoom(pluginId, messageId) {
        this.#socket.sendMessage(pluginEvents.disablePluginForRoom, DisablePluginForRoomRequest.toBinary({ pluginId }), messageId);
    }
    disablePluginForPeers(pluginId, peerIds, messageId) {
        this.#socket.sendMessage(pluginEvents.disablePluginForPeers, DisablePluginForPeersRequest.toBinary({ pluginId, peerIds }), messageId);
    }
    storeInsertKeys(pluginId, store, insertKeys, messageId) {
        const req = {
            pluginId,
            storeName: store,
            insertKeys: insertKeys.map((item) => ({
                storeKey: item.key,
                payload: new TextEncoder().encode(JSON.stringify(item.payload)),
            })),
        };
        this.#socket.sendMessage(pluginEvents.storeInsertKeys, PluginStoreInsertKeysRequest.toBinary(req), messageId);
    }
    storeGetKeys(pluginId, store, getKeys, messageId) {
        const req = {
            pluginId,
            storeName: store,
            getKeys: getKeys.map((item) => ({ storeKey: item.key })),
        };
        this.#socket.sendMessage(pluginEvents.storeGetKeys, PluginStoreGetKeysRequest.toBinary(req), messageId);
    }
    storeDeleteKeys(pluginId, store, deleteKeys, messageId) {
        const req = {
            pluginId,
            storeName: store,
            deleteKeys: deleteKeys.map((item) => ({ storeKey: item.key })),
        };
        this.#socket.sendMessage(pluginEvents.storeDeleteKeys, PluginStoreDeleteKeysRequest.toBinary(req), messageId);
    }
    storeDelete(pluginId, store, messageId) {
        this.#socket.sendMessage(pluginEvents.storeDelete, PluginStoreDeleteRequest.toBinary({ pluginId, storeName: store }), messageId);
    }
    getPluginDataOld(pluginId, store) {
        DyteLogger.info('getPluginDataOld', { plugin: { id: pluginId, storeName: store } });
    }
    storePluginDataOld(pluginId, store, data) {
        const req = {
            pluginId,
            storeName: store,
            insertKeys: [{
                    storeKey: data.key,
                    payload: new TextEncoder().encode(JSON.stringify(data)),
                }],
        };
        this.#socket.sendMessage(pluginEvents.storeInsertKeys, PluginStoreInsertKeysRequest.toBinary(req));
    }
    on(event, handler) {
        let fromBinary;
        switch (event) {
            case pluginEvents.addPlugin:
            case pluginEvents.enablePluginForPeers:
            case pluginEvents.enablePluginForRoom: {
                fromBinary = EnablePluginResponse.fromBinary
                    .bind(EnablePluginResponse);
                break;
            }
            case pluginEvents.removePlugin:
            case pluginEvents.disablePluginForPeers:
            case pluginEvents.disablePluginForRoom: {
                fromBinary = DisablePluginResponse.fromBinary
                    .bind(DisablePluginResponse);
                break;
            }
            case pluginEvents.customPluginEventToPeers:
            case pluginEvents.customPluginEventToRoom: {
                fromBinary = PluginEventResponse.fromBinary
                    .bind(PluginEventResponse);
                break;
            }
            case pluginEvents.storeInsertKeys:
            case pluginEvents.storeGetKeys:
            case pluginEvents.storeDeleteKeys:
            case pluginEvents.storeDelete: {
                fromBinary = PluginStoreResponse.fromBinary
                    .bind(PluginStoreResponse);
                break;
            }
            default: break;
        }
        this.#socket.on(event, ({ payload, id }) => {
            const socketMessage = fromBinary(payload);
            return handler(socketMessage, id);
        });
    }
}
