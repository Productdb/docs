export declare const Capabilities: any; 
export declare type SocketServiceCapability = keyof typeof Capabilities;
export declare type SocketServiceCapabilities = SocketServiceCapability[];
export default class SocketService {
    #private;
    readonly roomName: string;
    readonly peerId: string;
    readonly authToken: string;
    readonly capabilities: SocketServiceCapabilities;
    constructor({ peerId, roomName, authToken, url, capabilities, }: {
        url?: string;
        peerId: string;
        roomName: string;
        authToken: string;
        capabilities: SocketServiceCapabilities;
    });
    get url(): string;
    connect(): Promise<void>;
    disconnect(): void;
    get isConnected(): boolean;
    sendMessage(event: number, protobuf?: Uint8Array, messageId?: string): boolean;
    sendMessagePromise(event: number, protobuf?: Uint8Array, messageId?: string): Promise<{
        id: string;
        payload: Uint8Array;
    }>;
    sendMessagePromiseWithTimeout({ event, timeout, protobuf, messageId, }: {
        timeout: number;
        event: number;
        protobuf?: Uint8Array;
        messageId?: string;
    }): Promise<{
        id: string;
        payload: Uint8Array;
    }>;
    on(event: number, listener: (message: {
        id?: string;
        payload?: Uint8Array;
    }) => void): void;
    onStateEvent(event: 'connected' | 'disconnected' | 'reconnected' | 'errored' | 'reconnecting' | 'reconnectAttempt' | 'reconnectFailure' | 'failed', listener: (...args: any) => void): void;
    flush(): any;
}
