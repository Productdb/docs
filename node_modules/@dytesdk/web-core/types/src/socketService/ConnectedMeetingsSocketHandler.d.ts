type CreateRoomRequestPayload = any; type MovePeersBetweenRoomsRequest = any; type UpdateRoomRequestPayload = any; 
import SocketService from './SocketService';
export interface SocketServicePayload {
    payload: any;
}
export interface ConnectedMeetingParticipant {
    id?: string;
    customParticipantId?: string;
    presetId?: string;
    displayName?: string;
    displayPictureUrl?: string;
}
export interface ConnectedMeeting {
    id?: string;
    title?: string;
    participants: ConnectedMeetingParticipant[];
}
export default class ConnectedMeetingsSocketHandler {
    static socketService: SocketService;
    static currentMeetingId: string;
    static handleConnectedRoomsDumpRaw({ payload }: SocketServicePayload): {
        parentMeeting: ConnectedMeeting;
        meetings: ConnectedMeeting[];
    };
    static handleTransferPeerRaw({ payload }: SocketServicePayload): {
        authToken: string;
        meetingId: string;
    };
    static handleMovedPeerRaw({ payload }: SocketServicePayload): {
        meetingId: string;
        customParticipantId: string;
    };
    static handleConnectedRoomsUpdatedRaw({ payload }: SocketServicePayload): {
        id: string;
        title: string;
    }[];
    static handleConnectedRoomsDeletedRaw({ payload }: SocketServicePayload): {
        id: string;
    }[];
    static getConnectedRoomsDump(): Promise<{
        parentMeeting: ConnectedMeeting;
        meetings: ConnectedMeeting[];
    }>;
    static createConnectedRooms(request: CreateRoomRequestPayload[]): Promise<{
        id: string;
        title: string;
    }[]>;
    static updateConnectedRooms(request: UpdateRoomRequestPayload[]): Promise<void>;
    static disableConnectedRooms(meetingIds: string[]): Promise<{
        id: string;
    }[]>;
    static movePeersBetweenRooms(request: MovePeersBetweenRoomsRequest): Promise<{
        success: boolean;
        error?: undefined;
    } | {
        success: boolean;
        error: any;
    }>;
}
