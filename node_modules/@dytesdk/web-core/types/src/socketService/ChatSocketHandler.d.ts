type DeleteChatMessageResponse = any; type EditChatMessageResponse = any; type GetPaginatedChatMessageRoomResponse = any; type SendChatMessageToPeersResponse = any; type SendChatMessageToRoomResponse = any; 
import SocketService from './SocketService';
export declare enum ChatMessageType {
    TEXT = 0,
    IMAGE = 1,
    FILE = 2
}
declare type ChatSocketMessage = SendChatMessageToRoomResponse | SendChatMessageToPeersResponse | EditChatMessageResponse | DeleteChatMessageResponse;
export default class ChatSocketHandler {
    #private;
    constructor(socketService: SocketService);
    getChatMessages(): Promise<{
        id: string;
        payload: Uint8Array;
    }>;
    getChatMessagesPaginated(timeStamp: number, size: number, reversed: boolean, offset?: number): Promise<GetPaginatedChatMessageRoomResponse>;
    sendMessageToRoom(message: string, messageType: ChatMessageType): void;
    sendMessageToPeers(message: string, messageType: ChatMessageType, peerIds: string[]): void;
    sendMessage(message: string, messageType: ChatMessageType, peerIds?: string[]): void;
    editMessage(chatId: string, message: string, messageType: ChatMessageType, pinned?: boolean): void;
    deleteMessage(chatId: string): void;
    on(event: number, handler: (socketMessage: ChatSocketMessage) => void): void;
}
export {};
