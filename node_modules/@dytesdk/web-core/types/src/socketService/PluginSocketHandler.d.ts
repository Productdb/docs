type DisablePluginResponse = any; type EnablePluginResponse = any; type EnablePluginsResponse = any; type PluginEventResponse = any; type PluginStoreResponse = any; type SendChatMessageToPeersResponse = any; type SendChatMessageToRoomResponse = any; 
import SocketService from './SocketService';
declare type PluginSocketMessage = DisablePluginResponse | EnablePluginResponse | PluginEventResponse | PluginStoreResponse | SendChatMessageToPeersResponse | SendChatMessageToRoomResponse;
export default class PluginSocketHandler {
    #private;
    constructor(socketService: SocketService);
    addPlugin(pluginId: string, staggered: boolean): void;
    removePlugin(pluginId: string): void;
    getActivePlugins(): Promise<EnablePluginsResponse>;
    customPluginEventToRoom(pluginId: string, data: any, messageId?: string): void;
    customPluginEventToPeers(pluginId: string, peerIds: string[], data: any, messageId?: string): void;
    enablePluginForRoom(pluginId: string, messageId?: string): void;
    enablePluginForPeers(pluginId: string, peerIds: string[], messageId?: string): void;
    disablePluginForRoom(pluginId: string, messageId?: string): void;
    disablePluginForPeers(pluginId: string, peerIds: string[], messageId?: string): void;
    storeInsertKeys(pluginId: string, store: string, insertKeys: {
        key: string;
        payload?: any;
    }[], messageId?: string): void;
    storeGetKeys(pluginId: string, store: string, getKeys: {
        key: string;
    }[], messageId?: string): void;
    storeDeleteKeys(pluginId: string, store: string, deleteKeys: {
        key: string;
    }[], messageId?: string): void;
    storeDelete(pluginId: string, store: string, messageId?: string): void;
    getPluginDataOld(pluginId: string, store: string): void;
    storePluginDataOld(pluginId: string, store: string, data: any): void;
    on(event: number, handler: (socketMessage: PluginSocketMessage, messageId?: string) => void): void;
}
export {};
