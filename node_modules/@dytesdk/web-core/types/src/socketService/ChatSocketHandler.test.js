import { beforeEach, describe, expect, test, vi, } from 'vitest';
type DeleteChatMessageRequest = any; type DeleteChatMessageResponse = any; type EditChatMessageRequest = any; type EditChatMessageResponse = any; type SendChatMessageToRoomRequest = any; type SendChatMessageToRoomResponse = any; type SendChatMessageToPeersRequest = any; type SendChatMessageToPeersResponse = any; type  = any; 
import ChatSocketHandler from './ChatSocketHandler';
import { ChatMessageType } from './LivestreamSocketHandler';
import { chatEvents } from './socketEvents';
import SocketService from './SocketService';
vi.mock('./SocketService');
vi.mock('../utils/opentelemetry');
let socketService;
let chatSocketHandler;
const SocketServiceOptions = {
    peerId: 'd5f8620e-d3ea-47bf-b524-46709cf4eef9',
    roomName: '9c5a20f9-ca5a-4028-a630-680f8da86e57',
    authToken: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijk4YTE1NGQ1LWVkY2QtNGQ3ZC1iODYwLWUzNTU2NGQwZTY1NyIsImxvZ2dlZEluIjpmYWxzZSwiZW1haWwiOiI2ZTI0NmU2ZC03MmI3LTQ2MTItOGJhYy02ZDljZTE1MjRlNTRAYW5vbi5keXRlLmluIiwiaWF0IjoxNjc1MzM2MDAxLCJleHAiOjE2ODM5NzYwMDF9.LTq7S-1RlAh-HXCmcP_ufo0blYAShkNnt6aWoeCOfwamCsRl9B8SBdhCPaVJXGOV-mEcfTu-qfKEfH8fu24EcbCBw7NBWjqSYBG1t523TxtESpmVeKXH-stvrmIijPCjjlHCrOS_pr4FQIwjmvTqdtjJ_WpxX0UzpqgM2L84s0A',
    capabilities: ['HIVE', 'PING'],
};
describe('Given ChatSocketHandler is initialized', () => {
    beforeEach(() => {
        socketService = new SocketService(SocketServiceOptions);
        chatSocketHandler = new ChatSocketHandler(socketService);
    });
    test('Then getChatMessages should send the correct event to socket service', async () => {
        await chatSocketHandler.getChatMessages();
        expect(socketService.sendMessagePromise).toBeCalledWith(chatEvents.getMessages);
    });
    test('Then sendMessageToRoom should send the correct event and payload', async () => {
        const message = 'message';
        const messageType = ChatMessageType.TEXT;
        chatSocketHandler.sendMessageToRoom(message, messageType);
        const expectedPayload = SendChatMessageToRoomRequest.toBinary({
            payload: message,
            payloadType: messageType,
        });
        expect(socketService.sendMessage).toBeCalledWith(chatEvents.sendMessageToRoom, expectedPayload);
    });
    test('Then sendMessageToPeers should send the correct event and payload', async () => {
        const message = 'message';
        const messageType = ChatMessageType.TEXT;
        const peerIds = ['1', '2'];
        chatSocketHandler.sendMessageToPeers(message, messageType, peerIds);
        const expectedPayload = SendChatMessageToPeersRequest.toBinary({
            payloadType: messageType,
            peerIds,
            payload: message,
        });
        expect(socketService.sendMessage).toBeCalledWith(chatEvents.sendMessageToPeers, expectedPayload);
    });
    test('Then sendMessage should call either sendMessageToRoom or sendMessageToPeers', () => {
        chatSocketHandler.sendMessageToRoom = vi.fn();
        chatSocketHandler.sendMessageToPeers = vi.fn();
        const message = 'message';
        const messageType = ChatMessageType.TEXT;
        const peerIds = ['1', '2'];
        chatSocketHandler.sendMessage(message, messageType);
        expect(chatSocketHandler.sendMessageToRoom).toBeCalledWith(message, messageType);
        chatSocketHandler.sendMessage(message, messageType, peerIds);
        expect(chatSocketHandler.sendMessageToPeers).toBeCalledWith(message, messageType, peerIds);
    });
    test('Then editMessage should send the correct event and payload', async () => {
        const chatId = '1';
        const message = 'message';
        const messageType = ChatMessageType.TEXT;
        const pinned = true;
        chatSocketHandler.editMessage(chatId, message, messageType, pinned);
        const expectedPayload = EditChatMessageRequest.toBinary({
            chatId,
            pinned,
            payload: message,
            payloadType: messageType,
        });
        expect(socketService.sendMessage).toBeCalledWith(chatEvents.editMessage, expectedPayload);
    });
    test('Then deleteMessage should send the correct event and payload', async () => {
        const chatId = '1';
        chatSocketHandler.deleteMessage(chatId);
        const expectedPayload = DeleteChatMessageRequest.toBinary({
            chatId,
        });
        expect(socketService.sendMessage).toBeCalledWith(chatEvents.deleteMessage, expectedPayload);
    });
    describe('When on is called', () => {
        test('Then sendMessageToRoom should be the right handler', () => {
            const callback = vi.fn();
            chatSocketHandler.on(chatEvents.sendMessageToRoom, callback);
            expect(socketService.on)
                .toBeCalledWith(chatEvents.sendMessageToRoom, expect.any(Function));
            socketService.emit(chatEvents.sendMessageToRoom, {
                payload: SendChatMessageToRoomResponse.toBinary(SendChatMessageToRoomResponse.create()),
            });
            expect(callback).toBeCalled();
        });
        test('Then sendMessageToPeers should be the right handler', () => {
            const callback = vi.fn();
            chatSocketHandler.on(chatEvents.sendMessageToPeers, callback);
            expect(socketService.on)
                .toBeCalledWith(chatEvents.sendMessageToPeers, expect.any(Function));
            socketService.emit(chatEvents.sendMessageToPeers, {
                payload: SendChatMessageToPeersResponse.toBinary(SendChatMessageToPeersResponse.create()),
            });
            expect(callback).toBeCalled();
        });
        test('Then editMessage should be the right handler', () => {
            const callback = vi.fn();
            chatSocketHandler.on(chatEvents.editMessage, callback);
            expect(socketService.on)
                .toBeCalledWith(chatEvents.editMessage, expect.any(Function));
            socketService.emit(chatEvents.editMessage, {
                payload: EditChatMessageResponse.toBinary(EditChatMessageResponse.create()),
            });
            expect(callback).toBeCalled();
        });
        test('Then deleteMessage should be the right handler', () => {
            const callback = vi.fn();
            chatSocketHandler.on(chatEvents.deleteMessage, callback);
            expect(socketService.on)
                .toBeCalledWith(chatEvents.deleteMessage, expect.any(Function));
            socketService.emit(chatEvents.deleteMessage, {
                payload: DeleteChatMessageResponse.toBinary(DeleteChatMessageResponse.create()),
            });
            expect(callback).toBeCalled();
        });
        test('Then default case shouldn\'t do anything', () => {
            const callback = vi.fn();
            const randomEvent = 39134134;
            chatSocketHandler.on(randomEvent, callback);
            socketService.emit(randomEvent);
            expect(callback).not.toBeCalled();
        });
    });
});
