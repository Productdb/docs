import { BroadcastMessagePayload } from '../client/DyteParticipants';
import { PollCreatePayload, PollVotePayload } from '../client/DytePolls';
import DyteRemoteRequest, { RemoteEventData } from '../client/DyteRemoteRequest';
import { AcceptJoinStageRequest, RequestToJoinType, WebinarAcceptRequestType } from '../client/DyteWebinarRequest';
import { WebsocketMessage } from '../sockets/SocketClient';
export default abstract class RoomNodeClient {
    #private;
    meetingTitle: string;
    roomName: string;
    roomUUID: string;
    isDisconnected: boolean;
    roomJoined: boolean;
    peerId: string;
    authToken: string;
    maxPreferredStreams: number;
    get sfuHandler(): any;
    reconnect(): void;
    joinRoom(displayName: string, audioMuted: boolean, roomUUID: string, roomTitle?: string, currentUserSharedMediaStates?: {
        audio?: boolean;
        video?: boolean;
        screen?: boolean;
    }): Promise<{
        roomJoined: boolean;
    }>;
    leaveRoom(): Promise<void>;
    handleSocketCallbacks(message: any): Promise<void>;
    handleSockets(message: any, callBack: (arg?: string) => void): Promise<void>;
    shareMic(audioTrack: MediaStreamTrack): Promise<void>;
    shareWebcam(videoTrack: MediaStreamTrack): Promise<void>;
    shareScreen(screenShareTracks: {
        audio?: MediaStreamTrack;
        video?: MediaStreamTrack;
    }): Promise<void>;
    unmuteSelf(): Promise<void>;
    muteSelf(): Promise<void>;
    pauseWebcam(): Promise<void>;
    disableScreenShare(): Promise<void>;
    acceptWaitingRequest(id: string): Promise<void>;
    rejectWaitingRequest(id: string): Promise<void>;
    muteAll(allowUnMute: boolean): Promise<void>;
    muteAllVideo(): Promise<void>;
    disableAudio(peerId: string): Promise<void>;
    disableVideo(peerId: string): Promise<void>;
    kickAll(): Promise<void>;
    kick(peerId: string): Promise<void>;
    pinPeer(id: string): Promise<unknown>;
    getChatMessages(): Promise<WebsocketMessage>;
    requestRemoteControl(request: DyteRemoteRequest): Promise<WebsocketMessage>;
    acceptRemoteControl(request: DyteRemoteRequest): Promise<WebsocketMessage>;
    terminateRemoteControl(arg0: string, active: DyteRemoteRequest): Promise<WebsocketMessage>;
    sendEventRemoteControl(hostPeerId: string, id: string, data: RemoteEventData): Promise<WebsocketMessage>;
    getPolls(): Promise<unknown>;
    newPoll(pollCreateMessage: PollCreatePayload): Promise<void>;
    votePoll(pollVoteMessage: PollVotePayload): Promise<void>;
    getPage(currentPage: number): Promise<WebsocketMessage>;
    getConsumers(): any;
    sendMessage(message: any): Promise<WebsocketMessage>;
    getRoomState(): Promise<WebsocketMessage>;
    addRoomPlugin(arg0: any): Promise<WebsocketMessage>;
    removeRoomPlugin(arg0: any): Promise<WebsocketMessage>;
    unpinChatMessage(arg0: {
        id: string;
    }): Promise<WebsocketMessage>;
    pinChatMessage(arg0: {
        id: string;
    }): Promise<WebsocketMessage>;
    sendChatMessage(text: any): Promise<void>;
    broadcastMessage(type: string, payload: BroadcastMessagePayload): Promise<WebsocketMessage>;
    acceptAllRequestToJoinStage(acceptJoinStageRequests: AcceptJoinStageRequest[]): Promise<void>;
    stopPresenting(): Promise<void>;
    startPresenting(): Promise<void>;
    requestToJoinStage(PRESENT: RequestToJoinType): Promise<void>;
    rejectRequestToJoinStage(id: string): Promise<void>;
    removePeerFromStage(id: string, REQUESTED_BY_MODERATOR: WebinarAcceptRequestType): Promise<void>;
    stopAllProducers(): void;
}
