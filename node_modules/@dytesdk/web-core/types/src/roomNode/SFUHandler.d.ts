/// <reference types="node" />
import EventEmitter from 'events';
import { Device, types as MediaSoup } from '@dyteinternals/mediasoup-client';
import SocketClient from '../sockets/SocketClient';
import { PRODUCERS_TYPE } from './RoomNodeConfig';
export interface ExtendedConsumer extends MediaSoup.Consumer {
    peerId: string;
    remotelyPaused: boolean;
    score?: number;
}
export interface ExtendedProducer extends MediaSoup.Producer {
    score?: number;
}
export declare const enum ProducerStatus {
    INITIALIZING = "INITIALIZING",
    INITIALIZED = "INITIALIZED",
    NOT_INITIALIZED = "NOT_INITIALIZED"
}
export default class SFUHandler extends EventEmitter {
    device: Device;
    private sendTransport?;
    private recvTransport?;
    private sendTransportIceStateDisconnectTime?;
    private recvTransportIceStateDisconnectTime?;
    private producerCreationStatus;
    consumers: Map<string, ExtendedConsumer>;
    producers: Map<PRODUCERS_TYPE, ExtendedProducer>;
    socketClient: SocketClient;
    iceRestartInProgress: {
        sendTransport: boolean;
        recvTransport: boolean;
    };
    constructor(socketClient: SocketClient);
    setupTransports(): Promise<void>;
    loadRouter(): Promise<void>;
    getRTPCapabilities(): MediaSoup.RtpCapabilities;
    createRecvTransport(iceServers?: MediaSoup.TransportOptions['iceServers']): Promise<void>;
    createSendTransport(iceServers?: MediaSoup.TransportOptions['iceServers']): Promise<void>;
    restartIce(transport: MediaSoup.Transport): Promise<void>;
    createConsumer(request: any): Promise<void>;
    closeConsumer(request: {
        id: string;
    }): Promise<void>;
    cleanupConsumers(): Promise<void>;
    pauseConsumer(request: {
        id: string;
    }): Promise<void>;
    resumeConsumer(request: {
        id: string;
    }): Promise<void>;
    createProducer(producerType: PRODUCERS_TYPE, producerOptions: MediaSoup.ProducerOptions, onDisconnect: () => void): Promise<void>;
    removeProducer(producerType: PRODUCERS_TYPE, stopTrack?: boolean): Promise<void>;
    stopAllProducers(): void;
    stopAllTransports(): Promise<void>;
    private reconfigureWebcamLayers;
    private reconfigureSafariScreenshareLayers;
    private restartIceTillSuccess;
}
