/// <reference types="node" />
import { EventEmitter } from 'events';
export interface TransportOpts {
    iceServers: RTCIceServer[];
}
export declare abstract class BaseSFUHandler extends EventEmitter {
    abstract createSendTransport(transportOpts: any): Promise<void>;
    abstract createRecvTransport(transportOpts: any): Promise<void>;
    abstract createProducer(type: string, producerOpts: any, onClose: any): Promise<void>;
    abstract createConsumer(consumerOpts: any): Promise<void>;
    abstract pauseProducer(type: string): Promise<void>;
    abstract resumeProducer(type: string): Promise<void>;
    abstract removeProducer(type: string, stopTrack: boolean): Promise<void>;
    abstract pauseConsumer(consumerId: string): Promise<void>;
    abstract resumeConsumer(consumerId: string): Promise<void>;
    abstract closeConsumer(consumerId: string): Promise<void>;
}
