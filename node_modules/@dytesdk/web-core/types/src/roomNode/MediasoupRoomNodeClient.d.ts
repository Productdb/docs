import SocketClient, { WebsocketMessage } from '../sockets/SocketClient';
import SFUHandler from './SFUHandler';
import DytePlugin from '../client/DytePlugin';
import { Message } from '../client/DyteChat';
import DyteRemoteRequest, { RemoteEventData } from '../client/DyteRemoteRequest';
import { PollCreatePayload, PollVotePayload } from '../client/DytePolls';
import { BroadcastMessagePayload } from '../client/DyteParticipants';
import RoomNodeClient from './BaseRoomNodeClient';
import { DyteSpotlightAssertMessage } from '../client/DyteSpotlightRequest';
import { AcceptJoinStageRequest, RequestToJoinType, WebinarAcceptRequestType } from '../client/DyteWebinarRequest';
export default class MediasoupRoomNodeClient extends RoomNodeClient {
    #private;
    readonly isV2AuthToken: boolean;
    legacyMode: boolean;
    roomNodeUrl: string;
    peerDisplayName: string;
    constructor(options: {
        roomName: string;
        roomNodeUrl: string;
        peerId: string;
        authToken: string;
        legacyMode: boolean;
        socketClient: SocketClient;
        meetingTitle: string;
    });
    static init(options: {
        legacyMode?: boolean;
        roomName: string;
        roomNodeUrl: string;
        peerId: string;
        authToken: string;
        meetingTitle: string;
    }): Promise<RoomNodeClient>;
    get sfuHandler(): SFUHandler;
    reconnect(): void;
    setupTransports(): Promise<void>;
    handleSocketCallbacks(message: WebsocketMessage): Promise<void>;
    handleSockets(message: WebsocketMessage, callBack?: (arg?: string) => void): Promise<void>;
    joinRoom(displayName: string, audioMuted: boolean, roomUUID: string, roomTitle?: string, currentUserSharedMediaStates?: {
        audio?: boolean;
        video?: boolean;
        screen?: boolean;
    }): Promise<{
        roomJoined: boolean;
    }>;
    leaveRoom(): Promise<void>;
    private handleProducerClosed;
    getConsumers(): Map<string, import("./SFUHandler").ExtendedConsumer>;
    private static getComputedScore;
    private handleConsumerScore;
    private handleProducerScore;
    shareWebcam(videoTrack?: MediaStreamTrack): Promise<void>;
    shareScreen(tracks: {
        video?: MediaStreamTrack;
        audio?: MediaStreamTrack;
    }): Promise<void>;
    shareMic(audioTrack?: MediaStreamTrack): Promise<void>;
    pauseMic(): void;
    pauseWebcam(): Promise<void>;
    resumeMic(): Promise<void>;
    resumeWebcam(): Promise<void>;
    disableWebcam(): Promise<void>;
    disableMic(): Promise<void>;
    disableScreenShare(): Promise<void>;
    resetVideoProducers(videoTrack: MediaStreamTrack, screenShareTrack?: MediaStreamTrack): Promise<void>;
    getRoomState(): Promise<WebsocketMessage>;
    changeRoomDisplayTitle(displayTitle: string): Promise<void>;
    sendMessage(message: WebsocketMessage): Promise<WebsocketMessage>;
    broadcastMessage(type: string, messagePayload: BroadcastMessagePayload): Promise<WebsocketMessage>;
    sendChatMessage(message: Omit<Message, 'time' | 'type' | 'id'> & {
        time: number;
        type: number;
    }): Promise<void>;
    getChatMessages(): Promise<WebsocketMessage>;
    pinChatMessage(payload: {
        id: string;
    }): Promise<WebsocketMessage>;
    unpinChatMessage(payload: {
        id: string;
    }): Promise<WebsocketMessage>;
    getPolls(): Promise<WebsocketMessage>;
    newPoll(poll: PollCreatePayload): Promise<void>;
    votePoll(poll: PollVotePayload): Promise<void>;
    acceptWaitingRequest(peerId: string): Promise<void>;
    rejectWaitingRequest(peerId: string): Promise<void>;
    muteAll(allowUnMute: boolean): Promise<void>;
    muteAllVideo(): Promise<void>;
    pinPeer(peerId: string): Promise<WebsocketMessage>;
    unpinPeer(peerId: string): Promise<WebsocketMessage>;
    disableAudio(peerId: string): Promise<void>;
    disableVideo(peerId: string): Promise<void>;
    kickAll(): Promise<void>;
    kick(peerId: string): Promise<void>;
    getPage(pageNum: number): Promise<WebsocketMessage>;
    muteSelf(): Promise<void>;
    unmuteSelf(): Promise<void>;
    addRoomPlugin(plugin: Pick<DytePlugin, 'id' | 'staggered'>): Promise<WebsocketMessage>;
    removeRoomPlugin(plugin: Pick<DytePlugin, 'id'>): Promise<WebsocketMessage>;
    private remoteControlMessage;
    requestRemoteControl(request: DyteRemoteRequest): Promise<WebsocketMessage>;
    acceptRemoteControl(request: DyteRemoteRequest): Promise<WebsocketMessage>;
    terminateRemoteControl(peerId: string, request: DyteRemoteRequest): Promise<WebsocketMessage>;
    sendEventRemoteControl(peerId: string, remoteRequestId: string, remoteEvent: RemoteEventData): Promise<WebsocketMessage>;
    private assertSpotlight;
    assertSpotlightToRoom(spotlightAssertMessage: DyteSpotlightAssertMessage): Promise<WebsocketMessage>;
    assertSpotlightToPeer(spotlightAssertMessage: DyteSpotlightAssertMessage): Promise<WebsocketMessage>;
    requestToJoinStage(requestToJoinType: RequestToJoinType): Promise<void>;
    acceptAllRequestToJoinStage(peers: AcceptJoinStageRequest[]): Promise<void>;
    removePeerFromStage(peerId: string, type: WebinarAcceptRequestType): Promise<void>;
    stopAllProducers(): void;
    startPresenting(): Promise<void>;
    stopPresenting(): Promise<void>;
    rejectRequestToJoinStage(peerId: string): Promise<void>;
}
