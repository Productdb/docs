import { EnhancedEventEmitter } from './EnhancedEventEmitter';
import { CodecOption, HandlerInterface } from './handlers/HandlerInterface';
export declare type ProducerOptions = {
    track?: MediaStreamTrack;
    encodings?: RTCRtpEncodingParameters[];
    codecOptions?: CodecOption;
    stopTracks?: boolean;
    disableTrackOnPause?: boolean;
    zeroRtpOnPause?: boolean;
    appData?: Record<string, unknown>;
};
export declare type MediaKind = 'audio' | 'video';
export declare class Producer extends EnhancedEventEmitter {
    private readonly _id;
    private readonly _localId;
    private _closed;
    private readonly _handler;
    private _track;
    private readonly _kind;
    private _paused;
    private _maxSpatialLayer;
    private _stopTracks;
    private _disableTrackOnPause;
    private _zeroRtpOnPause;
    private readonly _appData;
    observer: EnhancedEventEmitter;
    constructor({ id, localId, track, stopTracks, disableTrackOnPause, zeroRtpOnPause, handler, appData, }: {
        id: string;
        localId: string;
        track: MediaStreamTrack;
        stopTracks: boolean;
        disableTrackOnPause: boolean;
        zeroRtpOnPause: boolean;
        handler: HandlerInterface;
        appData?: Record<string, unknown>;
    });
    get id(): string;
    get localId(): string;
    get closed(): boolean;
    get kind(): MediaKind;
    get track(): MediaStreamTrack | null;
    get paused(): boolean;
    get maxSpatialLayer(): number | undefined;
    get appData(): Record<string, unknown>;
    set appData(appData: Record<string, unknown>);
    close(reason?: string): void;
    getStats(): Promise<RTCStatsReport>;
    pause(): void;
    resume(): void;
    replaceTrack({ track }: {
        track: MediaStreamTrack | null;
    }): Promise<void>;
    setMaxSpatialLayer(spatialLayer: number): Promise<void>;
    setRtpEncodingParameters(params: RTCRtpEncodingParameters): Promise<void>;
    private _onTrackEnded;
    private _handleTrack;
    private _destroyTrack;
}
