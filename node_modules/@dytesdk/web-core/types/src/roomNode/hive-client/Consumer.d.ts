import { EnhancedEventEmitter } from './EnhancedEventEmitter';
import { HandlerInterface } from './handlers/HandlerInterface';
export interface ConsumerOptions {
    id?: string;
    producerId: string;
    producingPeerId: string;
    kind?: 'audio' | 'video';
    paused?: boolean;
    appData?: Record<string, unknown>;
}
export interface InternalConsumerOptions extends ConsumerOptions {
    localId: string;
    handler: HandlerInterface;
    track?: MediaStreamTrack;
}
export declare type MediaKind = 'audio' | 'video';
export declare class Consumer extends EnhancedEventEmitter {
    private readonly _id;
    private readonly _localId;
    private readonly _producerId;
    private _closed;
    private readonly _handler;
    private readonly _track;
    private _paused;
    private _peerId;
    private readonly _appData;
    observer: EnhancedEventEmitter;
    constructor({ id, localId, producerId, producingPeerId, handler, track, appData, paused, }: InternalConsumerOptions);
    get id(): string;
    get peerId(): string;
    get localId(): string;
    get producerId(): string;
    get closed(): boolean;
    get kind(): MediaKind;
    get track(): MediaStreamTrack;
    get paused(): boolean;
    get remotelyPaused(): boolean;
    get appData(): Record<string, unknown>;
    set appData(appData: Record<string, unknown>);
    close(reason?: string): void;
    getStats(): Promise<RTCStatsReport>;
    pause(): void;
    resume(): void;
    private _onTrackEnded;
    private _handleTrack;
    private _destroyTrack;
}
