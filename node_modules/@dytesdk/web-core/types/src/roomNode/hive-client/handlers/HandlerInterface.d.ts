import { EnhancedEventEmitter } from '../EnhancedEventEmitter';
export interface GenericHandlerResult {
    offerSdp: RTCSessionDescriptionInit;
    callback: (answer: RTCSessionDescriptionInit) => Promise<void> | any;
}
export declare type HandlerRunOptions = {
    direction: 'send' | 'recv';
    iceServers?: RTCIceServer[];
    iceTransportPolicy?: RTCIceTransportPolicy;
    additionalSettings?: any;
    proprietaryConstraints?: any;
    onTrackHandler?: (event: RTCTrackEvent) => void;
};
export declare type CodecOption = {
    name: string;
    parameters?: string[];
};
export declare type HandlerSendOptions = {
    track: MediaStreamTrack;
    screenShare?: boolean;
    encodings?: RTCRtpEncodingParameters[];
    codecs?: RTCRtpCodecCapability[];
    codecOption?: CodecOption;
};
export interface HandlerSendResult extends GenericHandlerResult {
}
export interface HandlerReceiveResult {
    track: MediaStreamTrack;
    localId: string;
}
export declare type HandlerReceiveDataChannelResult = {
    dataChannel: RTCDataChannel;
};
export declare abstract class HandlerInterface extends EnhancedEventEmitter {
    private readonly _mapMidTransceiver;
    constructor();
    get midTransceiverMap(): Map<string, RTCRtpTransceiver>;
    abstract get name(): string;
    abstract get pc(): RTCPeerConnection;
    abstract close(): void;
    abstract init(options: HandlerRunOptions): void;
    abstract connect(): Promise<GenericHandlerResult>;
    abstract updateIceServers(iceServers: RTCIceServer[]): Promise<void>;
    abstract restartIce(): Promise<GenericHandlerResult>;
    abstract getTransportStats(): Promise<RTCStatsReport>;
    abstract send(options: HandlerSendOptions): Promise<HandlerSendResult>;
    abstract stopSending(localId: string): Promise<GenericHandlerResult>;
    abstract replaceTrack(localId: string, track: MediaStreamTrack | null): Promise<void>;
    abstract setMaxSpatialLayer(localId: string, spatialLayer: number): Promise<void>;
    abstract setRtpEncodingParameters(localId: string, params: any): Promise<void>;
    abstract getSenderStats(localId: string): Promise<RTCStatsReport>;
    abstract stopReceiving(localId: string): Promise<GenericHandlerResult>;
    abstract pauseReceiving(localIds: string): Promise<GenericHandlerResult>;
    abstract resumeReceiving(localIds: string): Promise<GenericHandlerResult>;
    abstract getReceiverStats(localId: string): Promise<RTCStatsReport>;
}
export declare type HandlerFactory = () => HandlerInterface;
