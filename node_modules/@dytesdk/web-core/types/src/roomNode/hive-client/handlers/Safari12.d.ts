import { GenericHandlerResult, HandlerFactory, HandlerInterface, HandlerReceiveResult, HandlerRunOptions, HandlerSendOptions, HandlerSendResult } from './HandlerInterface';
export declare class Safari12 extends HandlerInterface {
    private _direction?;
    private _pc;
    private readonly _sendWebStream;
    private readonly _sendScreenShareStream;
    private _transportReady;
    static createFactory(): HandlerFactory;
    constructor();
    get name(): string;
    get pc(): RTCPeerConnection;
    close(): void;
    init({ direction, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, onTrackHandler, }: HandlerRunOptions): void;
    connect(): Promise<GenericHandlerResult>;
    updateIceServers(iceServers: RTCIceServer[]): Promise<void>;
    restartIce(): Promise<GenericHandlerResult>;
    getTransportStats(): Promise<RTCStatsReport>;
    send({ track, encodings, codecOption, screenShare, }: HandlerSendOptions): Promise<HandlerSendResult>;
    stopSending(localId: string): Promise<GenericHandlerResult>;
    replaceTrack(localId: string, track: MediaStreamTrack | null): Promise<void>;
    setMaxSpatialLayer(localId: string, spatialLayer: number): Promise<void>;
    setRtpEncodingParameters(localId: string, params: any): Promise<void>;
    getSenderStats(localId: string): Promise<RTCStatsReport>;
    receive(answer: RTCLocalSessionDescriptionInit): Promise<HandlerReceiveResult>;
    stopReceiving(localId: string): Promise<GenericHandlerResult>;
    pauseReceiving(localId: string): Promise<GenericHandlerResult>;
    resumeReceiving(localId: string): Promise<GenericHandlerResult>;
    getReceiverStats(localId: string): Promise<RTCStatsReport>;
    private _assertSendDirection;
    private _assertRecvDirection;
    private _generateOffer;
    private _setAnswer;
    private _addEventListeners;
}
