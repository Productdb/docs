import Bowser from 'bowser';
import EventEmitter from 'events';
import { v4 as uuid } from 'uuid';
import { Chrome74 } from './handlers/Chrome74';
import { Firefox60 } from './handlers/Firefox60';
import { Safari12 } from './handlers/Safari12';
import Logger from './Logger';
import { Transport } from './Transport';
const logger = Logger.getLogger('Device');
export function detectDevice() {
    if (typeof navigator === 'object' && navigator.product === 'ReactNative') {
        if (typeof RTCPeerConnection === 'undefined') {
            logger.warn('this._detectDevice() | unsupported ReactNative without RTCPeerConnection');
            return undefined;
        }
        logger.debug('this._detectDevice() | ReactNative handler chosen');
        return 'ReactNative';
    }
    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string') {
        const ua = navigator.userAgent;
        const browser = Bowser.getParser(ua);
        const engine = browser.getEngine();
        if (browser.satisfies({ chrome: '>=74', chromium: '>=74', 'microsoft edge': '>=88' })) {
            return 'Chrome74';
        }
        if (browser.satisfies({ chrome: '>=70', chromium: '>=70' })) {
            return 'Chrome70';
        }
        if (browser.satisfies({ chrome: '>=67', chromium: '>=67' })) {
            return 'Chrome67';
        }
        if (browser.satisfies({ chrome: '>=55', chromium: '>=55' })) {
            return 'Chrome55';
        }
        if (browser.satisfies({ firefox: '>=60' })) {
            return 'Firefox60';
        }
        if (browser.satisfies({ ios: { OS: '>=14.3', firefox: '>=30.0' } })) {
            return 'Safari12';
        }
        if (browser.satisfies({ safari: '>=12.0' })
            && typeof RTCRtpTransceiver !== 'undefined'
            && RTCRtpTransceiver.prototype.hasOwnProperty('currentDirection')) {
            return 'Safari12';
        }
        if (browser.satisfies({ safari: '>=11' })) {
            return 'Safari11';
        }
        if (browser.satisfies({ 'microsoft edge': '>=11' })
            && browser.satisfies({ 'microsoft edge': '<=18' })) {
            return 'Edge11';
        }
        if (engine.name && engine.name.toLowerCase() === 'blink') {
            const match = ua.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
            if (match) {
                const version = Number(match[1]);
                if (version >= 74) {
                    return 'Chrome74';
                }
                if (version >= 70) {
                    return 'Chrome70';
                }
                if (version >= 67) {
                    return 'Chrome67';
                }
                return 'Chrome55';
            }
            return 'Chrome74';
        }
        logger.warn('this._detectDevice() | browser not supported [name:%s, version:%s]', browser.getBrowserName(), browser.getBrowserVersion());
        return undefined;
    }
    logger.warn('this._detectDevice() | unknown device');
    return undefined;
}
export class Device {
    _handlerFactory;
    _handlerName;
    _observer;
    constructor({ handlerName, handlerFactory } = {}) {
        logger.debug('constructor()');
        if (handlerName && handlerFactory) {
            throw new TypeError('just one of handlerName or handlerInterface can be given');
        }
        if (handlerFactory) {
            this._handlerFactory = handlerFactory;
        }
        else {
            if (handlerName) {
                logger.debug('constructor() | handler given: %s', handlerName);
            }
            else {
                handlerName = detectDevice();
                if (handlerName) {
                    logger.debug('constructor() | detected handler: %s', handlerName);
                }
                else {
                    throw new Error('device not supported');
                }
            }
            switch (handlerName) {
                case 'Chrome74':
                    this._handlerFactory = Chrome74.createFactory();
                    break;
                case 'Safari12':
                    this._handlerFactory = Safari12.createFactory();
                    break;
                case 'Firefox60':
                    this._handlerFactory = Firefox60.createFactory();
                    break;
                default:
                    throw new TypeError(`unknown handlerName "${handlerName}"`);
            }
        }
        const handler = this._handlerFactory();
        this._handlerName = handler.name;
        handler.close();
        this._observer = new EventEmitter();
    }
    get handlerName() {
        return this._handlerName;
    }
    createSendTransport({ iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, }) {
        logger.debug('createSendTransport()');
        return this._createTransport({
            direction: 'send',
            iceServers,
            iceTransportPolicy,
            additionalSettings,
            proprietaryConstraints,
            appData,
        });
    }
    createRecvTransport({ iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, }) {
        logger.debug('createRecvTransport()');
        return this._createTransport({
            direction: 'recv',
            iceServers,
            iceTransportPolicy,
            additionalSettings,
            proprietaryConstraints,
            appData,
        });
    }
    _createTransport({ direction, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, }) {
        const id = uuid();
        const transport = new Transport({
            id,
            direction,
            iceServers,
            iceTransportPolicy,
            additionalSettings,
            proprietaryConstraints,
            appData,
            handlerFactory: this._handlerFactory,
        });
        logger.info('transport created', transport);
        this._observer.emit('newtransport', transport);
        return transport;
    }
}
