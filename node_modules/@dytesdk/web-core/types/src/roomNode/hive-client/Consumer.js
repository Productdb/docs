import { EnhancedEventEmitter } from './EnhancedEventEmitter';
import { InvalidStateError } from './Errors';
import Logger from './Logger';
const logger = Logger.getLogger('Consumer');
export class Consumer extends EnhancedEventEmitter {
    _id;
    _localId;
    _producerId;
    _closed = false;
    _handler;
    _track;
    _paused;
    _peerId;
    _appData;
    observer;
    constructor({ id, localId, producerId, producingPeerId, handler, track, appData, paused, }) {
        super();
        this._id = id;
        this._localId = localId;
        this._handler = handler;
        this._appData = appData;
        this._peerId = producingPeerId;
        this._producerId = producerId;
        this._onTrackEnded = this._onTrackEnded.bind(this);
        this._track = track;
        this._paused = paused ?? false;
        this.observer = new EnhancedEventEmitter();
        this._handleTrack();
    }
    get id() {
        return this._id;
    }
    get peerId() {
        return this._peerId;
    }
    get localId() {
        return this._localId;
    }
    get producerId() {
        return this._producerId;
    }
    get closed() {
        return this._closed;
    }
    get kind() {
        return this._track.kind;
    }
    get track() {
        return this._track;
    }
    get paused() {
        return this._paused;
    }
    get remotelyPaused() {
        return this.paused;
    }
    get appData() {
        return this._appData;
    }
    set appData(appData) {
        throw new Error('cannot override appData object');
    }
    close(reason) {
        if (this._closed) {
            return;
        }
        logger.debug('close() with reason:', reason);
        this._closed = true;
        this._destroyTrack();
        this.emit('close', reason);
        this.observer.safeEmit('close', reason);
    }
    async getStats() {
        if (this._closed) {
            throw new InvalidStateError('closed');
        }
        return this._handler.getReceiverStats(this.localId);
    }
    pause() {
        logger.debug(`consumer(${this.id}):pause()`);
        if (this._closed) {
            logger.error('pause() | Consumer closed');
            return;
        }
        this._paused = true;
        this._track.enabled = false;
        this.observer.safeEmit('pause');
    }
    resume() {
        logger.debug(`consumer(${this.id}):resume()`);
        if (this._closed) {
            logger.error('resume() | Consumer closed');
            return;
        }
        this._paused = false;
        this._track.enabled = true;
        this.observer.safeEmit('resume');
    }
    _onTrackEnded() {
        logger.debug('track "ended" event');
        this.safeEmit('trackended');
        this.observer.safeEmit('trackended');
    }
    _handleTrack() {
        this._track.addEventListener('ended', this._onTrackEnded);
    }
    _destroyTrack() {
        try {
            this._track.removeEventListener('ended', this._onTrackEnded);
            this._track.stop();
        }
        catch (error) {
            logger.error(error);
        }
    }
}
