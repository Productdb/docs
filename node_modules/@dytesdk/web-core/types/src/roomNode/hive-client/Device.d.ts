/// <reference types="node" />
import EventEmitter from 'events';
import { HandlerFactory } from './handlers/HandlerInterface';
import { Transport, TransportOptions } from './Transport';
export declare type BuiltinHandlerName = 'Chrome74' | 'Chrome70' | 'Chrome67' | 'Chrome55' | 'Firefox60' | 'Safari12' | 'Safari11' | 'Edge11' | 'ReactNative';
export declare type DeviceOptions = {
    handlerName?: BuiltinHandlerName;
    handlerFactory?: HandlerFactory;
};
export declare function detectDevice(): BuiltinHandlerName | undefined;
export declare class Device {
    private readonly _handlerFactory;
    private readonly _handlerName;
    protected readonly _observer: EventEmitter;
    constructor({ handlerName, handlerFactory }?: DeviceOptions);
    get handlerName(): string;
    createSendTransport({ iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, }: TransportOptions): Transport;
    createRecvTransport({ iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, }: TransportOptions): Transport;
    private _createTransport;
}
