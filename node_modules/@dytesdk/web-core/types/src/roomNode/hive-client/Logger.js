import DyteLogger from '../../client/internals/DyteLogger';
export default class Logger {
    _name;
    static getLogger(name) {
        return new Logger(name);
    }
    static format(s, ...args) {
        const sarr = s.split('%');
        let formattedString = s;
        if (sarr.length) {
            [formattedString] = sarr;
        }
        args.reverse();
        for (let i = 1; i < sarr.length && args.length; i += 1) {
            const arg = args.pop();
            let v = sarr[i];
            switch (v.at(0)) {
                case 's':
                    v = v.replace('s', arg);
                    break;
                case 'd':
                    v = v.replace('d', arg.toString());
                    break;
                case 'o':
                    v = v.replace('o', JSON.stringify(arg, null, 2));
                    break;
                default:
                    break;
            }
            formattedString = `${formattedString}${v}`;
        }
        if (!args.length) {
            return formattedString;
        }
        args.reverse().forEach((arg) => {
            formattedString = `${formattedString} ${arg instanceof Object ? JSON.stringify(arg, null, 2) : arg}`;
        });
        return formattedString;
    }
    constructor(name) {
        this._name = name;
    }
    info(msg, ...args) {
        let message = Logger.format(msg, ...args);
        if (this._name) {
            message = `${this._name}::${message}`;
        }
        DyteLogger.info(message);
    }
    debug(msg, ...args) {
        let message = Logger.format(msg, ...args);
        if (this._name) {
            message = `${this._name}::${message}`;
        }
        DyteLogger.info(message);
    }
    warn(msg, ...args) {
        let message = Logger.format(msg, ...args);
        if (this._name) {
            message = `${this._name}::${message}`;
        }
        DyteLogger.info(message);
    }
    error(msg, ...args) {
        let message = Logger.format(msg, ...args);
        if (this._name) {
            message = `${this._name}::${message}`;
        }
        DyteLogger.error(message);
    }
}
