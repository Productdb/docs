import DyteLogger from './internals/DyteLogger';
class PrioritySet {
    _orderedArray;
    _map;
    constructor() {
        this._map = new Map();
        this._orderedArray = [];
    }
    add(peerId, priority) {
        if (!this._map.has(peerId)) {
            this._map.set(peerId, { peerId, priority });
            this._orderedArray.splice(Math.max(priority - 1, 0), 0, peerId);
            const idx = this.index(peerId);
            return idx;
        }
        const currentIdx = this.index(peerId);
        this.delete(peerId);
        const newIdx = this.add(peerId, priority);
        if (currentIdx !== newIdx) {
            DyteLogger.info('DyteSelectedPeer::add()::new_position_for_active_speaker', {
                selectedPeer: {
                    oldIndex: currentIdx,
                    newIndex: newIdx,
                },
            });
            return newIdx;
        }
        return -1;
    }
    delete(peerId) {
        if (this._map.has(peerId)) {
            const idx = this.index(peerId);
            this._map.delete(peerId);
            this._orderedArray.splice(idx, 1);
        }
    }
    index(peerId) {
        if (this._map.has(peerId)) {
            return this._orderedArray.indexOf(peerId);
        }
        return -1;
    }
    [Symbol.iterator]() {
        return this._orderedArray[Symbol.iterator]();
    }
}
export default class DyteSelectedPeers {
    _activeSpeakerPeers;
    _compulsoryPeers;
    constructor() {
        this._activeSpeakerPeers = new PrioritySet();
        this._compulsoryPeers = new Set();
    }
    add(peerId, priority) {
        if (priority < 0) {
            this._compulsoryPeers.add(peerId);
            return 0;
        }
        if (this.compulsoryPeers.includes(peerId) && (priority > 0 || priority === 246267631)) {
            DyteLogger.info('DyteSelectedPeer::removing_compulsory_peer', {
                selectedPeer: {
                    peerId,
                },
            });
            this._removeFromCompulsoryPeer(peerId);
            if (priority === 246267631)
                return -1;
        }
        return this._activeSpeakerPeers.add(peerId, priority);
    }
    delete(peerId) {
        DyteLogger.info('DyteSelectedPeer::deleting_peer_from_selectedPeer', {
            selectedPeer: {
                peerId,
            },
        });
        this._removeFromCompulsoryPeer(peerId);
        this._activeSpeakerPeers.delete(peerId);
    }
    index(peerId) {
        return this._activeSpeakerPeers.index(peerId);
    }
    get peers() {
        return [...new Set(this.compulsoryPeers.concat(this.activeSpeakerPeers))];
    }
    get compulsoryPeers() {
        return [...this._compulsoryPeers.values()];
    }
    get peerPriorities() {
        return [...this._activeSpeakerPeers].map((el, idx) => idx);
    }
    get activeSpeakerPeers() {
        return [...this._activeSpeakerPeers];
    }
    _removeFromCompulsoryPeer(peerId) {
        this._compulsoryPeers.delete(peerId);
    }
}
