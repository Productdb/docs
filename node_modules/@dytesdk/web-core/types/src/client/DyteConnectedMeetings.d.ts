import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteClient from '..';
import { ConnectedMeetingsEvents } from '../utils/DyteEvents';
import { ConnectedMeeting } from '../socketService/ConnectedMeetingsSocketHandler';
export declare type MoveParticipantsRequestPayload = {
    sourceMeetingId: string;
    destinationMeetingId: string;
    customParticipantIds: string[];
};
export default class DyteConnectedMeetings extends DyteEventEmitter<ConnectedMeetingsEvents> {
    #private;
    constructor(meeting: DyteClient);
    meetings: ConnectedMeeting[];
    parentMeeting: ConnectedMeeting;
    get supportsConnectedMeetings(): boolean;
    get isActive(): boolean;
    get currentMeetingId(): string;
    private validateConnectedMeetingsAction;
    getConnectedMeetings(): Promise<{
        parentMeeting: ConnectedMeeting;
        meetings: ConnectedMeeting[];
    }>;
    createMeetings(request: {
        title: string;
    }[]): Promise<{
        id: string;
        title: string;
    }[]>;
    updateMeetings(request: {
        id: string;
        title: string;
    }[]): Promise<void>;
    deleteMeetings(meetingIds: string[]): Promise<{
        id: string;
    }[]>;
    moveParticipants(sourceMeetingId: string, destinationMeetingId: string, customParticipantIds: string[]): Promise<{
        success: boolean;
        error?: undefined;
    } | {
        success: boolean;
        error: any;
    }>;
}
