import { getDefaultPresetV2, } from '@dyteinternals/utils';
import { DEFAULT_PRESET_MEDIA_CONSTRAINTS } from '../media-new/interface/web/ConstraintBuilder';
import { objectToCamelCase } from '../utils/sanitizer';
import DyteError from './DyteError';
export const DEFAULT_PRESET_CAMEL_CASED = objectToCamelCase(getDefaultPresetV2());
export default class DyteThemePreset {
    #config;
    #theme;
    #pluginsConfig;
    constructor(preset) {
        if (!preset) {
            throw new DyteError('Could not load preset.');
        }
        this.#config = preset.config;
        this.#theme = preset.ui || objectToCamelCase(getDefaultPresetV2().ui);
        this.#pluginsConfig = preset.permissions.plugins.config;
    }
    static fromResponse(preset) {
        return new DyteThemePreset(preset);
    }
    static default() {
        return new DyteThemePreset(DEFAULT_PRESET_CAMEL_CASED);
    }
    get setupScreen() {
        return {
            isEnabled: true,
        };
    }
    get waitingRoom() {
        return {
            isEnabled: true,
        };
    }
    get controlBar() {
        return {
            isEnabled: true,
            elements: {
                chat: true,
                fullscreen: true,
                invite: false,
                layout: false,
                participants: true,
                plugins: true,
                polls: true,
                reactions: false,
                screenshare: true,
            },
        };
    }
    get header() {
        return {
            isEnabled: true,
            elements: {
                logo: this.#theme.designTokens.logo,
                timer: true,
                title: true,
                participantCount: true,
                changeLayout: false,
            },
        };
    }
    get pipMode() {
        return true;
    }
    get viewType() {
        return this.#config.viewType;
    }
    get maxVideoStreams() {
        return this.#config.maxVideoStreams;
    }
    get maxScreenShareCount() {
        return this.#config.maxScreenshareCount;
    }
    get plugins() {
        return [];
    }
    get disabledPlugins() {
        return Object.keys(this.#pluginsConfig).filter((id) => {
            const config = this.#pluginsConfig[id];
            return config.disabled;
        });
    }
    get designTokens() {
        return this.#theme.designTokens;
    }
    get configDiff() {
        return this.#theme.configDiff;
    }
    get mediaConstraints() {
        return {
            video: {
                quality: this.#config?.media?.video?.quality
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.video.quality,
                frameRate: this.#config?.media?.video?.frameRate
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.video.frameRate,
            },
            screenshare: {
                quality: this.#config?.media?.screenshare?.quality
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.screenshare.quality,
                frameRate: this.#config?.media?.screenshare?.frameRate
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.screenshare.frameRate,
            },
        };
    }
    get isV2() {
        return true;
    }
}
