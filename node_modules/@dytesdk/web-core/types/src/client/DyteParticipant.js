var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteTelemetry from '../utils/opentelemetry';
import getLoggableCurrentMediaStates from '../utils/opentelemetry-helpers/loggableMediaState';
import DyteError, { CatchAll } from './DyteError';
import { WebinarStageStatus } from './DyteSelf';
import { RequestToJoinType, WebinarAcceptRequestType } from './DyteWebinarRequest';
import DyteLogger from './internals/DyteLogger';
let DyteParticipant = class DyteParticipant extends DyteEventEmitter {
    id;
    userId;
    name;
    picture;
    isHost;
    clientSpecificId;
    flags;
    device;
    videoTrack;
    audioTrack;
    screenShareTracks;
    videoEnabled;
    audioEnabled;
    screenShareEnabled;
    producers;
    #isPinned;
    supportsRemoteControl = false;
    webinarStageStatus = WebinarStageStatus.OFF_STAGE;
    presetName;
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    get roomJoined() {
        return this.#roomNodeClient?.roomJoined === true;
    }
    #self;
    constructor(participant, self) {
        super();
        const { id, userId, displayName: name, device, picture, isHost, flags, clientSpecificId, customParticipantId, audioMuted, audioTrack, videoEnabled = false, videoTrack, producers, metadata, } = participant;
        this.id = id;
        this.userId = userId;
        this.name = name;
        this.device = device;
        this.picture = picture;
        this.isHost = isHost;
        this.flags = flags;
        this.clientSpecificId = customParticipantId ?? clientSpecificId;
        this.audioEnabled = !audioMuted;
        this.audioTrack = audioTrack;
        this.videoEnabled = videoEnabled;
        this.videoTrack = videoTrack;
        this.screenShareTracks = {
            audio: undefined,
            video: undefined,
        };
        this.producers = producers ?? [];
        this.presetName = metadata?.preset_name;
        this.#isPinned = false;
        this.#self = self;
    }
    setVideoEnabled(videoEnabled, emitEvent = true) {
        this.videoEnabled = videoEnabled;
        if (!emitEvent)
            return;
        DyteLogger.info('DyteParticipant::setVideoEnabled::videoUpdate', {
            ...getLoggableCurrentMediaStates(this),
        });
        this.emit('videoUpdate', {
            videoEnabled: this.videoEnabled,
            videoTrack: this.videoTrack,
        });
    }
    setAudioEnabled(audioEnabled, emitEvent = true) {
        this.audioEnabled = audioEnabled;
        if (!emitEvent)
            return;
        DyteLogger.info('DyteParticipant::setAudioEnabled::audioUpdate', {
            ...getLoggableCurrentMediaStates(this),
        });
        this.emit('audioUpdate', {
            audioEnabled: this.audioEnabled,
            audioTrack: this.audioTrack,
        });
    }
    setScreenShareEnabled(screenShareEnabled, emitEvent = true) {
        this.screenShareEnabled = screenShareEnabled;
        if (!emitEvent)
            return;
        this.emit('screenShareUpdate', {
            screenShareEnabled: this.screenShareEnabled,
            screenShareTracks: this.screenShareTracks,
        });
    }
    async pin() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t pin participant without joining room');
        }
        return this.#roomNodeClient.pinPeer(this.id);
    }
    async unpin() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t unpin participant without joining room');
        }
        return this.#roomNodeClient.pinPeer(null);
    }
    setIsPinned(isPinned, emitEvent = true) {
        this.#isPinned = isPinned;
        const event = isPinned ? 'pinned' : 'unpinned';
        if (emitEvent)
            this.emit(event, this);
    }
    async disableAudio() {
        const peerId = this.id;
        DyteLogger.info('DyteParticipant::disable_audio', { dyteParticipant: { id: peerId } });
        if (!this.roomJoined) {
            throw new DyteError('Can`t disable participant audio without joining room');
        }
        if (this.#self.permissions.canDisableParticipantAudio) {
            return this.#roomNodeClient.disableAudio(peerId);
        }
        DyteLogger.error('DyteParticipant::unauthorized_disable_audio', { dyteParticipant: { id: peerId } });
        throw new DyteError('Unauthorized: User does not have permission to disable participant audio.');
    }
    async kick() {
        const peerId = this.id;
        DyteLogger.info('DyteParticipant::kick', { dyteParticipant: { id: peerId } });
        if (!this.roomJoined) {
            throw new DyteError('Can`t kick participant without joining room');
        }
        if (this.#self.permissions.kickParticipant) {
            return this.#roomNodeClient.kick(peerId);
        }
        DyteLogger.error('DyteParticipant::unauthorized_kick', { dyteParticipant: { id: peerId } });
        throw new DyteError('Unauthorized: User does not have permission to kick participants.');
    }
    async disableVideo() {
        const peerId = this.id;
        DyteLogger.info('DyteParticipant::disable_video', { dyteParticipant: { id: peerId } });
        if (!this.roomJoined) {
            throw new DyteError('Can`t disable participant video without joining room');
        }
        if (this.#self.permissions.canDisableParticipantVideo) {
            return this.#roomNodeClient.disableVideo(peerId);
        }
        DyteLogger.error('DyteParticipant::unauthorized_disable_video', { dyteParticipant: { id: peerId } });
        throw new DyteError('Unauthorized: User does not have permission to disable participant video.');
    }
    async acceptJoinStageRequest() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t acceptJoinStageRequest for participant without joining room');
        }
        this.#roomNodeClient.acceptAllRequestToJoinStage([{
                id: this.id,
                requestToJoinType: RequestToJoinType.PRESENT,
            }]);
    }
    async rejectRequestToJoinStage() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t rejectRequestToJoinStage for participant without joining room');
        }
        this.#roomNodeClient.rejectRequestToJoinStage(this.id);
    }
    async removeFromStage() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t removeFromStage participant without joining room');
        }
        this.#roomNodeClient.removePeerFromStage(this.id, WebinarAcceptRequestType.REQUESTED_BY_MODERATOR);
    }
    setWebinarStageStatus(webinarStageStatus) {
        this.webinarStageStatus = webinarStageStatus;
        let eventName;
        if (webinarStageStatus === WebinarStageStatus.OFF_STAGE) {
            eventName = 'peerStoppedPresenting';
        }
        if (webinarStageStatus === WebinarStageStatus.ON_STAGE) {
            eventName = 'peerStartedPresenting';
        }
        if (webinarStageStatus === WebinarStageStatus.ACCEPTED_TO_JOIN_STAGE) {
            eventName = 'peerAcceptedToJoinStage';
        }
        if (webinarStageStatus === WebinarStageStatus.REQUESTED_TO_JOIN_STAGE) {
            eventName = 'peerRequestToJoinStage';
        }
        if (eventName) {
            this.emit(eventName, this);
        }
    }
    get isPinned() {
        return this.#isPinned;
    }
};
__decorate([
    DyteTelemetry.trace('DyteParticipant.disableAudio'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipant.prototype, "disableAudio", null);
__decorate([
    DyteTelemetry.trace('DyteParticipant.kick'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipant.prototype, "kick", null);
__decorate([
    DyteTelemetry.trace('DyteParticipant.disableVideo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipant.prototype, "disableVideo", null);
__decorate([
    DyteTelemetry.trace('DyteParticipant.acceptJoinStageRequest'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipant.prototype, "acceptJoinStageRequest", null);
__decorate([
    DyteTelemetry.trace('DyteParticipant.rejectRequestToJoinStage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipant.prototype, "rejectRequestToJoinStage", null);
__decorate([
    DyteTelemetry.trace('DyteParticipant.removeFromStage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipant.prototype, "removeFromStage", null);
__decorate([
    DyteTelemetry.trace('DyteParticipant.setWebinarStageStatus'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], DyteParticipant.prototype, "setWebinarStageStatus", null);
DyteParticipant = __decorate([
    CatchAll((err) => { throw new DyteError(err.message, '1200'); }),
    __metadata("design:paramtypes", [Object, Object])
], DyteParticipant);
export default DyteParticipant;
