import DyteEventEmitter from '../../utils/DyteEventEmitter';
declare const defaultMapEvents: readonly ["added", "deleted", "cleared"];
declare type DefaultMapEvents = typeof defaultMapEvents[number];
export interface DyteMapEvents<T extends string | symbol = DefaultMapEvents> {
    onAddEvent?: T;
    onDeleteEvent?: T;
    onClearEvent?: T;
}
export default class DyteMap<T extends string | symbol, U extends {
    id: string;
} & DyteEventEmitter<T | '*'>, V extends string | symbol = DefaultMapEvents> extends Map<string, U> {
    #private;
    readonly onAddEvent: V | DefaultMapEvents;
    readonly onDeleteEvent: V | DefaultMapEvents;
    readonly onClearEvent: V | DefaultMapEvents;
    constructor(options?: DyteMapEvents<V>);
    emit(event: V, ...args: any[]): boolean;
    on(event: V, callback: (...args: any[]) => any): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    addListener(event: V, callback: (...args: any[]) => any): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    off(event: V, callback: (...args: any[]) => any): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    once(event: V, callback: (...args: any[]) => any): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    prependListener(event: V, callback: (...args: any[]) => any): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    prependOnceListener(event: V, callback: (...args: any[]) => any): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    removeListener(event: V, callback: (...args: any[]) => any): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    removeAllListeners(event?: V): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    listeners(event: V): Function[];
    listenerCount(event: V): number;
    getMaxListeners(): number;
    setMaxListeners(n: number): DyteEventEmitter<"added" | "deleted" | "cleared" | V>;
    eventNames(): (string | symbol)[];
    add(obj: U, emitEvent?: boolean): this;
    set(objId: string, obj: U, emitEvent?: boolean): this;
    delete(objId: string, emitEvent?: boolean, removeListeners?: boolean): boolean;
    clear(emitEvent?: boolean, removeListeners?: boolean): void;
    toArray(): U[];
}
export {};
