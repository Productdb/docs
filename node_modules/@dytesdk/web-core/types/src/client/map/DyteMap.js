import DyteEventEmitter from '../../utils/DyteEventEmitter';
const defaultMapEvents = ['added', 'deleted', 'cleared'];
export default class DyteMap extends Map {
    #eventEmitter;
    #listeners;
    onAddEvent;
    onDeleteEvent;
    onClearEvent;
    constructor(options) {
        const { onAddEvent = 'added', onDeleteEvent = 'deleted', onClearEvent = 'cleared', } = options ?? {};
        super();
        this.#eventEmitter = new DyteEventEmitter();
        this.onAddEvent = onAddEvent;
        this.onDeleteEvent = onDeleteEvent;
        this.onClearEvent = onClearEvent;
        this.#listeners = new Map();
    }
    emit(event, ...args) {
        return this.#eventEmitter.emit(event, ...args);
    }
    on(event, callback) {
        return this.#eventEmitter.on(event, callback);
    }
    addListener(event, callback) {
        return this.#eventEmitter.addListener(event, callback);
    }
    off(event, callback) {
        return this.#eventEmitter.off(event, callback);
    }
    once(event, callback) {
        return this.#eventEmitter.once(event, callback);
    }
    prependListener(event, callback) {
        return this.#eventEmitter.prependListener(event, callback);
    }
    prependOnceListener(event, callback) {
        return this.#eventEmitter.prependOnceListener(event, callback);
    }
    removeListener(event, callback) {
        return this.#eventEmitter.removeListener(event, callback);
    }
    removeAllListeners(event) {
        return this.#eventEmitter.removeAllListeners(event);
    }
    listeners(event) {
        return this.#eventEmitter.listeners(event);
    }
    listenerCount(event) {
        return this.#eventEmitter.listenerCount(event);
    }
    getMaxListeners() {
        return this.#eventEmitter.getMaxListeners();
    }
    setMaxListeners(n) {
        return this.#eventEmitter.setMaxListeners(n);
    }
    eventNames() {
        return this.#eventEmitter.eventNames();
    }
    add(obj, emitEvent = true) {
        return this.set(obj.id, obj, emitEvent);
    }
    set(objId, obj, emitEvent = true) {
        const setVal = super.set(objId, obj);
        const listener = (event, ...args) => {
            this.emit(event, obj, ...args);
        };
        this.#listeners.set(objId, listener);
        obj.on('*', listener);
        if (emitEvent) {
            this.#eventEmitter.emit(this.onAddEvent, obj);
        }
        return setVal;
    }
    delete(objId, emitEvent = true, removeListeners = false) {
        const obj = this.get(objId);
        if (!obj) {
            return false;
        }
        obj.removeListener('*', this.#listeners.get(objId));
        const deleteVal = super.delete(objId);
        if (removeListeners) {
            obj.removeAllListeners();
        }
        if (emitEvent) {
            this.#eventEmitter.emit(this.onDeleteEvent, obj);
        }
        return deleteVal;
    }
    clear(emitEvent = true, removeListeners = false) {
        this.forEach((obj) => {
            obj.removeListener('*', this.#listeners.get(obj.id));
            if (removeListeners) {
                obj.removeAllListeners();
            }
        });
        const clearVal = super.clear();
        if (emitEvent) {
            this.#eventEmitter.emit(this.onClearEvent);
        }
        return clearVal;
    }
    toArray() {
        return Array.from(this.values());
    }
}
