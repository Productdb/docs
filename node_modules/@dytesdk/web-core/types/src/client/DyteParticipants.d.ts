import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteParticipant from './DyteParticipant';
import DyteSelf from './DyteSelf';
import DyteParticipantMap from './map/DyteParticipantMap';
import DyteSelectedPeers from './DyteSelectedPeers';
import { AcceptJoinStageRequest } from './DyteWebinarRequest';
import { ParticipantsEvents } from '../utils/DyteEvents';
declare type ViewMode = 'ACTIVE_GRID' | 'PAGINATED';
export interface BroadcastMessagePayload {
    [key: string]: boolean | number | string | Date;
}
export default class DyteParticipants extends DyteEventEmitter<ParticipantsEvents> {
    #private;
    readonly waitlisted: Readonly<DyteParticipantMap<Omit<DyteParticipant, 'audioTrack' | 'videoTrack' | 'screenShareTracks'>>>;
    readonly joined: Readonly<DyteParticipantMap>;
    readonly active: Readonly<DyteParticipantMap>;
    readonly pinned: Readonly<DyteParticipantMap>;
    private get roomJoined();
    viewMode: ViewMode;
    currentPage: number;
    lastActiveSpeaker: string;
    selectedPeers: DyteSelectedPeers;
    constructor(self: DyteSelf);
    get count(): number;
    get maxActiveParticipantsCount(): any;
    get pageCount(): number;
    acceptWaitingRoomRequest(id: string): Promise<void>;
    rejectWaitingRoomRequest(id: string): Promise<void>;
    setViewMode(viewMode: ViewMode): Promise<void>;
    getPeerIdsForCurrentPage(): string[];
    setPage(page: number): Promise<void>;
    disableAllAudio(allowUnmute: boolean): Promise<void>;
    disableAllVideo(): Promise<void>;
    disableAudio(participantId: string): Promise<void>;
    disableVideo(participantId: string): Promise<void>;
    kick(participantId: string): Promise<void>;
    kickAll(): Promise<void>;
    broadcastMessage(type: string, payload: BroadcastMessagePayload): Promise<void>;
    acceptAllRequestToJoinStageRequests(acceptJoinStageRequests: AcceptJoinStageRequest[]): Promise<void>;
}
export {};
