import { DyteSelf } from '..';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import { ParticipantEvents } from '../utils/DyteEvents';
import { WebinarStageStatus } from './DyteSelf';
export interface DeviceConfig {
    browserName: string;
    browserVersion: string;
    isMobile: boolean;
    engineName: string;
    osName: string;
}
export interface ProducerState {
    producerId: string;
    kind: 'audio' | 'video';
    pause: boolean;
    screenShare: boolean;
}
export interface Participant {
    id: string;
    userId: string;
    displayName: string;
    device?: DeviceConfig;
    picture?: string;
    isHost: boolean;
    flags: {
        [key: string]: string | boolean;
    };
    clientSpecificId?: string;
    customParticipantId?: string;
    audioMuted: boolean;
    audioTrack: MediaStreamTrack;
    videoTrack: MediaStreamTrack;
    videoEnabled: boolean;
    producers?: ProducerState[];
    metadata?: {
        preset_name?: string;
    };
    recorderType?: string;
}
export default class DyteParticipant extends DyteEventEmitter<ParticipantEvents> {
    #private;
    id: string;
    userId: string;
    name: string;
    picture: string;
    isHost: boolean;
    clientSpecificId?: string;
    flags: {
        [key: string]: string | boolean;
    };
    device: DeviceConfig;
    videoTrack: MediaStreamTrack;
    audioTrack: MediaStreamTrack;
    screenShareTracks: {
        audio: MediaStreamTrack;
        video: MediaStreamTrack;
    };
    videoEnabled: boolean;
    audioEnabled: boolean;
    screenShareEnabled: boolean;
    producers: ProducerState[];
    supportsRemoteControl: boolean;
    webinarStageStatus: WebinarStageStatus;
    presetName?: string;
    private get roomJoined();
    constructor(participant: Participant, self: DyteSelf);
    setVideoEnabled(videoEnabled: boolean, emitEvent?: boolean): void;
    setAudioEnabled(audioEnabled: boolean, emitEvent?: boolean): void;
    setScreenShareEnabled(screenShareEnabled: boolean, emitEvent?: boolean): void;
    pin(): Promise<unknown>;
    unpin(): Promise<unknown>;
    setIsPinned(isPinned: boolean, emitEvent?: boolean): void;
    disableAudio(): Promise<void>;
    kick(): Promise<void>;
    disableVideo(): Promise<void>;
    acceptJoinStageRequest(): Promise<void>;
    rejectRequestToJoinStage(): Promise<void>;
    removeFromStage(): Promise<void>;
    setWebinarStageStatus(webinarStageStatus: WebinarStageStatus): void;
    get isPinned(): boolean;
}
