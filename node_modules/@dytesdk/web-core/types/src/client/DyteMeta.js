var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteEventEmitter from '../utils/DyteEventEmitter';
import SocketService from '../socketService/SocketService';
import DyteError, { CatchAll } from './DyteError';
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
let DyteMeta = class DyteMeta extends DyteEventEmitter {
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    #self;
    #socketService;
    viewType;
    meetingStartedTimestamp;
    meetingTitle;
    constructor(self, viewType, socketService, meetingTitle) {
        super();
        this.#self = self;
        this.viewType = viewType;
        this.#socketService = socketService;
        this.meetingTitle = meetingTitle;
    }
    get joined() {
        return this.#roomNodeClient?.roomJoined;
    }
    get roomName() {
        return this.#roomNodeClient?.roomName;
    }
    get socketConnected() {
        return this.#socketService.isConnected;
    }
};
DyteMeta = __decorate([
    CatchAll((err) => { throw new DyteError(err.message, '0800'); }),
    __metadata("design:paramtypes", [Object, String, SocketService, String])
], DyteMeta);
export default DyteMeta;
