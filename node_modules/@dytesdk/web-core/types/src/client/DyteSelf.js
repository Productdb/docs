var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DyteSelf_1;
type callStats = any; 
import { ViewType } from '@dyteinternals/utils';
import { CanProduceType } from './DytePermissionsPresetV1';
import DyteError, { CatchAll } from './DyteError';
import DyteTelemetry from '../utils/opentelemetry';
import { browserSpecs } from '../browser/BrowserCapabilities';
import constants from '../utils/constants';
import { RequestToJoinType } from './DyteWebinarRequest';
import { SessionStore } from '../store/SessionStore';
import { SessionEvents } from '../store/SessionEvents';
import HiveNodeClient from '../roomNode/HiveNodeClient';
import DyteLogger from './internals/DyteLogger';
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
import getLoggableCurrentMediaStates from '../utils/opentelemetry-helpers/loggableMediaState';
import { config } from '../utils/config';
import DyteSelfMedia from './DyteSelfMedia';
export var WebinarStageStatus;
(function (WebinarStageStatus) {
    WebinarStageStatus["OFF_STAGE"] = "OFF_STAGE";
    WebinarStageStatus["REQUESTED_TO_JOIN_STAGE"] = "REQUESTED_TO_JOIN_STAGE";
    WebinarStageStatus["ACCEPTED_TO_JOIN_STAGE"] = "ACCEPTED_TO_JOIN_STAGE";
    WebinarStageStatus["ON_STAGE"] = "ON_STAGE";
})(WebinarStageStatus || (WebinarStageStatus = {}));
let DyteSelf = DyteSelf_1 = class DyteSelf extends DyteSelfMedia {
    id;
    name;
    picture;
    clientSpecificId;
    waitlistStatus;
    #meetingViewType;
    #config;
    #permissions;
    #isPinned;
    role;
    userId;
    organizationId;
    supportsRemoteControl = false;
    device;
    webinarStageStatus = WebinarStageStatus.OFF_STAGE;
    stageStatus;
    presetName;
    roomState = 'init';
    constructor(peerId, details, permissions, theme, presetName) {
        super();
        this.id = peerId;
        this.userId = details.id;
        this.name = details.name;
        this.picture = details.picture;
        this.clientSpecificId = details.customParticipantId ?? details.clientSpecificId;
        this.waitlistStatus = 'none';
        this.#permissions = permissions;
        this.#config = theme;
        this.#isPinned = false;
        this.organizationId = details.organizationId;
        this.supportsRemoteControl = browserSpecs.isElectron();
        this.device = browserSpecs.getDeviceInfo();
        this.presetName = presetName;
        this.#meetingViewType = constants.isV2AuthToken
            ? theme.viewType
            : permissions.viewType;
    }
    static async __init__(peerId, details, permissions, theme, presetName) {
        let audio = config.defaults?.audio ?? true;
        let video = config.defaults?.video ?? true;
        if (permissions.canProduceAudio !== 'ALLOWED') {
            audio = false;
        }
        if (permissions.canProduceVideo !== 'ALLOWED') {
            video = false;
        }
        const self = new DyteSelf_1(peerId, details, permissions, theme, presetName);
        await self.init({
            audio,
            video,
        });
        self.setupEvents();
        return self;
    }
    setupEvents() {
        SessionStore.on(SessionEvents.ROOM_NODE_CONNECTED, async () => {
            if (this.#roomNodeClient.isDisconnected) {
                await this.resetSelf();
            }
            this.#roomNodeClient.isDisconnected = false;
            DyteLogger.info('DyteSelf::ROOM_NODE_CONNECTED');
        });
        SessionStore.on(SessionEvents.RESET_PRODUCER_STATE, async () => {
            if (!this.roomJoined)
                return;
            if (!(this.#roomNodeClient instanceof HiveNodeClient))
                return;
            if (this.localMediaHandler.videoEnabled) {
                await this.#roomNodeClient.shareWebcam(this.localMediaHandler.videoTrack);
            }
            if (this.localMediaHandler.audioEnabled) {
                await this.#roomNodeClient.shareMic(this.localMediaHandler.audioTrack);
            }
            if (this.localMediaHandler.screenShareEnabled) {
                await this.#roomNodeClient.shareScreen({
                    video: this.localMediaHandler.screenShareTracks.video,
                    audio: this.localMediaHandler.screenShareTracks.audio,
                });
            }
        });
        this.localMediaHandler.on('AUDIO_TRACK_CHANGE', async () => {
            DyteLogger.info('DyteSelf::setupEvents::AUDIO_TRACK_CHANGE', {
                ...getLoggableCurrentMediaStates(this),
            });
            if (this.roomJoined && this.audioEnabled) {
                try {
                    await this.#roomNodeClient.shareMic(this.audioTrack);
                }
                catch (error) {
                    DyteLogger.error('DyteSelf::setupEvents::Error while sharing mic', {
                        error,
                    });
                    this.localMediaHandler.disableAudio();
                }
            }
            this.emit('audioUpdate', {
                audioEnabled: this.audioEnabled,
                audioTrack: this.audioTrack,
            });
        });
        this.localMediaHandler.on('VIDEO_TRACK_CHANGE', async () => {
            DyteLogger.info('DyteSelf::setupEvents::VIDEO_TRACK_CHANGE', {
                ...getLoggableCurrentMediaStates(this),
            });
            if (this.videoEnabled && this.roomJoined) {
                try {
                    await this.#roomNodeClient.shareWebcam(this.videoTrack);
                }
                catch (error) {
                    DyteLogger.error('DyteSelf::setupEvents::failed shareWebcam', {
                        error,
                    });
                    if (this.videoEnabled) {
                        await this.localMediaHandler.disableVideo();
                    }
                }
            }
            this.emit('videoUpdate', {
                videoEnabled: this.videoEnabled,
                videoTrack: this.videoTrack,
            });
        });
        this.localMediaHandler.on('DEVICE_CHANGE', async ({ device }) => {
            this.emit('deviceUpdate', {
                device,
            });
        });
        this.localMediaHandler.on('SCREENSHARE_TRACK_CHANGE', async () => {
            if (!this.roomJoined) {
                DyteLogger.error('DyteSelf.SCREENSHARE_TRACK_CHANGE.LocalMediaInitialized_WithoutRoomNode');
                return;
            }
            if (this.screenShareEnabled) {
                try {
                    await this.#roomNodeClient.shareScreen(this.screenShareTracks);
                }
                catch (error) {
                    DyteLogger.error('DyteSelf::setupEvents::Error while sharing screen', {
                        error,
                    });
                    if (this.screenShareEnabled) {
                        await this.localMediaHandler.disableScreenShare();
                    }
                }
            }
            DyteLogger.info('DyteSelf::setupEvents::SCREENSHARE_TRACK_CHANGE', {
                ...getLoggableCurrentMediaStates(this),
            });
            this.emit('screenShareUpdate', {
                screenShareEnabled: this.screenShareEnabled,
                screenShareTracks: this.screenShareTracks,
            });
        });
        this.localMediaHandler.on('SCREENSHARE_ENDED', async () => {
            await this.disableScreenShare();
            DyteLogger.info('DyteSelf::setupEvents::SCREENSHARE_ENDED', {
                ...getLoggableCurrentMediaStates(this),
            });
        });
        this.localMediaHandler.on('AUDIO_TRACK_SILENT', () => {
            this.emit('audioTrackSilent');
            callStats.mediaTrackMuted('AUDIO');
        });
        this.localMediaHandler.on('FORCE_MUTE_AUDIO', this.disableAudio);
        this.localMediaHandler.on('FORCE_MUTE_VIDEO', async () => {
            if (this.roomJoined) {
                await this.#roomNodeClient.pauseWebcam();
            }
            this.emit('videoUpdate', {
                videoEnabled: this.videoEnabled,
                videoTrack: this.videoTrack,
            });
            callStats.videoOff();
        });
    }
    get mediaPermissions() {
        return this.localMediaHandler.permissions;
    }
    get permissions() {
        return this.#permissions;
    }
    get suggestedTheme() {
        return this.#config;
    }
    get config() {
        return this.#config;
    }
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    get roomJoined() {
        return this.#roomNodeClient?.roomJoined === true;
    }
    setName(name) {
        if (!name) {
            throw new DyteError('Name cannot be empty.');
        }
        this.name = name;
    }
    async setupTracks(options = {}) {
        if (options.forceReset) {
            this.#roomNodeClient.stopAllProducers();
            this.localMediaHandler.removeAllTracks();
        }
        return this.localMediaHandler.setupStreams({
            video: options.video ?? true,
            audio: options.audio ?? true,
        });
    }
    async resetSelf() {
        callStats.callEnded();
        this.#roomNodeClient?.sfuHandler?.cleanupConsumers?.();
        await this.#roomNodeClient?.sfuHandler?.setupTransports?.();
        await this.#roomNodeClient?.joinRoom(this.name, !this.localMediaHandler.audioEnabled, this.#roomNodeClient.roomUUID, this.#roomNodeClient.meetingTitle, {
            audio: this.localMediaHandler.audioEnabled,
            video: this.localMediaHandler.videoEnabled,
            screen: this.localMediaHandler.screenShareEnabled,
        });
        if (this.localMediaHandler.videoEnabled) {
            await this.#roomNodeClient?.shareWebcam(this.localMediaHandler.videoTrack);
        }
        if (this.localMediaHandler.audioEnabled) {
            await this.#roomNodeClient?.shareMic(this.localMediaHandler.audioTrack);
        }
        if (this.localMediaHandler.screenShareEnabled) {
            await this.#roomNodeClient?.shareScreen({
                video: this.localMediaHandler.screenShareTracks.video,
                audio: this.localMediaHandler.screenShareTracks.audio,
            });
        }
        DyteLogger.info('DyteSelf::resetSelf');
    }
    async destructMediaHandler() {
        DyteLogger.info('DyteSelf::destructMediaHandler');
        return this.localMediaHandler.destruct();
    }
    async removeDocumentEventListeners() {
        DyteLogger.info('DyteSelf::removeDocumentEventListeners');
        return this.localMediaHandler.removeDocumentEventListeners();
    }
    async enableAudio() {
        if (this.permissions.canProduceAudio === CanProduceType.notAllowed) {
            return;
        }
        if (this.#config.viewType === 'WEBINAR'
            && this.#permissions.canProduceAudio === CanProduceType.canRequest
            && (this.webinarStageStatus === WebinarStageStatus.OFF_STAGE
                || this.webinarStageStatus === WebinarStageStatus.REQUESTED_TO_JOIN_STAGE)) {
            return;
        }
        if (this.audioEnabled) {
            return;
        }
        await this.localMediaHandler.enableAudio();
        if (this.roomJoined) {
            if (this.audioTrack) {
                try {
                    await this.#roomNodeClient.shareMic(this.audioTrack);
                }
                catch (error) {
                    DyteLogger.error('DyteSelf::enableAudio::Error while sharing mic', {
                        error,
                    });
                    this.localMediaHandler.disableAudio();
                }
            }
            if (!this.audioEnabled) {
                return;
            }
            this.#roomNodeClient.unmuteSelf();
        }
        this.emit('audioUpdate', {
            audioEnabled: this.audioEnabled,
            audioTrack: this.audioTrack,
        });
        callStats.audioOn();
    }
    async enableVideo() {
        if (this.#permissions.canProduceVideo === CanProduceType.notAllowed) {
            return;
        }
        if (this.#config.viewType === 'WEBINAR'
            && this.#permissions.canProduceVideo === CanProduceType.canRequest
            && (this.webinarStageStatus === WebinarStageStatus.OFF_STAGE
                || this.webinarStageStatus === WebinarStageStatus.REQUESTED_TO_JOIN_STAGE)) {
            return;
        }
        if (this.videoEnabled) {
            return;
        }
        await this.localMediaHandler.enableVideo();
        if (this.roomJoined) {
            try {
                await this.#roomNodeClient.shareWebcam(this.videoTrack);
            }
            catch (error) {
                DyteLogger.error('DyteSelf::enableVideo::Error while sharing video', {
                    error,
                });
                if (this.videoEnabled) {
                    await this.localMediaHandler.disableVideo();
                }
            }
        }
        this.emit('videoUpdate', {
            videoEnabled: this.videoEnabled,
            videoTrack: this.videoTrack,
        });
        DyteLogger.info('DyteSelf.enableVideo', {
            ...getLoggableCurrentMediaStates(this),
        });
        callStats.videoOn();
    }
    async enableScreenShare() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t enable screenshare without joining room');
        }
        if (this.#permissions.canProduceScreenshare === CanProduceType.notAllowed) {
            return;
        }
        if (this.#config.viewType === 'WEBINAR'
            && this.#permissions.canProduceScreenshare === CanProduceType.canRequest
            && (this.webinarStageStatus === WebinarStageStatus.OFF_STAGE
                || this.webinarStageStatus === WebinarStageStatus.REQUESTED_TO_JOIN_STAGE)) {
            return;
        }
        if (this.screenShareEnabled) {
            return;
        }
        await this.localMediaHandler.enableScreenShare();
        if (this.screenShareTracks.audio || this.screenShareTracks.video) {
            try {
                await this.#roomNodeClient.shareScreen(this.screenShareTracks);
            }
            catch (error) {
                DyteLogger.error('DyteSelf::enableScreenShare::Error while sharing screen', {
                    error,
                });
                if (this.screenShareEnabled) {
                    await this.localMediaHandler.disableScreenShare();
                }
            }
        }
        this.emit('screenShareUpdate', {
            screenShareEnabled: this.screenShareEnabled,
            screenShareTracks: this.screenShareTracks,
        });
    }
    async disableAudio() {
        if (!this.audioEnabled) {
            return;
        }
        this.localMediaHandler.disableAudio();
        if (this.roomJoined) {
            this.#roomNodeClient.muteSelf();
        }
        this.emit('audioUpdate', {
            audioEnabled: this.audioEnabled,
            audioTrack: this.audioTrack,
        });
        callStats.audioOff();
    }
    async disableVideo() {
        if (!this.videoEnabled) {
            return;
        }
        await this.localMediaHandler.disableVideo();
        if (this.roomJoined) {
            await this.#roomNodeClient.pauseWebcam();
        }
        if (this.mediaPermissions.video !== 'ACCEPTED')
            return;
        this.emit('videoUpdate', {
            videoEnabled: this.videoEnabled,
            videoTrack: this.videoTrack,
        });
        callStats.videoOff();
    }
    async disableScreenShare() {
        if (!this.screenShareEnabled) {
            return;
        }
        await this.localMediaHandler.disableScreenShare();
        if (this.roomJoined) {
            await this.#roomNodeClient.disableScreenShare();
        }
        this.emit('screenShareUpdate', {
            screenShareEnabled: this.screenShareEnabled,
            screenShareTracks: this.screenShareTracks,
        });
    }
    getAllDevices() {
        return this.localMediaHandler.getAllDevices();
    }
    setIsPinned(isPinned, emitEvent = true) {
        this.#isPinned = isPinned;
        const event = isPinned ? 'pinned' : 'unpinned';
        if (emitEvent)
            this.emit(event, this);
    }
    get isPinned() {
        return this.#isPinned;
    }
    async pin() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t pin participants without joining room');
        }
        return this.#roomNodeClient.pinPeer(this.id);
    }
    async unpin() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t unpin participants without joining room');
        }
        return this.#roomNodeClient.pinPeer(null);
    }
    async setDevice(device) {
        const changedDevices = {
            added: [device],
            removed: [],
        };
        if ('onDeviceChange' in this.localMediaHandler) {
            await this.localMediaHandler.onDeviceChange(changedDevices, true);
            return;
        }
        switch (device.kind) {
            case 'audioinput':
                try {
                    await this.localMediaHandler.setAudioDevice(device);
                }
                catch (error) {
                    if (this.roomJoined) {
                        await this.#roomNodeClient.muteSelf();
                    }
                    this.emit('audioUpdate', {
                        audioEnabled: this.audioEnabled,
                        audioTrack: this.audioTrack,
                    });
                }
                break;
            case 'audiooutput':
                await this.localMediaHandler.setSpeakerDevice(device);
                break;
            case 'videoinput':
                try {
                    await this.localMediaHandler.setVideoDevice(device);
                }
                catch (error) {
                    if (this.roomJoined) {
                        await this.#roomNodeClient.pauseWebcam();
                    }
                    this.emit('videoUpdate', {
                        videoEnabled: this.videoEnabled,
                        videoTrack: this.videoTrack,
                    });
                }
                break;
            default:
                break;
        }
        this.emit('deviceUpdate', {
            device,
        });
    }
    cleanUpTracks() {
        this.audioTrack?.stop();
        this.rawAudioTrack?.stop();
        this.videoTrack?.stop();
        this.rawVideoTrack?.stop();
    }
    async requestToJoinStage() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t request to join stage without joining room');
        }
        if (!(this.#meetingViewType === ViewType.Webinar)) {
            throw new DyteError('Not allowed to go on stage on non webinar meeting');
        }
        if (!this.permissions.requestProduce) {
            DyteLogger.error('DyteSelf::requestGoToStage::permission_denied');
            throw new DyteError('User does not have permission to go on stage');
        }
        this.webinarStageStatus = WebinarStageStatus.REQUESTED_TO_JOIN_STAGE;
        await this.#roomNodeClient.requestToJoinStage(RequestToJoinType.PRESENT);
    }
    async leaveStage() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t leave stage without joining room');
        }
        if (!(this.#meetingViewType === ViewType.Webinar)) {
            throw new DyteError('Not allowed to leave stage on non webinar meeting');
        }
        await this.disableScreenShare();
        await this.disableVideo();
        await this.disableAudio();
        this.localMediaHandler.destruct();
        await this.#roomNodeClient.stopPresenting();
        this.setWebinarStageStatus(WebinarStageStatus.OFF_STAGE);
        this.emit('stageLeft');
    }
    async joinStage() {
        if (!this.roomJoined) {
            throw new DyteError('Can`t join stage without joining room');
        }
        if (!this.permissions.canPresent
            && this.webinarStageStatus !== WebinarStageStatus.ACCEPTED_TO_JOIN_STAGE) {
            DyteLogger.error('DyteSelf::joinStage::permission_denied');
            throw new DyteError('User does not have permission to join stage');
        }
        await this.#roomNodeClient.startPresenting();
    }
    setWebinarStageStatus(webinarStageStatus) {
        this.webinarStageStatus = webinarStageStatus;
    }
    async disablePreview() { return this; }
};
__decorate([
    DyteTelemetry.trace('DyteSelf.setupEvents'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DyteSelf.prototype, "setupEvents", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.setupTracks'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "setupTracks", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.resetSelf'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "resetSelf", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.destructMediaHandler'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "destructMediaHandler", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.removeDocumentEventListeners'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "removeDocumentEventListeners", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.enableAudio'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "enableAudio", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.enableVideo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "enableVideo", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.enableScreenShare'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "enableScreenShare", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.disableAudio'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "disableAudio", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.disableVideo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "disableVideo", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.disableScreenShare'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "disableScreenShare", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.setDevice'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MediaDeviceInfo]),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "setDevice", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.requestToJoinStage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "requestToJoinStage", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.leaveStage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "leaveStage", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.joinStage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "joinStage", null);
__decorate([
    DyteTelemetry.trace('DyteSelf.deprecated.disablePreview'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteSelf.prototype, "disablePreview", null);
DyteSelf = DyteSelf_1 = __decorate([
    CatchAll((err) => { throw new DyteError(err.message, '1100'); }),
    __metadata("design:paramtypes", [String, Object, Object, Object, String])
], DyteSelf);
export default DyteSelf;
