import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteSelf from './DyteSelf';
import { PollsEvents } from '../utils/DyteEvents';
import PollSocketHandler from '../socketService/PollSocketHandler';
import { PollSocketServerName } from '../controllers/PollController';
export interface PollOption {
    text: string;
    votes: {
        id: string;
        name: string;
    }[];
    count: number;
}
export interface Poll {
    id: string;
    question: string;
    options: PollOption[];
    anonymous: boolean;
    hideVotes: boolean;
    createdBy: string;
    createdByUserId: string;
    voted: string[];
}
export interface PollCreatePayload {
    question: string;
    options: string[];
    anonymous: boolean;
    hideVotes: boolean;
    createdBy: string;
    createdByUserId: string;
}
export interface PollVotePayload {
    pollId: string;
    index: number;
}
export default class DytePolls extends DyteEventEmitter<PollsEvents> {
    #private;
    items: Poll[];
    private get roomJoined();
    constructor(self: DyteSelf, pollSocketHandler: PollSocketHandler, socketServerName: PollSocketServerName);
    create(question: string, options: string[], anonymous?: boolean, hideVotes?: boolean): Promise<void>;
    vote(id: string, index: number): Promise<void>;
}
