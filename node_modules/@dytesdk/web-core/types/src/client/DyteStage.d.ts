import StageSocketHandler from '../socketService/StageSocketHandler';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import { StageEvents } from '../utils/DyteEvents';
import DyteSelf from './DyteSelf';
export declare type StageStatus = 'OFF_STAGE' | 'REQUESTED_TO_JOIN_STAGE' | 'ACCEPTED_TO_JOIN_STAGE' | 'ON_STAGE';
export default class DyteStage extends DyteEventEmitter<StageEvents> {
    #private;
    status: StageStatus;
    constructor(isStageHost: boolean, self: DyteSelf, stageSocketHandler: StageSocketHandler);
    getAccessRequests(): Promise<{
        stageRequests: {
            displayName: string;
            userId: string;
            peerId: string;
        }[];
    }>;
    requestAccess(): void;
    cancelRequestAccess(): void;
    grantAccess(userIds: string[]): Promise<void>;
    denyAccess(userIds: string[]): Promise<void>;
    join(): Promise<void>;
    leave(): Promise<void>;
    kick(userIds: string[]): Promise<{
        id: string;
        payload: Uint8Array;
    }>;
    private setStatus;
}
