import { ViewType } from '@dyteinternals/utils';
import { DEFAULT_PRESET_MEDIA_CONSTRAINTS } from '../media-new/interface/web/ConstraintBuilder';
import { objectToCamelCase } from '../utils/sanitizer';
import DyteError from './DyteError';
import DyteLogger from './internals/DyteLogger';
export var WaitingRoomType;
(function (WaitingRoomType) {
    WaitingRoomType["skip"] = "SKIP";
    WaitingRoomType["onPrivilegedUserEntry"] = "ON_PRIVILEGED_USER_ENTRY";
    WaitingRoomType["skipOnAccept"] = "SKIP_ON_ACCEPT";
})(WaitingRoomType || (WaitingRoomType = {}));
export var CanProduceType;
(function (CanProduceType) {
    CanProduceType["allowed"] = "ALLOWED";
    CanProduceType["notAllowed"] = "NOT_ALLOWED";
    CanProduceType["canRequest"] = "CAN_REQUEST";
})(CanProduceType || (CanProduceType = {}));
const DEFAULT_PERMISSIONS_SNAKE_CASED = {
    view_type: ViewType.GroupCall,
    accept_waiting_requests: false,
    request_produce: false,
    can_allow_participant_audio: true,
    can_allow_participant_screensharing: false,
    can_allow_participant_video: true,
    request_kick_participant: false,
    kick_participant: true,
    pin_participant: true,
    can_record: false,
    waiting_room_type: 'SKIP',
    plugins: {
        can_close: true,
        can_start: true,
        can_edit_acl: false,
        config: {},
    },
    polls: {
        can_create: true,
        can_vote: true,
        can_view: true,
    },
    produce: {
        video: {
            allow: true,
            quality: DEFAULT_PRESET_MEDIA_CONSTRAINTS.video.quality,
            frame_rate: DEFAULT_PRESET_MEDIA_CONSTRAINTS.video.frameRate,
        },
        audio: true,
        screenshare: {
            allow: true,
            quality: DEFAULT_PRESET_MEDIA_CONSTRAINTS.screenshare.quality,
            frame_rate: DEFAULT_PRESET_MEDIA_CONSTRAINTS.screenshare.frameRate,
        },
    },
    chat: {
        public: {
            can_send: true,
            text: true,
            files: true,
        },
        private: {
            can_send: false,
            can_receive: false,
            text: false,
            files: false,
        },
    },
    reactions: false,
    hidden_participant: false,
    show_participant_list: true,
    can_change_participant_role: true,
    can_change_theme: false,
    can_present: false,
    accept_present_requests: false,
    can_edit_display_name: false,
    max_screenshare_count: 1,
    is_recorder: false,
    can_spotlight: false,
};
export const DEFAULT_PERMISSIONS_CAMEL_CASED = objectToCamelCase(DEFAULT_PERMISSIONS_SNAKE_CASED);
export default class DytePermissionsPresetV1 {
    #permissions;
    constructor(userPresetResponse) {
        if (!userPresetResponse) {
            DyteLogger.error('DytePermissionsPresetV1::load_preset_permissions_failed');
            throw new DyteError('Could not load preset permissions.');
        }
        this.#permissions = userPresetResponse;
    }
    static fromResponse(response) {
        return new DytePermissionsPresetV1(response);
    }
    static default() {
        return new DytePermissionsPresetV1(DEFAULT_PERMISSIONS_CAMEL_CASED);
    }
    get viewType() {
        return this.#permissions.viewType;
    }
    get acceptWaitingRequests() {
        return this.#permissions.acceptWaitingRequests;
    }
    get requestProduce() {
        return this.#permissions.requestProduce;
    }
    get requestProduceAudio() {
        return this.requestProduce;
    }
    get requestProduceScreenshare() {
        return this.requestProduce;
    }
    get canAllowParticipantAudio() {
        return this.#permissions.canAllowParticipantAudio;
    }
    get canAllowParticipantScreensharing() {
        return this.#permissions.canAllowParticipantScreensharing;
    }
    get canAllowParticipantVideo() {
        return this.#permissions.canAllowParticipantVideo;
    }
    get canDisableParticipantAudio() {
        return this.canAllowParticipantAudio;
    }
    get canDisableParticipantVideo() {
        return this.canAllowParticipantVideo;
    }
    get kickParticipant() {
        return this.#permissions.kickParticipant;
    }
    get pinParticipant() {
        return this.#permissions.pinParticipant;
    }
    get canRecord() {
        return this.#permissions.canRecord;
    }
    get waitingRoomType() {
        return this.#permissions.waitingRoomType;
    }
    get waitingRoomBehaviour() {
        if (this.#permissions.waitingRoomType === 'SKIP') {
            return WaitingRoomType.skip;
        }
        if (this.#permissions.waitingRoomType === 'SKIP_ON_PRIVILEGED_USER_ENTRY') {
            return WaitingRoomType.onPrivilegedUserEntry;
        }
        if (this.#permissions.waitingRoomType === 'ON_ACCEPT') {
            return WaitingRoomType.skipOnAccept;
        }
        return WaitingRoomType.skip;
    }
    get plugins() {
        return this.#permissions.plugins;
    }
    get polls() {
        return { ...this.#permissions.polls, canViewResults: this.#permissions.polls.canView };
    }
    get produceVideo() {
        return {
            ...this.#permissions.produce.video,
            allow: this.#permissions.produce.video.allow
                ? CanProduceType.allowed
                : CanProduceType.notAllowed,
        };
    }
    get canProduceVideo() {
        const isAllowed = this.#permissions.produce.video.allow;
        if (this.requestProduce) {
            return CanProduceType.canRequest;
        }
        if (isAllowed)
            return CanProduceType.allowed;
        return CanProduceType.notAllowed;
    }
    get produceScreenshare() {
        return {
            ...this.#permissions.produce.screenshare,
            allow: this.#permissions.produce.screenshare.allow
                ? CanProduceType.allowed
                : CanProduceType.notAllowed,
        };
    }
    get canProduceScreenshare() {
        const isAllowed = this.#permissions.produce.screenshare.allow;
        if (this.requestProduce) {
            return CanProduceType.canRequest;
        }
        if (isAllowed)
            return CanProduceType.allowed;
        return CanProduceType.notAllowed;
    }
    get produceAudio() {
        return this.#permissions.produce.audio
            ? CanProduceType.allowed
            : CanProduceType.notAllowed;
    }
    get canProduceAudio() {
        const isAllowed = this.#permissions.produce.audio;
        if (this.requestProduce) {
            return CanProduceType.canRequest;
        }
        if (isAllowed)
            return CanProduceType.allowed;
        return CanProduceType.notAllowed;
    }
    get chatPublic() {
        return this.#permissions.chat.public;
    }
    get chatPrivate() {
        return this.#permissions.chat.private;
    }
    get connectedMeetings() {
        return {
            canAlterConnectedMeetings: false,
            canSwitchConnectedMeetings: false,
            canSwitchToParentMeeting: false,
        };
    }
    get reactions() {
        return this.#permissions.reactions;
    }
    get hiddenParticipant() {
        return this.#permissions.hiddenParticipant;
    }
    get showParticipantList() {
        return this.#permissions.showParticipantList;
    }
    get canChangeParticipantRole() {
        return this.#permissions.canChangeParticipantRole;
    }
    get canChangeTheme() {
        return this.#permissions.canChangeTheme;
    }
    get canPresent() {
        return this.#permissions.canPresent;
    }
    get acceptPresentRequests() {
        return this.#permissions.acceptPresentRequests;
    }
    get canEditDisplayName() {
        return this.#permissions.canEditDisplayName;
    }
    get maxScreenShareCount() {
        return this.#permissions.maxScreenshareCount;
    }
    get isRecorder() {
        return this.#permissions.isRecorder;
    }
    get canLivestream() {
        return false;
    }
    get canSpotlight() {
        return this.#permissions.canSpotlight;
    }
    get isV2() {
        return false;
    }
}
