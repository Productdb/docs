var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
import { SessionEvents } from '../store/SessionEvents';
import { SessionStore } from '../store/SessionStore';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteTelemetry from '../utils/opentelemetry';
import DyteError from './DyteError';
import DyteLogger from './internals/DyteLogger';
export default class DyteStage extends DyteEventEmitter {
    #stageSocketHandler;
    #isStageHost;
    #self;
    status;
    constructor(isStageHost, self, stageSocketHandler) {
        super();
        this.#stageSocketHandler = stageSocketHandler;
        this.#self = self;
        this.#isStageHost = isStageHost;
    }
    async getAccessRequests() {
        if (!this.#isStageHost)
            throw new DyteError('You do not have permissions for getStageRequests');
        const { stageRequests } = await this.#stageSocketHandler.getStageRequests();
        return { stageRequests };
    }
    requestAccess() {
        if (this.status !== 'OFF_STAGE')
            throw new DyteError(`Unable to request access you are currently ${this.status}`);
        if (this.#isStageHost) {
            this.setStatus('ACCEPTED_TO_JOIN_STAGE');
            return;
        }
        this.#stageSocketHandler.requestAccess();
        this.setStatus('REQUESTED_TO_JOIN_STAGE');
    }
    cancelRequestAccess() {
        this.#stageSocketHandler.cancelRequestAccess();
        this.setStatus('OFF_STAGE');
    }
    grantAccess(userIds) {
        if (!this.#isStageHost)
            throw new DyteError('You do not have permissions for grantAccess');
        return this.#stageSocketHandler.grantAccess(userIds);
    }
    denyAccess(userIds) {
        if (!this.#isStageHost)
            throw new DyteError('You do not have permissions for denyAccess');
        return this.#stageSocketHandler.denyAccess(userIds);
    }
    async join() {
        if (!this.#isStageHost && this.status !== 'ACCEPTED_TO_JOIN_STAGE')
            throw new DyteError(`Unable to join stage you are currently ${this.status}`);
        if (this.#isStageHost && this.status === 'ON_STAGE')
            throw new DyteError('You are already on stage.');
        this.#stageSocketHandler.joinStage();
        await SessionStore.emitAsync(SessionEvents.JOIN_MEDIA_ROOM);
        this.setStatus('ON_STAGE');
    }
    async leave() {
        if (!(this.status === 'ON_STAGE' || this.status === 'ACCEPTED_TO_JOIN_STAGE'))
            throw new DyteError(`Unable to leave stage you are currently ${this.status}`);
        this.setStatus('OFF_STAGE');
        if (getRoomNodeClient()?.roomJoined) {
            await SessionStore.emitAsync(SessionEvents.LEAVE_MEDIA_ROOM);
        }
        try {
            await this.#self.disableScreenShare();
            await this.#self.disableVideo();
            await this.#self.disableAudio();
            this.#self.destructMediaHandler();
        }
        catch (error) {
            DyteLogger.error('DyteStage.leaveStage.DisableMediaError', { error });
        }
        this.#stageSocketHandler.leaveStage(this.#self.userId);
    }
    async kick(userIds) {
        if (!this.#isStageHost)
            throw new DyteError('You do not have permissions for kick');
        return this.#stageSocketHandler.kick(userIds);
    }
    setStatus(status) {
        if (this.status === status)
            return;
        this.status = status;
        this.emit('stageStatusUpdate', status);
    }
}
__decorate([
    DyteTelemetry.trace('DyteStage.getStageRequests'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteStage.prototype, "getAccessRequests", null);
__decorate([
    DyteTelemetry.trace('DyteStage.requestAccess'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DyteStage.prototype, "requestAccess", null);
__decorate([
    DyteTelemetry.trace('DyteStage.cancelRequestAccess'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DyteStage.prototype, "cancelRequestAccess", null);
__decorate([
    DyteTelemetry.trace('DyteStage.grantAccess'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", void 0)
], DyteStage.prototype, "grantAccess", null);
__decorate([
    DyteTelemetry.trace('DyteStage.denyAccess'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", void 0)
], DyteStage.prototype, "denyAccess", null);
__decorate([
    DyteTelemetry.trace('DyteStage.joinStage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteStage.prototype, "join", null);
__decorate([
    DyteTelemetry.trace('DyteStage.leaveStage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteStage.prototype, "leave", null);
