import DyteTelemetry from '../../utils/opentelemetry';
import createSafeToLogError from '../../utils/opentelemetry-helpers/safeToLogErrorCreator';
export default class DyteLogger {
    static info(humanReadableLogIdentifier, logData, isCrucial) {
        DyteTelemetry.addLogInCurrentSpan('info', humanReadableLogIdentifier, logData, isCrucial);
    }
    static error(humanReadableLogIdentifier, logData, isCrucial) {
        if (logData?.error) {
            Object.assign(logData, { error: createSafeToLogError(logData.error) });
        }
        DyteTelemetry.addLogInCurrentSpan('error', humanReadableLogIdentifier, logData, isCrucial);
    }
    static debug(humanReadableLogIdentifier, logData, isCrucial) {
        DyteTelemetry.addLogInCurrentSpan('debug', humanReadableLogIdentifier, logData, isCrucial);
    }
    static log(humanReadableLogIdentifier, logData, isCrucial) {
        DyteTelemetry.addLogInCurrentSpan('log', humanReadableLogIdentifier, logData, isCrucial);
    }
    static warn(humanReadableLogIdentifier, logData, isCrucial) {
        DyteTelemetry.addLogInCurrentSpan('warn', humanReadableLogIdentifier, logData, isCrucial);
    }
}
