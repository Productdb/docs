import { globalFlagsmith } from '@dyteinternals/utils';
import { browserSpecs } from '../browser/BrowserCapabilities';
import { DEFAULT_PRESET_MEDIA_CONSTRAINTS } from '../media-new/interface/web/ConstraintBuilder';
import LocalMediaHandler from '../media-new/LocalMediaHandler';
import LocalMediaHandlerDeprecated from '../media/LocalMediaHandler';
import { config } from '../utils/config';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import { FlagsmithFeatureFlags } from '../utils/flags';
import DyteLogger from './internals/DyteLogger';
export default class DyteSelfMedia extends DyteEventEmitter {
    localMediaHandler;
    async init(options = {}) {
        browserSpecs.init();
        if (this.localMediaHandler)
            return;
        try {
            let setupStreams = true;
            const constraints = options.constraints || DEFAULT_PRESET_MEDIA_CONSTRAINTS;
            if (config.defaults.mediaHandler) {
                setupStreams = false;
                this.localMediaHandler = config.defaults.mediaHandler.localMediaHandler;
            }
            else if (navigator.RNLocalMediaHandlerImpl) {
                const { RNLocalMediaHandlerImpl } = navigator;
                this.localMediaHandler = await RNLocalMediaHandlerImpl.init();
            }
            else if (globalFlagsmith.hasFeature(FlagsmithFeatureFlags.NEW_LOCAL_MEDIA_HANDLER)) {
                this.localMediaHandler = new LocalMediaHandler(constraints);
            }
            else {
                this.localMediaHandler = await LocalMediaHandlerDeprecated.init(constraints);
            }
            if (setupStreams) {
                await this.localMediaHandler.setupStreams({
                    video: options?.video ?? true,
                    audio: options?.audio ?? true,
                });
            }
        }
        catch (error) {
            DyteLogger.error('DyteSelf::init::Failed To Setup Streams', {
                error: { name: error.name, message: error.message },
            });
        }
    }
    get audioTrack() {
        return this.localMediaHandler.audioTrack;
    }
    get rawAudioTrack() {
        return this.localMediaHandler.rawAudioTrack;
    }
    async addAudioMiddleware(audioMiddleware) {
        return this.localMediaHandler.addAudioMiddleware(audioMiddleware);
    }
    async removeAudioMiddleware(audioMiddleware) {
        return this.localMediaHandler.removeAudioMiddleware(audioMiddleware);
    }
    get videoTrack() {
        return this.localMediaHandler.videoTrack;
    }
    get rawVideoTrack() {
        return this.localMediaHandler.rawVideoTrack;
    }
    async addVideoMiddleware(videoMiddleware) {
        return this.localMediaHandler.addVideoMiddleware(videoMiddleware);
    }
    async removeVideoMiddleware(videoMiddleware) {
        return this.localMediaHandler.removeVideoMiddleware(videoMiddleware);
    }
    get screenShareTracks() {
        return this.localMediaHandler.screenShareTracks;
    }
    get audioEnabled() {
        return this.localMediaHandler.audioEnabled;
    }
    get videoEnabled() {
        return this.localMediaHandler.videoEnabled;
    }
    get screenShareEnabled() {
        return this.localMediaHandler.screenShareEnabled;
    }
    async enableAudio() {
        await this.localMediaHandler.enableAudio();
        this.emit('audioUpdate', {
            audioEnabled: this.audioEnabled,
            audioTrack: this.audioTrack,
        });
    }
    async enableVideo() {
        await this.localMediaHandler.enableVideo();
        this.emit('videoUpdate', {
            videoEnabled: this.videoEnabled,
            videoTrack: this.videoTrack,
        });
    }
    async disableAudio() {
        await this.localMediaHandler.disableAudio();
        this.emit('audioUpdate', {
            audioEnabled: this.audioEnabled,
            audioTrack: this.audioTrack,
        });
    }
    async disableVideo() {
        await this.localMediaHandler.disableVideo();
        this.emit('videoUpdate', {
            videoEnabled: this.videoEnabled,
            videoTrack: this.videoTrack,
        });
    }
    getCurrentDevices() {
        return this.localMediaHandler.getCurrentDevices();
    }
    async getAudioDevices() {
        const audioDevices = await this.localMediaHandler.getAudioDevices();
        return audioDevices;
    }
    async getVideoDevices() {
        const videoDevices = await this.localMediaHandler.getVideoDevices();
        return videoDevices;
    }
    async getSpeakerDevices() {
        const speakerDevices = await this.localMediaHandler.getSpeakerDevices();
        return speakerDevices;
    }
    getDeviceById(deviceId, kind) {
        let k;
        if (kind === 'audio') {
            k = 'audioinput';
        }
        else if (kind === 'video') {
            k = 'videoinput';
        }
        else if (kind === 'speaker') {
            k = 'audiooutput';
        }
        return this.localMediaHandler.getDeviceById(deviceId, k);
    }
    async setDevice(device) {
        const changedDevices = {
            added: [device],
            removed: [],
        };
        if ('onDeviceChange' in this.localMediaHandler) {
            await this.localMediaHandler.onDeviceChange(changedDevices, true);
            return;
        }
        switch (device.kind) {
            case 'audioinput':
                try {
                    await this.localMediaHandler.setAudioDevice(device);
                }
                catch (error) {
                }
                finally {
                    this.emit('audioUpdate', {
                        audioEnabled: this.audioEnabled,
                        audioTrack: this.audioTrack,
                    });
                }
                break;
            case 'audiooutput':
                await this.localMediaHandler.setSpeakerDevice(device);
                break;
            case 'videoinput':
                try {
                    await this.localMediaHandler.setVideoDevice(device);
                }
                catch (error) {
                }
                finally {
                    this.emit('videoUpdate', {
                        videoEnabled: this.videoEnabled,
                        videoTrack: this.videoTrack,
                    });
                }
                break;
            default:
                break;
        }
        this.emit('deviceUpdate', {
            device,
        });
    }
}
