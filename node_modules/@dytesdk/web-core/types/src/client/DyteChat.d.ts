import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteSelf from './DyteSelf';
import { ChatSocketServerName } from '../controllers/ChatController';
import ChatSocketHandler from '../socketService/ChatSocketHandler';
import { ChatEvents } from '../utils/DyteEvents';
import DyteParticipants from './DyteParticipants';
export declare enum MessageType {
    text = "text",
    image = "image",
    file = "file",
    poll = "poll"
}
export declare const messageTypes: string[];
export interface BaseMessage<T extends MessageType> {
    type: T;
    userId: string;
    displayName: string;
    time: Date;
    timeMs?: number;
    id: string;
    isEdited?: boolean;
    read?: boolean;
    pluginId?: string;
    pinned?: boolean;
    targetUserIds?: string[];
}
export interface TextMessage extends BaseMessage<MessageType.text> {
    message: string;
}
export interface ImageMessage extends BaseMessage<MessageType.image> {
    link: string;
}
export interface FileMessage extends BaseMessage<MessageType.file> {
    name: string;
    size: number;
    link: string;
}
export declare type Message = TextMessage | ImageMessage | FileMessage;
export default class DyteChat extends DyteEventEmitter<ChatEvents> {
    #private;
    messages: Message[];
    private get roomJoined();
    constructor(chatSocketHandler: ChatSocketHandler, socketServerName: ChatSocketServerName, self: DyteSelf, participants: DyteParticipants);
    sendTextMessage(message: string, peerIds?: string[]): Promise<void>;
    sendImageMessage(image: File, peerIds?: string[]): Promise<void>;
    sendFileMessage(file: File, peerIds?: string[]): Promise<void>;
    sendMessage(message: {
        type: 'text';
        message: string;
    } | {
        type: 'image';
        image: File;
    } | {
        type: 'file';
        file: File;
    }, participantIds?: string[]): Promise<void>;
    editTextMessage(messageId: string, message: string): Promise<void>;
    editImageMessage(messageId: string, image: File): Promise<void>;
    editFileMessage(messageId: string, file: File): Promise<void>;
    editMessage(messageId: string, message: {
        type: 'text';
        message: string;
    } | {
        type: 'image';
        image: File;
    } | {
        type: 'file';
        file: File;
    }): Promise<void>;
    deleteMessage(messageId: string): Promise<void>;
    getMessagesByUser(userId: string): Message[];
    getMessagesByType(type: keyof typeof MessageType): Message[];
    pin(id: string): Promise<void>;
    unpin(id: string): Promise<void>;
    getMessages(timeStamp: number, size: number, reversed: boolean, offset?: number): Promise<{
        messages: Message[];
        next: boolean;
    }>;
    get pinned(): Message[];
}
