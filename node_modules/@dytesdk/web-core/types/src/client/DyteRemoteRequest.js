var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteError, { CatchAll } from './DyteError';
export var RemoteRequestType;
(function (RemoteRequestType) {
    RemoteRequestType["REQUEST"] = "REQUEST";
    RemoteRequestType["ACCEPT"] = "ACCEPT";
    RemoteRequestType["REJECT"] = "REJECT";
    RemoteRequestType["END"] = "END";
    RemoteRequestType["EVENT"] = "EVENT";
})(RemoteRequestType || (RemoteRequestType = {}));
export var RemoteRequestState;
(function (RemoteRequestState) {
    RemoteRequestState["PENDING"] = "PENDING";
    RemoteRequestState["ACCEPTED"] = "ACCEPTED";
    RemoteRequestState["REJECTED"] = "REJECTED";
    RemoteRequestState["ENDED"] = "ENDED";
})(RemoteRequestState || (RemoteRequestState = {}));
export var RemoteEventType;
(function (RemoteEventType) {
    RemoteEventType["KEYBOARD"] = "KEYBOARD";
    RemoteEventType["MOUSE"] = "MOUSE";
})(RemoteEventType || (RemoteEventType = {}));
export var RemoteMouseEventTypes;
(function (RemoteMouseEventTypes) {
    RemoteMouseEventTypes["LEFT_CLICK"] = "click";
    RemoteMouseEventTypes["RIGHT_CLICK"] = "contextmenu";
    RemoteMouseEventTypes["MOVE"] = "mousemove";
})(RemoteMouseEventTypes || (RemoteMouseEventTypes = {}));
export var RemoteUpdateType;
(function (RemoteUpdateType) {
    RemoteUpdateType["REQUEST_RECEIVED"] = "REQUEST_RECEIVED";
    RemoteUpdateType["REQUEST_SENT"] = "REQUEST_SENT";
    RemoteUpdateType["INCOMING_REQUEST_ACCEPTED"] = "INCOMING_REQUEST_ACCEPTED";
    RemoteUpdateType["OUTGOING_REQUEST_ACCEPTED"] = "OUTGOING_REQUEST_ACCEPTED";
    RemoteUpdateType["INCOMING_REQUEST_ENDED"] = "INCOMING_REQUEST_ENDED";
    RemoteUpdateType["OUTGOING_REQUEST_ENDED"] = "OUTGOING_REQUEST_ENDED";
})(RemoteUpdateType || (RemoteUpdateType = {}));
let DyteRemoteRequest = class DyteRemoteRequest extends DyteEventEmitter {
    id;
    remotePeerId;
    hostPeerId;
    state;
    constructor(request) {
        super();
        const { remotePeerId, requestId, hostPeerId, state, } = request;
        this.id = requestId;
        this.remotePeerId = remotePeerId;
        this.hostPeerId = hostPeerId;
        this.state = state;
    }
};
DyteRemoteRequest = __decorate([
    CatchAll((err) => { throw new DyteError(err.message, '1400'); }),
    __metadata("design:paramtypes", [Object])
], DyteRemoteRequest);
export default DyteRemoteRequest;
