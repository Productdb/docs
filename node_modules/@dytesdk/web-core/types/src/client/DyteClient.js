var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DyteClient_1;
import '../utils/polyfills';
import { v4 as uuid } from 'uuid';
import Controller from '../controllers/Controller';
import constants, { setIsV2AuthToken } from '../utils/constants';
import ConnectedMeetingsController from '../controllers/ConnectedMeetingsController';
import DyteLogger from './internals/DyteLogger';
import DyteError, { CatchAll } from './DyteError';
import DyteTelemetry from '../utils/opentelemetry';
import { browserSpecs } from '../browser/BrowserCapabilities';
import Memoize from '../utils/Memoize';
const DyteClientInitResolver = (options) => `${options.roomName ?? ''}-${options.authToken}-${options.apiBase ?? ''}-${JSON.stringify(options.defaults ?? {})}-${JSON.stringify(options.modules ?? {})}-${JSON.stringify(options.overrides ?? {})}`;
let DyteClient = DyteClient_1 = class DyteClient {
    #controller;
    #connectedMeetingsController;
    constructor(controller) {
        this.#controller = controller;
    }
    static async init(options) {
        browserSpecs.init();
        const peerId = uuid();
        try {
            window.__zone_symbol__DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION = true;
            if (window.Zone === undefined)
                require('zone.js');
        }
        catch { }
        DyteTelemetry.init(peerId, options.modules?.tracing ?? true);
        if (!navigator.isReactNative && typeof window !== 'undefined') {
            window.addEventListener('error', (event) => {
                if (!event.filename?.includes('localhost') && event.lineno !== 0) {
                    DyteLogger.error('window::error', {
                        error: event.error,
                    }, true);
                }
            });
            window.addEventListener('unhandledrejection', (event) => {
                DyteLogger.error('window::unhandledrejection', {
                    error: event?.reason,
                    networkCall: {
                        url: event?.reason?.config?.url,
                        baseURL: event?.reason?.config?.baseURL,
                        method: event?.reason?.config?.method,
                        status: event?.reason?.status,
                        statusText: event?.reason?.statusText,
                    },
                }, true);
            });
        }
        setIsV2AuthToken(options.authToken, options.roomName);
        DyteTelemetry.meetingMetadata.roomName = constants.isV2AuthToken
            ? constants.meetingId : options.roomName;
        const controller = await Controller.init(options, peerId);
        const meeting = new DyteClient_1(controller);
        meeting.#attachConnectedMeetingsController(options);
        return meeting;
    }
    #attachConnectedMeetingsController(options) {
        this.#connectedMeetingsController = ConnectedMeetingsController.init(this, options);
    }
    async joinRoom() {
        return this.#controller.joinRoom();
    }
    async leaveRoom(state) {
        return this.#controller.leaveRoom(state);
    }
    get participants() {
        return this.#controller.participantController?.participants;
    }
    get self() {
        return this.#controller.selfController?.self;
    }
    get meta() {
        return this.#controller.metaController?.meta;
    }
    get plugins() {
        return this.#controller.pluginController?.plugins;
    }
    get chat() {
        return this.#controller.chatController?.chat;
    }
    get polls() {
        return this.#controller.pollController?.polls;
    }
    get remote() {
        return this.#controller.remoteController?.remote;
    }
    get connectedMeetings() {
        return this.#connectedMeetingsController?.connectedMeetings;
    }
    get recording() {
        return this.#controller.recordingController?.recording;
    }
    get spotlight() {
        return this.#controller.spotlightController?.spotlight;
    }
    get livestream() {
        return this.#controller.livestreamController?.livestream;
    }
    get stage() {
        return this.#controller.stageController?.stage;
    }
    get __internals__() {
        return this.#controller.internalsController?.internals;
    }
};
__decorate([
    CatchAll((err) => { throw new DyteError(err.message, '0002'); }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteClient.prototype, "joinRoom", null);
__decorate([
    CatchAll((err) => { throw new DyteError(err.message, '0003'); }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DyteClient.prototype, "leaveRoom", null);
__decorate([
    CatchAll((err) => { throw new DyteError(err.message, '0001'); }),
    Memoize(DyteClientInitResolver),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], DyteClient, "init", null);
DyteClient = DyteClient_1 = __decorate([
    CatchAll((err) => { throw new DyteError(err.message, '0000'); }),
    __metadata("design:paramtypes", [Controller])
], DyteClient);
export default DyteClient;
