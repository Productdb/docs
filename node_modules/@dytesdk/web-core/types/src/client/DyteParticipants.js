var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteTelemetry from '../utils/opentelemetry';
import { SessionEvents } from '../store/SessionEvents';
import { SessionStore } from '../store/SessionStore';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteError, { CatchAll } from './DyteError';
import DyteSelf from './DyteSelf';
import DyteParticipantMap from './map/DyteParticipantMap';
import DyteSelectedPeers from './DyteSelectedPeers';
import MediasoupRoomNodeClient from '../roomNode/MediasoupRoomNodeClient';
import DyteLogger from './internals/DyteLogger';
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
let DyteParticipants = class DyteParticipants extends DyteEventEmitter {
    waitlisted;
    joined;
    active;
    pinned;
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    get roomJoined() {
        return this.#roomNodeClient?.roomJoined === true;
    }
    #self;
    viewMode;
    currentPage;
    lastActiveSpeaker;
    selectedPeers;
    constructor(self) {
        super();
        this.#self = self;
        this.waitlisted = new DyteParticipantMap();
        this.joined = new DyteParticipantMap();
        this.active = new DyteParticipantMap();
        this.pinned = new DyteParticipantMap();
        this.selectedPeers = new DyteSelectedPeers();
        this.viewMode = 'ACTIVE_GRID';
        this.currentPage = 0;
    }
    get count() {
        return this.joined.size;
    }
    get maxActiveParticipantsCount() {
        if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
            return this.#roomNodeClient.maxPreferredStreams;
        }
        const theme = this.#self.suggestedTheme;
        return theme?.grid?.multi?.maxVideoCount ?? 6;
    }
    get pageCount() {
        return this.viewMode === 'PAGINATED'
            ? Math.ceil((this.joined.size) / this.maxActiveParticipantsCount)
            : 0;
    }
    async acceptWaitingRoomRequest(id) {
        if (!this.roomJoined) {
            throw new DyteError('Can`t accept waiting room request without joining room');
        }
        return this.#roomNodeClient.acceptWaitingRequest(id);
    }
    async rejectWaitingRoomRequest(id) {
        if (!this.roomJoined) {
            throw new DyteError('Can`t reject waiting room request without joining room');
        }
        await this.#roomNodeClient.rejectWaitingRequest(id);
        this.waitlisted.delete(id);
    }
    async setViewMode(viewMode) {
        DyteLogger.info('DyteParticipants::set_view_mode', {
            pageNavigation: {
                viewMode,
                currentPage: this.currentPage,
                pageCount: this.pageCount,
                maxActiveParticipantsCount: this.maxActiveParticipantsCount,
            },
        });
        if (!['ACTIVE_GRID', 'PAGINATED'].includes(viewMode)) {
            DyteLogger.error('DyteParticipants::setViewMode::invalid_view_mode', {
                pageNavigation: {
                    viewMode,
                    currentPage: this.currentPage,
                    pageCount: this.pageCount,
                    maxActiveParticipantsCount: this.maxActiveParticipantsCount,
                },
            });
            throw new DyteError(`Invalid view mode: ${viewMode}. Try ACTIVE_GRID or PAGINATED.`);
        }
        if (this.viewMode === viewMode) {
            DyteLogger.info('DyteParticipants::setViewMode::view_mode_same_as_previous', {
                pageNavigation: {
                    viewMode,
                    currentPage: this.currentPage,
                    pageCount: this.pageCount,
                    maxActiveParticipantsCount: this.maxActiveParticipantsCount,
                },
            });
            return;
        }
        this.viewMode = viewMode;
        if (viewMode === 'PAGINATED') {
            this.currentPage = 1;
            let peerIds = [];
            if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
                ({ peerIds } = (await this.#roomNodeClient.getPage(this.currentPage)).payload);
            }
            else {
                peerIds = this.getPeerIdsForCurrentPage();
            }
            SessionStore.emit(SessionEvents.GET_PAGE, { peerIds });
        }
        else if (viewMode === 'ACTIVE_GRID') {
            this.currentPage = 0;
            if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
                this.#roomNodeClient.getPage(this.currentPage);
            }
            else {
                SessionStore.emit(SessionEvents.REFRESH_GRID);
            }
        }
        this.emit('viewModeChanged', {
            viewMode,
            currentPage: this.currentPage,
            pageCount: this.pageCount,
        });
    }
    getPeerIdsForCurrentPage() {
        DyteLogger.info('DyteParticipants::getPeerIdsForCurrentPage()', {
            pageNavigation: {
                viewMode: this.viewMode,
                currentPage: this.currentPage,
                pageCount: this.pageCount,
                maxActiveParticipantsCount: this.maxActiveParticipantsCount,
            },
        });
        const { compulsoryPeers } = this.selectedPeers;
        const joinedPeerIds = [...this.joined.keys()];
        const start = Math.max((this.currentPage - 1) * (this.maxActiveParticipantsCount - compulsoryPeers.length));
        const end = this.currentPage * (this.maxActiveParticipantsCount - compulsoryPeers.length);
        return compulsoryPeers.concat(joinedPeerIds.slice(start, end));
    }
    async setPage(page) {
        DyteLogger.info('DyteParticipants::set_page', {
            pageNavigation: {
                settingPage: page,
                viewMode: this.viewMode,
                currentPage: this.currentPage,
                pageCount: this.pageCount,
                maxActiveParticipantsCount: this.maxActiveParticipantsCount,
            },
        });
        if (this.viewMode !== 'PAGINATED') {
            return;
        }
        if (!Number.isInteger(page)) {
            DyteLogger.error('DyteParticipants::invalid_page_number', {
                pageNavigation: {
                    settingPage: page,
                    viewMode: this.viewMode,
                    currentPage: this.currentPage,
                    pageCount: this.pageCount,
                    maxActiveParticipantsCount: this.maxActiveParticipantsCount,
                },
            });
            throw new DyteError(`Invalid page: ${page}. Page must be an integer.`);
        }
        if (page < 1 || page > this.pageCount) {
            DyteLogger.error('DyteParticipants::invalid_page_number', {
                pageNavigation: {
                    settingPage: page,
                    viewMode: this.viewMode,
                    currentPage: this.currentPage,
                    pageCount: this.pageCount,
                    maxActiveParticipantsCount: this.maxActiveParticipantsCount,
                },
            });
            throw new DyteError(`Invalid page: ${page}. Page must be greater than 0 and less than or equal to ${this.pageCount}.`);
        }
        this.currentPage = page;
        let peerIds = [];
        if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
            ({ peerIds } = (await this.#roomNodeClient.getPage(page)).payload);
        }
        else {
            peerIds = this.getPeerIdsForCurrentPage();
        }
        SessionStore.emit(SessionEvents.GET_PAGE, { peerIds });
        this.emit('pageChanged', {
            viewMode: this.viewMode,
            currentPage: this.currentPage,
            pageCount: this.pageCount,
        });
    }
    async disableAllAudio(allowUnmute) {
        DyteLogger.info('DyteParticipants::disable_all_audio', {
            actions: { disableAllAudio: { allowUnmute } },
        });
        if (!this.roomJoined) {
            throw new DyteError('Can`t disable all audio without joining room');
        }
        if (this.#self.permissions.canAllowParticipantAudio) {
            return this.#roomNodeClient.muteAll(allowUnmute);
        }
        DyteLogger.error('DyteParticipants::unauthorized_disable_all_audio', {
            actions: { disableAllAudio: { allowUnmute } },
        });
        throw new DyteError('Unauthorized: User does not have permission to disable peer audio.');
    }
    async disableAllVideo() {
        DyteLogger.info('DyteParticipants::disable_all_video');
        if (!this.roomJoined) {
            throw new DyteError('Can`t disable all video without joining room');
        }
        if (this.#self.permissions.canAllowParticipantVideo) {
            return this.#roomNodeClient.muteAllVideo();
        }
        DyteLogger.error('DyteParticipants::unauthorized_disable_all_video');
        throw new DyteError('Unauthorized: User does not have permission to disable peer video.');
    }
    async disableAudio(participantId) {
        this.joined.get(participantId).disableAudio();
    }
    async disableVideo(participantId) {
        this.joined.get(participantId).disableVideo();
    }
    async kick(participantId) {
        this.joined.get(participantId).kick();
    }
    async kickAll() {
        DyteLogger.info('DyteParticipants::kick_all');
        if (!this.roomJoined) {
            throw new DyteError('Can`t kick all without joining room');
        }
        if (this.#self.permissions.kickParticipant) {
            return this.#roomNodeClient.kickAll();
        }
        DyteLogger.error('DyteParticipants::unauthorized_kick_all');
        throw new DyteError('Unauthorized: User does not have permission to kick peers.');
    }
    async broadcastMessage(type, payload) {
        DyteLogger.info('DyteParticipants::broadcastMessage');
        if (!this.roomJoined) {
            throw new DyteError('Can`t broadcast message without joining room');
        }
        if (!type?.trim()) {
            throw new DyteError('`type` must be a non-empty string.');
        }
        this.#roomNodeClient.broadcastMessage(type, payload);
    }
    async acceptAllRequestToJoinStageRequests(acceptJoinStageRequests) {
        if (!this.roomJoined) {
            throw new DyteError('Can`t acceptAllRequestToJoinStageRequests without joining room');
        }
        this.#roomNodeClient.acceptAllRequestToJoinStage(acceptJoinStageRequests);
    }
};
__decorate([
    DyteTelemetry.trace('DyteParticipants.setViewMode'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "setViewMode", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.setPage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "setPage", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.disableAllAudio'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "disableAllAudio", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.disableAllVideo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "disableAllVideo", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.disablePeerAudio'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "disableAudio", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.disablePeerVideo'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "disableVideo", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.kickPeer'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "kick", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.kickAll'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "kickAll", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.broadcastMessage'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "broadcastMessage", null);
__decorate([
    DyteTelemetry.trace('DyteParticipants.acceptAllRequestToJoinStageRequests'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", Promise)
], DyteParticipants.prototype, "acceptAllRequestToJoinStageRequests", null);
DyteParticipants = __decorate([
    CatchAll((err) => { throw new DyteError(err.message, '1200'); }),
    __metadata("design:paramtypes", [DyteSelf])
], DyteParticipants);
export default DyteParticipants;
