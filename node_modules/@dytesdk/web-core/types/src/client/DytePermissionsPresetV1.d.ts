import { ViewType } from '@dyteinternals/utils';
import { MediaScreenShareQualityType, MediaVideoQualityType } from '@dyteinternals/utils/dist/types/HybridPreset';
export declare enum WaitingRoomType {
    skip = "SKIP",
    onPrivilegedUserEntry = "ON_PRIVILEGED_USER_ENTRY",
    skipOnAccept = "SKIP_ON_ACCEPT"
}
export declare enum CanProduceType {
    allowed = "ALLOWED",
    notAllowed = "NOT_ALLOWED",
    canRequest = "CAN_REQUEST"
}
export interface PollsPermission {
    canCreate: boolean;
    canVote: boolean;
    canViewResults: boolean;
    canView: boolean;
}
export interface PresetPermissionsV1 {
    viewType: ViewType;
    acceptWaitingRequests: boolean;
    requestProduce: boolean;
    canAllowParticipantAudio: boolean;
    canAllowParticipantScreensharing: boolean;
    canAllowParticipantVideo: boolean;
    requestKickParticipant: boolean;
    kickParticipant: boolean;
    pinParticipant: boolean;
    canRecord: boolean;
    waitingRoomType: string;
    plugins: {
        canClose: boolean;
        canStart: boolean;
        canEditAcl: boolean;
        config: {
            [key: string]: any;
        };
    };
    polls: {
        canCreate: boolean;
        canVote: boolean;
        canView: boolean;
    };
    produce: {
        video: {
            allow: boolean;
            quality: MediaVideoQualityType;
            frameRate: number;
        };
        audio: boolean;
        screenshare: {
            allow: boolean;
            quality: MediaScreenShareQualityType;
            frameRate: number;
        };
    };
    chat: {
        public: {
            canSend: boolean;
            text: boolean;
            files: boolean;
        };
        private: {
            canSend: boolean;
            canReceive: boolean;
            text: boolean;
            files: boolean;
        };
    };
    reactions: boolean;
    hiddenParticipant: boolean;
    showParticipantList: boolean;
    canChangeParticipantRole: boolean;
    canChangeTheme: boolean;
    canPresent: boolean;
    acceptPresentRequests: boolean;
    canEditDisplayName: boolean;
    maxScreenshareCount: number;
    isRecorder: boolean;
    canSpotlight: boolean;
}
export declare const DEFAULT_PERMISSIONS_CAMEL_CASED: {
    viewType: ViewType;
    acceptWaitingRequests: boolean;
    requestProduce: boolean;
    canAllowParticipantAudio: boolean;
    canAllowParticipantScreensharing: boolean;
    canAllowParticipantVideo: boolean;
    requestKickParticipant: boolean;
    kickParticipant: boolean;
    pinParticipant: boolean;
    canRecord: boolean;
    waitingRoomType: string;
    plugins: {
        canClose: boolean;
        canStart: boolean;
        canEditAcl: boolean;
        config: {};
    };
    polls: {
        canCreate: boolean;
        canVote: boolean;
        canView: boolean;
    };
    produce: {
        video: {
            allow: boolean;
            quality: MediaVideoQualityType;
            frameRate: number;
        };
        audio: boolean;
        screenshare: {
            allow: boolean;
            quality: MediaScreenShareQualityType;
            frameRate: number;
        };
    };
    chat: {
        public: {
            canSend: boolean;
            text: boolean;
            files: boolean;
        };
        private: {
            canSend: boolean;
            canReceive: boolean;
            text: boolean;
            files: boolean;
        };
    };
    reactions: boolean;
    hiddenParticipant: boolean;
    showParticipantList: boolean;
    canChangeParticipantRole: boolean;
    canChangeTheme: boolean;
    canPresent: boolean;
    acceptPresentRequests: boolean;
    canEditDisplayName: boolean;
    maxScreenshareCount: number;
    isRecorder: boolean;
    canSpotlight: boolean;
};
export default class DytePermissionsPresetV1 {
    #private;
    private constructor();
    static fromResponse(response: PresetPermissionsV1): DytePermissionsPresetV1;
    static default(): DytePermissionsPresetV1;
    get viewType(): Readonly<string>;
    get acceptWaitingRequests(): Readonly<boolean>;
    get requestProduce(): Readonly<boolean>;
    get requestProduceAudio(): Readonly<boolean>;
    get requestProduceScreenshare(): Readonly<boolean>;
    get canAllowParticipantAudio(): Readonly<boolean>;
    get canAllowParticipantScreensharing(): Readonly<boolean>;
    get canAllowParticipantVideo(): Readonly<boolean>;
    get canDisableParticipantAudio(): Readonly<boolean>;
    get canDisableParticipantVideo(): Readonly<boolean>;
    get kickParticipant(): Readonly<boolean>;
    get pinParticipant(): Readonly<boolean>;
    get canRecord(): Readonly<boolean>;
    get waitingRoomType(): Readonly<string>;
    get waitingRoomBehaviour(): Readonly<WaitingRoomType>;
    get plugins(): Readonly<{
        canClose: boolean;
        canStart: boolean;
        canEditAcl: boolean;
        config: {
            [key: string]: any;
        };
    }>;
    get polls(): Readonly<PollsPermission>;
    get produceVideo(): Readonly<{
        allow: CanProduceType;
        quality: string;
        frameRate: number;
    }>;
    get canProduceVideo(): Readonly<CanProduceType>;
    get produceScreenshare(): Readonly<{
        allow: CanProduceType;
        quality: string;
        frameRate: number;
    }>;
    get canProduceScreenshare(): Readonly<CanProduceType>;
    get produceAudio(): Readonly<CanProduceType>;
    get canProduceAudio(): Readonly<CanProduceType>;
    get chatPublic(): Readonly<{
        canSend: boolean;
        text: boolean;
        files: boolean;
    }>;
    get chatPrivate(): Readonly<{
        canSend: boolean;
        text: boolean;
        files: boolean;
        canReceive?: boolean;
    }>;
    get connectedMeetings(): {
        canAlterConnectedMeetings: boolean;
        canSwitchConnectedMeetings: boolean;
        canSwitchToParentMeeting: boolean;
    };
    get reactions(): Readonly<boolean>;
    get hiddenParticipant(): Readonly<boolean>;
    get showParticipantList(): Readonly<boolean>;
    get canChangeParticipantRole(): Readonly<boolean>;
    get canChangeTheme(): Readonly<boolean>;
    get canPresent(): Readonly<boolean>;
    get acceptPresentRequests(): Readonly<boolean>;
    get canEditDisplayName(): Readonly<boolean>;
    get maxScreenShareCount(): Readonly<number>;
    get isRecorder(): Readonly<boolean>;
    get canLivestream(): Readonly<boolean>;
    get canSpotlight(): Readonly<boolean>;
    get isV2(): false;
}
