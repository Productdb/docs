import { ViewType } from '@dyteinternals/utils';
import { DEFAULT_PRESET_MEDIA_CONSTRAINTS, } from '../media-new/interface/web/ConstraintBuilder';
import { objectToCamelCase } from '../utils/sanitizer';
import DyteError from './DyteError';
const DEFAULT_THEME_SNAKE_CASED = {
    setup_screen: { is_enabled: false },
    alone_here: { is_enabled: false },
    waiting_room: { is_enabled: false, enable_preview: true },
    control_bar: {
        is_enabled: true,
        elements: {
            plugins: true,
            screenshare: true,
            invite: false,
            participants: true,
            chat: true,
            reactions: false,
            polls: true,
            fullscreen: true,
            layout: true,
        },
    },
    header: {
        is_enabled: true,
        elements: {
            logo: '',
            timer: true,
            title: true,
            participant_count: true,
            change_layout: true,
        },
    },
    pip_mode: true,
    auto_tune: true,
    grid: {
        multi: { max_video_count: 9, video_fit: 'cover' },
        single: { max_video_count: 6, video_fit: 'cover' },
        default_view: 'MULTI',
    },
    colors: {
        primary: '#2160FD',
        secondary: '#1A1A1A',
        text: '#EEEEEE',
        background: '#1A1A1A',
        text_primary: '#EEEEEE',
        video_background: '#1A1A1A',
    },
    controls: { pip_toggle: false },
    plugins: [],
};
export const DEFAULT_THEME_CAMEL_CASED = objectToCamelCase(DEFAULT_THEME_SNAKE_CASED);
export default class DyteThemePresetV1 {
    #theme;
    #screenShareCount;
    #viewType;
    #mediaConstrains;
    #disabledPlugins = [];
    constructor(presetThemeV1) {
        if (!presetThemeV1) {
            throw new DyteError('Could not load preset theme.');
        }
        this.#theme = presetThemeV1;
        this.#screenShareCount = 1;
        this.#viewType = ViewType.GroupCall;
    }
    static fromResponse(theme) {
        return new DyteThemePresetV1(theme);
    }
    static default() {
        return new DyteThemePresetV1(DEFAULT_THEME_CAMEL_CASED);
    }
    configFromPermissions(permissions) {
        this.#screenShareCount = permissions.maxScreenshareCount || 1;
        this.#viewType = permissions.viewType;
        this.#mediaConstrains = {
            video: {
                quality: permissions?.produce?.video?.quality
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.video.quality,
                frameRate: permissions?.produce?.video?.frameRate
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.video.frameRate,
            },
            screenshare: {
                quality: permissions?.produce?.screenshare?.quality
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.screenshare.quality,
                frameRate: permissions?.produce?.screenshare?.frameRate
                    ?? DEFAULT_PRESET_MEDIA_CONSTRAINTS.screenshare.frameRate,
            },
        };
    }
    setDisabledPlugins(allPluginIds) {
        const whitelistedPluginsId = this.#theme.plugins;
        if (whitelistedPluginsId && whitelistedPluginsId.length > 0) {
            this.#disabledPlugins = allPluginIds.filter((plugin) => !whitelistedPluginsId.includes(plugin));
        }
    }
    get setupScreen() {
        return this.#theme.setupScreen;
    }
    get aloneHere() {
        return this.#theme.aloneHere;
    }
    get waitingRoom() {
        return this.#theme.waitingRoom;
    }
    get controlBar() {
        return this.#theme.controlBar;
    }
    get header() {
        return this.#theme.header;
    }
    get pipMode() {
        return this.#theme.controls?.pipToggle || this.#theme.pipMode;
    }
    get viewType() {
        return this.#viewType;
    }
    get autoTune() {
        return this.#theme.autoTune;
    }
    get grid() {
        return this.#theme.grid;
    }
    get maxVideoStreams() {
        return {
            mobile: this.grid.multi.maxVideoCount > 6 ? 6 : this.grid.multi.maxVideoCount,
            desktop: this.grid.multi.maxVideoCount,
        };
    }
    get maxScreenShareCount() {
        return this.#screenShareCount;
    }
    get colors() {
        return this.#theme.colors;
    }
    get controls() {
        return this.#theme.controls;
    }
    get plugins() {
        return this.#theme.plugins;
    }
    get disabledPlugins() {
        return this.#disabledPlugins;
    }
    get mediaConstraints() {
        return this.#mediaConstrains;
    }
    get isV2() {
        return false;
    }
}
