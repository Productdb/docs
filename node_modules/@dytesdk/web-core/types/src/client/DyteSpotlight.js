var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DyteSpotlight_1;
import MediasoupRoomNodeClient from '../roomNode/MediasoupRoomNodeClient';
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteError, { CatchAll } from './DyteError';
import DyteLogger from './internals/DyteLogger';
export var TabChangeSource;
(function (TabChangeSource) {
    TabChangeSource[TabChangeSource["User"] = 0] = "User";
    TabChangeSource[TabChangeSource["Spotlight"] = 1] = "Spotlight";
})(TabChangeSource || (TabChangeSource = {}));
let DyteSpotlight = DyteSpotlight_1 = class DyteSpotlight extends DyteEventEmitter {
    selfActiveTab;
    spotlighted;
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    get roomJoined() {
        return this.#roomNodeClient?.roomJoined === true;
    }
    #self;
    constructor(self) {
        super();
        this.spotlighted = self.permissions.canSpotlight;
        this.#self = self;
    }
    static init(self) {
        return new DyteSpotlight_1(self);
    }
    setSpotlighted(spotlighted) {
        if (!this.#self.permissions.canSpotlight) {
            DyteLogger.error('DyteSpotlight::setSpotlighted::permission_denied');
            throw new DyteError('User does not have permission to toggle spotlight');
        }
        this.spotlighted = spotlighted;
        this.emit('spotlightUpdate', this.spotlighted);
        if (this.spotlighted)
            this.assertSpotlightToRoom();
    }
    setSelfActiveTab(spotlightTab, tabChangeSource) {
        DyteLogger.info('DyteSpotlight::setActiveTab', {
            spotlight: {
                currentTab: {
                    id: spotlightTab.id,
                    type: spotlightTab.type,
                },
            },
        });
        this.selfActiveTab = spotlightTab;
        if (tabChangeSource === TabChangeSource.User)
            this.emit('selfTabUpdate', spotlightTab);
        if (this.#self.permissions?.canSpotlight
            && this.spotlighted
            && tabChangeSource === TabChangeSource.User)
            this.assertSpotlightToRoom();
    }
    assertSpotlightToRoom() {
        if (this.#roomNodeClient instanceof MediasoupRoomNodeClient
            && this.selfActiveTab) {
            this.#roomNodeClient.assertSpotlightToRoom({
                spotlightedUserId: this.#self.userId,
                currentTab: this.selfActiveTab,
                peerId: undefined,
            });
        }
    }
};
DyteSpotlight = DyteSpotlight_1 = __decorate([
    CatchAll((err) => { throw new DyteError(err.message, '1300'); }),
    __metadata("design:paramtypes", [Object])
], DyteSpotlight);
export default DyteSpotlight;
