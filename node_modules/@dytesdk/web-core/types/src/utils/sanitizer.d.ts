import { CamelCase, CamelCasedPropertiesDeep, SnakeCase, SnakeCasedPropertiesDeep } from 'type-fest';
export interface AnyObject {
    [key: string]: any;
}
export declare type AnyTsObject = AnyObject | Array<any>;
export declare function stringToCamelCase<T extends string = string>(snakeCaseString: T): CamelCase<T> | string;
export declare function objectToCamelCase<T extends AnyTsObject>(snakeCaseObject: T): CamelCasedPropertiesDeep<T>;
export declare function camelToSnakeCase<T extends string = string>(camelCaseString: T): SnakeCase<string> | string;
export declare function objectToSnakeCase<T extends AnyTsObject>(camelCaseObject: T): SnakeCasedPropertiesDeep<T>;
export declare function postMessageSanitizer(value: {
    [key: string]: any;
}, acc?: {
    [key: string]: any;
}): {
    [key: string]: any;
};
