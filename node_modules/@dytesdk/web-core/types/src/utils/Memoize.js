import { memoize } from 'lodash-es';
import DyteLogger from '../client/internals/DyteLogger';
export default function Memoize(resolver) {
    return (_target, property, descriptor) => {
        const originalMethod = descriptor.value;
        const memoizedMethod = resolver
            ? memoize(originalMethod, resolver)
            : memoize(originalMethod);
        descriptor.value = (...args) => {
            if (memoizedMethod.cache && memoizedMethod.cache.has(resolver(...args))) {
                console.warn(`[Dyte] method "${property}" is called twice. This may result in inconsistent behaviors`);
                try {
                    DyteLogger.warn('Memoize::double_invoke', {
                        memoize: {
                            doubleInvoked: {
                                property,
                            },
                        },
                    });
                }
                catch (error) {
                }
            }
            return memoizedMethod.apply(this, args);
        };
        return descriptor;
    };
}
