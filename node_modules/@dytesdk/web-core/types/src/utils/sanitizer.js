import { validate } from 'uuid';
export function stringToCamelCase(snakeCaseString) {
    return snakeCaseString.replace(/([-_]\w)/g, (g) => g[1].toUpperCase());
}
export function objectToCamelCase(snakeCaseObject) {
    if (!snakeCaseObject || typeof snakeCaseObject !== 'object') {
        return snakeCaseObject;
    }
    if (Array.isArray(snakeCaseObject)) {
        return snakeCaseObject.map((i) => objectToCamelCase(i));
    }
    const n = {};
    Object.keys(snakeCaseObject).forEach((k) => {
        const key = validate(k) ? k : stringToCamelCase(k);
        n[key] = objectToCamelCase(snakeCaseObject[k]);
    });
    return n;
}
export function camelToSnakeCase(camelCaseString) {
    return camelCaseString.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`);
}
export function objectToSnakeCase(camelCaseObject) {
    if (!camelCaseObject || typeof camelCaseObject !== 'object') {
        return camelCaseObject;
    }
    if (Array.isArray(camelCaseObject)) {
        return camelCaseObject.map((i) => objectToSnakeCase(i));
    }
    const result = {};
    Object.keys(camelCaseObject).forEach((key) => {
        const snakeCaseKey = validate(key) ? key : camelToSnakeCase(key);
        result[snakeCaseKey] = camelCaseObject[key];
    });
    return result;
}
export function postMessageSanitizer(value, acc = {}) {
    if (value === undefined || value === null)
        return {};
    Object.getOwnPropertyNames(value).forEach((property) => {
        if (typeof value[property] === 'function')
            return;
        if (typeof value[property] === 'object') {
            postMessageSanitizer(value[property], acc[property] = {});
            return;
        }
        acc[property] = value[property];
    });
    return acc;
}
