const NativeAudioContext = typeof AudioContext !== 'undefined'
    ? AudioContext
    : null;
class AudioContextProvider {
    _AudioContext;
    audioContext;
    _audioContextRefContainers;
    constructor(opts) {
        const options = { AudioContext: NativeAudioContext, ...opts };
        Object.defineProperties(this, {
            _AudioContext: {
                value: options.AudioContext,
            },
            audioContext: {
                value: null,
                writable: true,
            },
            _audioContextRefContainers: {
                value: new Set(),
            },
            AudioContextProvider: {
                enumerable: true,
                value: AudioContextProvider,
            },
        });
    }
    getOrCreate(audioContextRefContainer) {
        if (!this._audioContextRefContainers.has(audioContextRefContainer)) {
            this._audioContextRefContainers.add(audioContextRefContainer);
            if (this._AudioContext && !this.audioContext) {
                try {
                    this.audioContext = new this._AudioContext();
                }
                catch (error) {
                }
            }
        }
        return this.audioContext;
    }
    release(audioContextRefContainer) {
        if (this._audioContextRefContainers.has(audioContextRefContainer)) {
            this._audioContextRefContainers.delete(audioContextRefContainer);
            if (!this._audioContextRefContainers.size && this.audioContext) {
                this.audioContext.close();
                this.audioContext = null;
            }
        }
    }
}
export default new AudioContextProvider();
