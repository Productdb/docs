const delay = (timeout = 0) => new Promise((resolve) => setTimeout(resolve, timeout));
const detectSilence = (audioContext, stream, timeout) => {
    const timer = typeof timeout === 'number' ? timeout : 250;
    const source = audioContext.createMediaStreamSource(stream);
    const analyser = audioContext.createAnalyser();
    analyser.fftSize = 2048;
    source.connect(analyser);
    const samples = new Uint8Array(analyser.fftSize);
    let timeoutDidFire = false;
    setTimeout(() => { timeoutDidFire = true; }, timer);
    function checkSilentSamples() {
        if (timeoutDidFire) {
            return Promise.resolve(true);
        }
        analyser.getByteTimeDomainData(samples);
        return samples.some((sample) => sample !== 128 && sample !== 0)
            ? Promise.resolve(false)
            : delay().then(checkSilentSamples);
    }
    return checkSilentSamples().then((isSilent) => {
        source.disconnect();
        return isSilent;
    }, (error) => {
        source.disconnect();
        throw error;
    });
};
export default detectSilence;
