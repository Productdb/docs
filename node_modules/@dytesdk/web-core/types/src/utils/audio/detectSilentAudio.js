import detectSilence from './detectSilence';
import AudioContextProvider from './audioContext';
import DyteLogger from '../../client/internals/DyteLogger';
const NUM_OF_ATTEMPTS = 3;
const ATTEMPT_DURATION_MS = 250;
function detectAudioElementSilence(el) {
    const audioContextRefContainer = {};
    const audioContext = AudioContextProvider.getOrCreate(audioContextRefContainer);
    let attemptsLeft = NUM_OF_ATTEMPTS;
    function performSilenceCheck() {
        attemptsLeft -= 1;
        return detectSilence(audioContext, el.srcObject, ATTEMPT_DURATION_MS).then((isSilent) => {
            if (!isSilent) {
                return false;
            }
            if (attemptsLeft > 0) {
                return performSilenceCheck();
            }
            return true;
        }).catch(() => true);
    }
    return performSilenceCheck().finally(() => {
        AudioContextProvider.release(audioContextRefContainer);
    });
}
async function checkIfAudioTrackIsSilent(audioTrack) {
    const el = new Audio();
    const stream = new MediaStream();
    stream.addTrack(audioTrack);
    el.srcObject = stream;
    let isSilent = false;
    try {
        const promise = el.play();
        if (promise)
            await promise;
        isSilent = await detectAudioElementSilence(el);
        if (isSilent) {
            DyteLogger.info('checkIfAudioTrackIsSilent::silence_detected');
        }
    }
    catch (error) {
        DyteLogger.error('checkIfAudioTrackIsSilent::failed_to_detect_silence', { error });
    }
    finally {
        el.pause();
        el.remove();
    }
    return isSilent;
}
export default checkIfAudioTrackIsSilent;
