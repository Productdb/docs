import { globalFlagsmith as flagsmith, ViewType } from '@dyteinternals/utils';
import DyteError from '../client/DyteError';
import DyteLogger from '../client/internals/DyteLogger';
import { FlagsmithFeatureFlags } from './flags';
const constants = {
    isV2AuthToken: false,
    meetingId: null,
    overrides: {},
    roomNodeOptions: undefined,
};
export const sampleLocalhostPlugin = {
    baseURL: 'http://localhost:5000',
    createdAt: '2021-08-05T10:49:56.602Z',
    description: 'Develop plugins locally',
    id: '09259e3b-7be8-46f6-9801-106bf1866e1c',
    name: 'Localhost Dev',
    organizationId: '4ad15a19-80e2-4105-bf43-48039fd2963e',
    picture: 'https://dyte-uploads.s3.ap-south-1.amazonaws.com/dyte.png',
    private: false,
    published: true,
    staggered: false,
    tags: ['#localhost', '#dev'],
    type: 'self_hosted',
    updatedAt: '2021-08-05T10:50:07.681Z',
};
export function setIsV2AuthToken(authToken, roomName) {
    if (roomName) {
        constants.isV2AuthToken = false;
        return;
    }
    try {
        const { meetingId } = JSON.parse(atob(authToken.split('.')[1]));
        if (!meetingId)
            throw Error(`Received V1 auth token ${authToken}`);
        constants.isV2AuthToken = true;
        constants.meetingId = meetingId;
    }
    catch (error) {
        DyteLogger.error('constants::setIsV2AuthToken', {
            error,
            debuggingHint: `Unable to decode auth token: ${authToken}`,
        }, true);
        throw new DyteError('Invalid auth token');
    }
}
export function shouldConnectToSocketService(viewType, capabilities) {
    if (constants.isV2AuthToken
        && flagsmith.hasFeature(FlagsmithFeatureFlags.CONNECTED_MEETINGS)) {
        return true;
    }
    const flagsmithChatSocketServer = flagsmith.getValue(FlagsmithFeatureFlags.CHAT_SOCKET_SERVER) || 'socket-service';
    const flagsmithPluginSocketServer = flagsmith.getValue(FlagsmithFeatureFlags.PLUGIN_SOCKET_SERVER) || 'socket-service';
    const flagsmithPollSocketServer = flagsmith.getValue(FlagsmithFeatureFlags.POLL_SOCKET_SERVER) || 'socket-service';
    return (constants.isV2AuthToken && viewType === ViewType.Livestream)
        || [flagsmithChatSocketServer, flagsmithPluginSocketServer, flagsmithPollSocketServer].includes('socket-service')
        || capabilities.includes('HIVE');
}
export function setOverrides(overrides) {
    constants.overrides = overrides;
}
export function getOverride(key) {
    return constants.overrides && constants.overrides[key] ? constants.overrides[key] : false;
}
export function setRoomNodeOptions(options) {
    constants.roomNodeOptions = options;
}
export default constants;
