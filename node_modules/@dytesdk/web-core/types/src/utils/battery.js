import DyteLogger from '../client/internals/DyteLogger';
class BatteryLogger {
    battery;
    init = async () => {
        if ('getBattery' in navigator) {
            this.battery = await navigator.getBattery();
            this.battery.addEventListener('chargingchange', this.updateChargeInfo);
            this.battery.addEventListener('levelchange', this.updateLevelInfo);
            this.updateLevelInfo();
            this.updateChargeInfo();
        }
    };
    updateChargeInfo = () => {
        DyteLogger.log(`Battery charging? ${this.battery?.charging ? 'Yes' : 'No'}`);
    };
    updateLevelInfo = () => {
        DyteLogger.log(`Battery level: ${this.battery?.level * 100}%`);
    };
    cleanup = () => {
        if ('getBattery' in navigator) {
            this.battery?.removeEventListener('chargingchange', this.updateChargeInfo);
            this.battery?.removeEventListener('levelchange', this.updateLevelInfo);
        }
    };
}
export default new BatteryLogger();
