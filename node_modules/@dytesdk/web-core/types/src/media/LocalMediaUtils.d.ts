import { DyteMediaStreamConstraints, DyteMediaTrackConstraints } from './LocalMediaInterfaces';
export interface LocalAudioOptions {
    disableAP?: boolean;
    disableAEC?: boolean;
    disableNS?: boolean;
    disableAGC?: boolean;
    disableHPF?: boolean;
}
export declare const virtualDeviceLabelInclusions: string[];
export declare function isVirtualDevice(mediaDevice: MediaDeviceInfo): boolean;
export default class LocalMediaUtils {
    #private;
    private constructor();
    static init(): Promise<LocalMediaUtils>;
    destruct(): Promise<void>;
    static isDeviceListAvailable(): boolean;
    private static enumerateDevices;
    static getAudioConstraints(options: {
        audioDeviceId?: string;
        audioOptions?: LocalAudioOptions;
    }): DyteMediaStreamConstraints;
    static getVideoConstraints(options?: {
        videoDeviceId?: string;
        videoTrackConstraints?: boolean | DyteMediaTrackConstraints;
        facingMode?: string;
        frameRate?: ConstrainDouble;
    }): DyteMediaStreamConstraints;
    private static getUserMediaWithTimeout;
    static getAudioTrack(constraints: DyteMediaStreamConstraints): Promise<MediaStreamTrack>;
    static getVideoTrack(constraints: DyteMediaStreamConstraints): Promise<MediaStreamTrack>;
    static getScreenShareTracks(constraints: DyteMediaStreamConstraints): Promise<{
        video: MediaStreamTrack;
        audio: MediaStreamTrack;
    }>;
    static getAudioAndVideoTrack(constraints: DyteMediaStreamConstraints): Promise<{
        audioTrack: MediaStreamTrack;
        videoTrack: MediaStreamTrack;
    }>;
    onDeviceChange(callback: (ev?: Event, changedDevices?: {
        added: MediaDeviceInfo[];
        removed: MediaDeviceInfo[];
    }) => void): void;
    repopulateAvailableDevices(): Promise<void>;
    get availableDevices(): MediaDeviceInfo[];
    getAvailableDevicesByKind(kind: string): MediaDeviceInfo[];
    getDeviceById(deviceId: string, kind: 'audioinput' | 'audiooutput' | 'videoinput'): MediaDeviceInfo;
    getAudioDevices(): MediaDeviceInfo[];
    getVideoDevices(): MediaDeviceInfo[];
    getSpeakerDevices(): MediaDeviceInfo[];
}
