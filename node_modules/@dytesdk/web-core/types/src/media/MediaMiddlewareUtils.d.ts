import LocalMediaHandler from './LocalMediaHandler';
export declare type AudioMiddleware = (audioContext: AudioContext) => Promise<ScriptProcessorNode | AudioWorkletNode>;
export declare type VideoMiddleware = (() => (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) => Promise<void>);
export default class MediaMiddlewareUtils {
    #private;
    audioMiddlewares: AudioMiddleware[];
    videoMiddlewares: VideoMiddleware[];
    constructor(localMediaHandler: LocalMediaHandler);
    terminateMiddlewareWebWorker(): void;
    getTransformedVideoTrack(originalVideoTrack: MediaStreamTrack): Promise<MediaStreamTrack>;
    addVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    removeVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    getTransformedAudioTrack(originalAudioTrack: MediaStreamTrack): Promise<MediaStreamTrack>;
    addAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    removeAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
}
