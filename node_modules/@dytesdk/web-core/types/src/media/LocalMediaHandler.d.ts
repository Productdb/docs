/// <reference types="node" />
import { EventEmitter } from 'events';
import MediaMiddlewareUtils, { AudioMiddleware, VideoMiddleware } from './MediaMiddlewareUtils';
import { MediaPermission } from '../utils/media';
import { PresetMediaConstraints } from '../media-new/interface/web/ConstraintBuilder';
export declare enum MediaEvents {
    AUDIO_TRACK_CHANGE = 0,
    VIDEO_TRACK_CHANGE = 1,
    SCREENSHARE_TRACK_CHANGE = 2,
    SCREENSHARE_ENDED = 3,
    AUDIO_TRACK_SILENT = 4,
    FORCE_MUTE_AUDIO = 5,
    FORCE_MUTE_VIDEO = 6,
    DEVICE_CHANGE = 7
}
export default class LocalMediaHandlerDeprecated extends EventEmitter {
    #private;
    mediaMiddlewareUtils: MediaMiddlewareUtils;
    audioTrack: MediaStreamTrack;
    rawAudioTrack: MediaStreamTrack;
    videoTrack: MediaStreamTrack;
    rawVideoTrack: MediaStreamTrack;
    screenShareTracks: {
        audio?: MediaStreamTrack;
        video?: MediaStreamTrack;
    };
    audioEnabled: boolean;
    videoEnabled: boolean;
    screenShareEnabled: boolean;
    currentDevices: {
        audio: MediaDeviceInfo;
        video: MediaDeviceInfo;
        speaker: MediaDeviceInfo;
    };
    permissions: {
        audio?: keyof typeof MediaPermission;
        video?: keyof typeof MediaPermission;
        screenshare?: keyof typeof MediaPermission;
    };
    audioUpdateInProgress: boolean;
    videoUpdateInProgress: boolean;
    screenShareUpdateInProgress: boolean;
    private constructor();
    private handlePermissionErrors;
    private onVisibilityChange;
    private conditionallyRestartAudio;
    private conditionallyRestartVideo;
    private shouldReacquireTrack;
    private onAudioUnmute;
    private onVideoUnmute;
    private removeMediaStreamTrackListeners;
    private addMediaStreamTrackListeners;
    private notifyIfTrackSilent;
    setupAudioStream(deviceId?: string, forceStopTrack?: boolean): Promise<void>;
    private getPreferredDeviceId;
    setupVideoStream(deviceId?: string, forceStopTrack?: boolean): Promise<void>;
    setupScreenShareStreams(): Promise<void>;
    setupSpeaker(deviceId?: string): Promise<void>;
    getOperationalWebcamDeviceId(): Promise<{
        isOperational: boolean;
        deviceId: string;
    }>;
    getOperationalMicDeviceId(): Promise<{
        isOperational: boolean;
        deviceId: string;
    }>;
    setupStreams({ audio, video }: {
        audio: boolean;
        video: boolean;
    }): Promise<void>;
    private stopAudioTrack;
    private stopVideoTrack;
    private stopScreenShareTracks;
    removeAudioTrack(): void;
    removeVideoTrack(): void;
    removeScreenShareTracks(tracks?: {
        audio?: boolean;
        video?: boolean;
    }): void;
    removeAllTracks(): void;
    setAudioTrack(audioTrack: MediaStreamTrack): void;
    setVideoTrack(videoTrack: MediaStreamTrack): void;
    private setScreenShareTracks;
    private onScreenShareEnded;
    disableAudio(): void;
    enableAudio(): Promise<void>;
    toggleAudio(): Promise<void>;
    toggleVideo(): Promise<void>;
    toggleScreenShare(): Promise<void>;
    getAllDevices(): MediaDeviceInfo[];
    getDeviceById(deviceId: string, kind: 'audioinput' | 'audiooutput' | 'videoinput'): MediaDeviceInfo;
    getAudioDevices(): MediaDeviceInfo[];
    getVideoDevices(): MediaDeviceInfo[];
    getSpeakerDevices(): MediaDeviceInfo[];
    onDeviceChange(changedDevices: {
        added: MediaDeviceInfo[];
        removed: MediaDeviceInfo[];
    }, forceDeviceChange: boolean): Promise<void>;
    updateDevices(): Promise<void>;
    static init(presetMediaConstraints: PresetMediaConstraints): Promise<LocalMediaHandlerDeprecated>;
    emit(event: keyof typeof MediaEvents, ...args: any[]): boolean;
    on(event: keyof typeof MediaEvents, listener: (...args: any[]) => void): this;
    removeDocumentEventListeners(): Promise<void>;
    addAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    removeAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    addVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    removeVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    enableVideo(): Promise<void>;
    disableVideo(): Promise<void>;
    enableScreenShare(): Promise<void>;
    disableScreenShare(): Promise<void>;
    getCurrentDevices(): {
        audio: MediaDeviceInfo;
        video: MediaDeviceInfo;
        speaker: MediaDeviceInfo;
    };
    destruct(): void;
}
