import Bowser from 'bowser';
import { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN, } from './browsers';
const bowserNameToJitsiName = {
    Chrome: CHROME,
    Chromium: CHROME,
    Opera: OPERA,
    Firefox: FIREFOX,
    'Internet Explorer': INTERNET_EXPLORER,
    Safari: SAFARI,
};
function _detectChromiumBased() {
    const { userAgent } = navigator;
    const browserInfo = {
        name: UNKNOWN,
        version: undefined,
    };
    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {
        if (userAgent.match(/Edg(A?)/)) {
            const version = userAgent.match(/Chrome\/([\d.]+)/)[1];
            if (Number.parseInt(version, 10) > 72) {
                browserInfo.name = CHROME;
                browserInfo.version = version;
            }
        }
        else {
            browserInfo.name = CHROME;
            browserInfo.version = userAgent.match(/Chrome\/([\d.]+)/)[1];
        }
    }
    return browserInfo;
}
function _detectElectron() {
    const { userAgent } = navigator;
    if (userAgent.match(/Electron/)) {
        const version = userAgent.match(/Electron\/([\d.]+)/)[1];
        return {
            name: ELECTRON,
            version,
        };
    }
    return null;
}
function _detectNWJS() {
    const { userAgent } = navigator;
    if (userAgent.match(/JitsiMeetNW/)) {
        const version = userAgent.match(/JitsiMeetNW\/([\d.]+)/)[1];
        return {
            name: NWJS,
            version,
        };
    }
}
function _detectReactNative() {
    const match = navigator.userAgent.match(/\b(react[ \t_-]*native)(?:\/(\S+))?/i);
    let version;
    if (match || navigator.product === 'ReactNative') {
        let name;
        if (match && match.length > 2) {
            name = match[1];
            version = match[2];
        }
        name || (name = 'react-native');
        version || (version = 'unknown');
        return {
            name: REACT_NATIVE,
            version,
        };
    }
}
function _detect(bowser) {
    let browserInfo;
    const detectors = [
        _detectReactNative,
        _detectElectron,
        _detectNWJS,
    ];
    for (let i = 0; i < detectors.length; i += 1) {
        browserInfo = detectors[i]();
        if (browserInfo) {
            return browserInfo;
        }
    }
    const name = bowser.getBrowserName();
    if (name in bowserNameToJitsiName) {
        return {
            name: bowserNameToJitsiName[name],
            version: bowser.getBrowserVersion(),
        };
    }
    browserInfo = _detectChromiumBased();
    if (browserInfo) {
        return browserInfo;
    }
    return {
        name: UNKNOWN,
        version: undefined,
    };
}
export default class BrowserDetection {
    _bowser;
    _name;
    _version;
    init(browserInfo) {
        let name;
        let version;
        this._bowser = Bowser.getParser(navigator.userAgent);
        if (typeof browserInfo === 'undefined') {
            const detectedBrowserInfo = _detect(this._bowser);
            name = detectedBrowserInfo.name;
            version = detectedBrowserInfo.version;
        }
        else if (browserInfo.name in bowserNameToJitsiName) {
            name = bowserNameToJitsiName[browserInfo.name];
            version = browserInfo.version;
        }
        else {
            name = UNKNOWN;
            version = undefined;
        }
        this._name = name;
        this._version = version;
    }
    getName() {
        return this._name;
    }
    isChrome() {
        return this._name === CHROME;
    }
    isOpera() {
        return this._name === OPERA;
    }
    isFirefox() {
        return this._name === FIREFOX;
    }
    isIExplorer() {
        return this._name === INTERNET_EXPLORER;
    }
    isSafari() {
        return this._name === SAFARI;
    }
    isNWJS() {
        return this._name === NWJS;
    }
    isElectron() {
        return this._name === ELECTRON;
    }
    isReactNative() {
        return this._name === REACT_NATIVE || navigator.isReactNative === true;
    }
    getVersion() {
        return this._version;
    }
    isMobile() {
        return this._bowser.getPlatformType() === 'mobile';
    }
    getDeviceInfo = () => ({
        isMobile: this.isMobile(),
        browserName: this._bowser.getBrowserName(),
        osName: this._bowser.getOSName(),
        browserVersion: this._bowser.getBrowserVersion(),
        osVersionName: this._bowser.getOSVersion(),
        engineName: this._bowser.getEngineName(),
    });
    _checkCondition(checkTree) {
        if (this._version) {
            return this._bowser.satisfies(checkTree);
        }
    }
    isVersionGreaterThan(version) {
        return this._checkCondition({ [this._name]: `>${version}` });
    }
    isVersionLessThan(version) {
        return this._checkCondition({ [this._name]: `<${version}` });
    }
    isVersionEqualTo(version) {
        return this._checkCondition({ [this._name]: `~${version}` });
    }
}
