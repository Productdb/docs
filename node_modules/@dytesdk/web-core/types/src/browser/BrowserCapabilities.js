import BrowserDetection from './BrowserDetection';
const MIN_REQUIRED_CHROME_VERSION = 72;
export default class BrowserCapabilities extends BrowserDetection {
    doesVideoMuteByStreamRemove() {
        return this.isChromiumBased() || this.isWebKitBased();
    }
    supportsP2P() {
        return !this.usesUnifiedPlan();
    }
    isChromiumBased() {
        return this.isChrome()
            || this.isElectron()
            || this.isNWJS()
            || this.isOpera();
    }
    isWebKitBased() {
        return this._bowser.isEngine('webkit')
            && typeof navigator.mediaDevices !== 'undefined'
            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'
            && typeof window.RTCRtpTransceiver !== 'undefined'
            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;
    }
    isSupported() {
        return (this.isChromiumBased()
            && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)
            || this.isFirefox()
            || this.isReactNative()
            || this.isWebKitBased();
    }
    isUserInteractionRequiredForUnmute() {
        return this.isFirefox() && this.isVersionLessThan('68');
    }
    supportsVideoMuteOnConnInterrupted() {
        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();
    }
    supportsBandwidthStatistics() {
        return !this.isFirefox() && !this.isWebKitBased();
    }
    supportsCodecPreferences() {
        return this.usesUnifiedPlan()
            && typeof window.RTCRtpTransceiver !== 'undefined'
            && Object.keys(window.RTCRtpTransceiver.prototype).indexOf('setCodecPreferences') > -1
            && Object.keys(RTCRtpSender.prototype).indexOf('getCapabilities') > -1
            && !this.isWebKitBased();
    }
    supportsDeviceChangeEvent() {
        return navigator.mediaDevices
            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'
            && typeof navigator.mediaDevices.addEventListener !== 'undefined';
    }
    supportsLocalCandidateRttStatistics() {
        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();
    }
    supportsPerformanceObserver() {
        return typeof window.PerformanceObserver !== 'undefined'
            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;
    }
    supportsReceiverStats() {
        return typeof window.RTCRtpReceiver !== 'undefined'
            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;
    }
    supportsRTTStatistics() {
        return !this.isFirefox();
    }
    usesPlanB() {
        return !this.usesUnifiedPlan();
    }
    usesSdpMungingForSimulcast() {
        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();
    }
    usesUnifiedPlan() {
        if (this.isFirefox() || this.isWebKitBased()) {
            return true;
        }
        return false;
    }
    usesNewGumFlow() {
        if (this.isChromiumBased() || this.isFirefox() || this.isWebKitBased()) {
            return true;
        }
        return false;
    }
    usesAdapter() {
        return this.usesNewGumFlow();
    }
    usesRidsForSimulcast() {
        return false;
    }
    supportsGetDisplayMedia() {
        return typeof navigator.getDisplayMedia !== 'undefined'
            || (typeof navigator.mediaDevices !== 'undefined'
                && typeof navigator.mediaDevices.getDisplayMedia
                    !== 'undefined');
    }
    supportsInsertableStreams() {
        if (!(typeof window.RTCRtpSender !== 'undefined'
            && (window.RTCRtpSender.prototype.createEncodedStreams
                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {
            return false;
        }
        const stream = new ReadableStream();
        try {
            window.postMessage(stream, '*', [stream]);
            return true;
        }
        catch {
            return false;
        }
    }
    supportsAudioRed() {
        return Boolean(window.RTCRtpSender
            && window.RTCRtpSender.getCapabilities
            && window.RTCRtpSender.getCapabilities('audio').codecs.some((codec) => codec.mimeType === 'audio/red')
            && window.RTCRtpReceiver
            && window.RTCRtpReceiver.getCapabilities
            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some((codec) => codec.mimeType === 'audio/red'));
    }
    supportsSdpSemantics() {
        return this.isChromiumBased();
    }
    _getChromiumBasedVersion() {
        if (this.isChromiumBased()) {
            if (this.isNWJS()) {
                return Number.parseInt(process.versions.chromium, 10);
            }
            const ua = navigator.userAgent;
            if (ua.match(/Chrome/)) {
                const version = Number.parseInt(ua.match(/Chrome\/([\d.]+)/)[1], 10);
                return version;
            }
        }
        return -1;
    }
    isIOSMobile() {
        return this.isMobile && this._bowser.getOSName() === 'iOS';
    }
}
export const browserSpecs = new BrowserCapabilities();
