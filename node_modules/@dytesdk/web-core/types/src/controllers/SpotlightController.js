var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteSpotlight, { TabChangeSource } from '../client/DyteSpotlight';
import MediasoupRoomNodeClient from '../roomNode/MediasoupRoomNodeClient';
import DyteLogger from '../client/internals/DyteLogger';
import { SessionEvents } from '../store/SessionEvents';
import { SessionStore } from '../store/SessionStore';
import DyteTelemetry from '../utils/opentelemetry';
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
export default class SpotlightController {
    spotlight;
    #self;
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    constructor(self) {
        this.spotlight = DyteSpotlight.init(self);
        this.#self = self;
        this.setupEvents();
    }
    conditionallySetActiveTab(dyteSpotlightAssertMessage) {
        if (dyteSpotlightAssertMessage?.currentTab
            && this.spotlight.selfActiveTab?.id !== dyteSpotlightAssertMessage.currentTab.id) {
            this.spotlight.setSelfActiveTab(dyteSpotlightAssertMessage.currentTab, TabChangeSource.Spotlight);
            this.spotlight.emit('activeTabUpdate', dyteSpotlightAssertMessage.currentTab);
        }
    }
    async setupEvents() {
        if (this.#self.permissions.canSpotlight) {
            DyteLogger.info('DyteSpotlightController::Asserting Spotlight');
            if (this.#roomNodeClient instanceof MediasoupRoomNodeClient
                && this.spotlight.selfActiveTab) {
                this.#roomNodeClient.assertSpotlightToRoom({
                    spotlightedUserId: this.#self.userId,
                    currentTab: this.spotlight.selfActiveTab,
                    peerId: undefined,
                });
            }
        }
        SessionStore.on(SessionEvents.PEER_JOINED, async (p) => {
            if (this.#self.permissions.canSpotlight) {
                if (this.#roomNodeClient instanceof MediasoupRoomNodeClient
                    && this.spotlight.selfActiveTab) {
                    this.#roomNodeClient.assertSpotlightToPeer({
                        spotlightedUserId: this.#self.userId,
                        currentTab: this.spotlight.selfActiveTab,
                        peerId: p.id,
                    });
                }
            }
        });
        SessionStore.on(SessionEvents.ROOM_MESSAGE, (payload) => {
            if (payload.roomMessageType !== 'spotlight')
                return;
            DyteLogger.info('Spotlight Assertion Received', {
                spotlight: {
                    spotlighter: { id: payload.spotlightedUserId },
                    currentTab: { id: payload.currentTab?.id, type: payload.currentTab?.type },
                },
            });
            this.conditionallySetActiveTab(payload);
        });
        SessionStore.on(SessionEvents.MESSAGE, (payload) => {
            if (payload.roomMessageType !== 'spotlight')
                return;
            DyteLogger.info('Spotlight Assertion Received', {
                spotlight: {
                    spotlighter: { id: payload.spotlightedUserId },
                    currentTab: { id: payload.currentTab?.id, type: payload.currentTab?.type },
                },
            });
            this.conditionallySetActiveTab(payload);
        });
    }
}
__decorate([
    DyteTelemetry.trace('SpotlightController.setupEvents'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SpotlightController.prototype, "setupEvents", null);
