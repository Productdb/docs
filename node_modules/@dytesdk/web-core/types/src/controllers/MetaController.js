var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import DyteMeta from '../client/DyteMeta';
import { SessionStore } from '../store/SessionStore';
import DyteTelemetry from '../utils/opentelemetry';
import { SessionEvents } from '../store/SessionEvents';
import constants from '../utils/constants';
export default class MetaController {
    meta;
    constructor(self, socketService, meetingTitle) {
        this.meta = new DyteMeta(self, constants.isV2AuthToken
            ? self.config.viewType
            : self.permissions.viewType, socketService, meetingTitle);
        this.setupEvents();
    }
    get roomName() {
        return this.meta.roomName;
    }
    setupEvents() {
        SessionStore.on(SessionEvents.ROOM_JOINED, (response) => {
            if (response.startedAt) {
                this.meta.meetingStartedTimestamp = new Date(response.startedAt);
            }
        });
        SessionStore.on(SessionEvents.ROOM_STATE, ({ createdAt }) => {
            const date = this.meta.meetingStartedTimestamp;
            if (createdAt && !date) {
                const time = new Date(createdAt * 1000);
                this.meta.meetingStartedTimestamp = time;
            }
        });
        SessionStore.on(SessionEvents.ROOM_NODE_CONNECTED, () => {
            this.meta.emit('connected');
        });
        SessionStore.on(SessionEvents.ROOM_NODE_DISCONNECTED, () => {
            this.meta.emit('disconnected');
        });
        SessionStore.on(SessionEvents.ICE_CONNECTED, ({ transport }) => {
            this.meta.emit('iceConnected', { transport });
        });
        SessionStore.on(SessionEvents.ICE_DISCONNECTED, ({ transport }) => {
            this.meta.emit('iceDisconnected', { transport });
        });
        SessionStore.on(SessionEvents.ICE_RECONNECTING, ({ transport }) => {
            this.meta.emit('iceReconnecting', { transport });
        });
        SessionStore.on(SessionEvents.ICE_FAILED, ({ transport }) => {
            this.meta.emit('iceFailed', { transport });
        });
        SessionStore.on(SessionEvents.PRODUCER_SCORE_UPDATE, ({ score }) => {
            if (score < 5) {
                this.meta.emit('poorConnection', { score });
            }
        });
        SessionStore.on(SessionEvents.SOCKET_SERVICE_CONNECTED, () => {
            this.meta.emit('socketConnected');
        });
        SessionStore.on(SessionEvents.SOCKET_SERVICE_DISCONNECTED, () => {
            this.meta.emit('socketDisconnected');
        });
        SessionStore.on(SessionEvents.SOCKET_SERVICE_RECONNECTING, () => {
            this.meta.emit('socketReconnecting');
        });
        SessionStore.on(SessionEvents.SOCKET_SERVICE_RECONNECTION_ATTEMPT, ({ attempt }) => {
            this.meta.emit('socketReconnectAttempt', { attempt });
        });
        SessionStore.on(SessionEvents.SOCKET_SERVICE_RECONNECT_FAILURE, ({ attempt }) => {
            this.meta.emit('socketReconnectFailure', { attempt });
        });
        SessionStore.on(SessionEvents.SOCKET_SERVICE_RECONNECTED, () => {
            this.meta.emit('socketReconnected');
        });
        SessionStore.on(SessionEvents.SOCKET_SERVICE_FAILED, () => {
            this.meta.emit('socketFailure');
        });
        SessionStore.on(SessionEvents.ROOM_NODE_CONNECTION_ERROR, (error) => {
            const { message } = error;
            if (message.match(/room '([a-z0-9-]+)' not found/i)) {
                this.meta.emit('connectionError', { reason: 'ROOM_NOT_FOUND' });
            }
        });
    }
}
__decorate([
    DyteTelemetry.trace('MetaController.setupEvents'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MetaController.prototype, "setupEvents", null);
