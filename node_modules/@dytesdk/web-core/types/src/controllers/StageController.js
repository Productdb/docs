var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
type StageType = any; type  = any; 
import DyteStage from '../client/DyteStage';
import { roomEvents } from '../socketService/socketEvents';
import { SessionEvents } from '../store/SessionEvents';
import { SessionStore } from '../store/SessionStore';
import DyteTelemetry from '../utils/opentelemetry';
export default class StageController {
    stage;
    #isStageHost;
    #self;
    #stageSocketHandler;
    #stageRequestCount = 0;
    constructor(stageSocketHandler, isStageHost, self) {
        this.stage = new DyteStage(isStageHost, self, stageSocketHandler);
        this.#stageSocketHandler = stageSocketHandler;
        this.#isStageHost = isStageHost;
        this.#self = self;
        this.setupEvents();
    }
    setupEvents() {
        this.#stageSocketHandler.on(roomEvents.grantStageAccess, () => {
            if (this.#isStageHost)
                return;
            this.stage.emit('stageRequestApproved');
            this.setStageStatus('ACCEPTED_TO_JOIN_STAGE');
        });
        this.#stageSocketHandler.on(roomEvents.denyStageAccess, () => {
            if (this.#isStageHost)
                return;
            this.stage.emit('stageRequestRejected');
            this.setStageStatus('OFF_STAGE');
        });
        this.#stageSocketHandler.on(roomEvents.getStagePeers, (socketMessage) => {
            if (this.stage.status === 'ON_STAGE'
                && !socketMessage.stagePeers.includes(this.#self.userId)) {
                SessionStore.emitAsync(SessionEvents.LEAVE_MEDIA_ROOM);
            }
        });
        this.#stageSocketHandler.on(roomEvents.getStageRequests, (socketMessage) => {
            if (!this.#isStageHost)
                return;
            const stageRequests = socketMessage?.stageRequests ?? [];
            if (this.#stageRequestCount < stageRequests.length && stageRequests.length > 0) {
                this.stage.emit('newStageRequest', { count: stageRequests.length });
            }
            this.#stageRequestCount = stageRequests.length;
            this.stage.emit('stageAccessRequestUpdate', stageRequests);
        });
        SessionStore.onAsync(SessionEvents.SOCKET_SERVICE_ROOM_JOINED, async (roomJoinResponse) => {
            switch (roomJoinResponse.peer?.stageType) {
                case StageType.OFF_STAGE: {
                    this.setStageStatus('OFF_STAGE');
                    break;
                }
                case StageType.ON_STAGE: {
                    if (this.#self.config.viewType === 'LIVESTREAM')
                        await SessionStore.emitAsync(SessionEvents.JOIN_MEDIA_ROOM);
                    this.setStageStatus('ON_STAGE');
                    break;
                }
                case StageType.APPROVED_STAGE: {
                    this.stage.emit('stageRequestApproved');
                    this.setStageStatus('ACCEPTED_TO_JOIN_STAGE');
                    break;
                }
                case StageType.REQUESTED_STAGE: {
                    this.setStageStatus('REQUESTED_TO_JOIN_STAGE');
                    break;
                }
                default: this.setStageStatus('OFF_STAGE');
            }
        });
    }
    setStageStatus(status) {
        if (this.stage.status === status)
            return;
        this.stage.status = status;
        this.stage.emit('stageStatusUpdate', status);
    }
}
__decorate([
    DyteTelemetry.trace('DyteStage.setupEvents'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], StageController.prototype, "setupEvents", null);
