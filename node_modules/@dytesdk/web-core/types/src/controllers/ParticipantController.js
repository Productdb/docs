var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
type callStats = any; 
import { globalFlagsmith } from '@dyteinternals/utils';
import DyteTelemetry from '../utils/opentelemetry';
import { SessionStore } from '../store/SessionStore';
import { SessionEvents } from '../store/SessionEvents';
import DyteParticipant from '../client/DyteParticipant';
import DyteParticipants from '../client/DyteParticipants';
import MediasoupRoomNodeClient from '../roomNode/MediasoupRoomNodeClient';
import HiveNodeClient from '../roomNode/HiveNodeClient';
import { WebinarStageStatus } from '../client/DyteSelf';
import { browserSpecs } from '../browser/BrowserCapabilities';
import DyteLogger from '../client/internals/DyteLogger';
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
import { FlagsmithFeatureFlags } from '../utils/flags';
export default class ParticipantController {
    participants;
    #self;
    #consumerPeerMap;
    #currentActiveGridParticipants = new Set();
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    get roomJoined() {
        return this.#roomNodeClient?.roomJoined === true;
    }
    constructor(self) {
        this.participants = new DyteParticipants(self);
        this.#consumerPeerMap = new Map();
        this.#self = self;
        this.setupEvents();
    }
    updatePageParticipants(peerIds) {
        const peerIdsSet = new Set(peerIds);
        const activePeers = new Map(this.participants.active);
        this.participants.active.forEach((_, participantId) => {
            this.participants.active.delete(participantId, !peerIdsSet.has(participantId));
        });
        peerIdsSet.forEach((peerId) => {
            if (!this.participants.joined.get(peerId)) {
                DyteLogger.warn('updatePageParticipants::participant_not_in_joined_list', {
                    dyteParticipant: { id: peerId },
                });
                return;
            }
            this.participants.active.add(this.participants.joined.get(peerId), !activePeers.get(peerId));
        });
        if (this.#roomNodeClient instanceof HiveNodeClient) {
            Array.from(activePeers.keys())
                .forEach((id) => {
                if (peerIdsSet.has(id))
                    return;
                const participant = this.participants.joined.get(id);
                if (!participant) {
                    return;
                }
                const producerInfo = {
                    producers: participant.producers,
                    peerId: participant.id,
                };
                this.#roomNodeClient
                    .deactivatePeers(producerInfo);
            });
            const producers = [];
            this.participants.active.forEach((p) => {
                const producerInfo = {
                    peerId: p.id,
                    producers: p.producers,
                };
                producers.push(producerInfo);
            });
            this.#roomNodeClient.activatePeers(producers);
        }
    }
    updatePinnedParticipants() {
        this.participants.pinned.forEach((p) => {
            p.setIsPinned(false);
            this.participants.pinned.delete(p.id);
        });
    }
    refreshGridParticipants(force = false) {
        const joinedPeers = [...this.participants.joined.keys()];
        const selectedPeers = this.participants.selectedPeers.peers;
        if (this.participants.viewMode !== 'ACTIVE_GRID') {
            DyteLogger.warn('ParticipantController::refreshGridParticipants::not_refreshing_grid_in_not_active_grid_mode');
            return;
        }
        const maxPeerOnScreen = this.participants.maxActiveParticipantsCount - 1;
        const finalPeerListSet = new Set(selectedPeers
            .filter((peerId) => peerId !== this.#self.id));
        let finalPeerList = [...finalPeerListSet];
        const peersToAdd = maxPeerOnScreen - finalPeerListSet.size;
        if (peersToAdd >= 0) {
            const peersToAddFromJoined = joinedPeers.filter((id) => !finalPeerListSet.has(id) && id !== this.#self.id).slice(0, peersToAdd);
            finalPeerList = [...finalPeerListSet].concat(peersToAddFromJoined);
        }
        else {
            finalPeerList = finalPeerList.slice(0, maxPeerOnScreen);
        }
        this.updateActiveParticipantsHiveNode(finalPeerList, force);
    }
    updateActiveParticipantsHiveNode(peerIds, force = false) {
        if (!this.roomJoined) {
            DyteLogger.warn('Skipped::ParticipantController::updateActiveParticipants', {
                roomJoined: this.roomJoined,
            });
            return;
        }
        const activePeerIds = Array.from(this.participants.active.keys());
        const activePeers = new Map(this.participants.active);
        const peerIdMap = {};
        peerIds.forEach((peerId) => { peerIdMap[peerId] = true; });
        const replaceableIndices = [];
        activePeerIds.forEach((activePeerId, index) => {
            if (!peerIdMap[activePeerId] || !this.participants.joined.get(activePeerId)) {
                replaceableIndices.push(index);
            }
        });
        peerIds.forEach((peerId) => {
            if (!activePeers.get(peerId)) {
                if (activePeerIds.length < peerIds.length) {
                    activePeerIds.push(peerId);
                }
                else {
                    activePeerIds[replaceableIndices.shift()] = peerId;
                }
            }
        });
        activePeerIds.forEach((peerId, index) => {
            if (!peerIdMap[peerId]) {
                activePeerIds.splice(index, 1);
            }
        });
        Array.from(this.participants.active.keys()).forEach((peerId) => {
            this.participants.active.delete(peerId, !peerIdMap[peerId]);
        });
        activePeerIds.forEach((peerId) => {
            if (!this.participants.joined.get(peerId)) {
                DyteLogger.warn('updateActiveParticipants::participant_not_in_joined_list', {
                    dyteParticipant: { id: peerId },
                });
                return;
            }
            this.participants.active.add(this.participants.joined.get(peerId), !activePeers.get(peerId));
        });
        this.updateWebinarStatusForJoinedParticipants(peerIds);
        this.participants.active.emit('participantsUpdate');
        DyteLogger.info('ParticipantController::updateActiveParticipants::updating_current_selected_peers', { debuggingHint: force ? 'Forcefully updating currentActiveGridParticipants set' : null });
        if (force) {
            this.#currentActiveGridParticipants = new Set();
        }
        const peerIdsSet = new Set(peerIds);
        const peersToDeactive = [];
        const peersToActivate = [];
        this.#currentActiveGridParticipants.forEach((id) => {
            if (!peerIdsSet.has(id)) {
                peersToDeactive.push(id);
            }
        });
        peerIdsSet.forEach((id) => {
            if (!this.#currentActiveGridParticipants.has(id)) {
                peersToActivate.push(id);
            }
        });
        this.#currentActiveGridParticipants = peerIdsSet;
        if (peersToActivate.length === 0 && peersToDeactive.length === 0) {
            DyteLogger.info('ParticipantController::updateActiveParticipants::current_selected_peers_is_same');
            return;
        }
        if (this.#roomNodeClient instanceof HiveNodeClient) {
            const deactivatePeersPromiseList = [];
            peersToDeactive.forEach((id) => {
                const participant = this.participants.joined.get(id);
                if (!participant) {
                    return;
                }
                const producerInfo = {
                    producers: participant.producers,
                    peerId: participant.id,
                };
                deactivatePeersPromiseList.push(this.#roomNodeClient
                    .deactivatePeers(producerInfo));
            });
            Promise.all(deactivatePeersPromiseList)
                .then(() => {
                const producers = [];
                peersToActivate.forEach((id) => {
                    const peer = this.participants.active.get(id);
                    if (!peer) {
                        DyteLogger.warn('peer is not in active map which is going to activate, should not happen', {
                            dyteParticipant: { id },
                        });
                        return;
                    }
                    const producerInfo = {
                        peerId: peer.id,
                        producers: peer.producers,
                    };
                    producers.push(producerInfo);
                });
                this.#roomNodeClient.activatePeers(producers);
            })
                .catch((e) => {
                DyteLogger.info('Error on deactivating peers', e);
            });
        }
    }
    updateActiveParticipants(peerIds) {
        if (!this.roomJoined) {
            DyteLogger.warn('Skipped::ParticipantController::updateActiveParticipants', {
                roomJoined: this.roomJoined,
            });
            return;
        }
        const activePeerIds = Array.from(this.participants.active.keys());
        const activePeers = new Map(this.participants.active);
        const peerIdMap = {};
        peerIds.forEach((peerId) => { peerIdMap[peerId] = true; });
        const replaceableIndices = [];
        activePeerIds.forEach((activePeerId, index) => {
            if (!peerIdMap[activePeerId] || !this.participants.joined.get(activePeerId)) {
                replaceableIndices.push(index);
            }
        });
        peerIds.forEach((peerId) => {
            if (!activePeers.get(peerId)) {
                if (activePeerIds.length < peerIds.length) {
                    activePeerIds.push(peerId);
                }
                else {
                    activePeerIds[replaceableIndices.shift()] = peerId;
                }
            }
        });
        activePeerIds.forEach((peerId, index) => {
            if (!peerIdMap[peerId]) {
                activePeerIds.splice(index, 1);
            }
        });
        Array.from(this.participants.active.keys()).forEach((peerId) => {
            this.participants.active.delete(peerId, !peerIdMap[peerId]);
        });
        activePeerIds.forEach((peerId) => {
            if (!this.participants.joined.get(peerId)) {
                DyteLogger.warn('updateActiveParticipants::participant_not_in_joined_list', {
                    dyteParticipant: { id: peerId },
                });
                return;
            }
            this.participants.active.add(this.participants.joined.get(peerId), !activePeers.get(peerId));
        });
        this.updateWebinarStatusForJoinedParticipants(peerIds);
        this.participants.active.emit('participantsUpdate');
    }
    updateActiveParticipantsWithPriorities(entries, refresh = false) {
        if (!this.roomJoined) {
            DyteLogger.warn('Skipped::ParticipantController::updateActiveParticipantsWithPriorities', {
                roomJoined: this.roomJoined,
            });
            return;
        }
        entries.forEach((entry) => {
            if (this.participants.joined.get(entry.peerId)) {
                this.participants.selectedPeers.add(entry.peerId, entry.priority);
            }
        });
        if (refresh) {
            this.refreshGridParticipants();
        }
    }
    setupEvents() {
        SessionStore.on(SessionEvents.PEER_JOINED, async (p) => {
            const participant = new DyteParticipant(p, this.#self);
            if (this.#self.id !== participant.id && !p.flags?.recorder
                && !participant.flags?.hidden_participant
                && !participant.flags?.hiddenParticipant) {
                this.participants.joined.add(participant);
                this.participants.waitlisted.delete(participant.id);
                if (this.participants.currentPage === this.participants.pageCount) {
                    if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
                        SessionStore.emit(SessionEvents.GET_PAGE, (await this.#roomNodeClient.getPage(this.participants.currentPage))
                            .payload);
                    }
                }
            }
        });
        SessionStore.on(SessionEvents.WAITLIST_PEER_ADDED, ({ id, name }) => {
            this.participants.waitlisted.add(new DyteParticipant({
                id,
                displayName: name,
                audioMuted: true,
                videoEnabled: false,
                audioTrack: undefined,
                videoTrack: undefined,
                userId: undefined,
                flags: {},
                isHost: false,
            }, this.#self));
        });
        SessionStore.on(SessionEvents.WAITLIST_PEER_REMOVED, ({ id }) => {
            this.participants.waitlisted.delete(id);
        });
        SessionStore.on(SessionEvents.ROOM_JOINED, (payload) => {
            if (this.#roomNodeClient instanceof HiveNodeClient) {
                this.participants.joined.clear();
            }
            payload.peers.forEach((participant) => {
                if (participant.flags?.recorder
                    || participant.flags?.hidden_participant
                    || participant.flags?.hiddenParticipant) {
                    return;
                }
                const p = new DyteParticipant(participant, this.#self);
                if (p.id === payload.pinnedPeerId) {
                    p.setIsPinned(true, false);
                    this.participants.pinned.add(p);
                }
                this.participants.joined.add(p);
            });
            if (payload.requestToJoinPeersList) {
                payload.requestToJoinPeersList.forEach(({ id }) => {
                    this.participants.joined.get(id)
                        ?.setWebinarStageStatus(WebinarStageStatus.REQUESTED_TO_JOIN_STAGE);
                });
            }
            if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
                this.#roomNodeClient.getPage(this.participants.currentPage);
            }
        });
        SessionStore.on(SessionEvents.PEER_CLOSED, async ({ id }) => {
            this.participants.joined.delete(id, true, true);
            this.participants.pinned.delete(id, true, true);
            if (this.#roomNodeClient instanceof HiveNodeClient) {
                this.participants.selectedPeers.delete(id);
                if (this.participants.active.get(id) && this.participants.currentPage === 0) {
                    this.refreshGridParticipants();
                    return;
                }
            }
            const { currentPage } = this.participants;
            const maxVideoConfig = this.#self.config.maxVideoStreams;
            const maxPreferredStreams = browserSpecs.isMobile()
                ? maxVideoConfig.mobile
                : maxVideoConfig.desktop;
            const peersNeededToSustainCurrentPage = maxPreferredStreams * (currentPage - 1);
            const isActive = this.participants.active.get(id);
            if (peersNeededToSustainCurrentPage === 0) {
                this.participants.setViewMode('ACTIVE_GRID');
            }
            else if (this.participants.joined.size <= peersNeededToSustainCurrentPage) {
                if (currentPage === 2) {
                    this.participants.setViewMode('ACTIVE_GRID');
                }
                else {
                    this.participants.setPage(currentPage - 1);
                }
            }
            else if (isActive) {
                let peerIds = [];
                if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
                    ({ peerIds } = (await this.#roomNodeClient.getPage(currentPage)).payload);
                }
                else {
                    peerIds = this.participants.getPeerIdsForCurrentPage();
                }
                SessionStore.emit(SessionEvents.GET_PAGE, { peerIds });
            }
        });
        SessionStore.on(SessionEvents.ROOM_NODE_DISCONNECTED, () => {
            Array.from(this.participants.joined.keys())
                .forEach((participantId) => {
                this.participants.joined.delete(participantId);
            });
            Array.from(this.participants.active.keys())
                .forEach((participantId) => {
                this.participants.active.delete(participantId);
            });
            Array.from(this.participants.pinned.keys())
                .forEach((participantId) => {
                this.participants.pinned.delete(participantId);
            });
            this.participants.currentPage = 0;
            this.participants.viewMode = 'ACTIVE_GRID';
            this.participants.emit('viewModeChanged', {
                viewMode: 'ACTIVE_GRID',
                currentPage: this.participants.currentPage,
                pageCount: this.participants.pageCount,
            });
        });
        SessionStore.on(SessionEvents.PEER_MUTED, ({ peerId }) => {
            const participant = this.participants.joined.get(peerId);
            if (participant)
                participant.setAudioEnabled(false);
        });
        SessionStore.on(SessionEvents.PEER_UNMUTED, ({ peerId }) => {
            const participant = this.participants.joined.get(peerId);
            if (participant)
                participant.setAudioEnabled(true);
        });
        SessionStore.on(SessionEvents.CONSUMER_PAUSED, ({ id: consumerId }) => {
            this.processConsumerPaused(consumerId);
        });
        SessionStore.on(SessionEvents.CONSUMER_RESUMED, ({ id: consumerId }) => {
            this.processConsumerResumed(consumerId);
        });
        SessionStore.on(SessionEvents.NEW_CONSUMER, ({ id: consumerId }) => {
            this.processNewConsumer(consumerId);
        });
        SessionStore.on(SessionEvents.CONSUMER_CLOSED, ({ id: consumerId }) => {
            this.processConsumerClosed(consumerId);
        });
        SessionStore.on(SessionEvents.GET_PAGE, ({ peerIds }) => {
            if (this.participants.viewMode !== 'PAGINATED') {
                return;
            }
            this.updatePageParticipants(peerIds);
        });
        SessionStore.on(SessionEvents.SELECTED_PEERS, ({ peerIds, compulsoryPeers, }) => {
            if (this.participants.viewMode !== 'ACTIVE_GRID') {
                return;
            }
            if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
                this.updateActiveParticipants(peerIds);
                return;
            }
            const peersWithPriority = peerIds.map((id, index) => ({
                peerId: id, priority: index + 1,
            }));
            const compulsoryPeerWithPriority = compulsoryPeers?.map((id, idx) => ({
                peerId: id,
                priority: -(idx + 1),
            }));
            peersWithPriority.push(...(compulsoryPeerWithPriority ?? []));
            if (peersWithPriority.length > 0) {
                this.updateActiveParticipantsWithPriorities(peersWithPriority);
            }
        });
        SessionStore.on(SessionEvents.SELECTED_PEERS_DIFF, ({ entries }) => {
            if (this.participants.viewMode !== 'ACTIVE_GRID') {
                return;
            }
            this.updateActiveParticipantsWithPriorities(entries, true);
        });
        SessionStore.on(SessionEvents.REFRESH_GRID, (force = false) => {
            if (this.participants.viewMode !== 'ACTIVE_GRID') {
                return;
            }
            this.refreshGridParticipants(force);
        });
        SessionStore.on(SessionEvents.NEW_PRODUCER, ({ peerId, producer }) => {
            const participant = this.participants.joined.get(peerId);
            if (!participant) {
                DyteLogger.warn('ParticipantController::NEW_PRODUCER::participant not found', {
                    producer: {
                        id: producer?.producerId,
                        kind: producer?.kind,
                        status: 'UNKNOWN',
                        appData: { screenShare: producer?.screenShare },
                    },
                    dyteParticipant: { id: peerId },
                });
                return;
            }
            participant.producers.push(producer);
            DyteLogger.info('ParticipantController::NEW_PRODUCER::producer_added_to_participant', {
                producer: {
                    id: producer?.producerId,
                    peerId,
                    kind: producer?.kind,
                    status: 'UNKNOWN',
                    appData: { screenShare: producer?.screenShare },
                },
            });
            if (producer?.kind === 'audio' || producer?.screenShare || this.#currentActiveGridParticipants.has(peerId)) {
                this.#roomNodeClient.createConsumer({
                    producingPeerId: peerId,
                    producerId: producer.producerId,
                    screenShare: producer.screenShare,
                });
            }
            else {
                DyteLogger.info('ParticipantController::NEW_PRODUCER::not_consuming_producer', {
                    producer: {
                        id: producer?.producerId,
                        peerId,
                        kind: producer?.kind,
                        status: 'UNKNOWN',
                        appData: { screenShare: producer?.screenShare },
                    },
                });
            }
        });
        SessionStore.on(SessionEvents.PRODUCER_CLOSED, ({ peerId, producerId }) => {
            const participant = this.participants.joined.get(peerId);
            if (!participant) {
                DyteLogger.warn('ParticipantController::NEW_PRODUCER::participant not found', {
                    dyteParticipant: { id: peerId },
                });
                return;
            }
            participant.producers = participant.producers.filter((p) => p.producerId !== producerId);
        });
        SessionStore.on(SessionEvents.PRODUCER_TOGGLE, ({ peerId, producerId, paused, kind, }) => {
            const participant = this.participants.joined.get(peerId);
            if (participant && kind === 'audio') {
                participant.setAudioEnabled(!paused);
                const producer = participant.producers.find((state) => state.producerId === producerId);
                if (producer) {
                    producer.pause = paused;
                }
            }
        });
        SessionStore.on(SessionEvents.ACTIVE_SPEAKER, ({ peerId, volume }) => {
            this.participants.lastActiveSpeaker = peerId;
            this.participants.emit('activeSpeaker', { peerId, volume });
        });
        SessionStore.on(SessionEvents.ROOM_MESSAGE, async ({ payload, type, timestamp }) => {
            this.participants.emit('broadcastedMessage', { type, payload, timestamp });
        });
        SessionStore.on(SessionEvents.LOW_CONSUMER_SCORE, ({ peerId, score, kind }) => {
            const participant = this.participants.joined.get(peerId);
            if (!participant)
                return;
            participant.emit('poorConnection', { score, kind });
            this.participants.emit('poorConnection', { participantId: peerId, score, kind });
        });
        SessionStore.on(SessionEvents.CONSUMER_SCORE_UPDATE, ({ score, kind, appData, peerId, }) => {
            const isScreenshare = kind === 'video' && (appData?.screenShare ?? false);
            const participant = this.participants.joined.get(peerId);
            if (!participant)
                return;
            participant.emit('mediaScoreUpdate', {
                kind, isScreenshare, score, participantId: peerId,
            });
            this.participants.emit('mediaScoreUpdate', {
                kind, isScreenshare, score, participantId: peerId,
            });
        });
        SessionStore.on(SessionEvents.PEER_PINNED, ({ peerId }) => {
            if (!peerId) {
                if (this.#self.isPinned)
                    this.#self.setIsPinned(false);
                if (this.participants.pinned.size !== 0) {
                    this.updatePinnedParticipants();
                }
                return;
            }
            if (peerId === this.#self.id) {
                if (this.participants.pinned.size !== 0) {
                    this.updatePinnedParticipants();
                }
                this.#self.setIsPinned(true);
                return;
            }
            const peer = this.participants.joined.get(peerId);
            if (this.#self.isPinned)
                this.#self.setIsPinned(false);
            this.updatePinnedParticipants();
            peer.setIsPinned(true);
            this.participants.pinned.add(peer);
            if (this.#roomNodeClient instanceof HiveNodeClient) {
                this.#roomNodeClient.activatePeers([{
                        peerId: peer.id,
                        producers: peer.producers,
                    }]).catch((error) => {
                    DyteLogger.error('unable to create consumers', {
                        error,
                    });
                });
            }
        });
        SessionStore.on(SessionEvents.PEER_REQUESTED_TO_JOIN_STAGE, ({ id }) => {
            const participant = this.participants.joined.get(id);
            participant?.setWebinarStageStatus(WebinarStageStatus.REQUESTED_TO_JOIN_STAGE);
        });
        SessionStore.on(SessionEvents.PEER_REJECTED_TO_JOIN_STAGE, ({ id }) => {
            const participant = this.participants.joined.get(id);
            participant?.setWebinarStageStatus(WebinarStageStatus.OFF_STAGE);
        });
        SessionStore.on(SessionEvents.PEER_ADDED_TO_STAGE, ({ id }) => {
            const participant = this.participants.joined.get(id);
            participant?.setWebinarStageStatus(WebinarStageStatus.ACCEPTED_TO_JOIN_STAGE);
        });
        SessionStore.on(SessionEvents.PEER_REMOVED_FROM_STAGE, ({ id }) => {
            const participant = this.participants.joined.get(id);
            participant?.setWebinarStageStatus(WebinarStageStatus.OFF_STAGE);
        });
        SessionStore.on(SessionEvents.PEER_STARTED_PRESENTING, ({ id }) => {
            const participant = this.participants.joined.get(id);
            participant?.setWebinarStageStatus(WebinarStageStatus.ON_STAGE);
        });
        SessionStore.on(SessionEvents.PEER_STOPPED_PRESENTING, ({ id }) => {
            const participant = this.participants.joined.get(id);
            participant?.setWebinarStageStatus(WebinarStageStatus.OFF_STAGE);
        });
    }
    processMedia(consumerId) {
        const consumers = this.#roomNodeClient.getConsumers();
        const { peerId, kind, appData: untypedAppData, remotelyPaused, track, } = consumers.get(consumerId) ?? {};
        if (!peerId) {
            DyteLogger.warn('processMedia::Peer ID is undefined', {
                consumer: {
                    id: consumerId,
                    kind,
                    peerId,
                    appData: {
                        supportsRemoteControl: untypedAppData?.supportsRemoteControl,
                        screenShare: untypedAppData?.screenShare,
                    },
                    remotelyPaused,
                },
            });
            return {};
        }
        const appData = untypedAppData;
        DyteLogger.info('ParticipantController::processMedia', {
            consumer: {
                id: consumerId,
                peerId,
                kind,
                appData,
                remotelyPaused,
            },
        });
        this.#consumerPeerMap.set(consumerId, {
            type: kind,
            peerId,
            appData,
            remotelyPaused,
        });
        return {
            peerId,
            kind,
            appData,
            remotelyPaused,
            track,
        };
    }
    processConsumerClosed(consumerId) {
        const { peerId, type, appData, remotelyPaused, } = this.#consumerPeerMap.get(consumerId) || {};
        const participant = this.participants.joined.get(peerId);
        DyteLogger.info('ParticipantController::processConsumerClosed', {
            consumer: {
                id: consumerId,
                peerId,
                appData,
                kind: type,
                remotelyPaused,
            },
        });
        this.#consumerPeerMap.delete(consumerId);
        if (!participant)
            return;
        if (appData && appData.screenShare) {
            participant.setScreenShareEnabled(false);
            callStats.consumerSharedMediaState(consumerId, { screen: false });
            participant.screenShareTracks = {
                audio: undefined,
                video: undefined,
            };
            return;
        }
        if (type === 'audio') {
            participant.setAudioEnabled(false);
            callStats.consumerSharedMediaState(consumerId, { audio: false });
            participant.audioTrack = undefined;
        }
        else if (type === 'video') {
            participant.setVideoEnabled(false);
            callStats.consumerSharedMediaState(consumerId, { video: false });
            participant.videoTrack = undefined;
        }
    }
    processConsumerResumed(consumerId) {
        const { peerId, kind, appData, track, remotelyPaused, } = this.processMedia(consumerId);
        if (!peerId) {
            return;
        }
        DyteLogger.info('ParticipantController::processConsumerResumed', {
            consumer: {
                id: consumerId,
                peerId,
                kind,
                appData,
                remotelyPaused,
            },
        });
        const participant = this.participants.joined.get(peerId);
        if (!participant)
            return;
        if (appData.screenShare) {
            if (kind === 'video') {
                participant.screenShareTracks.video = track;
            }
            else if (kind === 'audio') {
                participant.screenShareTracks.audio = track;
            }
            participant.setScreenShareEnabled(true);
            callStats.consumerSharedMediaState(consumerId, { screen: true });
            return;
        }
        if (kind === 'video') {
            participant.videoTrack = track;
            participant.setVideoEnabled(true);
            callStats.consumerSharedMediaState(consumerId, { video: true });
        }
        else if (kind === 'audio') {
            participant.audioTrack = track;
            participant.setAudioEnabled(participant.audioEnabled);
            callStats.consumerSharedMediaState(consumerId, { audio: participant.audioEnabled });
        }
    }
    processConsumerPaused(consumerId) {
        DyteLogger.info(`ParticipantController::processConsumerPaused called for consumerId: ${consumerId}`);
        const { peerId, kind, track, appData, remotelyPaused, } = this.processMedia(consumerId);
        if (!peerId) {
            return;
        }
        DyteLogger.info('ParticipantController::processConsumerPaused', {
            consumer: {
                id: consumerId,
                peerId,
                kind,
                appData,
                remotelyPaused,
            },
        });
        const participant = this.participants.joined.get(peerId);
        if (!participant)
            return;
        if (kind === 'video') {
            participant.videoTrack = track;
            participant.setVideoEnabled(false);
            callStats.consumerSharedMediaState(consumerId, { video: false });
        }
        else if (kind === 'audio') {
            participant.audioTrack = track;
            participant.setAudioEnabled(participant.audioEnabled);
            callStats.consumerSharedMediaState(consumerId, { audio: participant.audioEnabled });
        }
    }
    processNewConsumer(consumerId) {
        const { peerId, kind, remotelyPaused, track, appData, } = this.processMedia(consumerId);
        if (!peerId) {
            return;
        }
        DyteLogger.info('ParticipantController::processNewConsumer', {
            consumer: {
                id: consumerId,
                peerId,
                kind,
                remotelyPaused,
                appData,
            },
        });
        const participant = this.participants.joined.get(peerId);
        if (!participant)
            return;
        if (appData.screenShare) {
            if (kind === 'video') {
                participant.screenShareTracks.video = track;
            }
            else if (kind === 'audio') {
                participant.screenShareTracks.audio = track;
            }
            if (!remotelyPaused
                || this.#self.permissions.isRecorder
                || globalFlagsmith.hasFeature(FlagsmithFeatureFlags.SCREEENSHARE_ERR_HACK)) {
                participant.setScreenShareEnabled(true);
            }
            if (appData.supportsRemoteControl) {
                participant.supportsRemoteControl = true;
            }
            return;
        }
        if (kind === 'video') {
            participant.videoTrack = track;
            if (!remotelyPaused) {
                participant.setVideoEnabled(true);
            }
            callStats.consumerSharedMediaState(consumerId, { video: !remotelyPaused });
        }
        else if (kind === 'audio' && this.#roomNodeClient instanceof HiveNodeClient) {
            participant.audioTrack = track;
            if (!remotelyPaused) {
                participant.setAudioEnabled(true);
            }
            callStats.consumerSharedMediaState(consumerId, { audio: !remotelyPaused });
        }
    }
    updateWebinarStatusForJoinedParticipants(peerIds) {
        peerIds.forEach((peerId) => {
            const peer = this.participants.joined.get(peerId);
            if (peer)
                peer.webinarStageStatus = WebinarStageStatus.ON_STAGE;
        });
    }
}
__decorate([
    DyteTelemetry.trace('ParticipantController.updatePageParticipants'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", void 0)
], ParticipantController.prototype, "updatePageParticipants", null);
__decorate([
    DyteTelemetry.trace('ParticipantController.setupEvents'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ParticipantController.prototype, "setupEvents", null);
__decorate([
    DyteTelemetry.trace('ParticipantController.processMedia'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], ParticipantController.prototype, "processMedia", null);
__decorate([
    DyteTelemetry.trace('ParticipantController.processConsumerClosed'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], ParticipantController.prototype, "processConsumerClosed", null);
__decorate([
    DyteTelemetry.trace('ParticipantController.processConsumerResumed'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], ParticipantController.prototype, "processConsumerResumed", null);
__decorate([
    DyteTelemetry.trace('ParticipantController.processConsumerPaused'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], ParticipantController.prototype, "processConsumerPaused", null);
__decorate([
    DyteTelemetry.trace('ParticipantController.processNewConsumer'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], ParticipantController.prototype, "processNewConsumer", null);
