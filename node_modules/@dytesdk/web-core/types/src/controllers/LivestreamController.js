var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { getAPIClient } from '../api';
import DyteLivestream from '../client/DyteLivestream';
import DyteLogger from '../client/internals/DyteLogger';
import { roomEvents } from '../socketService/socketEvents';
import { SessionEvents } from '../store/SessionEvents';
import { SessionStore } from '../store/SessionStore';
import DyteTelemetry from '../utils/opentelemetry';
export default class LivestreamController {
    livestream;
    #livestreamingPeerId;
    #livestreamSocketHandler;
    constructor(self, livestreamSocketHandler) {
        this.livestream = new DyteLivestream(self);
        this.#livestreamSocketHandler = livestreamSocketHandler;
        this.setupEvents();
    }
    async fetchInitialLivestreamingState() {
        const apiClient = getAPIClient();
        const { status, playbackUrl } = await apiClient.getActiveLivestream();
        if (status === 'LIVE') {
            this.livestream.playbackUrl = playbackUrl;
            this.livestream.setLivestreamState('LIVESTREAMING');
        }
    }
    setupEvents() {
        this.#livestreamSocketHandler.on(roomEvents.startedLivestream, (socketMessage) => {
            this.livestream.playbackUrl = socketMessage.playbackUrl;
            this.livestream.setLivestreamState('LIVESTREAMING');
        });
        this.#livestreamSocketHandler.on(roomEvents.stoppedLivestream, () => {
            this.livestream.setLivestreamState('IDLE');
            this.livestream.playbackUrl = undefined;
        });
        this.#livestreamSocketHandler.on(roomEvents.erroredLivestream, () => {
            this.livestream.setLivestreamState('IDLE');
            this.livestream.playbackUrl = undefined;
        });
        this.#livestreamSocketHandler.on(roomEvents.roomPeerCount, (socketMessage) => {
            this.livestream.viewerCount = socketMessage.count;
            this.livestream.emit('viewerCountUpdate', socketMessage.count);
        });
        SessionStore.on(SessionEvents.PEER_JOINED, async (p) => {
            if (p.flags?.hiddenParticipant === true && p.recorderType === 'LIVESTREAMER') {
                this.#livestreamingPeerId = p.id;
                this.livestream.setLivestreamState('LIVESTREAMING');
            }
        });
        SessionStore.on(SessionEvents.PEER_CLOSED, (p) => {
            if (p.id === this.#livestreamingPeerId) {
                this.#livestreamingPeerId = undefined;
                this.livestream.setLivestreamState('IDLE');
            }
        });
        SessionStore.onAsync(SessionEvents.ROOM_JOINED, async (payload) => {
            DyteLogger.debug('[ROOM_JOINED] resolved request to fetch livestream.');
            const livestreamPeers = payload.peers?.filter((p) => !!p.flags?.hiddenParticipant);
            if (!livestreamPeers.length) {
                this.#livestreamingPeerId = undefined;
                this.livestream.setLivestreamState('IDLE');
            }
            else {
                this.#livestreamingPeerId = (livestreamPeers && livestreamPeers[0]?.id);
                this.livestream.setLivestreamState('LIVESTREAMING');
            }
        });
        SessionStore.onAsync(SessionEvents.LEAVE_MEDIA_ROOM, async () => {
            if (this.livestream.playbackUrl)
                return;
            DyteLogger.info('Fetching livestreaming state on leave stage');
            try {
                await this.fetchInitialLivestreamingState();
            }
            catch (e) { }
        });
        SessionStore.onAsync(SessionEvents.SOCKET_SERVICE_ROOM_JOINED, async () => {
            try {
                await this.fetchInitialLivestreamingState();
            }
            catch (e) { }
        });
    }
}
__decorate([
    DyteTelemetry.trace('LivestreamController.setupEvents'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], LivestreamController.prototype, "setupEvents", null);
