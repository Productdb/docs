var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
type GetPollsResponse = any; 
import { globalFlagsmith as flagsmith } from '@dyteinternals/utils';
import DytePolls from '../client/DytePolls';
import { SessionEvents } from '../store/SessionEvents';
import { SessionStore } from '../store/SessionStore';
import DyteTelemetry from '../utils/opentelemetry';
import MediasoupRoomNodeClient from '../roomNode/MediasoupRoomNodeClient';
import { getRoomNodeClient } from '../roomNode/RoomNodeClientProvider';
import { FlagsmithFeatureFlags } from '../utils/flags';
import DyteLogger from '../client/internals/DyteLogger';
import { getOverride } from '../utils/constants';
import { pollEvents } from '../socketService/socketEvents';
export default class PollController {
    polls;
    #self;
    #pollSocketHandler;
    #socketServerName;
    get #roomNodeClient() {
        return getRoomNodeClient();
    }
    constructor(self, pollSocketHandler, pollSocketServerName) {
        this.polls = new DytePolls(self, pollSocketHandler, pollSocketServerName);
        this.#self = self;
        this.#pollSocketHandler = pollSocketHandler;
        this.#socketServerName = pollSocketServerName;
        this.setupEvents();
    }
    static async init(self, pollSocketHandler, capabilities) {
        const flagsmithPollSocketServer = flagsmith.getValue(FlagsmithFeatureFlags.POLL_SOCKET_SERVER);
        DyteLogger.debug(`Received flagsmith poll_socket_server: ${flagsmithPollSocketServer}`);
        const socketServerName = (getOverride('poll_socket_server') === 'socket-service'
            || flagsmithPollSocketServer === 'socket-service' || capabilities.includes('HIVE'))
            ? 'socket-service' : 'room-node';
        DyteLogger.info(`Using socket server ${socketServerName} for polls`);
        return new PollController(self, pollSocketHandler, socketServerName);
    }
    canViewPolls() {
        return this.#self.permissions.polls.canView;
    }
    setupEvents() {
        if (this.#socketServerName === 'socket-service') {
            if (!this.canViewPolls()) {
                return;
            }
            SessionStore.on(SessionEvents.SOCKET_SERVICE_ROOM_JOINED, () => {
                this.getPolls();
            });
            this.#pollSocketHandler.on(pollEvents.createPoll, (message) => {
                if (!message.poll)
                    return;
                this.updatePoll(PollController.formatSocketServicePoll(message.poll));
            });
            this.#pollSocketHandler.on(pollEvents.updatePoll, (message) => {
                if (!message.poll)
                    return;
                this.updatePoll(PollController.formatSocketServicePoll(message.poll));
            });
            this.#pollSocketHandler.on(pollEvents.votePoll, (message) => {
                if (!message.poll)
                    return;
                this.updatePoll(PollController.formatSocketServicePoll(message.poll));
            });
        }
        else {
            SessionStore.onAsync(SessionEvents.ROOM_JOINED, async () => {
                if (!this.canViewPolls()) {
                    return;
                }
                this.getPolls();
            });
        }
        SessionStore.on(SessionEvents.UPDATE_POLL, async ({ poll }) => {
            this.updatePoll(poll);
        });
    }
    updatePoll(poll) {
        if (!this.canViewPolls()) {
            return;
        }
        const index = this.polls.items.findIndex((p) => p.id === poll.id);
        if (index > -1) {
            const oldPoll = JSON.stringify(this.polls.items[index]);
            this.polls.items[index] = poll;
            if (oldPoll !== JSON.stringify(poll)) {
                this.polls.emit('pollsUpdate', { polls: this.polls.items, newPoll: false });
            }
            return;
        }
        this.polls.items = [...this.polls.items, poll];
        this.polls.emit('pollsUpdate', { polls: this.polls.items, newPoll: true });
    }
    async getPolls() {
        if (this.#socketServerName === 'socket-service') {
            const getPollsProto = await this.#pollSocketHandler.getPolls();
            if (!getPollsProto?.payload)
                return;
            const { polls } = GetPollsResponse.fromBinary(getPollsProto.payload);
            this.polls.items = polls.map((poll) => PollController.formatSocketServicePoll(poll));
            return;
        }
        if (this.#roomNodeClient instanceof MediasoupRoomNodeClient) {
            const { polls } = (await this.#roomNodeClient.getPolls()).payload;
            this.polls.items = Object.values(polls);
        }
    }
    static formatSocketServicePoll(poll) {
        const options = poll.options.map((o) => ({
            count: o.count,
            text: o.text,
            votes: o.votes.map((vote) => ({
                id: vote.userId,
                name: vote.name,
            })),
        }));
        return {
            anonymous: poll.anonymous,
            createdBy: poll.createdBy,
            createdByUserId: poll.createdByUserId,
            hideVotes: poll.hideVotes,
            id: poll.pollId,
            options,
            question: poll.question,
            voted: poll.votes,
        };
    }
}
__decorate([
    DyteTelemetry.trace('PollController.setupEvents'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], PollController.prototype, "setupEvents", null);
