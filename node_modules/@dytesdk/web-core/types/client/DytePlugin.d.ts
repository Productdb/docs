import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteSelf from './DyteSelf';
import { PluginSocketServerName } from '../controllers/PluginController';
import { WebsocketMessage } from '../sockets/SocketClient';
import PluginSocketHandler from '../socketService/PluginSocketHandler';
import DyteParticipants from './DyteParticipants';
import DyteChat from './DyteChat';
import { PluginEvents } from '../utils/DyteEvents';
export declare const localPluginEvents: {
    getPeer: number;
    getPeers: number;
    chatMessage: number;
    getRoomName: number;
    getDisplayTitle: number;
    getPluginInitiator: number;
    customPluginEventToParent: number;
    peerJoined: number;
    peerLeft: number;
    sendData: number;
};
export interface DytePluginResponse {
    baseURL: string;
    createdAt: string;
    description: string;
    id: string;
    name: string;
    organizationId: string;
    picture: string;
    private: boolean;
    published: boolean;
    staggered: boolean;
    tags: string[];
    type: string;
    updatedAt: string;
}
export interface PluginConfig {
    name: string;
    pluginId: string;
    version: string;
    description: string;
    author?: string;
    repository?: string;
    tags?: string[];
    picture?: string;
    url?: string;
    files: {
        include: string[];
        exclude?: string[];
    };
    views?: {
        [viewId: string]: {
            url: string;
            suggestedPosition: string;
        };
    };
    contentScript?: string;
    permissions?: {
        [key: string]: {
            default: boolean;
            description: string;
        };
    };
    config?: {
        [key: string]: string;
    };
}
export interface PluginIframeMessage {
    type: number;
    uuid: string;
    payload?: any;
}
interface SendDataOptions {
    eventName: string;
    data: any;
}
interface ReactNativeWebViewEvent {
    nativeEvent: {
        data: string;
    };
}
export interface ReactNativeWebView {
    props: {
        onMessage: (event: ReactNativeWebViewEvent) => void;
    };
    postMessage: (message: string) => void;
}
export default class DytePlugin extends DyteEventEmitter<PluginEvents> {
    #private;
    readonly baseURL: string;
    readonly createdAt: Date;
    readonly description: string;
    readonly id: string;
    readonly name: string;
    readonly organizationId: string;
    readonly picture: string;
    readonly private: boolean;
    readonly published: boolean;
    readonly staggered: boolean;
    readonly tags: string[];
    readonly type: string;
    readonly updatedAt: Date;
    config?: PluginConfig;
    active: boolean;
    iframes: Map<string, {
        iframe: HTMLIFrameElement | ReactNativeWebView;
        listener?: (message: MessageEvent) => void;
    }>;
    enabledBy: string;
    private get roomJoined();
    constructor({ baseURL, createdAt, description, id, name, organizationId, picture, private: isPrivate, published, staggered, tags, type, updatedAt, }: DytePluginResponse, pluginSocketHandler: PluginSocketHandler, socketServerName: PluginSocketServerName, self: DyteSelf, participants: DyteParticipants, chat: Readonly<DyteChat>);
    sendIframeEvent(message: PluginIframeMessage | WebsocketMessage): void;
    private handleIframeMessage;
    sendData(payload: SendDataOptions): void;
    removePluginView(viewId?: string): void;
    addPluginView(iframe: HTMLIFrameElement | ReactNativeWebView, viewId?: string): void;
    private setActive;
    activateForSelf(): Promise<void>;
    deactivateForSelf(): void;
    enable(): Promise<void>;
    disable(): void;
    activate(): Promise<void>;
    deactivate(): Promise<void>;
}
export {};
