import '../utils/polyfills';
import { DefaultOptions, Modules } from '../controllers/Controller';
import DyteMeta from './DyteMeta';
import DyteSelf from './DyteSelf';
import DyteParticipants from './DyteParticipants';
import DytePlugins from './DytePlugins';
import DyteChat from './DyteChat';
import DytePolls from './DytePolls';
import DyteRemote from './DyteRemote';
import DyteRecording from './DyteRecording';
import DyteSpotlight from './DyteSpotlight';
import { leaveRoomState } from '../controllers/SelfController';
import DyteConnectedMeetings from './DyteConnectedMeetings';
import DyteInternals from './DyteInternals';
import DyteLivestream from './DyteLivestream';
import DyteStage from './DyteStage';
import DyteTroubleshooter from './DyteTroubleshooter';
export interface DyteClientOptions {
    roomName?: string;
    authToken: string;
    apiBase?: string;
    defaults?: DefaultOptions;
    modules?: Modules;
    overrides?: {
        [key: string]: boolean | string;
    };
}
export default class DyteClient {
    #private;
    private constructor();
    static init(options: DyteClientOptions): Promise<DyteClient>;
    joinRoom(): Promise<void>;
    leaveRoom(state?: leaveRoomState): Promise<void>;
    get participants(): Readonly<DyteParticipants>;
    get self(): Readonly<DyteSelf>;
    get meta(): Readonly<DyteMeta>;
    get plugins(): Readonly<DytePlugins>;
    get chat(): Readonly<DyteChat>;
    get polls(): Readonly<DytePolls>;
    get remote(): Readonly<DyteRemote>;
    get connectedMeetings(): Readonly<DyteConnectedMeetings>;
    get recording(): Readonly<DyteRecording>;
    get spotlight(): Readonly<DyteSpotlight>;
    get livestream(): Readonly<DyteLivestream>;
    get stage(): Readonly<DyteStage>;
    get troubleshoot(): Readonly<DyteTroubleshooter>;
    get __internals__(): Readonly<DyteInternals>;
}
