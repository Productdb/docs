import DytePermissionsPresetV1 from './DytePermissionsPresetV1';
import DyteThemePresetV1 from './DyteThemePresetV1';
import type { DeviceConfig } from './DyteParticipant';
import DytePermissionsPreset from './DytePermissionsPreset';
import DyteThemePreset from './DyteThemePreset';
import { leaveRoomState } from '../controllers/SelfController';
import DyteSelfMedia from './DyteSelfMedia';
import { StageStatus } from './DyteStage';
export interface UserDetailsResponse {
    id: string;
    name: string;
    email: string;
    picture?: string;
    loggedIn?: boolean;
    scope?: string[];
    clientSpecificId?: string;
    customParticipantId?: string;
    organizationId?: string;
}
export declare enum WebinarStageStatus {
    OFF_STAGE = "OFF_STAGE",
    REQUESTED_TO_JOIN_STAGE = "REQUESTED_TO_JOIN_STAGE",
    ACCEPTED_TO_JOIN_STAGE = "ACCEPTED_TO_JOIN_STAGE",
    ON_STAGE = "ON_STAGE"
}
export default class DyteSelf extends DyteSelfMedia {
    #private;
    id: string;
    name: string;
    picture: string;
    clientSpecificId: any;
    waitlistStatus: 'accepted' | 'waiting' | 'rejected' | 'none';
    role: any;
    userId: string;
    organizationId: string;
    supportsRemoteControl: boolean;
    device: DeviceConfig;
    stageStatus: StageStatus;
    presetName: string;
    roomState: 'init' | 'joined' | 'waitlisted' | leaveRoomState;
    private constructor();
    static __init__(peerId: string, details: UserDetailsResponse, permissions: DytePermissionsPresetV1 | DytePermissionsPreset, theme: DyteThemePresetV1 | DyteThemePreset, presetName: string): Promise<DyteSelf>;
    private updatePermission;
    private setupEvents;
    get mediaPermissions(): {
        audio?: import("../media-new/interface/BaseMediaInterface").MediaPermission;
        video?: import("../media-new/interface/BaseMediaInterface").MediaPermission;
        screenshare?: import("../media-new/interface/BaseMediaInterface").MediaPermission;
    } | {
        audio?: "NOT_REQUESTED" | "ACCEPTED" | "DENIED" | "SYSTEM_DENIED" | "COULD_NOT_START" | "CANCELED";
        video?: "NOT_REQUESTED" | "ACCEPTED" | "DENIED" | "SYSTEM_DENIED" | "COULD_NOT_START" | "CANCELED";
        screenshare?: "NOT_REQUESTED" | "ACCEPTED" | "DENIED" | "SYSTEM_DENIED" | "COULD_NOT_START" | "CANCELED";
    };
    get permissions(): DytePermissionsPresetV1 | DytePermissionsPreset;
    get suggestedTheme(): DyteThemePresetV1 | DyteThemePreset;
    get config(): DyteThemePresetV1 | DyteThemePreset;
    get roomJoined(): boolean;
    setName(name: string): void;
    setupTracks(options?: {
        video?: boolean;
        audio?: boolean;
        forceReset?: boolean;
    }): Promise<void>;
    private resetSelf;
    destructMediaHandler(): Promise<void>;
    removeDocumentEventListeners(): Promise<void>;
    enableAudio(): Promise<void>;
    enableVideo(): Promise<void>;
    enableScreenShare(): Promise<void>;
    disableAudio(): Promise<void>;
    disableVideo(): Promise<void>;
    disableScreenShare(): Promise<void>;
    getAllDevices(): MediaDeviceInfo[] | Promise<MediaDeviceInfo[]>;
    setIsPinned(isPinned: boolean, emitEvent?: boolean): void;
    get isPinned(): boolean;
    get webinarStageStatus(): WebinarStageStatus;
    pin(): Promise<unknown>;
    unpin(): Promise<unknown>;
    setDevice(device: MediaDeviceInfo): Promise<void>;
    cleanUpTracks(): void;
    requestToJoinStage(): Promise<void>;
    withdrawRequestToJoinStage(): Promise<void>;
    leaveStage(): Promise<void>;
    joinStage(): Promise<void>;
    setWebinarStageStatus(webinarStageStatus: WebinarStageStatus): void;
    disablePreview(): Promise<this>;
}
