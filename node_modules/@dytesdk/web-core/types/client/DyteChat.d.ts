import DyteEventEmitter from '../utils/DyteEventEmitter';
import DyteSelf from './DyteSelf';
import { ChatSocketServerName } from '../controllers/ChatController';
import ChatSocketHandler, { SearchFilters } from '../socketService/ChatSocketHandler';
import { ChatEvents } from '../utils/DyteEvents';
import DyteParticipants from './DyteParticipants';
import ChatChannelSocketHandler, { ChatChannel, UpdateChannelRequestPayload } from '../socketService/ChatChannelSocketHandler';
import { ReactNativeFile } from '../api/client/BaseAPIClient';
export declare enum MessageType {
    text = "text",
    image = "image",
    file = "file",
    poll = "poll"
}
export declare const messageTypes: string[];
export interface BaseMessage<T extends MessageType> {
    type: T;
    userId: string;
    displayName: string;
    time: Date;
    timeMs?: number;
    id: string;
    isEdited?: boolean;
    read?: boolean;
    pluginId?: string;
    pinned?: boolean;
    targetUserIds?: string[];
    channelId?: string;
}
export interface TextMessage extends BaseMessage<MessageType.text> {
    message: string;
}
export interface ImageMessage extends BaseMessage<MessageType.image> {
    link: string;
}
export interface FileMessage extends BaseMessage<MessageType.file> {
    name: string;
    size: number;
    link: string;
}
export declare type Message = TextMessage | ImageMessage | FileMessage;
export interface TextMessagePayload {
    type: 'text';
    message: string;
    replyTo?: TextMessage;
}
export interface ImageMessagePayload {
    type: 'image';
    image: File;
}
export interface FileMessagePayload {
    type: 'file';
    file: File;
}
export declare type MessagePayload = TextMessagePayload | ImageMessagePayload | FileMessagePayload;
export interface ChatUpdateParams {
    action: 'add' | 'edit' | 'delete';
    message: Message | {
        id: string;
        channelId: string;
    };
    messages: Message[];
}
export default class DyteChat extends DyteEventEmitter<ChatEvents> {
    #private;
    messages: Message[];
    channels: ChatChannel[];
    private get roomJoined();
    constructor(chatSocketHandler: ChatSocketHandler, chatChannelSocketHandler: ChatChannelSocketHandler, socketServerName: ChatSocketServerName, self: DyteSelf, participants: DyteParticipants);
    private sendMessageInternal;
    private sendTextMessageInternal;
    private sendImageMessageInternal;
    private sendFileMessageInternal;
    sendTextMessage(message: string, peerIds?: string[]): Promise<void>;
    sendImageMessage(image: File | ReactNativeFile, peerIds?: string[]): Promise<void>;
    sendFileMessage(file: File | ReactNativeFile, peerIds?: string[]): Promise<void>;
    sendMessage(message: MessagePayload, participantIds?: string[]): Promise<void>;
    editTextMessage(messageId: string, message: string, channelId?: string): Promise<void>;
    editImageMessage(messageId: string, image: File | ReactNativeFile, channelId?: string): Promise<void>;
    editFileMessage(messageId: string, file: File | ReactNativeFile, channelId?: string): Promise<void>;
    editMessage(messageId: string, message: MessagePayload, channelId?: string): Promise<void>;
    deleteMessage(messageId: string, channelId?: string): Promise<void>;
    getMessagesByUser(userId: string): Message[];
    getMessagesByType(type: keyof typeof MessageType): Message[];
    pin(id: string): Promise<void>;
    unpin(id: string): Promise<void>;
    getMessages(timeStamp: number, size: number, reversed: boolean, offset?: number, channelId?: string): Promise<{
        messages: Message[];
        next: boolean;
    }>;
    createChannel(channelName: string, memberUserIds: string[], options?: {
        displayPictureUrl?: string;
        visibility?: string;
        isDirectMessage?: boolean;
    }): Promise<ChatChannel>;
    updateChannel(channelId: string, payload: UpdateChannelRequestPayload): Promise<ChatChannel[]>;
    sendMessageToChannel(message: MessagePayload, channelId: string, options?: {
        replyTo?: Message;
    }): Promise<void>;
    getChannelMembers(channelId: string): Promise<import("../socketService/ChatChannelSocketHandler").ChannelMember[]>;
    searchMessages(query: string, filters?: SearchFilters): Promise<import("../socketService/ChatSocketHandler").ChatMessage[]>;
    get pinned(): Message[];
}
