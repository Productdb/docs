import DyteEventEmitter from '../utils/DyteEventEmitter';
export declare enum RemoteRequestType {
    REQUEST = "REQUEST",
    ACCEPT = "ACCEPT",
    REJECT = "REJECT",
    END = "END",
    EVENT = "EVENT"
}
export declare enum RemoteRequestState {
    PENDING = "PENDING",
    ACCEPTED = "ACCEPTED",
    REJECTED = "REJECTED",
    ENDED = "ENDED"
}
export interface RemoteRequest {
    requestId: string;
    hostPeerId: string;
    remotePeerId: string;
    state: RemoteRequestState;
}
export interface RemoteUpdatePayload {
    request: {
        id: string;
        hostPeerId: string;
        remotePeerId: string;
    };
    meta?: {
        [key: string]: any;
    };
}
export declare enum RemoteEventType {
    KEYBOARD = "KEYBOARD",
    MOUSE = "MOUSE"
}
export interface RemoteKeyboardEvent {
    type: string;
    key: string;
}
export interface RemoteMouseEvent {
    type: string;
    position: {
        x: number;
        y: number;
    };
    boundingRect: {
        width: number;
        height: number;
    };
}
export declare enum RemoteMouseEventTypes {
    LEFT_CLICK = "click",
    RIGHT_CLICK = "contextmenu",
    MOVE = "mousemove"
}
export interface RemoteEventData {
    eventType: RemoteEventType;
    keyboardEvent?: RemoteKeyboardEvent;
    mouseEvent?: RemoteMouseEvent;
}
export interface RemoteRequestPayload {
    remoteRequestType: RemoteRequestType;
    remoteRequestId: string;
    remotePeerId: string;
    hostPeerId: string;
    peerId: string;
    remoteEvent?: RemoteEventData;
}
export declare enum RemoteUpdateType {
    REQUEST_RECEIVED = "REQUEST_RECEIVED",
    REQUEST_SENT = "REQUEST_SENT",
    INCOMING_REQUEST_ACCEPTED = "INCOMING_REQUEST_ACCEPTED",
    OUTGOING_REQUEST_ACCEPTED = "OUTGOING_REQUEST_ACCEPTED",
    INCOMING_REQUEST_ENDED = "INCOMING_REQUEST_ENDED",
    OUTGOING_REQUEST_ENDED = "OUTGOING_REQUEST_ENDED"
}
export interface RemoteUpdateParams {
    type: RemoteUpdateType;
    payload: RemoteRequestPayload;
}
export default class DyteRemoteRequest extends DyteEventEmitter<string | symbol> {
    id: string;
    remotePeerId: string;
    hostPeerId: string;
    state: RemoteRequestState;
    constructor(request: RemoteRequest);
}
