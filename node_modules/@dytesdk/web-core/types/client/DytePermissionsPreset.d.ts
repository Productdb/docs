import { MediaProductionPermissionType, WaitingRoomTypes } from '@dyteinternals/utils';
import { PresetV2CamelCased } from './DyteThemePreset';
declare type PresetPermissions = PresetV2CamelCased['permissions'];
export declare const DEFAULT_PERMISSIONS_CAMEL_CASED: {
    acceptWaitingRequests: boolean;
    canAcceptProductionRequests: boolean;
    canEditDisplayName: boolean;
    canRecord: boolean;
    canLivestream: boolean;
    canSpotlight?: boolean;
    disableParticipantAudio: boolean;
    disableParticipantScreensharing: boolean;
    disableParticipantVideo: boolean;
    kickParticipant: boolean;
    pinParticipant: boolean;
    plugins: {
        canClose: boolean;
        canStart: boolean;
        canEditConfig?: boolean;
        config: any;
    };
    waitingRoomType: WaitingRoomTypes;
    polls: {
        canCreate: boolean;
        canVote: boolean;
        canView: boolean;
    };
    media: {
        video: {
            canProduce: MediaProductionPermissionType;
        };
        audio: {
            canProduce: MediaProductionPermissionType;
        };
        screenshare: {
            canProduce: MediaProductionPermissionType;
        };
    };
    chat: {
        public: {
            canSend: boolean;
            text: boolean;
            files: boolean;
        };
        private?: {
            canSend: boolean;
            canReceive: boolean;
            text: boolean;
            files: boolean;
        };
    };
    isRecorder?: boolean;
    recorderType: import("@dyteinternals/utils").RecorderType;
    hiddenParticipant: boolean;
    showParticipantList: boolean;
    canChangeParticipantPermissions: boolean;
    connectedMeetings: {
        canAlterConnectedMeetings: boolean;
        canSwitchConnectedMeetings: boolean;
        canSwitchToParentMeeting: boolean;
    };
};
export default class DytePermissionsPreset {
    #private;
    private constructor();
    static fromResponse(response: PresetPermissions): DytePermissionsPreset;
    static default(): DytePermissionsPreset;
    get acceptWaitingRequests(): Readonly<boolean>;
    get requestProduceVideo(): Readonly<boolean>;
    get requestProduceAudio(): Readonly<boolean>;
    get requestProduceScreenshare(): Readonly<boolean>;
    get canAllowParticipantAudio(): Readonly<boolean>;
    get canAllowParticipantScreensharing(): Readonly<boolean>;
    get canAllowParticipantVideo(): Readonly<boolean>;
    get canDisableParticipantAudio(): Readonly<boolean>;
    get canDisableParticipantVideo(): Readonly<boolean>;
    get kickParticipant(): Readonly<boolean>;
    get pinParticipant(): Readonly<boolean>;
    get canRecord(): Readonly<boolean>;
    get waitingRoomType(): Readonly<WaitingRoomTypes>;
    get waitingRoomBehaviour(): Readonly<WaitingRoomTypes>;
    get plugins(): Readonly<PresetPermissions['plugins']>;
    get polls(): Readonly<PresetPermissions['polls']>;
    get produceVideo(): Readonly<MediaProductionPermissionType>;
    get requestProduce(): Readonly<boolean>;
    get canProduceVideo(): Readonly<MediaProductionPermissionType>;
    get produceScreenshare(): Readonly<MediaProductionPermissionType>;
    get canProduceScreenshare(): Readonly<MediaProductionPermissionType>;
    get produceAudio(): Readonly<MediaProductionPermissionType>;
    get canProduceAudio(): Readonly<MediaProductionPermissionType>;
    get chatPublic(): Readonly<PresetPermissions['chat']['public']>;
    get chatPrivate(): Readonly<PresetPermissions['chat']['private']>;
    get connectedMeetings(): Readonly<PresetPermissions['connectedMeetings']>;
    get hiddenParticipant(): Readonly<boolean>;
    get showParticipantList(): Readonly<boolean>;
    get canChangeParticipantRole(): Readonly<boolean>;
    get canChangeParticipantPermissions(): Readonly<boolean>;
    get canChangeTheme(): Readonly<boolean>;
    get canPresent(): Readonly<boolean>;
    get acceptPresentRequests(): Readonly<boolean>;
    get canEditDisplayName(): Readonly<boolean>;
    get maxScreenShareCount(): Readonly<number>;
    get isRecorder(): Readonly<boolean>;
    get canSpotlight(): Readonly<boolean>;
    get canLivestream(): Readonly<boolean>;
    get isV2(): true;
}
export {};
