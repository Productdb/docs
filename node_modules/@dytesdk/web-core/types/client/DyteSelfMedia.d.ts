import { PresetMediaConstraints } from '../media-new/interface/web/ConstraintBuilder';
import LocalMediaHandler from '../media-new/LocalMediaHandler';
import LocalMediaHandlerDeprecated from '../media/LocalMediaHandler';
import { AudioMiddleware, VideoMiddleware } from '../media/MediaMiddlewareUtils';
import DyteEventEmitter from '../utils/DyteEventEmitter';
import { SelfEvents } from '../utils/DyteEvents';
export default class DyteSelfMedia extends DyteEventEmitter<SelfEvents> {
    protected localMediaHandler: LocalMediaHandler | LocalMediaHandlerDeprecated;
    init(options?: {
        video?: boolean;
        audio?: boolean;
        constraints?: PresetMediaConstraints;
    }): Promise<void>;
    get audioTrack(): MediaStreamTrack;
    get rawAudioTrack(): MediaStreamTrack;
    addAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    removeAudioMiddleware(audioMiddleware: AudioMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    get videoTrack(): MediaStreamTrack;
    get rawVideoTrack(): MediaStreamTrack;
    addVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    removeVideoMiddleware(videoMiddleware: VideoMiddleware): Promise<{
        success: boolean;
        message: string;
    }>;
    get screenShareTracks(): {
        audio: MediaStreamTrack;
        video: MediaStreamTrack;
    } | {
        audio?: MediaStreamTrack;
        video?: MediaStreamTrack;
    };
    get audioEnabled(): boolean;
    get videoEnabled(): boolean;
    get screenShareEnabled(): boolean;
    enableAudio(): Promise<void>;
    enableVideo(): Promise<void>;
    disableAudio(): Promise<void>;
    disableVideo(): Promise<void>;
    getCurrentDevices(): {
        audio: MediaDeviceInfo;
        video: MediaDeviceInfo;
        speaker: MediaDeviceInfo;
    };
    getAudioDevices(): Promise<MediaDeviceInfo[]>;
    getVideoDevices(): Promise<MediaDeviceInfo[]>;
    getSpeakerDevices(): Promise<MediaDeviceInfo[]>;
    getDeviceById(deviceId: string, kind: 'audio' | 'video' | 'speaker'): MediaDeviceInfo | Promise<MediaDeviceInfo>;
    setDevice(device: MediaDeviceInfo): Promise<void>;
}
