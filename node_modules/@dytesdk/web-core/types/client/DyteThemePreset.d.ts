import { MediaProductionPermissionType, RecorderType, ViewType, WaitingRoomTypes } from '@dyteinternals/utils';
import { BorderRadius, BorderWidth, Theme } from '@dyteinternals/utils/dist/types/DesignTokens';
import { MediaScreenShareQualityType, MediaVideoQualityType } from '@dyteinternals/utils/dist/types/HybridPreset';
import { PresetMediaConstraints } from '../media-new/interface/web/ConstraintBuilder';
export declare type PresetV2CamelCased = {
    config: {
        viewType: ViewType;
        media: {
            video: {
                quality: MediaVideoQualityType;
                frameRate: number;
            };
            screenshare: {
                quality: MediaScreenShareQualityType;
                frameRate: number;
            };
        };
        maxVideoStreams: {
            mobile: number;
            desktop: number;
        };
        maxScreenshareCount: number;
    };
    permissions: {
        acceptWaitingRequests: boolean;
        canAcceptProductionRequests: boolean;
        canEditDisplayName: boolean;
        canRecord: boolean;
        canLivestream: boolean;
        canSpotlight?: boolean;
        disableParticipantAudio: boolean;
        disableParticipantScreensharing: boolean;
        disableParticipantVideo: boolean;
        kickParticipant: boolean;
        pinParticipant: boolean;
        plugins: {
            canClose: boolean;
            canStart: boolean;
            canEditConfig?: boolean;
            config: any;
        };
        waitingRoomType: WaitingRoomTypes;
        polls: {
            canCreate: boolean;
            canVote: boolean;
            canView: boolean;
        };
        media: {
            video: {
                canProduce: MediaProductionPermissionType;
            };
            audio: {
                canProduce: MediaProductionPermissionType;
            };
            screenshare: {
                canProduce: MediaProductionPermissionType;
            };
        };
        chat: {
            public: {
                canSend: boolean;
                text: boolean;
                files: boolean;
            };
            private?: {
                canSend: boolean;
                canReceive: boolean;
                text: boolean;
                files: boolean;
            };
        };
        isRecorder?: boolean;
        recorderType: RecorderType;
        hiddenParticipant: boolean;
        showParticipantList: boolean;
        canChangeParticipantPermissions: boolean;
        connectedMeetings: {
            canAlterConnectedMeetings: boolean;
            canSwitchConnectedMeetings: boolean;
            canSwitchToParentMeeting: boolean;
        };
    };
    ui: {
        designTokens: {
            borderRadius: BorderRadius;
            borderWidth: BorderWidth;
            colors: {
                brand: {
                    300: string;
                    400: string;
                    500: string;
                    600: string;
                    700: string;
                };
                background: {
                    600: string;
                    700: string;
                    800: string;
                    900: string;
                    1000: string;
                };
                danger: string;
                success: string;
                textOnBrand: string;
                text: string;
                videoBg: string;
                warning: string;
            };
            fontFamily?: string;
            googleFont?: string;
            logo?: string;
            spacingBase: number;
            theme: Theme;
        };
        configDiff: any;
    };
    version?: string;
    id?: string;
    name?: string;
};
export declare type MaxVideoStreams = PresetV2CamelCased['config']['maxVideoStreams'];
export declare const DEFAULT_PRESET_CAMEL_CASED: PresetV2CamelCased;
export default class DyteThemePreset {
    #private;
    private constructor();
    static fromResponse(preset: PresetV2CamelCased): DyteThemePreset;
    static default(): DyteThemePreset;
    get setupScreen(): Readonly<{
        isEnabled: boolean;
    }>;
    get waitingRoom(): Readonly<{
        isEnabled: boolean;
    }>;
    get controlBar(): Readonly<{
        isEnabled: boolean;
        elements?: {
            chat?: boolean;
            fullscreen?: boolean;
            invite?: boolean;
            layout?: boolean;
            participants?: boolean;
            plugins?: boolean;
            polls?: boolean;
            reactions?: boolean;
            screenshare?: boolean;
        };
    }>;
    get header(): Readonly<{
        isEnabled: boolean;
        elements: {
            logo: string;
            timer: boolean;
            title: boolean;
            participantCount: boolean;
            changeLayout: boolean;
        };
    }>;
    get pipMode(): Readonly<boolean>;
    get viewType(): Readonly<ViewType>;
    get maxVideoStreams(): Readonly<MaxVideoStreams>;
    get maxScreenShareCount(): Readonly<number>;
    get plugins(): Readonly<string[]>;
    get disabledPlugins(): Readonly<string[]>;
    get designTokens(): Readonly<PresetV2CamelCased['ui']['designTokens']>;
    get configDiff(): Readonly<PresetV2CamelCased['ui']['configDiff']>;
    get mediaConstraints(): Readonly<PresetMediaConstraints>;
    get isV2(): true;
}
