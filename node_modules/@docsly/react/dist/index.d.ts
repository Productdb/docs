import * as react_jsx_runtime from 'react/jsx-runtime';

type CommentVisibility = "visible" | "hidden" | "resolved" | "moderated";
type SelectionData = {
    endOffset: number;
    startOffset: number;
    endContainerNodeId: string;
    startContainerNodeId: string;
    endContainerTextNodeIndex: number;
    startContainerTextNodeIndex: number;
};
type CommentMetadata = {
    nodeId: string;
    x: number;
    y: number;
    xRelativeToParent: number;
    yRelativeToParent: number;
    elementDimensions: {
        height: number;
        width: number;
    };
    pageTitle: string;
    userAgent: string;
    screenWidth: number;
    screenHeight: number;
    devicePixelRatio: number;
    selectedText: string;
    selection: SelectionData;
};
type DocslyComment = {
    createdAt: string;
    hostname: string;
    id: string;
    metadata: CommentMetadata;
    path: string;
    projectId: string;
    text: string;
    threadId: string;
    user?: {
        name: string;
        picture: string;
        sub: string;
        email: string;
        isTeamMember?: boolean;
    };
    visibility: CommentVisibility;
    thread_replies: DocslyComment[];
};
type DocslyUser = {
    name: string;
    sub?: string;
    email?: string;
    picture?: string;
};
type DocslyAppearance = {
    docslyTextHighlightStyles?: string;
    docslyBrandStyles?: string;
    docslyToolboxStyles?: string;
    docslyInboxStyles?: string;
    docslyCommentBoxStyles?: string;
    docslyInputStyles?: string;
};
interface DocslyProps {
    publicId: string;
    pathname: string;
    baseURL?: string;
    user?: DocslyUser;
    appearance?: DocslyAppearance;
    getUserToken?: () => Promise<string>;
    onDocslyEvent?: (event: "docsly_comment" | "docsly_reply" | "docsly_feedback", value: Partial<DocslyComment> | boolean) => void;
    showHighlightedText?: boolean;
    showCommentAvatar?: boolean;
    highlightToComment?: boolean;
}

/**
 * Welcome to @docsly/react!
 *
 * A React component to enable collaborative user feedback on your application.
 * @see Docs https://www.docsly.dev/docs
 *
 * @see DocsProps https://www.docsly.dev/docs/react#props
 */
declare function DocslyWrapper(props: DocslyProps): react_jsx_runtime.JSX.Element | null;

export { DocslyWrapper as default };
