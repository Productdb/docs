import { BaseDevice, detectDevice } from './BaseDevice';
import { ReactNative } from './handlers/ReactNative';
import { ReactNativeUnifiedPlan } from './handlers/ReactNativeUnifiedPlan';
import { Chrome70 } from './handlers/Chrome70';
import { Chrome74 } from './handlers/Chrome74';
import { Edge11 } from './handlers/Edge11';
import { Firefox60 } from './handlers/Firefox60';
import { Safari12 } from './handlers/Safari12';
import { Chrome111 } from './handlers/Chrome111';
export { detectDevice };
export class Device extends BaseDevice {
    constructor({ handlerName, handlerFactory, Handler } = {}) {
        super({ handlerName, handlerFactory, Handler });
    }
    switchDevice(handlerName) {
        switch (handlerName) {
            case 'Chrome111':
                this._handlerFactory = Chrome111.createFactory();
                break;
            case 'Chrome74':
                this._handlerFactory = Chrome74.createFactory();
                break;
            case 'Chrome70':
                this._handlerFactory = Chrome70.createFactory();
                break;
            case 'Firefox111':
                this._handlerFactory = Firefox60.createFactory(true);
                break;
            case 'Firefox60':
                this._handlerFactory = Firefox60.createFactory(false);
                break;
            case 'Safari12':
                this._handlerFactory = Safari12.createFactory();
                break;
            case 'Edge11':
                this._handlerFactory = Edge11.createFactory();
                break;
            case 'ReactNativeUnifiedPlan':
                this._handlerFactory = ReactNativeUnifiedPlan.createFactory();
                break;
            case 'ReactNative':
                this._handlerFactory = ReactNative.createFactory();
                break;
            default:
                throw new TypeError(`unknown handlerName "${handlerName}"`);
        }
    }
}
