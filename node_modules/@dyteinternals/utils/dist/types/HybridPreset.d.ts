import { DesignTokens } from './DesignTokens';
import { ChatPermissionTypes, ConfigDiff, RecorderType, ThemeBodyType } from './index';
export declare enum ViewType {
    GroupCall = "GROUP_CALL",
    Webinar = "WEBINAR",
    AudioRoom = "AUDIO_ROOM",
    Livestream = "LIVESTREAM",
    Chat = "CHAT"
}
export declare enum WaitingRoomTypes {
    Skip = "SKIP",
    OnPrivilegedUserEntry = "ON_PRIVILEGED_USER_ENTRY",
    SkipOnAccept = "SKIP_ON_ACCEPT"
}
export declare enum MediaProductionPermissionType {
    Allowed = "ALLOWED",
    NotAllowed = "NOT_ALLOWED",
    CanRequest = "CAN_REQUEST"
}
export declare enum MediaConsumptionPermissionType {
    Allowed = "ALLOWED",
    NotAllowed = "NOT_ALLOWED"
}
export declare type MediaVideoQualityType = 'qvga' | 'vga' | 'hd' | 'hd_cropped' | 'fhd';
export declare type MediaScreenShareQualityType = 'vga' | 'hd' | 'full_hd';
export declare type Config = {
    view_type: ViewType;
    media: {
        audio: {
            enable_stereo: boolean;
            enable_high_bitrate: boolean;
        };
        video: {
            quality: MediaVideoQualityType;
            frame_rate: number;
        };
        screenshare: {
            quality: MediaScreenShareQualityType;
            frame_rate: number;
        };
    };
    max_video_streams: {
        mobile: number;
        desktop: number;
    };
    max_screenshare_count: number;
};
export declare enum PluginAccessControls {
    FULL_ACCESS = "FULL_ACCESS",
    VIEW_ONLY = "VIEW_ONLY"
}
export declare type PluginConfig = {
    access_control: PluginAccessControls.FULL_ACCESS | PluginAccessControls.VIEW_ONLY;
    disabled: boolean;
    handles_view_only: boolean;
};
export declare type PluginPermissionsType = {
    can_close: boolean;
    can_start: boolean;
    can_edit_config?: boolean;
    config: {
        [pluginId: string]: Partial<PluginConfig>;
    };
};
export declare type Permissions = {
    accept_waiting_requests: boolean;
    can_accept_production_requests: boolean;
    can_edit_display_name: boolean;
    can_record: boolean;
    can_livestream: boolean;
    can_spotlight?: boolean;
    disable_participant_audio: boolean;
    disable_participant_screensharing: boolean;
    disable_participant_video: boolean;
    kick_participant: boolean;
    pin_participant: boolean;
    plugins: PluginPermissionsType;
    waiting_room_type: WaitingRoomTypes;
    polls: {
        can_create: boolean;
        can_vote: boolean;
        can_view: boolean;
    };
    media: {
        video: {
            can_produce: MediaProductionPermissionType;
            can_consume?: MediaConsumptionPermissionType;
        };
        audio: {
            can_produce: MediaProductionPermissionType;
        };
        screenshare: {
            can_produce: MediaProductionPermissionType;
            can_consume?: MediaConsumptionPermissionType;
        };
    };
    chat: ChatPermissionTypes;
    is_recorder?: boolean;
    recorder_type: RecorderType;
    transcription_enabled: boolean;
    hidden_participant: boolean;
    show_participant_list: boolean;
    can_change_participant_permissions: boolean;
    connected_meetings: {
        can_alter_connected_meetings: false;
        can_switch_connected_meetings: false;
        can_switch_to_parent_meeting: false;
    };
    stage_enabled?: boolean;
    stage_access?: MediaProductionPermissionType;
    accept_stage_requests?: boolean;
};
export declare type HybridPreset = {
    ui: {
        oldTheme: ThemeBodyType;
        design_tokens: DesignTokens;
        config_diff: ConfigDiff;
    };
    permissions: Permissions;
    config: Config;
    version?: string;
    name?: string;
};
