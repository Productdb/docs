import axios from 'axios';
let defaultEnvironmentKey = 'hXgU8Wc8pwuGNq9ms5q9Hh';
if (typeof process != 'undefined') {
    if (process?.env?.FLAGSMITH_ENVIRONMENT_KEY) {
        defaultEnvironmentKey = process.env.FLAGSMITH_ENVIRONMENT_KEY;
    }
}
function normalizeFlags(respFlags = []) {
    const formattedFlags = {};
    respFlags.forEach((respFlag) => {
        formattedFlags[respFlag.feature.name] = {
            enabled: respFlag.enabled,
            value: respFlag.feature_state_value,
        };
    });
    return formattedFlags;
}
class Flagsmith {
    flags = {};
    environmentKey = null;
    constructor(environmentKey = defaultEnvironmentKey) {
        this.environmentKey = environmentKey;
        this.identify = this.identify.bind(this);
        this.getValue = this.getValue.bind(this);
        this.hasFeature = this.hasFeature.bind(this);
        this.getAllFlags = this.getAllFlags.bind(this);
    }
    async identify(uniqueIdentifier, traitsObj = {}, forceEvaluate = false, timeout = 5000, flagsEndpoint = 'edge.api.flagsmith.com') {
        const traits = JSON.parse(JSON.stringify(traitsObj));
        const formattedTraits = Object.entries(traits).map((tuple) => ({
            trait_key: tuple[0],
            trait_value: tuple[1],
        }));
        try {
            const randomChars = '_' + (Math.random() + 1).toString(36).substring(2); // Gives string like _26ejlqigw9
            const flagsmithResponse = await axios.post(`https://${flagsEndpoint}/api/v1/identities/`, {
                identifier: uniqueIdentifier + (forceEvaluate ? randomChars : ''),
                traits: formattedTraits,
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'X-Environment-Key': this.environmentKey,
                },
                timeout,
            });
            this.flags = normalizeFlags(flagsmithResponse.data.flags || []);
        }
        catch (ex) {
            // console.error('Flagsmith identify failed!!');
        }
        return this.flags;
    }
    getValue(featureFlagName) {
        return this.flags && this.flags[featureFlagName] && this.flags[featureFlagName].value;
    }
    hasFeature(featureFlagName) {
        return this.flags && this.flags[featureFlagName] && this.flags[featureFlagName].enabled;
    }
    getAllFlags() {
        return this.flags;
    }
}
const globalFlagsmith = new Flagsmith();
function createNewFlagsmithInstance(environmentKey) {
    return new Flagsmith(environmentKey);
}
export { globalFlagsmith, createNewFlagsmithInstance, };
