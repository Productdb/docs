import cloneDeep from 'lodash-es/cloneDeep';
import get from 'lodash-es/get';
import has from 'lodash-es/has';
import set from 'lodash-es/set';
import { MediaProductionPermissionType, PluginAccessControls, ViewType, } from '../types/HybridPreset';
import { DyteViewTypes, WaitingRoomTypes as HybridPresetWaitingRoomTypes, WaitingRoomTypesV1 as v1PresetWaitingRoomTypes, } from '../types/index';
import { getBackgroundColors, getBrandColors, isValidHexColor } from './colors';
import { getDefaultDesignTokens } from './defaultDesignTokens';
import { getDefaultHybridPreset } from './defaultHybridPreset';
import { getDefaultPresetV1 } from './defaultPresetV1';
/**
 * Note(ravindra-dyte):
 * This file helps us in maintaing track record of all the preset keys,
 *  that can be converted from one version to another easily.
 * It also provides a way to convert any preset version to any other
 *  preset version using hybrid version. 1.0.0 -> hybrid -> 2.0.0
 * We are having directlyPortableKeys (name changes but can be copy pasted)
 * identicalPresetKeys (are same across preset versions).
 * Idea is to keep the hybrid preset as close as to the latest preset version.
 * If you are making a change in this file, please ensure the following.
 * 1. Do not break any - to hybrid to - any preset conversion.
 * 2. Make sure that identicalPresetKeys & directlyPortableKeys are correct.
 * 3. If a new preset makes a key non-portable or identical,
 *  remove those keys from the above mentioned lists,
 *  and update all conversion methods on how to convert that key accordingly.
 * 4. Permission such as 'permissions.chat' are identical at high level,
 *  so we have not added 'permissions.chat.blahblah' to not to create clutter.
 * 	If in future it becomes non-portable, then put whatever is portable,
 *  and for rest update the codebase.
 * 5. Make sure that keyMapper keys are identical to hybrid preset's structure.
 * 6. Editor MUST use hybrid state in reducer to mess up the tsx files with
 *  versions.
 * 7. Hide elements from UI if they don't make sense to a specific preset
 *  version.
 */
/** *
 * Note(ravindra-dyte) keyMapper should have keys from HybridPreset because
 * that's what editor will always use
*/
const keyMapper = {
    name: {
        versionWiseKey: {
            hybrid: 'name',
            '1.0.0': 'preset_name',
            '2.0.0': 'name',
        },
    },
    'config.view_type': {
        versionWiseKey: {
            hybrid: 'config.view_type',
            '1.0.0': 'permissions.view_type',
            '2.0.0': 'config.view_type',
        },
    },
    'permissions.disable_participant_audio': {
        versionWiseKey: {
            hybrid: 'permissions.disable_participant_audio',
            '1.0.0': 'permissions.can_allow_participant_audio',
            '2.0.0': 'permissions.disable_participant_audio',
        },
    },
    'permissions.disable_participant_video': {
        versionWiseKey: {
            hybrid: 'permissions.disable_participant_video',
            '1.0.0': 'permissions.can_allow_participant_video',
            '2.0.0': 'permissions.disable_participant_video',
        },
    },
    'permissions.disable_participant_screensharing': {
        versionWiseKey: {
            hybrid: 'permissions.disable_participant_screensharing',
            '1.0.0': 'permissions.can_allow_participant_screensharing',
            '2.0.0': 'permissions.disable_participant_screensharing',
        },
    },
    'permissions.plugins.can_edit_config': {
        versionWiseKey: {
            hybrid: 'permissions.plugins.can_edit_config',
            '1.0.0': 'permissions.plugins.can_edit_acl',
            '2.0.0': 'permissions.plugins.can_edit_config',
        },
    },
    'permissions.can_accept_production_requests': {
        versionWiseKey: {
            hybrid: 'permissions.can_accept_production_requests',
            '1.0.0': 'permissions.accept_present_requests',
            '2.0.0': 'permissions.can_accept_production_requests',
        },
    },
    'permissions.can_change_participant_permissions': {
        versionWiseKey: {
            hybrid: 'permissions.can_change_participant_permissions',
            '1.0.0': 'permissions.can_change_participant_role',
            '2.0.0': 'permissions.can_change_participant_permissions',
        },
    },
    'config.media.video.quality': {
        versionWiseKey: {
            hybrid: 'config.media.video.quality',
            '1.0.0': 'permissions.produce.video.quality',
            '2.0.0': 'config.media.video.quality',
        },
    },
    'config.media.video.frame_rate': {
        versionWiseKey: {
            hybrid: 'config.media.video.frame_rate',
            '1.0.0': 'permissions.produce.video.frame_rate',
            '2.0.0': 'config.media.video.frame_rate',
        },
    },
    'config.media.screenshare.quality': {
        versionWiseKey: {
            hybrid: 'config.media.screenshare.quality',
            '1.0.0': 'permissions.produce.screenshare.quality',
            '2.0.0': 'config.media.screenshare.quality',
        },
    },
    'config.media.screenshare.frame_rate': {
        versionWiseKey: {
            hybrid: 'config.media.screenshare.frame_rate',
            '1.0.0': 'permissions.produce.screenshare.frame_rate',
            '2.0.0': 'config.media.screenshare.frame_rate',
        },
    },
    'config.max_screenshare_count': {
        versionWiseKey: {
            hybrid: 'config.max_screenshare_count',
            '1.0.0': 'permissions.max_screenshare_count',
            '2.0.0': 'config.max_screenshare_count',
        },
    },
};
/**
 * Note(ravindra-dyte) directlyPortableKeys should have keys from HybridPreset
 * because that's what editor will always use
*/
const mappableKeys = Object.keys(keyMapper);
/** *
 * Note(ravindra-dyte) identicalPresetKeys should have keys from HybridPreset
 * because that's what editor will always use
*/
const identicalPresetKeys = [
    'permissions.accept_waiting_requests',
    'permissions.can_spotlight',
    'permissions.kick_participant',
    'permissions.pin_participant',
    'permissions.can_record',
    'permissions.can_livestream',
    'permissions.recorder_type',
    'permissions.plugins.can_close',
    'permissions.plugins.can_start',
    'permissions.plugins.config',
    'permissions.chat',
    'permissions.polls',
    'permissions.can_edit_display_name',
    'permissions.hidden_participant',
    'permissions.show_participant_list',
    'permissions.is_recorder',
    'permissions.connected_meetings',
    'permissions.transcription_enabled',
];
export const convertV1PresetToHybrid = (passedV1Preset) => {
    const v1Preset = cloneDeep(passedV1Preset);
    const hybridPreset = getDefaultHybridPreset();
    if (v1Preset.theme) {
        hybridPreset.ui.oldTheme = v1Preset.theme;
        if (v1Preset.theme.header?.elements?.logo) {
            set(hybridPreset, 'ui.design_tokens.logo', v1Preset.theme.header.elements.logo);
        }
        if (v1Preset.theme.colors) {
            const defaultColors = getDefaultDesignTokens().colors;
            let brandColors;
            if (typeof v1Preset.theme.colors.primary === 'string') {
                brandColors = isValidHexColor(v1Preset.theme.colors.primary)
                    ? getBrandColors(v1Preset.theme.colors.primary)
                    : defaultColors.brand;
            }
            else {
                brandColors = get(v1Preset, 'theme.colors.primary');
            }
            set(hybridPreset, 'ui.design_tokens.colors.brand', brandColors);
            let backgroundColors;
            if (typeof v1Preset.theme.colors.secondary === 'string') {
                backgroundColors = isValidHexColor(v1Preset.theme.colors.secondary)
                    ? getBackgroundColors(v1Preset.theme.colors.secondary)
                    : defaultColors.background;
            }
            else {
                backgroundColors = get(v1Preset, 'theme.colors.secondary');
            }
            set(hybridPreset, 'ui.design_tokens.colors.background', backgroundColors);
            const videoBgColor = get(v1Preset, 'theme.colors.videoBackground');
            set(hybridPreset, 'ui.design_tokens.colors.video_bg', isValidHexColor(videoBgColor)
                ? videoBgColor
                : defaultColors.video_bg);
            const textColor = get(v1Preset, 'theme.colors.text');
            set(hybridPreset, 'ui.design_tokens.colors.text', isValidHexColor(textColor)
                ? textColor
                : defaultColors.text);
            let textColorOnBrand = textColor;
            if (v1Preset.theme.colors.text !== v1Preset.theme.colors.textPrimary) {
                textColorOnBrand = get(v1Preset, 'theme.colors.textPrimary');
            }
            set(hybridPreset, 'ui.design_tokens.colors.text_on_brand', isValidHexColor(textColorOnBrand)
                ? textColorOnBrand
                : defaultColors.text_on_brand);
        }
        if (v1Preset.theme.grid?.multi?.maxVideoCount) {
            hybridPreset
                .config
                .max_video_streams
                .desktop = v1Preset.theme.grid.multi.maxVideoCount;
        }
    }
    mappableKeys.forEach((presetKey) => {
        const v1Key = keyMapper[presetKey].versionWiseKey['1.0.0'];
        if (has(v1Preset, v1Key)) {
            set(hybridPreset, keyMapper[presetKey].versionWiseKey.hybrid, get(v1Preset, v1Key));
        }
    });
    identicalPresetKeys.forEach((presetKey) => {
        if (has(v1Preset, presetKey)) {
            set(hybridPreset, presetKey, get(v1Preset, presetKey));
        }
    });
    // Migrate media
    if (v1Preset.permissions.view_type === DyteViewTypes.groupCall) {
        set(hybridPreset, 'permissions.media.video.can_produce', get(v1Preset, 'permissions.produce.video.allow')
            ? MediaProductionPermissionType.Allowed
            : MediaProductionPermissionType.NotAllowed);
        set(hybridPreset, 'permissions.media.audio.can_produce', get(v1Preset, 'permissions.produce.audio')
            ? MediaProductionPermissionType.Allowed
            : MediaProductionPermissionType.NotAllowed);
        set(hybridPreset, 'permissions.media.screenshare.can_produce', get(v1Preset, 'permissions.produce.screenshare.allow')
            ? MediaProductionPermissionType.Allowed
            : MediaProductionPermissionType.NotAllowed);
    }
    if (v1Preset.permissions.view_type === DyteViewTypes.webinar) {
        hybridPreset
            .permissions
            .media
            .video
            .can_produce = MediaProductionPermissionType.NotAllowed;
        hybridPreset
            .permissions
            .media
            .audio
            .can_produce = MediaProductionPermissionType.NotAllowed;
        hybridPreset
            .permissions
            .media
            .screenshare
            .can_produce = MediaProductionPermissionType.NotAllowed;
        if (has(v1Preset, 'permissions.request_produce')
            && v1Preset.permissions.request_produce) {
            if (v1Preset.permissions.produce?.video.allow) {
                hybridPreset
                    .permissions
                    .media
                    .video
                    .can_produce = MediaProductionPermissionType.CanRequest;
            }
            if (v1Preset.permissions.produce?.audio) {
                hybridPreset
                    .permissions
                    .media
                    .audio
                    .can_produce = MediaProductionPermissionType.CanRequest;
            }
            if (v1Preset.permissions.produce?.screenshare.allow) {
                hybridPreset
                    .permissions
                    .media
                    .screenshare
                    .can_produce = MediaProductionPermissionType.CanRequest;
            }
        }
        else if (has(v1Preset, 'permissions.can_present')
            && v1Preset.permissions.can_present) {
            if (v1Preset.permissions.produce?.video.allow) {
                hybridPreset
                    .permissions
                    .media
                    .video
                    .can_produce = MediaProductionPermissionType.Allowed;
            }
            if (v1Preset.permissions.produce?.audio) {
                hybridPreset
                    .permissions
                    .media
                    .audio
                    .can_produce = MediaProductionPermissionType.Allowed;
            }
            if (v1Preset.permissions.produce?.screenshare.allow) {
                hybridPreset
                    .permissions
                    .media
                    .screenshare
                    .can_produce = MediaProductionPermissionType.Allowed;
            }
        }
    }
    // Migrate waiting_room_type
    if (v1Preset.permissions.waiting_room_type) {
        if (v1Preset
            .permissions
            .waiting_room_type === v1PresetWaitingRoomTypes.skip) {
            hybridPreset
                .permissions
                .waiting_room_type = HybridPresetWaitingRoomTypes.Skip;
        }
        if (v1Preset
            .permissions
            .waiting_room_type === v1PresetWaitingRoomTypes.onAccept) {
            hybridPreset
                .permissions
                .waiting_room_type = HybridPresetWaitingRoomTypes.SkipOnAccept;
        }
        if (v1Preset
            .permissions
            .waiting_room_type === v1PresetWaitingRoomTypes.skipOnAccept) {
            hybridPreset
                .permissions
                .waiting_room_type = HybridPresetWaitingRoomTypes.SkipOnAccept;
        }
        if (v1Preset
            .permissions
            .waiting_room_type === v1PresetWaitingRoomTypes
            .skipOnPrivilegedUserEntry) {
            hybridPreset
                .permissions
                .waiting_room_type = HybridPresetWaitingRoomTypes
                .OnPrivilegedUserEntry;
        }
    }
    // Migrate plugin configs
    hybridPreset.permissions.plugins.config = {};
    if (v1Preset.permissions.plugins.config) {
        const pluginIds = Object.keys(v1Preset.permissions.plugins.config);
        pluginIds.forEach((id) => {
            const config = v1Preset.permissions.plugins.config
                && v1Preset.permissions.plugins.config[id];
            if (config?.defaultAccess === 'whitelist') {
                // for ui-kit whitelist==view_only access
                hybridPreset.permissions.plugins.config[id] = {
                    access_control: PluginAccessControls.VIEW_ONLY,
                };
            }
        });
    }
    return hybridPreset;
};
export const convertHybridPresetToV1 = (passedHybridPreset) => {
    const hybridPreset = cloneDeep(passedHybridPreset);
    const v1Preset = getDefaultPresetV1();
    if (hybridPreset.ui.oldTheme) {
        v1Preset.theme = hybridPreset.ui.oldTheme;
    }
    set(v1Preset, 'theme.header.elements.logo', hybridPreset.ui.design_tokens.logo);
    v1Preset.theme.colors = {
        primary: hybridPreset.ui.design_tokens.colors.brand,
        secondary: hybridPreset.ui.design_tokens.colors.background,
        text: hybridPreset.ui.design_tokens.colors.text,
        textPrimary: hybridPreset.ui.design_tokens.colors.text_on_brand,
        background: hybridPreset.ui.design_tokens.colors.video_bg,
        videoBackground: hybridPreset.ui.design_tokens.colors.video_bg,
    };
    set(v1Preset, 'theme.grid.multi.maxVideoCount', hybridPreset.config.max_video_streams.desktop);
    mappableKeys.forEach((presetKey) => {
        if (has(hybridPreset, presetKey)) {
            set(v1Preset, keyMapper[presetKey].versionWiseKey['1.0.0'], get(hybridPreset, presetKey));
        }
    });
    identicalPresetKeys.forEach((presetKey) => {
        if (has(hybridPreset, presetKey)) {
            set(v1Preset, presetKey, get(hybridPreset, presetKey));
        }
    });
    // Migrate media/produce
    set(v1Preset, 'permissions.produce.video.allow', get(passedHybridPreset, 'permissions.media.video.can_produce') !== MediaProductionPermissionType.NotAllowed);
    set(v1Preset, 'permissions.produce.audio', get(passedHybridPreset, 'permissions.media.audio.can_produce') !== MediaProductionPermissionType.NotAllowed);
    set(v1Preset, 'permissions.produce.screenshare.allow', get(passedHybridPreset, 'permissions.media.screenshare.can_produce') !== MediaProductionPermissionType.NotAllowed);
    set(v1Preset, 'permissions.request_produce', false);
    set(v1Preset, 'permissions.can_present', false);
    if (passedHybridPreset.config.view_type === ViewType.Webinar) {
        v1Preset.permissions.can_present = [
            passedHybridPreset.permissions.media.video.can_produce,
            passedHybridPreset.permissions.media.audio.can_produce,
            passedHybridPreset.permissions.media.screenshare.can_produce,
        ].some((val) => val === MediaProductionPermissionType.Allowed);
        v1Preset.permissions.request_produce = !v1Preset.permissions.can_present
            && [
                passedHybridPreset.permissions.media.video.can_produce,
                passedHybridPreset.permissions.media.audio.can_produce,
                passedHybridPreset.permissions.media.screenshare.can_produce,
            ].some((val) => val === MediaProductionPermissionType.CanRequest);
    }
    // Migrate waiting_room_type
    if (hybridPreset.permissions.waiting_room_type) {
        if (hybridPreset
            .permissions
            .waiting_room_type === HybridPresetWaitingRoomTypes.Skip) {
            v1Preset
                .permissions
                .waiting_room_type = v1PresetWaitingRoomTypes.skip;
        }
        if (hybridPreset
            .permissions
            .waiting_room_type === HybridPresetWaitingRoomTypes.SkipOnAccept) {
            v1Preset
                .permissions
                .waiting_room_type = v1PresetWaitingRoomTypes.skipOnAccept;
        }
        if (hybridPreset
            .permissions
            .waiting_room_type === HybridPresetWaitingRoomTypes
            .OnPrivilegedUserEntry) {
            v1Preset
                .permissions
                .waiting_room_type = v1PresetWaitingRoomTypes
                .skipOnPrivilegedUserEntry;
        }
    }
    // Migrate plugin configs
    if (hybridPreset.permissions.plugins.config) {
        const pluginIds = Object.keys(hybridPreset.permissions.plugins.config);
        pluginIds.forEach((id) => {
            const config = hybridPreset.permissions.plugins.config[id];
            if (config?.access_control === PluginAccessControls.VIEW_ONLY) {
                (v1Preset.permissions.plugins.config || {})[id] = {
                    defaultAccess: 'whitelist',
                };
            }
            if (config.disabled === false
                && !v1Preset.theme.plugins.includes(id)) {
                v1Preset.theme.plugins.push(id);
            }
        });
        v1Preset.theme.plugins = (v1Preset.theme.plugins || []).filter((id) => {
            const config = hybridPreset.permissions.plugins.config[id] || {};
            return !config.disabled;
        });
    }
    if (v1Preset.theme.dimensions)
        delete v1Preset.theme.dimensions;
    return v1Preset;
};
export const convertV2PresetToHybrid = (passedV2Preset) => {
    const v2Preset = cloneDeep(passedV2Preset);
    const hybridPreset = getDefaultHybridPreset();
    if (v2Preset.ui) {
        hybridPreset.ui = {
            oldTheme: {
                ...hybridPreset.ui.oldTheme,
                waiting_room: {
                    is_enabled: true,
                    enable_preview: true,
                },
            },
            design_tokens: v2Preset.ui.design_tokens,
            config_diff: v2Preset.ui.config_diff,
        };
    }
    mappableKeys.forEach((presetKey) => {
        const v2Key = keyMapper[presetKey].versionWiseKey['2.0.0'];
        if (has(v2Preset, v2Key)) {
            set(hybridPreset, keyMapper[presetKey].versionWiseKey.hybrid, get(v2Preset, v2Key));
        }
    });
    identicalPresetKeys.forEach((presetKey) => {
        if (has(v2Preset, presetKey)) {
            set(hybridPreset, presetKey, get(v2Preset, presetKey));
        }
    });
    hybridPreset.config = v2Preset.config;
    if (hybridPreset.config.view_type === 'GROUPCALL') {
        hybridPreset.config.view_type = ViewType.GroupCall;
    }
    hybridPreset.permissions.plugins = v2Preset.permissions.plugins;
    hybridPreset.permissions.media = v2Preset.permissions.media;
    hybridPreset.config.max_video_streams = v2Preset.config.max_video_streams;
    hybridPreset
        .permissions
        .waiting_room_type = v2Preset.permissions.waiting_room_type;
    return hybridPreset;
};
export const convertHybridPresetToV2 = (passedHybridPreset) => {
    const hybridPreset = cloneDeep(passedHybridPreset);
    const v2Preset = getDefaultHybridPreset();
    if (hybridPreset.ui) {
        v2Preset.ui = hybridPreset.ui;
        delete v2Preset.ui.oldTheme;
    }
    mappableKeys.forEach((presetKey) => {
        if (has(hybridPreset, presetKey)) {
            set(v2Preset, keyMapper[presetKey].versionWiseKey['2.0.0'], get(hybridPreset, presetKey));
        }
    });
    identicalPresetKeys.forEach((presetKey) => {
        if (has(hybridPreset, presetKey)) {
            set(v2Preset, presetKey, get(hybridPreset, presetKey));
        }
    });
    v2Preset.config = hybridPreset.config;
    v2Preset.permissions.media.audio.can_produce = hybridPreset
        .permissions
        .media.audio.can_produce;
    v2Preset.permissions.media.video.can_produce = hybridPreset
        .permissions
        .media.video.can_produce;
    v2Preset.permissions.media.screenshare.can_produce = hybridPreset
        .permissions
        .media.screenshare.can_produce;
    delete v2Preset.permissions.media.video.can_consume;
    delete v2Preset.permissions.media.screenshare.can_consume;
    delete v2Preset.version;
    v2Preset.config.max_video_streams = hybridPreset.config.max_video_streams;
    v2Preset
        .permissions
        .waiting_room_type = hybridPreset.permissions.waiting_room_type;
    return v2Preset;
};
