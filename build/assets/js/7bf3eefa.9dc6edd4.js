"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[26684],{17655:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>c});var n=t(74848),r=t(28453);const d={image:"/static/ui-kit/1.x.x/components/productdb-grid.svg",sidebar_position:2,description:"Learn how to create a custom grid view component in ProductDB's iOS UIKit with our detailed documentation."},s="Custom Grid View",o={id:"rendering-participant-video/build-your-own-grid",title:"Custom Grid View",description:"Learn how to create a custom grid view component in ProductDB's iOS UIKit with our detailed documentation.",source:"@site/docs/ios/rendering-participant-video/build-your-own-grid.mdx",sourceDirName:"rendering-participant-video",slug:"/rendering-participant-video/build-your-own-grid",permalink:"/ios/rendering-participant-video/build-your-own-grid",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/ios/rendering-participant-video/build-your-own-grid.mdx",tags:[],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:2,frontMatter:{image:"/static/ui-kit/1.x.x/components/productdb-grid.svg",sidebar_position:2,description:"Learn how to create a custom grid view component in ProductDB's iOS UIKit with our detailed documentation."},sidebar:"tutorialSidebar",previous:{title:"Using ProductDB GridView",permalink:"/ios/rendering-participant-video/using-productdbGrid"},next:{title:"Pre-built Settings screen",permalink:"/ios/Pre-Built-Settings_Guides/Settings"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Understanding the GridView Class",id:"step-1-understanding-the-gridview-class",level:2},{value:"Key Components:",id:"key-components",level:3},{value:"Example Usage:",id:"example-usage",level:3},{value:"Integrating Participant Tile Views",id:"integrating-participant-tile-views",level:2},{value:"<code>ProductDBParticipantTileContainerView</code>",id:"productdbparticipanttilecontainerview",level:3},{value:"Example Usage:",id:"example-usage-1",level:4},{value:"ProductDBParticipantTileView",id:"productdbparticipanttileview",level:3}];function l(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"custom-grid-view",children:"Custom Grid View"}),"\n",(0,n.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"GridView"})," class provided in ProductDB's iOS UIKit allows you to create custom grid views to display content\nin a structured layout. This guide will walk you through the process of understanding, customizing, and\nutilizing the ",(0,n.jsx)(i.code,{children:"GridView"})," class to create your custom grid views."]}),"\n",(0,n.jsx)(i.h2,{id:"step-1-understanding-the-gridview-class",children:"Step 1: Understanding the GridView Class"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"GridView"})," class is a customizable UIView subclass designed to display a grid of views. It provides properties\nand methods to manage the arrangement and presentation of child views within the grid."]}),"\n",(0,n.jsx)(i.h3,{id:"key-components",children:"Key Components:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Properties Needed to manage GridView"}),":"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"maxItems"}),": Maximum number of items the grid can contain."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"currentVisibleItem"}),": Number of items currently visible in the grid."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"scrollView"}),": UIScrollView for enabling scrolling if the grid overflows."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"views"}),": Array holding the child views of the grid."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",children:"let tile = ProductDBParticipantTileView(mobileClient: meeting,\n                                    participant: participant,\n                                    isForLocalUser: false,\n                                    showScreenShareVideoView: false)\n"})}),"\n",(0,n.jsxs)(i.p,{children:["These tiles stored in ",(0,n.jsx)(i.code,{children:"views"})," array can be rendered in ",(0,n.jsx)(i.code,{children:"scrollView"})," and ",(0,n.jsx)(i.code,{children:"currentVisibleItem"}),", ",(0,n.jsx)(i.code,{children:"maxItems"})," can\nmanage state of grid to show/hide certain tiles if pagination is needed."]}),"\n",(0,n.jsxs)(i.p,{children:["Remove tile from view using ",(0,n.jsx)(i.code,{children:"tileView?.removeFromSuperview()"})]}),"\n",(0,n.jsx)(i.h2,{id:"integrating-participant-tile-views",children:"Integrating Participant Tile Views"}),"\n",(0,n.jsxs)(i.p,{children:["To display video views within the ",(0,n.jsx)(i.code,{children:"GridView"}),", you can utilize the ",(0,n.jsx)(i.code,{children:"ProductDBParticipantTileContainerView"})," and\n",(0,n.jsx)(i.code,{children:"ProductDBParticipantTileView"})," classes provided by ProductDB's iOS UIKit. These classes encapsulate the logic for\nrendering video streams of meeting participants."]}),"\n",(0,n.jsx)(i.h3,{id:"productdbparticipanttilecontainerview",children:(0,n.jsx)(i.code,{children:"ProductDBParticipantTileContainerView"})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"ProductDBParticipantTileContainerView"})," is a UIView subclass designed to contain a single ",(0,n.jsx)(i.code,{children:"ProductDBParticipantTileView"}),".\nIt provides methods for preparing the view for reuse and setting the participant whose video stream should be displayed."]}),"\n",(0,n.jsx)(i.h4,{id:"example-usage-1",children:"Example Usage:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",children:"let tileContainerView = ProductDBParticipantTileContainerView()\ntileContainerView.setParticipant(meeting: myMeetingClient,\n                             participant: meetingParticipant)\n"})}),"\n",(0,n.jsx)(i.h3,{id:"productdbparticipanttileview",children:"ProductDBParticipantTileView"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.a,{href:"/ios/components/productdb-participant-tile-view",children:"ProductDBParticipantTileView"})," class represents a single tile\nwithin the grid view, displaying the video stream of a meeting participant.\nIt manages the layout and presentation of the participant's video view, along with\nadditional features such as participant name tags and pin indicators."]}),"\n",(0,n.jsx)(i.p,{children:"You can add instances of ProductDBParticipantTileView to the GridView to render multiple video streams within the grid,\nproviding a comprehensive view of meeting participants during video conferences."})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>o});var n=t(96540);const r={},d=n.createContext(r);function s(e){const i=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(d.Provider,{value:i},e.children)}}}]);