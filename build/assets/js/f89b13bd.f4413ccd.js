"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[23862],{4559:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var n=s(74848),a=s(28453);const c={title:"Receiving chat messages",description:'"Discover how to implement the functionality to receive chat messages in your iOS app using ProductDB',sidebar_position:3,tags:["ios-core","chat"]},i="Receiving chat messages",o={id:"chat/receiving-chat-messages",title:"Receiving chat messages",description:'"Discover how to implement the functionality to receive chat messages in your iOS app using ProductDB',source:"@site/docs/ios-core/chat/receiving-chat-messages.mdx",sourceDirName:"chat",slug:"/chat/receiving-chat-messages",permalink:"/ios-core/chat/receiving-chat-messages",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/ios-core/chat/receiving-chat-messages.mdx",tags:[{label:"ios-core",permalink:"/ios-core/tags/ios-core"},{label:"chat",permalink:"/ios-core/tags/chat"}],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:3,frontMatter:{title:"Receiving chat messages",description:'"Discover how to implement the functionality to receive chat messages in your iOS app using ProductDB',sidebar_position:3,tags:["ios-core","chat"]},sidebar:"tutorialSidebar",previous:{title:"Sending a chat message",permalink:"/ios-core/chat/sending-a-chat-message"},next:{title:"Room Metadata",permalink:"/ios-core/room-metadata"}},r={},h=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"receiving-chat-messages",children:"Receiving chat messages"}),"\n",(0,n.jsxs)(t.p,{children:["To be able to receive chat messages you need to implement a method\n",(0,n.jsx)(t.code,{children:"onChatUpdates()"})," method from callback ",(0,n.jsx)(t.code,{children:"ProductDBChatEventsListener"}),". You can\nsubscribe to this events by calling\n",(0,n.jsx)(t.code,{children:"meeting.addChatEventsListener(dyteChatEventsListener)"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"extension MeetingViewModel: ProductDBChatEventsListener {\n  func onChatUpdates(messages: [ProductDBChatMessage]) {\n  // to load chat messages\n  }\n\n  func onNewChatMessage(message: ProductDBChatMessage) {\n    // when a new chat message is shared in the meeting\n  }\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"onChatUpdates()"})," method will be called whenever there is a change in the chat messages. The ",(0,n.jsx)(t.code,{children:"messages"})," parameter is a list of ",(0,n.jsx)(t.code,{children:"ProductDBChatMessage"})," objects that have been sent in the chat."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"onNewChatMessage()"})," method will be called whenever a new chat message is shared in the meeting. The ",(0,n.jsx)(t.code,{children:"message"})," parameter is a ",(0,n.jsx)(t.code,{children:"ProductDBChatMessage"})," object that has been sent in the chat."]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(96540);const a={},c=n.createContext(a);function i(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);