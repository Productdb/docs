"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[22400],{72586:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>u,toc:()=>r});var t=n(74848),o=n(28453);const l={description:"Learn how to use and customize the ProductDBAvatarView component in ProductDB's iOS UiKit with our detailed documentation."},s="Load Plugins",u={id:"Pre-Built-Plugins_Guides/load-plugin",title:"Load Plugins",description:"Learn how to use and customize the ProductDBAvatarView component in ProductDB's iOS UiKit with our detailed documentation.",source:"@site/docs/ios/Pre-Built-Plugins_Guides/load-plugin.mdx",sourceDirName:"Pre-Built-Plugins_Guides",slug:"/Pre-Built-Plugins_Guides/load-plugin",permalink:"/ios/Pre-Built-Plugins_Guides/load-plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/ios/Pre-Built-Plugins_Guides/load-plugin.mdx",tags:[],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",frontMatter:{description:"Learn how to use and customize the ProductDBAvatarView component in ProductDB's iOS UiKit with our detailed documentation."},sidebar:"tutorialSidebar",previous:{title:"Pre-built Plugin screen",permalink:"/ios/Pre-Built-Plugins_Guides/Plugins"},next:{title:"Introduction",permalink:"/ios/participants/introduction"}},d={},r=[{value:"Overview: How to display plugins inside plugins view.",id:"overview-how-to-display-plugins-inside-plugins-view",level:2},{value:"Creating plugin view",id:"creating-plugin-view",level:3},{value:"Loading pluginView with plugins",id:"loading-pluginview-with-plugins",level:4}];function a(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Head:n}=i;return n||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"load-plugins",children:"Load Plugins"}),"\n",(0,t.jsx)(i.h2,{id:"overview-how-to-display-plugins-inside-plugins-view",children:"Overview: How to display plugins inside plugins view."}),"\n",(0,t.jsxs)(i.p,{children:["To display individual plugin inside App. We will be using component ",(0,t.jsx)(i.a,{href:"/ios/components/productdb-plugin-view",children:"ProductDBPluginsView"})]}),"\n",(0,t.jsx)(i.h3,{id:"creating-plugin-view",children:"Creating plugin view"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-swift",children:" let viewModel = VideoPeerViewModel(mobileClient: meeting,\n                                    participant: meeting.localUser,\n                                    showSelfPreviewVideo: false,\n                                    showScreenShareVideoView: true)\n  let pluginView = ProductDBPluginsView(videoPeerViewModel:viewModel)\n  self.view.addSubview(pluginView)\n"})}),"\n",(0,t.jsx)(i.p,{children:"Use above code to create instance of ProductDBPluginsView and add this view to any view of your choice."}),"\n",(0,t.jsx)(i.h4,{id:"loading-pluginview-with-plugins",children:"Loading pluginView with plugins"}),"\n",(0,t.jsx)(i.p,{children:"You can get the list of active plugins with the help of below API"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-swift",children:"let plugins: [ProductDBPlugin] = self.dyteMobileClient.plugins.active\nlet arrButtons = [ProductDBPluginScreenShareTabButton]()\n\nfor plugin in plugins {\n  let button = ProductDBPluginScreenShareTabButton(image: plugin.picture, title: plugin.name, id: plugin.id)\n  arrButtons.append(button)\n}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["To show ",(0,t.jsx)(i.code,{children:"arrButtons"})," created from above code on the ",(0,t.jsx)(i.a,{href:"/ios/components/productdb-plugin-view",children:"ProductDBPluginsView"}),", We will be using\nbelow API."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-swift",children:"self.pluginView.setButtons(buttons: arrButtons, selectedIndex: 0) { [weak self] button, pluginIsClicked in\n    guard let self = self else {return}\n  // We are having plugin button tapped by the user. \n  // So to load this plugin inside PluginsView we need to call this API. \n    self.pluginView.show(pluginView:  button.plugin.getPluginView())\n}\n\n"})}),"\n",(0,t.jsx)(n,{children:(0,t.jsx)("title",{children:"iOS ProductDBAvatarView"})})]})}function c(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>u});var t=n(96540);const o={},l=t.createContext(o);function s(e){const i=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function u(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(l.Provider,{value:i},e.children)}}}]);