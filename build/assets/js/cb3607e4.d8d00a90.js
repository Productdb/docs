"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[46035],{68876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=n(74848),l=n(28453);const a={image:"/static/ui-kit/1.x.x/components/participant-types.svg",sidebar_position:3,description:"Learn how to handle various types of participants in your iOS app using ProductDB's participant view controllers with our detailed documentation."},s="Participant Types",r={id:"participants/type-of-participants",title:"Participant Types",description:"Learn how to handle various types of participants in your iOS app using ProductDB's participant view controllers with our detailed documentation.",source:"@site/docs/ios/participants/type-of-participants.mdx",sourceDirName:"participants",slug:"/participants/type-of-participants",permalink:"/ios/participants/type-of-participants",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/ios/participants/type-of-participants.mdx",tags:[],version:"current",lastUpdatedAt:1723750666,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:3,frontMatter:{image:"/static/ui-kit/1.x.x/components/participant-types.svg",sidebar_position:3,description:"Learn how to handle various types of participants in your iOS app using ProductDB's participant view controllers with our detailed documentation."},sidebar:"tutorialSidebar",previous:{title:"Pre-built Participants Screen",permalink:"/ios/participants/pre-built-participants-screen"},next:{title:"Host Controls",permalink:"/ios/participants/host-controls"}},o={},c=[{value:"Participant Cell Configuration",id:"participant-cell-configuration",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"participant-types",children:"Participant Types"}),"\n",(0,i.jsx)(t.p,{children:"This documentation explains how to handle different types of participants in your iOS app using ProductDB's participant view controllers."}),"\n",(0,i.jsx)(t.h2,{id:"participant-cell-configuration",children:"Participant Cell Configuration"}),"\n",(0,i.jsxs)(t.p,{children:["We need a ",(0,i.jsx)(t.code,{children:"tableView"})," to show different types of participants on this screen.\nThe following code snippet demonstrates how to configure participant cells based on their types."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell =  self.viewModel.dataSourceTableView.configureCell(tableView: tableView, indexPath: indexPath)\n    if let cell = cell as? ParticipantInCallTableViewCell {\n        cell.buttonMoreClick = { [weak self] button in\n            guard let self = self else {return}\n            //createMoreMenu is covered in host control docs\n            self.createMoreMenu(participantListner: cell.model.participantUpdateEventListner, indexPath: indexPath)\n        }\n    } else if let cell = cell as? ParticipantWaitingTableViewCell {\n        cell.buttonCrossClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.waitlistEventListner.rejectWaitingRequest(participant: cell.model.participant)\n        }\n        cell.buttonTickClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.waitlistEventListner.acceptWaitingRequest(participant: cell.model.participant)\n        }\n    } else if let cell = cell as? OnStageWaitingRequestTableViewCell {\n        cell.buttonCrossClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.mobileClient.stage.denyAccess(id: cell.model.participant.id)\n            self.reloadScreen()\n        }\n        cell.buttonTickClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.mobileClient.stage.grantAccess(id: cell.model.participant.id)\n            self.reloadScreen()\n        }\n    } else if let cell = cell as? AcceptButtonTableViewCell {\n        cell.buttonClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.acceptAll()\n            self.reloadScreen()\n        }\n    } else if let cell = cell as? RejectButtonTableViewCell {\n        cell.buttonClick = { [weak self] button in\n            guard let self = self else {return}\n            self.viewModel.rejectAll()\n            self.reloadScreen()\n        }\n    }\n    return cell\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(96540);const l={},a=i.createContext(l);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);