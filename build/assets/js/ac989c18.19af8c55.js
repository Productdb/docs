"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[36911],{53176:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=i(74848),d=i(28453);const o={},r="Media Preview",a={id:"pre-call/media-preview",title:"Media Preview",description:"Before joining a meeting, users may want to preview and configure their media devices like camera, microphone, and audio output.",source:"@site/docs/android-core/pre-call/1-media-preview.mdx",sourceDirName:"pre-call",slug:"/pre-call/media-preview",permalink:"/android-core/pre-call/media-preview",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/android-core/pre-call/1-media-preview.mdx",tags:[],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/android-core/"},next:{title:"Handling Device Permissions",permalink:"/android-core/pre-call/handling-permissions"}},s={},c=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Toggling Media",id:"toggling-media",level:3},{value:"Changing Media Device",id:"changing-media-device",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"media-preview",children:"Media Preview"}),"\n",(0,t.jsx)(n.p,{children:"Before joining a meeting, users may want to preview and configure their media devices like camera, microphone, and audio output.\nThis section provides developers with the tools to prepare the media environment before joining a ProductDB meeting."}),"\n",(0,t.jsxs)(n.p,{children:["If you are using our UI Kits, this functionality can be handled by ",(0,t.jsx)(n.code,{children:"ProductDBSetupFragment"})," or built with ",(0,t.jsx)(n.code,{children:"ProductDBParticipantTileView"}),"\nand ",(0,t.jsx)(n.code,{children:"ProductDBSettingsFragment"})," components."]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"meeting.localUser.audioEnabled"}),": A ",(0,t.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the audio currently enabled."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"meeting.localUser.videoEnabled"}),": A ",(0,t.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the video currently enabled."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"toggling-media",children:"Toggling Media"}),"\n",(0,t.jsx)(n.p,{children:"The same methods used for controlling media during a meeting are also applicable for pre-call media configuration."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Mute/Unmute microphone"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"// Mute Audio\nmeeting.localUser.disableAudio()\n\n// Unmute Audio\nmeeting.localUser.enableAudio()\n"})}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableAudio()") --\x3e success("Gives <code>onAudioUpdate</code> callback to <code>ProductDBSelfEventsListener</code>")\n\n    class eam basic;'}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["Anytime there is an update in the audio state of the local user, the Core SDK notifies the client through the ",(0,t.jsx)(n.code,{children:"onAudioUpdate"})," callback\nfrom ",(0,t.jsx)(n.code,{children:"ProductDBSelfEventsListener"}),". Here's how you can register the listener:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"meeting.addSelfEventsListener(object : ProductDBSelfEventsListener {\n    override fun onAudioUpdate(audioEnabled: Boolean) {\n        // Show a visual preview of the audio to the user if enabled\n    }\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Enable/Disable camera"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"// Disable Video\nmeeting.localUser.disableVideo()\n\n// Enable Video\nmeeting.localUser.enableVideo()\n"})}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableVideo()") --\x3e success("Gives <code>onVideoUpdate</code> callback to <code>ProductDBSelfEventsListener</code>")\n\n    class eam basic;'}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:["Whenever there is an update in the video state of the local user, the Core SDK notifies the client through the ",(0,t.jsx)(n.code,{children:"onVideoUpdate"})," callback\nfrom ",(0,t.jsx)(n.code,{children:"ProductDBSelfEventsListener"}),". Here's how you can register the listener:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"meeting.addSelfEventsListener(object : ProductDBSelfEventsListener {\n    override fun onVideoUpdate(videoEnabled: Boolean) {\n        // Show local user's VideoView if video is enabled\n    }\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"changing-media-device",children:"Changing Media Device"}),"\n",(0,t.jsx)(n.p,{children:"Media devices represent the hardware for the camera, microphone, and speaker devices. To get the list of media devices currently\navailable, use the following methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"// Get all audio devices\nval audioDevices = meeting.localUser.getAudioDevices()\n\n// Get all video devices\nval videoDevices = meeting.localUser.getVideoDevices()\n"})}),"\n",(0,t.jsx)(n.p,{children:"To get the currently selected media device, use the following methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"// Get current audio device being used\nval currentAudioDevice = meeting.localUser.getSelectedAudioDevice()\n\n// Get current video device being used\nval currentVideoDevice = meeting.localUser.getSelectedVideoDevice()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Use these methods to create a UI that allows users to configure their media devices. When the user selects a device, use the below methods to set the device."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Set device"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"// Set audio device\nmeeting.localUser.setAudioDevice(device)\n// eg. device = audioDevices[0]\n\n// Set video device\nmeeting.localUser.setVideoDevice(device)\n// eg. device = videoDevices[0]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const d={},o=t.createContext(d);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);