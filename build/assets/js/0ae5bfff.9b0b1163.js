"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[83884],{46514:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var n=i(74848),o=i(28453);const r={},s="Waiting Room",a={id:"pre-call/waiting-room",title:"Waiting Room",description:"When you call dyteMobileClient.joinRoom(), the user either enters the meeting room directly if allowed, or they are placed in the waiting room",source:"@site/docs/flutter-core/pre-call/4-waiting-room.mdx",sourceDirName:"pre-call",slug:"/pre-call/waiting-room",permalink:"/flutter-core/pre-call/waiting-room",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/flutter-core/pre-call/4-waiting-room.mdx",tags:[],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Meeting Metadata",permalink:"/flutter-core/pre-call/meeting-meta"},next:{title:"Introduction",permalink:"/flutter-core/introduction"}},c={},l=[{value:"Meeting Room Joined",id:"meeting-room-joined",level:3},{value:"Waitlisted Participant",id:"waitlisted-participant",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"waiting-room",children:"Waiting Room"}),"\n",(0,n.jsxs)(t.p,{children:["When you call ",(0,n.jsx)(t.code,{children:"dyteMobileClient.joinRoom()"}),", the user either enters the meeting room directly if allowed, or they are placed in the waiting room\nif they are a waitlisted participant."]}),"\n",(0,n.jsx)(t.p,{children:"The diagram illustrates the possible room states the local user can be in."}),"\n",(0,n.jsx)(t.mermaid,{value:"stateDiagram-v2\n    init --\x3e joined\n    init --\x3e waitlisted\n    waitlisted --\x3e joined\n    waitlisted --\x3e rejected"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(t.h3,{id:"meeting-room-joined",children:"Meeting Room Joined"}),"\n",(0,n.jsxs)(t.p,{children:["If user joins the room successfully, you receive the ",(0,n.jsx)(t.code,{children:"onMeetingRoomJoinCompleted()"})," callback in ",(0,n.jsx)(t.code,{children:"ProductDBMeetingRoomEventsListener"}),".\nYou can listen for this callback as follows:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"\nclass MeetingRoomNotifier extends ProductDBMeetingRoomEventsListener{\n    override fun onMeetingRoomJoinCompleted() {\n        // Local user is in the meeting\n    }\n}\n\ndyteMobileClient.addMeetingRoomEventsListener(MeetingRoomNotifier());\n"})}),"\n",(0,n.jsx)(t.h3,{id:"waitlisted-participant",children:"Waitlisted Participant"}),"\n",(0,n.jsxs)(t.p,{children:["If the user is waitlisted, the ",(0,n.jsx)(t.code,{children:"onWaitListStatusUpdate"})," callback in ",(0,n.jsx)(t.code,{children:"ProductDBSelfEventsListener"})," notifies you of any changes in the\nuser's waitlist status. You can check the ",(0,n.jsx)(t.code,{children:"waitListStatus"})," to determine their status:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"WAITING"}),": Local user is in the waiting room."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"REJECTED"}),": Local user's join room request is rejected by the host."]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"class WaitingRoomNotifier extends ProductDBSelfEventsListener{\n  @override\n  void onWaitListStatusUpdate(ProductDBWaitListStatus waitListStatus) {\n    switch (waitListStatus) {\n      case ProductDBWaitListStatus.waiting:\n        // Local user is in the waiting room\n      case ProductDBWaitListStatus.rejected:\n        // Local user's join room request was rejected by the host\n      default:\n        break;\n    }\n  }\n}\n\ndyteMobileClient.addSelfEventsListener(WaitingRoomNotifier());\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Host can use ",(0,n.jsx)(t.a,{href:"/flutter-core/participants#waiting-room-methods",children:"these methods to accept/reject participants"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>a});var n=i(96540);const o={},r=n.createContext(o);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);