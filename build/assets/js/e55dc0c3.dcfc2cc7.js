"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[96233],{294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=n(74848),o=n(28453);const i={image:"/static/ui-kit/1.x.x/components/productdb-chat.svg",sidebar_position:2,description:"Learn how to use and customize the CustomChatViewController component in ProductDB's iOS UiKit with our detailed documentation."},a="Chat Components",c={id:"chat/components-in-chat",title:"Chat Components",description:"Learn how to use and customize the CustomChatViewController component in ProductDB's iOS UiKit with our detailed documentation.",source:"@site/docs/ios/chat/components-in-chat.mdx",sourceDirName:"chat",slug:"/chat/components-in-chat",permalink:"/ios/chat/components-in-chat",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/ios/chat/components-in-chat.mdx",tags:[],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:2,frontMatter:{image:"/static/ui-kit/1.x.x/components/productdb-chat.svg",sidebar_position:2,description:"Learn how to use and customize the CustomChatViewController component in ProductDB's iOS UiKit with our detailed documentation."},sidebar:"tutorialSidebar",previous:{title:"Pre-built Chat Screen",permalink:"/ios/chat/pre-built-chat-screen"},next:{title:"Attachments in Chat",permalink:"/ios/chat/attachments-in-chat"}},r={},l=[{value:"Overview",id:"overview",level:2},{value:"Topics:",id:"topics",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"chat-components",children:"Chat Components"}),"\n",(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(t.p,{children:"A custom chat view controller used to show chat screen with image & file upload."}),"\n",(0,s.jsx)(t.h3,{id:"topics",children:"Topics:"}),"\n",(0,s.jsxs)(t.p,{children:["Listen to chat message updates using ",(0,s.jsx)(t.code,{children:"meeting.addChatEventsListener(chatEventsListener: self)"})," & get callbacks:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-swift",children:"extension ChatViewController: ProductDBChatEventsListener {\n    public func onNewChatMessage(message: ProductDBChatMessage) {\n       //This can be used to show local notifications\n    }\n\n    public  func onChatUpdates(messages: [ProductDBChatMessage]) {\n        loadChatMessages()\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creating a custom chat screen, you need following things:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-swift",children:"var messages: [ProductDBChatMessage]?\nlet messageTableView = UITableView()\nlet sendFileButton = ProductDBButton(style: .iconOnly(icon: ProductDBImage(image: sendFileImageIcon)), dyteButtonState: .focus)\nlet sendImageButton = ProductDBButton(style: .iconOnly(icon: ProductDBImage(image: sendImageIcon)), dyteButtonState: .active)\nlet sendMessageButton = ProductDBButton(style: .iconOnly(icon: ProductDBImage(image: sendMessageIcon)), dyteButtonState: .active)\nvar documentsViewController: DocumentsViewController?\nlet imagePicker = UIImagePickerController()\nlet messageTextView = UITextView()\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"CustomChatViewController"})," will have a tableView and at bottom buttons to select image/file and button to send message\nLoad messages & scroll to bottom to show latest message:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-swift",children:"private func loadChatMessages() {\n  self.messages = self.meeting.chat.messages\n  if messages.count > 0 {\n    messageTableView.reloadData(completion: {\n        DispatchQueue.main.async { [weak self] in\n            let indexPath = IndexPath(row: (self?.messages?.count ?? 1)-1, section: 0)\n            self?.messageTableView.scrollToRow(at: indexPath, at: .bottom, animated: true)\n        }\n    })\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Send text message, if it is correct and empty ",(0,s.jsx)(t.code,{children:"textView"})," once done:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-swift",children:'@objc func sendButtonTapped() {\n  if !messageTextView.text.isEmpty {\n    let spacing = CharacterSet.whitespacesAndNewlines\n    let message = messageTextView.text.trimmingCharacters(in: spacing)\n    try?meeting.chat.sendTextMessage(message: message)\n    messageTextView.text = ""\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Few helper functions:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-swift",children:"\npublic extension UITableView {\n\n    func reloadData(completion: @escaping () -> ()) {\n        UIView.animate(withDuration: 0, animations: {\n            self.reloadData()\n        }, completion: { _ in\n            completion()\n        })\n    }\n\n    func scrollToFirstCell() {\n        if numberOfSections > 0 {\n            if numberOfRows(inSection: 0) > 0 {\n                scrollToRow(at: IndexPath(row: 0, section: 0), at: .top, animated: true)\n            }\n        }\n    }\n\n    func scrollToLastCell(animated: Bool) {\n        if numberOfSections > 0 {\n            let nRows = numberOfRows(inSection: numberOfSections - 1)\n            if nRows > 0 {\n                scrollToRow(at: IndexPath(row: nRows - 1, section: numberOfSections - 1), at: .bottom, animated: animated)\n            }\n        }\n    }\n\n    func stopScrolling() {\n\n        guard isDragging else {\n            return\n        }\n\n        var offset = self.contentOffset\n        offset.y -= 1.0\n        setContentOffset(offset, animated: false)\n\n        offset.y += 1.0\n        setContentOffset(offset, animated: false)\n    }\n\n    func scrolledToBottom() -> Bool {\n        return contentOffset.y >= (contentSize.height - bounds.size.height)\n    }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ProductDBChatMessage"})," can be of type ",(0,s.jsx)(t.code,{children:"ProductDBTextMessage"}),", ",(0,s.jsx)(t.code,{children:"ProductDBFileMessage"})," or ",(0,s.jsx)(t.code,{children:"ProductDBImageMessage"}),"."]}),"\n",(0,s.jsx)(n,{children:(0,s.jsx)("title",{children:"iOS CustomChatViewController"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(96540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);