"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[95976],{21424:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=i(74848),a=i(28453);const s={title:"Participant Types",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,slug:"/participants/",tags:["ios-core","participants"]},r="Participant Types",c={id:"participants/remote-participants",title:"Participant Types",description:"Events, methods and data pertaining to meeting participants.",source:"@site/docs/ios-core/participants/remote-participants.mdx",sourceDirName:"participants",slug:"/participants/",permalink:"/ios-core/participants/",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/ios-core/participants/remote-participants.mdx",tags:[{label:"ios-core",permalink:"/ios-core/tags/ios-core"},{label:"participants",permalink:"/ios-core/tags/participants"}],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:1,frontMatter:{title:"Participant Types",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,slug:"/participants/",tags:["ios-core","participants"]},sidebar:"tutorialSidebar",previous:{title:"Sharing screen on iOS",permalink:"/ios-core/local-user/screen-share-guide"},next:{title:"Participant Object",permalink:"/ios-core/participants/participant-object"}},o={},p=[];function d(t){const e={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...t.components},{Head:i}=e;return i||function(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"participant-types",children:"Participant Types"}),"\n",(0,n.jsxs)(e.p,{children:["The data regarding all meeting participants is stored under ",(0,n.jsx)(e.code,{children:"meeting.participants"}),". These ",(0,n.jsx)(e.strong,{children:"does not"})," include the local user. Use the methods and events to consume the participants data. For example, to get all the participants who joined the meeting:"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-swift",children:"// get all joined participants\nvar joined: [ProductDBJoinedMeetingParticipant] = meeting.participants.joined\n\n// get all participants\nvar all: [ProductDBParticipant] = meeting.participants.all\n"})}),"\n",(0,n.jsxs)(e.p,{children:["The ",(0,n.jsx)(e.code,{children:"meeting.participants"})," object has the following ",(0,n.jsx)(e.strong,{children:"lists"})," of participants"]}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"all"}),": A list that contains all the participants who have joined the meeting except the local user"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"joined"}),": A list that contains all the participants who are currently in the meeting\nexcept the local user"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"waitlisted"}),": A list that contains all the participants waiting to join the\nmeeting."]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"active"}),": A list that contains all the participants except the local user whose media is subscribed to i.e\nparticipants are supposed to be on the screen at the moment except the local user"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"pinned"}),": A list that contains all the pinned participants of the meeting."]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:"screenShares"}),": A list that contains all the participants who are sharing their screen."]}),"\n"]}),"\n",(0,n.jsxs)(e.p,{children:["Therefore if you were to make a video / audio grid of participants, you'd use the ",(0,n.jsx)(e.code,{children:"active"})," map, but to display the list of all participants in the meeting you'd use the ",(0,n.jsx)(e.code,{children:"joined"})," map."]}),"\n",(0,n.jsxs)(e.p,{children:["Each participant in each of the ",(0,n.jsx)(e.code,{children:"joined"}),", ",(0,n.jsx)(e.code,{children:"active"}),", ",(0,n.jsx)(e.code,{children:"pinned"})," and ",(0,n.jsx)(e.code,{children:"screenShares"})," list are of type ",(0,n.jsx)(e.code,{children:"ProductDBJoinedMeetingParticipant"}),", ",(0,n.jsx)(e.code,{children:"waitlisted"})," list is of type ",(0,n.jsx)(e.code,{children:"ProductDBWaitlistedParticipant"})," and ",(0,n.jsx)(e.code,{children:"all"})," list is of type ",(0,n.jsx)(e.code,{children:"ProductDBParticipant"}),"."]}),"\n",(0,n.jsx)(i,{children:(0,n.jsx)("title",{children:"iOS Core Participants"})})]})}function l(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}},28453:(t,e,i)=>{i.d(e,{R:()=>r,x:()=>c});var n=i(96540);const a={},s=n.createContext(a);function r(t){const e=n.useContext(s);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:r(t.components),n.createElement(s.Provider,{value:e},t.children)}}}]);