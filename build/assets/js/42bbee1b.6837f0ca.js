"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[86734],{50676:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});var d=n(74848),o=n(28453);const t={title:"Audio/video - Device Selection",sidebar_position:4},c=void 0,r={id:"build-pre-call-ui/build-your-own/add-audio-video-device",title:"Audio/video - Device Selection",description:"To let the user choose between multiple available input / output devices, you can use the ProductDBSettingsFragment or ProductDBSettingsBottomsheet component",source:"@site/docs/android/build-pre-call-ui/build-your-own/add-audio-video-device.mdx",sourceDirName:"build-pre-call-ui/build-your-own",slug:"/build-pre-call-ui/build-your-own/add-audio-video-device",permalink:"/android/build-pre-call-ui/build-your-own/add-audio-video-device",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/android/build-pre-call-ui/build-your-own/add-audio-video-device.mdx",tags:[],version:"current",lastUpdatedAt:1723755734,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:4,frontMatter:{title:"Audio/video - Device Selection",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Audio/video - Preview",permalink:"/android/build-pre-call-ui/build-your-own/add-audio-video-preview"},next:{title:"Using ProductDBGridView",permalink:"/android/render-participant-videos/using-productdbgrid"}},a={},l=[{value:"for video device Selection",id:"for-video-device-selection",level:2},{value:"for audio device Selection",id:"for-audio-device-selection",level:2}];function s(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(i.p,{children:["To let the user choose between multiple available input / output devices, you can use the ",(0,d.jsx)(i.code,{children:"ProductDBSettingsFragment"})," or ",(0,d.jsx)(i.code,{children:"ProductDBSettingsBottomsheet"})," component"]}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-kotlin",children:'val dyteSettingsFragment = ProductDBSettingsFragment()\ndyteSettingsFragment.show(\n  fragmentManager,\n  "SOME_TAG_HERE"\n)\n'})}),"\n",(0,d.jsx)(i.h2,{id:"for-video-device-selection",children:"for video device Selection"}),"\n",(0,d.jsxs)(i.p,{children:["You can access list of video devices like ",(0,d.jsx)(i.code,{children:"meeting.localUser.getVideoDevices()"})," and selected video device can be accessed with ",(0,d.jsx)(i.code,{children:"meeting.localUser.getSelectedVideoDevice()"})]}),"\n",(0,d.jsx)(i.p,{children:"To render the video device selection you can use following code"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-xml",children:'<androidx.appcompat.widget.AppCompatSpinner\n  android:id="@+id/spVideoSource"\n  android:layout_width="0dp"\n  android:layout_height="48dp"\n  android:spinnerMode="dropdown"\n/>\n'})}),"\n",(0,d.jsx)(i.p,{children:"and on the kotlin side"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-kotlin",children:"val videoDevices = meeting.localUser.getVideoDevices()\nval videoAdapter = ArrayAdapter(\n        requireContext(),\n        R.layout.dyte_spinner_item,\n        videoDevices.map { it.type.displayName },\n      )\nvideoAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\nval selectedVideoDevice = meeting.localUser.getSelectedVideoDevice()\nval selectedPosition = videoDevices.indexOfFirst { it.type == selectedVideoDevice?.type }\nvideoDeviceSpinner.adapter = videoAdapter\nvideoDeviceSpinner.onItemSelectedListener =\n  object : OnItemSelectedListener {\n    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\n      val device = videoDevices[position]\n      meeting.localUser.setVideoDevice(device)\n    }\n\n    override fun onNothingSelected(parent: AdapterView<*>?) {\n      // no-op\n    }\n  }\nvideoDeviceSpinner.setSelection(selectedPosition, false)\n"})}),"\n",(0,d.jsx)(i.h2,{id:"for-audio-device-selection",children:"for audio device Selection"}),"\n",(0,d.jsxs)(i.p,{children:["You can access list of audio devices like ",(0,d.jsx)(i.code,{children:"meeting.localUser.getAudioDevices()"})," and selected audio device can be accessed with ",(0,d.jsx)(i.code,{children:"meeting.localUser.getSelectedAudioDevice()"})]}),"\n",(0,d.jsx)(i.p,{children:"To render the audio device selection you can use following code"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-xml",children:'<androidx.appcompat.widget.AppCompatSpinner\n  android:id="@+id/spAudioSource"\n  android:layout_width="0dp"\n  android:layout_height="48dp"\n  android:spinnerMode="dropdown"\n/>\n'})}),"\n",(0,d.jsx)(i.p,{children:"and on the kotlin side"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-kotlin",children:"val audioDevices = meeting.localUser.getAudioDevices()\nval audioAdapter = ArrayAdapter(\n        requireContext(),\n        R.layout.dyte_spinner_item,\n        audioDevices.map { it.type.displayName },\n      )\naudioAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\nval selectedAudioDevice = meeting.localUser.getSelectedAudioDevice()\nval selectedPosition = audioDevices.indexOfFirst { it.type == selectedAudioDevice?.type }\naudioDeviceSpinner.adapter = audioAdapter\naudioDeviceSpinner.onItemSelectedListener =\n  object : OnItemSelectedListener {\n    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\n      val device = audioDevices[position]\n      meeting.localUser.setAudioDevice(device)\n    }\n\n    override fun onNothingSelected(parent: AdapterView<*>?) {\n      // no-op\n    }\n  }\naudioDeviceSpinner.setSelection(selectedPosition, false)\n"})})]})}function u(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(s,{...e})}):s(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>r});var d=n(96540);const o={},t=d.createContext(o);function c(e){const i=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),d.createElement(t.Provider,{value:i},e.children)}}}]);