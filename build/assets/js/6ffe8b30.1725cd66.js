"use strict";(self.webpackChunkproductdb_docs=self.webpackChunkproductdb_docs||[]).push([[38339],{86568:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var s=r(74848),a=r(28453);const t={slug:"basics",sidebar_position:1},i="Enable/Disable Screenshare",l={id:"capabilities/screensharing/enabling",title:"Enable/Disable Screenshare",description:"ProductDB allows you to enable multiple users to share their screens during a meeting session. To integrate screen sharing in your application, go through the following steps:",source:"@site/docs/guides/capabilities/screensharing/enabling.mdx",sourceDirName:"capabilities/screensharing",slug:"/capabilities/screensharing/basics",permalink:"/guides/capabilities/screensharing/basics",draft:!1,unlisted:!1,editUrl:"https://github.com/productdb/docs/tree/main/docs/guides/capabilities/screensharing/enabling.mdx",tags:[],version:"current",lastUpdatedAt:1723758501,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:1,frontMatter:{slug:"basics",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Create Custom Recording App Using Recording SDKs",permalink:"/guides/capabilities/recording/create-record-app-using-sdks"},next:{title:"Displaying Screenshare",permalink:"/guides/capabilities/screensharing/displaying"}},c={},o=[{value:"Usage",id:"usage",level:2},{value:'Methods/Properties <div class="header-tag tag-core">Core</div>',id:"methodsproperties-core",level:3},{value:'Events <div class="header-tag tag-core">Core</div>',id:"events-core",level:3},{value:'Components <div class="header-tag tag-ui">UI Kit</div>',id:"components-ui-kit",level:3},{value:"Configuration",id:"configuration",level:2},{value:'Multiple Screenshare <div class="header-tag">Preset</div>',id:"multiple-screenshare-preset",level:3},{value:'Preferred panel <div class="header-tag tag-core">Core</div><div class="header-tag">Web</div>',id:"preferred-panel-coreweb",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Head:r,TabItem:t,Tabs:i}=n;return r||g("Head",!0),t||g("TabItem",!0),i||g("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"enabledisable-screenshare",children:"Enable/Disable Screenshare"}),"\n",(0,s.jsx)(n.p,{children:"ProductDB allows you to enable multiple users to share their screens during a meeting session. To integrate screen sharing in your application, go through the following steps:"}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.h3,{id:"methodsproperties-core",children:["Methods/Properties ",(0,s.jsx)("div",{class:"header-tag tag-core",children:"Core"})]}),"\n",(0,s.jsx)(n.p,{children:"Once users have the permissions to share their screen, they need to be able to start or stop sharing their screens. Use the Core SDK to enable or disable screen sharing for the user. Follow the implementation based on the development platform you are using."}),"\n",(0,s.jsxs)(i,{groupId:"framework",defaultValue:"react",children:[(0,s.jsxs)(t,{value:"js",label:"Javascript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Enable Screenshare\nawait meeting.self.enableScreenShare();\n\n// Disable Screenshare\nawait meeting.self.disableScreenShare();\n"})}),(0,s.jsxs)(n.p,{children:["You can also define defaults for screen sharing during the client initialisation. Check out the ",(0,s.jsx)(n.a,{href:"/web-core/local-user/introduction#enable--disable-screen-share",children:"local user"})," reference for more details."]})]}),(0,s.jsxs)(t,{value:"react",label:"React",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const { meeting } = useDyteMeeting();\n\n// Enable Screenshare\nawait meeting.self.enableScreenShare();\n\n// Disable Screenshare\nawait meeting.self.disableScreenShare();\n"})}),(0,s.jsxs)(n.p,{children:["You can also define defaults for screen sharing during the client initialization. Check out the ",(0,s.jsx)(n.a,{href:"/web-core/local-user/introduction#enable--disable-screen-share",children:"local user"})," reference for more details."]})]}),(0,s.jsx)(t,{value:"react-native",label:"React Native",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const { meeting } = useDyteMeeting();\n\n// Enable Screenshare\nawait meeting.self.enableScreenShare();\n\n// Disable Screenshare\nawait meeting.self.disableScreenShare();\n"})})}),(0,s.jsxs)(t,{value:"flutter",label:"Flutter",children:[(0,s.jsxs)(n.p,{children:["For iOS you need to complete a one time setup described here ",(0,s.jsx)(n.a,{href:"/flutter-core/local-user/screen-share-iOS-guide",children:"described here"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"// Enable Screenshare\ndyteClient.localUser.enableScreenShare();\n\n// Disable Screenshare\ndyteClient.localUser.disableScreenShare();\n\n// Get current status\ndyteClient.localUser.screenShareEnabled;\n"})})]}),(0,s.jsx)(t,{value:"android",label:"Android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"// Enable Screenshare\nmeeting.localUser.enableScreenShare();\n\n// Disable Screenshare\nmeeting.localUser.disableScreenShare();\n\n// Get current status\nmeeting.localUser.screenShareEnabled;\n"})})}),(0,s.jsxs)(t,{value:"ios",label:"iOS",children:[(0,s.jsxs)(n.p,{children:["After completing the screensharing setup ",(0,s.jsx)(n.a,{href:"/ios-core/local-user/screen-share-guide",children:"described here"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"// Enable Screenshare\nmeeting.localUser.enableScreenShare();\n\n// Disable Screenshare\nmeeting.localUser.disableScreenShare();\n\n// Get current status\nmeeting.localUser.screenShareEnabled;\n"})})]})]}),"\n",(0,s.jsxs)(n.h3,{id:"events-core",children:["Events ",(0,s.jsx)("div",{class:"header-tag tag-core",children:"Core"})]}),"\n",(0,s.jsxs)(i,{groupId:"framework",defaultValue:"react",children:[(0,s.jsx)(t,{value:"js",label:"Javascript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"meeting.self.on(\n  'screenShareUpdate',\n  ({ screenShareEnabled, screenShareTracks }) => {\n    if (screenShareEnabled) {\n      // handle screen share start\n    } else {\n      // handle stop screen share\n    }\n  }\n);\n"})})}),(0,s.jsx)(t,{value:"react",label:"React",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const { meeting } = useDyteMeeting();\n\nconst screenshareEnabled = useDyteSelector((m) => m.self.screenShareEnabled);\n\n// or using traditional event listeners\nmeeting.self.on(\n  'screenShareUpdate',\n  ({ screenShareEnabled, screenShareTracks }) => {\n    if (screenShareEnabled) {\n      // handle screen share start\n    } else {\n      // handle stop screen share\n    }\n  }\n);\n"})})}),(0,s.jsx)(t,{value:"react-native",label:"React Native",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const { meeting } = useDyteMeeting();\n\nconst screenshareEnabled = useDyteSelector((m) => m.self.screenShareEnabled);\n\n// or using traditional event listeners\nmeeting.self.on(\n  'screenShareUpdate',\n  ({ screenShareEnabled, screenShareTracks }) => {\n    if (screenShareEnabled) {\n      // handle screen share start\n    } else {\n      // handle stop screen share\n    }\n  }\n);\n"})})})]}),"\n",(0,s.jsxs)(n.h3,{id:"components-ui-kit",children:["Components ",(0,s.jsx)("div",{class:"header-tag tag-ui",children:"UI Kit"})]}),"\n",(0,s.jsx)(n.p,{children:"If you don't want to create your own button to toggle screen sharing, use the default button provided by our UI Kits."}),"\n",(0,s.jsxs)(i,{groupId:"framework",children:[(0,s.jsx)(t,{value:"web-components",label:"Web Components",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<productdb-screen-share-toggle size="sm" class="productdb-el"></productdb-screen-share-toggle>\n<productdb-screen-share-toggle size="lg" class="productdb-el"></productdb-screen-share-toggle>\n<productdb-screen-share-toggle\n  variant="horizontal"\n  class="productdb-el"\n></productdb-screen-share-toggle>\n\n<script>\n  const elements = document.getElementsByClassName(\'productdb-el\');\n  for (const el of elements) {\n    el.meeting = meeting;\n  }\n<\/script>\n'})})}),(0,s.jsx)(t,{value:"react",label:"React",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { ProductDBScreenShareToggle } from \'@dytesdk/react-ui-kit\';\n\n<Center>\n  <ProductDBScreenShareToggle size="sm" meeting={meeting} />\n  <ProductDBScreenShareToggle size="lg" meeting={meeting} />\n  <ProductDBScreenShareToggle variant="horizontal" size="sm" meeting={meeting} />\n</Center>;\n'})})}),(0,s.jsx)(t,{value:"angular",label:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<productdb-screen-share-toggle size="sm" class="productdb-el"></productdb-screen-share-toggle>\n<productdb-screen-share-toggle size="lg" class="productdb-el"></productdb-screen-share-toggle>\n<productdb-screen-share-toggle\n  variant="horizontal"\n  class="productdb-el"\n></productdb-screen-share-toggle>\n'})})}),(0,s.jsx)(t,{value:"react-native",label:"React Native",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import { ProductDBScreenShareToggle } from \'@dytesdk/react-native-ui-kit\';\n\n<Center>\n  <ProductDBScreenShareToggle size="sm" meeting={meeting} />\n  <ProductDBScreenShareToggle size="lg" meeting={meeting} />\n  <ProductDBScreenShareToggle variant="horizontal" size="sm" meeting={meeting} />\n</Center>;\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.h3,{id:"multiple-screenshare-preset",children:["Multiple Screenshare ",(0,s.jsx)("div",{class:"header-tag",children:"Preset"})]}),"\n",(0,s.jsx)(n.p,{children:"Configure the number of people who can screenshare at once using preset configuration"}),"\n",(0,s.jsx)("img",{src:"/static/guides/screenshare-max.png",className:"max-512"}),"\n",(0,s.jsxs)(n.h3,{id:"preferred-panel-coreweb",children:["Preferred panel ",(0,s.jsx)("div",{class:"header-tag tag-core",children:"Core"}),(0,s.jsx)("div",{class:"header-tag",children:"Web"})]}),"\n",(0,s.jsx)(n.p,{children:"On web browsers, a user can choose between sharing a tab, a window or the entire screen. While there is no browser API to restrict to a specific surface type you can set a preferred display surface"}),"\n",(0,s.jsxs)(i,{groupId:"framework",defaultValue:"react",children:[(0,s.jsx)(t,{value:"js",label:"Javascript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"meeting = await ProductDBClient.init({\n  authToken,\n  defaults: {\n    screenShare: {\n      displaySurface: 'window' | 'monitor' | 'browser',\n    },\n  },\n});\n"})})}),(0,s.jsx)(t,{value:"react",label:"React",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const [meeting, initMeeting] = useDyteClient();\n\nconst join = () => {\n  initMeeting({\n    authToken,\n    defaults: {\n      screenShare: {\n        displaySurface: 'window' | 'monitor' | 'browser',\n      },\n    },\n  });\n};\n"})})})]}),"\n",(0,s.jsx)(r,{children:(0,s.jsx)("title",{children:"Enable/Disable Screenshare Guide"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function g(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var s=r(96540);const a={},t=s.createContext(a);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);